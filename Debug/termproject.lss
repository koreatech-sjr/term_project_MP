
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00001a9a  00001b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000083d  008001ce  008001ce  00001bfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fdd  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001114  00000000  00000000  00004e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017a5  00000000  00000000  00005f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  000076d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a48  00000000  00000000  00007b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b86  00000000  00000000  00008550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000a0d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a1 c1       	rjmp	.+834    	; 0x344 <__ctors_end>
       2:	00 00       	nop
       4:	bd c1       	rjmp	.+890    	; 0x380 <__bad_interrupt>
       6:	00 00       	nop
       8:	bb c1       	rjmp	.+886    	; 0x380 <__bad_interrupt>
       a:	00 00       	nop
       c:	b9 c1       	rjmp	.+882    	; 0x380 <__bad_interrupt>
       e:	00 00       	nop
      10:	b7 c1       	rjmp	.+878    	; 0x380 <__bad_interrupt>
      12:	00 00       	nop
      14:	b5 c1       	rjmp	.+874    	; 0x380 <__bad_interrupt>
      16:	00 00       	nop
      18:	b3 c1       	rjmp	.+870    	; 0x380 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b1 c1       	rjmp	.+866    	; 0x380 <__bad_interrupt>
      1e:	00 00       	nop
      20:	af c1       	rjmp	.+862    	; 0x380 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c3       	rjmp	.+1596   	; 0x662 <__vector_9>
      26:	00 00       	nop
      28:	ab c1       	rjmp	.+854    	; 0x380 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a9 c1       	rjmp	.+850    	; 0x380 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a7 c1       	rjmp	.+846    	; 0x380 <__bad_interrupt>
      32:	00 00       	nop
      34:	a5 c1       	rjmp	.+842    	; 0x380 <__bad_interrupt>
      36:	00 00       	nop
      38:	a3 c1       	rjmp	.+838    	; 0x380 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c1       	rjmp	.+938    	; 0x3e8 <__vector_15>
      3e:	00 00       	nop
      40:	9f c1       	rjmp	.+830    	; 0x380 <__bad_interrupt>
      42:	00 00       	nop
      44:	9d c1       	rjmp	.+826    	; 0x380 <__bad_interrupt>
      46:	00 00       	nop
      48:	9b c1       	rjmp	.+822    	; 0x380 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	99 c1       	rjmp	.+818    	; 0x380 <__bad_interrupt>
      4e:	00 00       	nop
      50:	97 c1       	rjmp	.+814    	; 0x380 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_21>
      58:	93 c1       	rjmp	.+806    	; 0x380 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	91 c1       	rjmp	.+802    	; 0x380 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8f c1       	rjmp	.+798    	; 0x380 <__bad_interrupt>
      62:	00 00       	nop
      64:	8d c1       	rjmp	.+794    	; 0x380 <__bad_interrupt>
      66:	00 00       	nop
      68:	8b c1       	rjmp	.+790    	; 0x380 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	89 c1       	rjmp	.+786    	; 0x380 <__bad_interrupt>
      6e:	00 00       	nop
      70:	87 c1       	rjmp	.+782    	; 0x380 <__bad_interrupt>
      72:	00 00       	nop
      74:	85 c1       	rjmp	.+778    	; 0x380 <__bad_interrupt>
      76:	00 00       	nop
      78:	83 c1       	rjmp	.+774    	; 0x380 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	81 c1       	rjmp	.+770    	; 0x380 <__bad_interrupt>
      7e:	00 00       	nop
      80:	7f c1       	rjmp	.+766    	; 0x380 <__bad_interrupt>
      82:	00 00       	nop
      84:	7d c1       	rjmp	.+762    	; 0x380 <__bad_interrupt>
      86:	00 00       	nop
      88:	7b c1       	rjmp	.+758    	; 0x380 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	04 05       	cpc	r16, r4
      8e:	5e 04       	cpc	r5, r14
      90:	86 05       	cpc	r24, r6
      92:	49 04       	cpc	r4, r9
      94:	86 05       	cpc	r24, r6
      96:	86 05       	cpc	r24, r6
      98:	86 05       	cpc	r24, r6
      9a:	34 04       	cpc	r3, r4
      9c:	86 05       	cpc	r24, r6
      9e:	86 05       	cpc	r24, r6
      a0:	86 05       	cpc	r24, r6
      a2:	86 05       	cpc	r24, r6
      a4:	86 05       	cpc	r24, r6
      a6:	86 05       	cpc	r24, r6
      a8:	86 05       	cpc	r24, r6
      aa:	86 05       	cpc	r24, r6
      ac:	17 05       	cpc	r17, r7
      ae:	9d 04       	cpc	r9, r13
      b0:	86 05       	cpc	r24, r6
      b2:	88 04       	cpc	r8, r8
      b4:	86 05       	cpc	r24, r6
      b6:	86 05       	cpc	r24, r6
      b8:	86 05       	cpc	r24, r6
      ba:	73 04       	cpc	r7, r3
      bc:	86 05       	cpc	r24, r6
      be:	86 05       	cpc	r24, r6
      c0:	86 05       	cpc	r24, r6
      c2:	86 05       	cpc	r24, r6
      c4:	86 05       	cpc	r24, r6
      c6:	86 05       	cpc	r24, r6
      c8:	86 05       	cpc	r24, r6
      ca:	86 05       	cpc	r24, r6
      cc:	86 05       	cpc	r24, r6
      ce:	86 05       	cpc	r24, r6
      d0:	86 05       	cpc	r24, r6
      d2:	86 05       	cpc	r24, r6
      d4:	86 05       	cpc	r24, r6
      d6:	86 05       	cpc	r24, r6
      d8:	86 05       	cpc	r24, r6
      da:	86 05       	cpc	r24, r6
      dc:	86 05       	cpc	r24, r6
      de:	86 05       	cpc	r24, r6
      e0:	86 05       	cpc	r24, r6
      e2:	86 05       	cpc	r24, r6
      e4:	86 05       	cpc	r24, r6
      e6:	86 05       	cpc	r24, r6
      e8:	86 05       	cpc	r24, r6
      ea:	86 05       	cpc	r24, r6
      ec:	2d 05       	cpc	r18, r13
      ee:	dc 04       	cpc	r13, r12
      f0:	86 05       	cpc	r24, r6
      f2:	c7 04       	cpc	r12, r7
      f4:	86 05       	cpc	r24, r6
      f6:	86 05       	cpc	r24, r6
      f8:	86 05       	cpc	r24, r6
      fa:	b2 04       	cpc	r11, r2
      fc:	86 05       	cpc	r24, r6
      fe:	86 05       	cpc	r24, r6
     100:	86 05       	cpc	r24, r6
     102:	86 05       	cpc	r24, r6
     104:	86 05       	cpc	r24, r6
     106:	86 05       	cpc	r24, r6
     108:	86 05       	cpc	r24, r6
     10a:	86 05       	cpc	r24, r6
     10c:	86 05       	cpc	r24, r6
     10e:	86 05       	cpc	r24, r6
     110:	86 05       	cpc	r24, r6
     112:	86 05       	cpc	r24, r6
     114:	86 05       	cpc	r24, r6
     116:	86 05       	cpc	r24, r6
     118:	86 05       	cpc	r24, r6
     11a:	86 05       	cpc	r24, r6
     11c:	86 05       	cpc	r24, r6
     11e:	86 05       	cpc	r24, r6
     120:	86 05       	cpc	r24, r6
     122:	86 05       	cpc	r24, r6
     124:	86 05       	cpc	r24, r6
     126:	86 05       	cpc	r24, r6
     128:	86 05       	cpc	r24, r6
     12a:	86 05       	cpc	r24, r6
     12c:	86 05       	cpc	r24, r6
     12e:	86 05       	cpc	r24, r6
     130:	86 05       	cpc	r24, r6
     132:	86 05       	cpc	r24, r6
     134:	86 05       	cpc	r24, r6
     136:	86 05       	cpc	r24, r6
     138:	86 05       	cpc	r24, r6
     13a:	86 05       	cpc	r24, r6
     13c:	86 05       	cpc	r24, r6
     13e:	86 05       	cpc	r24, r6
     140:	86 05       	cpc	r24, r6
     142:	86 05       	cpc	r24, r6
     144:	86 05       	cpc	r24, r6
     146:	86 05       	cpc	r24, r6
     148:	86 05       	cpc	r24, r6
     14a:	86 05       	cpc	r24, r6
     14c:	86 05       	cpc	r24, r6
     14e:	86 05       	cpc	r24, r6
     150:	86 05       	cpc	r24, r6
     152:	86 05       	cpc	r24, r6
     154:	86 05       	cpc	r24, r6
     156:	86 05       	cpc	r24, r6
     158:	86 05       	cpc	r24, r6
     15a:	86 05       	cpc	r24, r6
     15c:	86 05       	cpc	r24, r6
     15e:	86 05       	cpc	r24, r6
     160:	86 05       	cpc	r24, r6
     162:	86 05       	cpc	r24, r6
     164:	86 05       	cpc	r24, r6
     166:	86 05       	cpc	r24, r6
     168:	86 05       	cpc	r24, r6
     16a:	86 05       	cpc	r24, r6
     16c:	86 05       	cpc	r24, r6
     16e:	86 05       	cpc	r24, r6
     170:	86 05       	cpc	r24, r6
     172:	f1 04       	cpc	r15, r1
     174:	5d 07       	cpc	r21, r29
     176:	92 06       	cpc	r9, r18
     178:	6e 07       	cpc	r22, r30
     17a:	83 06       	cpc	r8, r19
     17c:	6e 07       	cpc	r22, r30
     17e:	6e 07       	cpc	r22, r30
     180:	6e 07       	cpc	r22, r30
     182:	74 06       	cpc	r7, r20
     184:	6e 07       	cpc	r22, r30
     186:	6e 07       	cpc	r22, r30
     188:	6e 07       	cpc	r22, r30
     18a:	6e 07       	cpc	r22, r30
     18c:	6e 07       	cpc	r22, r30
     18e:	6e 07       	cpc	r22, r30
     190:	6e 07       	cpc	r22, r30
     192:	6e 07       	cpc	r22, r30
     194:	6e 07       	cpc	r22, r30
     196:	bf 06       	cpc	r11, r31
     198:	6e 07       	cpc	r22, r30
     19a:	b0 06       	cpc	r11, r16
     19c:	6e 07       	cpc	r22, r30
     19e:	6e 07       	cpc	r22, r30
     1a0:	6e 07       	cpc	r22, r30
     1a2:	a1 06       	cpc	r10, r17
     1a4:	6e 07       	cpc	r22, r30
     1a6:	6e 07       	cpc	r22, r30
     1a8:	6e 07       	cpc	r22, r30
     1aa:	6e 07       	cpc	r22, r30
     1ac:	6e 07       	cpc	r22, r30
     1ae:	6e 07       	cpc	r22, r30
     1b0:	6e 07       	cpc	r22, r30
     1b2:	6e 07       	cpc	r22, r30
     1b4:	6e 07       	cpc	r22, r30
     1b6:	6e 07       	cpc	r22, r30
     1b8:	6e 07       	cpc	r22, r30
     1ba:	6e 07       	cpc	r22, r30
     1bc:	6e 07       	cpc	r22, r30
     1be:	6e 07       	cpc	r22, r30
     1c0:	6e 07       	cpc	r22, r30
     1c2:	6e 07       	cpc	r22, r30
     1c4:	6e 07       	cpc	r22, r30
     1c6:	6e 07       	cpc	r22, r30
     1c8:	6e 07       	cpc	r22, r30
     1ca:	6e 07       	cpc	r22, r30
     1cc:	6e 07       	cpc	r22, r30
     1ce:	6e 07       	cpc	r22, r30
     1d0:	6e 07       	cpc	r22, r30
     1d2:	6e 07       	cpc	r22, r30
     1d4:	08 07       	cpc	r16, r24
     1d6:	ec 06       	cpc	r14, r28
     1d8:	6e 07       	cpc	r22, r30
     1da:	dd 06       	cpc	r13, r29
     1dc:	6e 07       	cpc	r22, r30
     1de:	6e 07       	cpc	r22, r30
     1e0:	6e 07       	cpc	r22, r30
     1e2:	ce 06       	cpc	r12, r30
     1e4:	6e 07       	cpc	r22, r30
     1e6:	6e 07       	cpc	r22, r30
     1e8:	6e 07       	cpc	r22, r30
     1ea:	6e 07       	cpc	r22, r30
     1ec:	6e 07       	cpc	r22, r30
     1ee:	6e 07       	cpc	r22, r30
     1f0:	6e 07       	cpc	r22, r30
     1f2:	6e 07       	cpc	r22, r30
     1f4:	6e 07       	cpc	r22, r30
     1f6:	6e 07       	cpc	r22, r30
     1f8:	6e 07       	cpc	r22, r30
     1fa:	6e 07       	cpc	r22, r30
     1fc:	6e 07       	cpc	r22, r30
     1fe:	6e 07       	cpc	r22, r30
     200:	6e 07       	cpc	r22, r30
     202:	6e 07       	cpc	r22, r30
     204:	6e 07       	cpc	r22, r30
     206:	6e 07       	cpc	r22, r30
     208:	6e 07       	cpc	r22, r30
     20a:	6e 07       	cpc	r22, r30
     20c:	6e 07       	cpc	r22, r30
     20e:	6e 07       	cpc	r22, r30
     210:	6e 07       	cpc	r22, r30
     212:	6e 07       	cpc	r22, r30
     214:	6e 07       	cpc	r22, r30
     216:	6e 07       	cpc	r22, r30
     218:	6e 07       	cpc	r22, r30
     21a:	6e 07       	cpc	r22, r30
     21c:	6e 07       	cpc	r22, r30
     21e:	6e 07       	cpc	r22, r30
     220:	6e 07       	cpc	r22, r30
     222:	6e 07       	cpc	r22, r30
     224:	6e 07       	cpc	r22, r30
     226:	6e 07       	cpc	r22, r30
     228:	6e 07       	cpc	r22, r30
     22a:	6e 07       	cpc	r22, r30
     22c:	6e 07       	cpc	r22, r30
     22e:	6e 07       	cpc	r22, r30
     230:	6e 07       	cpc	r22, r30
     232:	6e 07       	cpc	r22, r30
     234:	6e 07       	cpc	r22, r30
     236:	6e 07       	cpc	r22, r30
     238:	6e 07       	cpc	r22, r30
     23a:	6e 07       	cpc	r22, r30
     23c:	6e 07       	cpc	r22, r30
     23e:	6e 07       	cpc	r22, r30
     240:	6e 07       	cpc	r22, r30
     242:	6e 07       	cpc	r22, r30
     244:	6e 07       	cpc	r22, r30
     246:	6e 07       	cpc	r22, r30
     248:	6e 07       	cpc	r22, r30
     24a:	6e 07       	cpc	r22, r30
     24c:	6e 07       	cpc	r22, r30
     24e:	6e 07       	cpc	r22, r30
     250:	6e 07       	cpc	r22, r30
     252:	6e 07       	cpc	r22, r30
     254:	6e 07       	cpc	r22, r30
     256:	6e 07       	cpc	r22, r30
     258:	6e 07       	cpc	r22, r30
     25a:	fb 06       	cpc	r15, r27
     25c:	7a 0c       	add	r7, r10
     25e:	cc 0b       	sbc	r28, r28
     260:	f3 0c       	add	r15, r3
     262:	b6 0b       	sbc	r27, r22
     264:	f3 0c       	add	r15, r3
     266:	f3 0c       	add	r15, r3
     268:	f3 0c       	add	r15, r3
     26a:	a0 0b       	sbc	r26, r16
     26c:	f3 0c       	add	r15, r3
     26e:	f3 0c       	add	r15, r3
     270:	f3 0c       	add	r15, r3
     272:	f3 0c       	add	r15, r3
     274:	f3 0c       	add	r15, r3
     276:	f3 0c       	add	r15, r3
     278:	f3 0c       	add	r15, r3
     27a:	f3 0c       	add	r15, r3
     27c:	8e 0c       	add	r8, r14
     27e:	0e 0c       	add	r0, r14
     280:	f3 0c       	add	r15, r3
     282:	f8 0b       	sbc	r31, r24
     284:	f3 0c       	add	r15, r3
     286:	f3 0c       	add	r15, r3
     288:	f3 0c       	add	r15, r3
     28a:	e2 0b       	sbc	r30, r18
     28c:	f3 0c       	add	r15, r3
     28e:	f3 0c       	add	r15, r3
     290:	f3 0c       	add	r15, r3
     292:	f3 0c       	add	r15, r3
     294:	f3 0c       	add	r15, r3
     296:	f3 0c       	add	r15, r3
     298:	f3 0c       	add	r15, r3
     29a:	f3 0c       	add	r15, r3
     29c:	f3 0c       	add	r15, r3
     29e:	f3 0c       	add	r15, r3
     2a0:	f3 0c       	add	r15, r3
     2a2:	f3 0c       	add	r15, r3
     2a4:	f3 0c       	add	r15, r3
     2a6:	f3 0c       	add	r15, r3
     2a8:	f3 0c       	add	r15, r3
     2aa:	f3 0c       	add	r15, r3
     2ac:	f3 0c       	add	r15, r3
     2ae:	f3 0c       	add	r15, r3
     2b0:	f3 0c       	add	r15, r3
     2b2:	f3 0c       	add	r15, r3
     2b4:	f3 0c       	add	r15, r3
     2b6:	f3 0c       	add	r15, r3
     2b8:	f3 0c       	add	r15, r3
     2ba:	f3 0c       	add	r15, r3
     2bc:	a5 0c       	add	r10, r5
     2be:	50 0c       	add	r5, r0
     2c0:	f3 0c       	add	r15, r3
     2c2:	3a 0c       	add	r3, r10
     2c4:	f3 0c       	add	r15, r3
     2c6:	f3 0c       	add	r15, r3
     2c8:	f3 0c       	add	r15, r3
     2ca:	24 0c       	add	r2, r4
     2cc:	f3 0c       	add	r15, r3
     2ce:	f3 0c       	add	r15, r3
     2d0:	f3 0c       	add	r15, r3
     2d2:	f3 0c       	add	r15, r3
     2d4:	f3 0c       	add	r15, r3
     2d6:	f3 0c       	add	r15, r3
     2d8:	f3 0c       	add	r15, r3
     2da:	f3 0c       	add	r15, r3
     2dc:	f3 0c       	add	r15, r3
     2de:	f3 0c       	add	r15, r3
     2e0:	f3 0c       	add	r15, r3
     2e2:	f3 0c       	add	r15, r3
     2e4:	f3 0c       	add	r15, r3
     2e6:	f3 0c       	add	r15, r3
     2e8:	f3 0c       	add	r15, r3
     2ea:	f3 0c       	add	r15, r3
     2ec:	f3 0c       	add	r15, r3
     2ee:	f3 0c       	add	r15, r3
     2f0:	f3 0c       	add	r15, r3
     2f2:	f3 0c       	add	r15, r3
     2f4:	f3 0c       	add	r15, r3
     2f6:	f3 0c       	add	r15, r3
     2f8:	f3 0c       	add	r15, r3
     2fa:	f3 0c       	add	r15, r3
     2fc:	f3 0c       	add	r15, r3
     2fe:	f3 0c       	add	r15, r3
     300:	f3 0c       	add	r15, r3
     302:	f3 0c       	add	r15, r3
     304:	f3 0c       	add	r15, r3
     306:	f3 0c       	add	r15, r3
     308:	f3 0c       	add	r15, r3
     30a:	f3 0c       	add	r15, r3
     30c:	f3 0c       	add	r15, r3
     30e:	f3 0c       	add	r15, r3
     310:	f3 0c       	add	r15, r3
     312:	f3 0c       	add	r15, r3
     314:	f3 0c       	add	r15, r3
     316:	f3 0c       	add	r15, r3
     318:	f3 0c       	add	r15, r3
     31a:	f3 0c       	add	r15, r3
     31c:	f3 0c       	add	r15, r3
     31e:	f3 0c       	add	r15, r3
     320:	f3 0c       	add	r15, r3
     322:	f3 0c       	add	r15, r3
     324:	f3 0c       	add	r15, r3
     326:	f3 0c       	add	r15, r3
     328:	f3 0c       	add	r15, r3
     32a:	f3 0c       	add	r15, r3
     32c:	f3 0c       	add	r15, r3
     32e:	f3 0c       	add	r15, r3
     330:	f3 0c       	add	r15, r3
     332:	f3 0c       	add	r15, r3
     334:	f3 0c       	add	r15, r3
     336:	f3 0c       	add	r15, r3
     338:	f3 0c       	add	r15, r3
     33a:	f3 0c       	add	r15, r3
     33c:	f3 0c       	add	r15, r3
     33e:	f3 0c       	add	r15, r3
     340:	f3 0c       	add	r15, r3
     342:	66 0c       	add	r6, r6

00000344 <__ctors_end>:
     344:	11 24       	eor	r1, r1
     346:	1f be       	out	0x3f, r1	; 63
     348:	cf ef       	ldi	r28, 0xFF	; 255
     34a:	d0 e1       	ldi	r29, 0x10	; 16
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	cd bf       	out	0x3d, r28	; 61

00000350 <__do_copy_data>:
     350:	11 e0       	ldi	r17, 0x01	; 1
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b1 e0       	ldi	r27, 0x01	; 1
     356:	ea e9       	ldi	r30, 0x9A	; 154
     358:	fa e1       	ldi	r31, 0x1A	; 26
     35a:	00 e0       	ldi	r16, 0x00	; 0
     35c:	0b bf       	out	0x3b, r16	; 59
     35e:	02 c0       	rjmp	.+4      	; 0x364 <__do_copy_data+0x14>
     360:	07 90       	elpm	r0, Z+
     362:	0d 92       	st	X+, r0
     364:	ae 3c       	cpi	r26, 0xCE	; 206
     366:	b1 07       	cpc	r27, r17
     368:	d9 f7       	brne	.-10     	; 0x360 <__do_copy_data+0x10>

0000036a <__do_clear_bss>:
     36a:	2a e0       	ldi	r18, 0x0A	; 10
     36c:	ae ec       	ldi	r26, 0xCE	; 206
     36e:	b1 e0       	ldi	r27, 0x01	; 1
     370:	01 c0       	rjmp	.+2      	; 0x374 <.do_clear_bss_start>

00000372 <.do_clear_bss_loop>:
     372:	1d 92       	st	X+, r1

00000374 <.do_clear_bss_start>:
     374:	ab 30       	cpi	r26, 0x0B	; 11
     376:	b2 07       	cpc	r27, r18
     378:	e1 f7       	brne	.-8      	; 0x372 <.do_clear_bss_loop>
     37a:	bd d1       	rcall	.+890    	; 0x6f6 <main>
     37c:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <_exit>

00000380 <__bad_interrupt>:
     380:	3f ce       	rjmp	.-898    	; 0x0 <__vectors>

00000382 <ISeg7Init>:
= {16,16,16,16,16, 16};      //초기에 모두 끈다.


void ISeg7Init(void)
{
	SSEG_CONT  |=  CONT_MASK; //모든 7-세그먼트를 끈다.
     382:	82 b3       	in	r24, 0x12	; 18
     384:	80 6f       	ori	r24, 0xF0	; 240
     386:	82 bb       	out	0x12, r24	; 18
	DDR_CONT   |=  CONT_MASK; //제어포트의 상위니블을
     388:	81 b3       	in	r24, 0x11	; 17
     38a:	80 6f       	ori	r24, 0xF0	; 240
     38c:	81 bb       	out	0x11, r24	; 17
	//출력으로 설정
	DDR_DATA = 0xFF;     //테이터포트는 모두 출력으로 설정
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	8a bb       	out	0x1a, r24	; 26
	
	// 타이머/카운터0 비교 일치 인터럽트 설정
	// 타이머/카운터0는 CTC모드로 동작
	
	TCCR0 = (1<<WGM01);		 //CTC모드/타이머 정지, OC0핀 미사용
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	83 bf       	out	0x33, r24	; 51
	OCR0  = 78;				//5msec마다 비교일치 인터럽트 발생
     396:	8e e4       	ldi	r24, 0x4E	; 78
     398:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     39a:	87 b7       	in	r24, 0x37	; 55
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	87 bf       	out	0x37, r24	; 55
	
	TCCR0 |= 0x07;		   //분주비 1024로 타이머 시작
     3a0:	83 b7       	in	r24, 0x33	; 51
     3a2:	87 60       	ori	r24, 0x07	; 7
     3a4:	83 bf       	out	0x33, r24	; 51
     3a6:	08 95       	ret

000003a8 <ISeg7DispNum>:
}


void ISeg7DispNum(unsigned short num, unsigned short radix)
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	eb 01       	movw	r28, r22
	int  j;
	TIMSK &= ~(1<<OCIE0);	// 타이머0 비교일치 인터럽트 금지
     3ae:	27 b7       	in	r18, 0x37	; 55
     3b0:	2d 7f       	andi	r18, 0xFD	; 253
     3b2:	27 bf       	out	0x37, r18	; 55
	// cnumber[]에 수 0저장
	// cnumber[0] = 0
	// cnumber[1] ~ cnumber[4] = 16: 세그먼트를 끈다.
	
	
	cnumber[0] = 0;
     3b4:	e0 e0       	ldi	r30, 0x00	; 0
     3b6:	f1 e0       	ldi	r31, 0x01	; 1
     3b8:	10 82       	st	Z, r1
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
     3ba:	20 e1       	ldi	r18, 0x10	; 16
     3bc:	21 83       	std	Z+1, r18	; 0x01
     3be:	22 83       	std	Z+2, r18	; 0x02
     3c0:	23 83       	std	Z+3, r18	; 0x03
     3c2:	24 83       	std	Z+4, r18	; 0x04
     3c4:	25 83       	std	Z+5, r18	; 0x05
     3c6:	25 e0       	ldi	r18, 0x05	; 5
     3c8:	31 e0       	ldi	r19, 0x01	; 1
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
	{
		cnumber[j++] = num % radix;  //나머지
     3ca:	be 01       	movw	r22, r28
     3cc:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__udivmodhi4>
     3d0:	81 93       	st	Z+, r24
		num /= radix;                 // 몫
     3d2:	86 2f       	mov	r24, r22
     3d4:	97 2f       	mov	r25, r23
	
	cnumber[0] = 0;
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
     3d6:	e2 17       	cp	r30, r18
     3d8:	f3 07       	cpc	r31, r19
     3da:	b9 f7       	brne	.-18     	; 0x3ca <ISeg7DispNum+0x22>
	{
		cnumber[j++] = num % radix;  //나머지
		num /= radix;                 // 몫
	}
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     3dc:	87 b7       	in	r24, 0x37	; 55
     3de:	82 60       	ori	r24, 0x02	; 2
     3e0:	87 bf       	out	0x37, r24	; 55
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <__vector_15>:
//====================================================
// ISR : 인터럽트가 걸릴 때마다 index가 가리키는 세그먼트에
//       데이터를 표시하고, index는 계속 회전이동하게 된다.
//=====================================================

ISR(TIMER0_COMP_vect){	//카운터/타이머0 비교일치 인터럽트
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	0b b6       	in	r0, 0x3b	; 59
     3f4:	0f 92       	push	r0
     3f6:	2f 93       	push	r18
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	ef 93       	push	r30
     3fe:	ff 93       	push	r31
	static int index = 0;
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
     400:	22 b3       	in	r18, 0x12	; 18
     402:	80 e1       	ldi	r24, 0x10	; 16
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	00 90 ce 01 	lds	r0, 0x01CE	; 0x8001ce <__data_end>
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	80 95       	com	r24
     416:	80 7f       	andi	r24, 0xF0	; 240
     418:	92 2f       	mov	r25, r18
     41a:	9f 70       	andi	r25, 0x0F	; 15
     41c:	89 2b       	or	r24, r25
     41e:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
     420:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <__data_end>
     424:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <__data_end+0x1>
     428:	e0 50       	subi	r30, 0x00	; 0
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	e0 81       	ld	r30, Z
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	e1 5a       	subi	r30, 0xA1	; 161
     432:	fe 4f       	sbci	r31, 0xFE	; 254
     434:	80 81       	ld	r24, Z
     436:	80 95       	com	r24
     438:	8b bb       	out	0x1b, r24	; 27
	
	index++; //인덱스 이동
     43a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
     43e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <__data_end+0x1>
     442:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) { index = 0; }
     444:	84 30       	cpi	r24, 0x04	; 4
     446:	91 05       	cpc	r25, r1
     448:	29 f0       	breq	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];
	
	index++; //인덱스 이동
     44a:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <__data_end+0x1>
     44e:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
     452:	04 c0       	rjmp	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	if(index == N_SEGMENT) { index = 0; }
     454:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <__data_end+0x1>
     458:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <__data_end>
}
     45c:	ff 91       	pop	r31
     45e:	ef 91       	pop	r30
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0b be       	out	0x3b, r0	; 59
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <key_scan>:
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     474:	8e ef       	ldi	r24, 0xFE	; 254
     476:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
     47a:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     47c:	80 b1       	in	r24, 0x00	; 0
     47e:	80 95       	com	r24
     480:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     482:	69 f4       	brne	.+26     	; 0x49e <key_scan+0x2a>
     484:	23 e0       	ldi	r18, 0x03	; 3
     486:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     488:	e2 e6       	ldi	r30, 0x62	; 98
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	89 2f       	mov	r24, r25
     48e:	80 95       	com	r24
     490:	80 83       	st	Z, r24
		asm("nop"::);
     492:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     494:	80 b1       	in	r24, 0x00	; 0
     496:	80 95       	com	r24
     498:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     49a:	21 f0       	breq	.+8      	; 0x4a4 <key_scan+0x30>
     49c:	01 c0       	rjmp	.+2      	; 0x4a0 <key_scan+0x2c>

static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
     49e:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);
		
		in = (~KEY_IN) & 0xF0;
		if(in)			//have key input
		{
			in += out;	//make a code
     4a0:	89 0f       	add	r24, r25
			break;
     4a2:	08 95       	ret
		}
		out <<= 1;	//change to next scan-code
     4a4:	99 0f       	add	r25, r25
     4a6:	21 50       	subi	r18, 0x01	; 1
static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
     4a8:	89 f7       	brne	.-30     	; 0x48c <key_scan+0x18>
		}
		out <<= 1;	//change to next scan-code
		
	}
	return in;	//return the value of scan-code
}
     4aa:	08 95       	ret

000004ac <KeyInit>:
static unsigned char key_scan(void);
static unsigned char pin = NO_KEY;		//previous key value

void KeyInit()	//Initialize keypad
{
	KEY_OUT = 0xF0;		// Initialize output as 0
     4ac:	80 ef       	ldi	r24, 0xF0	; 240
     4ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;		//high-ranking nibble = input, low-ranking nibble = output
     4b2:	8f e0       	ldi	r24, 0x0F	; 15
     4b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4b8:	08 95       	ret

000004ba <KeyInput>:
// value of return :
//                   !=0 => value of scan code
//					  =0 => no input
//==========================================================================
unsigned char KeyInput(void)
{
     4ba:	cf 93       	push	r28
	unsigned char in, in1;
	
	in = key_scan();	//read keys
     4bc:	db df       	rcall	.-74     	; 0x474 <key_scan>
     4be:	c8 2f       	mov	r28, r24
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <KeyInput+0xa>
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
		if(in == in1) break;
		in = in1;
     4c2:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c4:	8f e3       	ldi	r24, 0x3F	; 63
     4c6:	9c e9       	ldi	r25, 0x9C	; 156
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <KeyInput+0xe>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <KeyInput+0x14>
     4ce:	00 00       	nop
     4d0:	8f e3       	ldi	r24, 0x3F	; 63
     4d2:	9c e9       	ldi	r25, 0x9C	; 156
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <KeyInput+0x1a>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <KeyInput+0x20>
     4da:	00 00       	nop
     4dc:	8f e3       	ldi	r24, 0x3F	; 63
     4de:	9c e9       	ldi	r25, 0x9C	; 156
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <KeyInput+0x26>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <KeyInput+0x2c>
	
	in = key_scan();	//read keys
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
     4e6:	00 00       	nop
     4e8:	c5 df       	rcall	.-118    	; 0x474 <key_scan>
		if(in == in1) break;
     4ea:	c8 13       	cpse	r28, r24
     4ec:	ea cf       	rjmp	.-44     	; 0x4c2 <KeyInput+0x8>
     4ee:	98 2f       	mov	r25, r24
     4f0:	90 7f       	andi	r25, 0xF0	; 240
		in = in1;
	}
	
	if (!(in & 0xF0))	// No key was pushed
     4f2:	19 f4       	brne	.+6      	; 0x4fa <KeyInput+0x40>
	{
		pin = 0;
     4f4:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <pin>
		return 0;
     4f8:	09 c0       	rjmp	.+18     	; 0x50c <KeyInput+0x52>
	}
	if(pin == in)
     4fa:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <pin>
     4fe:	89 17       	cp	r24, r25
     500:	21 f0       	breq	.+8      	; 0x50a <KeyInput+0x50>
	return 0;
	
	pin = in;		//store key value
     502:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <pin>
	return in;		//return code
     506:	98 2f       	mov	r25, r24
     508:	01 c0       	rjmp	.+2      	; 0x50c <KeyInput+0x52>
	{
		pin = 0;
		return 0;
	}
	if(pin == in)
	return 0;
     50a:	90 e0       	ldi	r25, 0x00	; 0
	
	pin = in;		//store key value
	return in;		//return code
}
     50c:	89 2f       	mov	r24, r25
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <write_command>:
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
	LcdPutchar(font[i]);
}
     512:	98 2f       	mov	r25, r24
     514:	90 7f       	andi	r25, 0xF0	; 240
     516:	94 60       	ori	r25, 0x04	; 4
     518:	95 bb       	out	0x15, r25	; 21
     51a:	9b 7f       	andi	r25, 0xFB	; 251
     51c:	95 bb       	out	0x15, r25	; 21
     51e:	20 e1       	ldi	r18, 0x10	; 16
     520:	82 02       	muls	r24, r18
     522:	c0 01       	movw	r24, r0
     524:	11 24       	eor	r1, r1
     526:	84 60       	ori	r24, 0x04	; 4
     528:	85 bb       	out	0x15, r24	; 21
     52a:	8b 7f       	andi	r24, 0xFB	; 251
     52c:	85 bb       	out	0x15, r24	; 21
     52e:	85 e0       	ldi	r24, 0x05	; 5
     530:	8a 95       	dec	r24
     532:	f1 f7       	brne	.-4      	; 0x530 <write_command+0x1e>
     534:	00 00       	nop
     536:	08 95       	ret

00000538 <LcdCommand>:
     538:	cf 93       	push	r28
     53a:	c8 2f       	mov	r28, r24
     53c:	85 e3       	ldi	r24, 0x35	; 53
     53e:	8a 95       	dec	r24
     540:	f1 f7       	brne	.-4      	; 0x53e <LcdCommand+0x6>
     542:	00 00       	nop
     544:	95 e3       	ldi	r25, 0x35	; 53
     546:	9a 95       	dec	r25
     548:	f1 f7       	brne	.-4      	; 0x546 <LcdCommand+0xe>
     54a:	00 00       	nop
     54c:	85 e3       	ldi	r24, 0x35	; 53
     54e:	8a 95       	dec	r24
     550:	f1 f7       	brne	.-4      	; 0x54e <LcdCommand+0x16>
     552:	00 00       	nop
     554:	95 e3       	ldi	r25, 0x35	; 53
     556:	9a 95       	dec	r25
     558:	f1 f7       	brne	.-4      	; 0x556 <LcdCommand+0x1e>
     55a:	00 00       	nop
     55c:	85 e3       	ldi	r24, 0x35	; 53
     55e:	8a 95       	dec	r24
     560:	f1 f7       	brne	.-4      	; 0x55e <LcdCommand+0x26>
     562:	00 00       	nop
     564:	8c 2f       	mov	r24, r28
     566:	d5 df       	rcall	.-86     	; 0x512 <write_command>
     568:	c1 50       	subi	r28, 0x01	; 1
     56a:	c2 30       	cpi	r28, 0x02	; 2
     56c:	30 f4       	brcc	.+12     	; 0x57a <LcdCommand+0x42>
     56e:	8f e3       	ldi	r24, 0x3F	; 63
     570:	9f e1       	ldi	r25, 0x1F	; 31
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <LcdCommand+0x3a>
     576:	00 c0       	rjmp	.+0      	; 0x578 <LcdCommand+0x40>
     578:	00 00       	nop
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <LcdInit>:
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	84 bb       	out	0x14, r24	; 20
     582:	8f e5       	ldi	r24, 0x5F	; 95
     584:	9a ee       	ldi	r25, 0xEA	; 234
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <LcdInit+0x8>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <LcdInit+0xe>
     58c:	00 00       	nop
     58e:	80 e3       	ldi	r24, 0x30	; 48
     590:	c0 df       	rcall	.-128    	; 0x512 <write_command>
     592:	8f e1       	ldi	r24, 0x1F	; 31
     594:	9e e4       	ldi	r25, 0x4E	; 78
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <LcdInit+0x18>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <LcdInit+0x1e>
     59c:	00 00       	nop
     59e:	80 e3       	ldi	r24, 0x30	; 48
     5a0:	b8 df       	rcall	.-144    	; 0x512 <write_command>
     5a2:	8f e9       	ldi	r24, 0x9F	; 159
     5a4:	9f e0       	ldi	r25, 0x0F	; 15
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LcdInit+0x28>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <LcdInit+0x2e>
     5ac:	00 00       	nop
     5ae:	82 e3       	ldi	r24, 0x32	; 50
     5b0:	b0 df       	rcall	.-160    	; 0x512 <write_command>
     5b2:	88 e2       	ldi	r24, 0x28	; 40
     5b4:	c1 df       	rcall	.-126    	; 0x538 <LcdCommand>
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	bf df       	rcall	.-130    	; 0x538 <LcdCommand>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	bd df       	rcall	.-134    	; 0x538 <LcdCommand>
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	bb df       	rcall	.-138    	; 0x538 <LcdCommand>
     5c2:	8c e0       	ldi	r24, 0x0C	; 12
     5c4:	b9 cf       	rjmp	.-142    	; 0x538 <LcdCommand>
     5c6:	08 95       	ret

000005c8 <LcdPutchar>:
     5c8:	25 e3       	ldi	r18, 0x35	; 53
     5ca:	2a 95       	dec	r18
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <LcdPutchar+0x2>
     5ce:	00 00       	nop
     5d0:	95 e3       	ldi	r25, 0x35	; 53
     5d2:	9a 95       	dec	r25
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LcdPutchar+0xa>
     5d6:	00 00       	nop
     5d8:	25 e3       	ldi	r18, 0x35	; 53
     5da:	2a 95       	dec	r18
     5dc:	f1 f7       	brne	.-4      	; 0x5da <LcdPutchar+0x12>
     5de:	00 00       	nop
     5e0:	95 e3       	ldi	r25, 0x35	; 53
     5e2:	9a 95       	dec	r25
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LcdPutchar+0x1a>
     5e6:	00 00       	nop
     5e8:	25 e3       	ldi	r18, 0x35	; 53
     5ea:	2a 95       	dec	r18
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <LcdPutchar+0x22>
     5ee:	00 00       	nop
     5f0:	98 2f       	mov	r25, r24
     5f2:	90 7f       	andi	r25, 0xF0	; 240
     5f4:	95 60       	ori	r25, 0x05	; 5
     5f6:	95 bb       	out	0x15, r25	; 21
     5f8:	9b 7f       	andi	r25, 0xFB	; 251
     5fa:	95 bb       	out	0x15, r25	; 21
     5fc:	20 e1       	ldi	r18, 0x10	; 16
     5fe:	82 02       	muls	r24, r18
     600:	c0 01       	movw	r24, r0
     602:	11 24       	eor	r1, r1
     604:	85 60       	ori	r24, 0x05	; 5
     606:	85 bb       	out	0x15, r24	; 21
     608:	8b 7f       	andi	r24, 0xFB	; 251
     60a:	85 bb       	out	0x15, r24	; 21
     60c:	08 95       	ret

0000060e <LcdPuts>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	ec 01       	movw	r28, r24
     614:	88 81       	ld	r24, Y
     616:	88 23       	and	r24, r24
     618:	29 f0       	breq	.+10     	; 0x624 <LcdPuts+0x16>
     61a:	21 96       	adiw	r28, 0x01	; 1
     61c:	d5 df       	rcall	.-86     	; 0x5c8 <LcdPutchar>
     61e:	89 91       	ld	r24, Y+
     620:	81 11       	cpse	r24, r1
     622:	fc cf       	rjmp	.-8      	; 0x61c <LcdPuts+0xe>
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <LcdMove>:
     62a:	90 e4       	ldi	r25, 0x40	; 64
     62c:	89 9f       	mul	r24, r25
     62e:	60 0d       	add	r22, r0
     630:	11 24       	eor	r1, r1
     632:	86 2f       	mov	r24, r22
     634:	80 68       	ori	r24, 0x80	; 128
     636:	80 cf       	rjmp	.-256    	; 0x538 <LcdCommand>
     638:	08 95       	ret

0000063a <msec_delay>:
}


void msec_delay(int n)
{
	for(; n>0; n--)		//1msec 시간지연 n회	반복
     63a:	18 16       	cp	r1, r24
     63c:	19 06       	cpc	r1, r25
     63e:	44 f4       	brge	.+16     	; 0x650 <msec_delay+0x16>
     640:	ef e9       	ldi	r30, 0x9F	; 159
     642:	ff e0       	ldi	r31, 0x0F	; 15
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <msec_delay+0xa>
     648:	00 c0       	rjmp	.+0      	; 0x64a <msec_delay+0x10>
     64a:	00 00       	nop
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	c1 f7       	brne	.-16     	; 0x640 <msec_delay+0x6>
     650:	08 95       	ret

00000652 <ClockCounterInit>:

static int* AlarmTimeStore[3] = {-1,};


void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
     652:	85 b5       	in	r24, 0x25	; 37
     654:	88 60       	ori	r24, 0x08	; 8
     656:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
     658:	84 e6       	ldi	r24, 0x64	; 100
     65a:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	87 bf       	out	0x37, r24	; 55
     660:	08 95       	ret

00000662 <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	2f 93       	push	r18
     66e:	5f 93       	push	r21
     670:	6f 93       	push	r22
     672:	7f 93       	push	r23
     674:	8f 93       	push	r24
     676:	9f 93       	push	r25
     678:	af 93       	push	r26
     67a:	bf 93       	push	r27
	ClockCounter_CNT++;
     67c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <ClockCounter_CNT>
     680:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <ClockCounter_CNT+0x1>
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <ClockCounter_CNT+0x1>
     68a:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
     68e:	80 32       	cpi	r24, 0x20	; 32
     690:	2e e4       	ldi	r18, 0x4E	; 78
     692:	92 07       	cpc	r25, r18
     694:	71 f4       	brne	.+28     	; 0x6b2 <__vector_9+0x50>
		ClockCounter_CNT=0;
     696:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <ClockCounter_CNT+0x1>
     69a:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <ClockCounter_CNT>
		ClockCounter_SECOND++;
     69e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <ClockCounter_SECOND>
     6a2:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <ClockCounter_SECOND+0x1>
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <ClockCounter_SECOND+0x1>
     6ac:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <ClockCounter_SECOND>
     6b0:	06 c0       	rjmp	.+12     	; 0x6be <__vector_9+0x5c>
	}
	if(ClockCounter_CNT % 2000 == 0) {
     6b2:	60 ed       	ldi	r22, 0xD0	; 208
     6b4:	77 e0       	ldi	r23, 0x07	; 7
     6b6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__divmodhi4>
     6ba:	89 2b       	or	r24, r25
     6bc:	79 f4       	brne	.+30     	; 0x6dc <__vector_9+0x7a>
		ClockCounter_M_SECOND = 1;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <ClockCounter_M_SECOND+0x1>
     6c6:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <ClockCounter_M_SECOND>
		ClockCounter_M_SECOND_ONLY_STOPWATCH += 1;
     6ca:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
     6ce:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     6d8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
	}
}
     6dc:	bf 91       	pop	r27
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	7f 91       	pop	r23
     6e6:	6f 91       	pop	r22
     6e8:	5f 91       	pop	r21
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <main>:

// 현재 메뉴를 알려주는 변수
static int status = 0;

int main(void) {
	LcdInit();
     6f6:	43 df       	rcall	.-378    	; 0x57e <LcdInit>
	KeyInit();
     6f8:	d9 de       	rcall	.-590    	; 0x4ac <KeyInit>
	ClockCounterInit();
     6fa:	ab df       	rcall	.-170    	; 0x652 <ClockCounterInit>
	DDRB = 0x00;	//모터 돌아가지 않겠금
     6fc:	17 ba       	out	0x17, r1	; 23
	// 박가경's project <깜박 x 3>
	//startTermProject();
	initMenu();
     6fe:	00 d4       	rcall	.+2048   	; 0xf00 <initMenu>
     700:	78 94       	sei
		
		
	// 전역 인터럽트 허용
	sei();						
     702:	85 b5       	in	r24, 0x25	; 37
	TCCR2 |= 1<<CS21;
     704:	82 60       	ori	r24, 0x02	; 2
     706:	85 bd       	out	0x25, r24	; 37
     708:	c6 e0       	ldi	r28, 0x06	; 6
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅 second parameter is not display flag 
		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag, AlarmTimeStore);
     70a:	d1 e0       	ldi	r29, 0x01	; 1
     70c:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <SegmentStopwatchInitFlag>
     710:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <SegmentStopwatchInitFlag+0x1>
     714:	ae 01       	movw	r20, r28
     716:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <ClockCounter_SECOND>
     71a:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <ClockCounter_SECOND+0x1>
     71e:	09 d2       	rcall	.+1042   	; 0xb32 <setClock>
     720:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <SegmentTimerInitFlag>

		if(SegmentTimerInitFlag == 1) {
     724:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <SegmentTimerInitFlag+0x1>
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	51 f4       	brne	.+20     	; 0x740 <main+0x4a>
     72c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <ClockCounter_M_SECOND>
			SegmentTimerInitFlag = set7SegmentTimer(ClockCounter_M_SECOND);
     730:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <ClockCounter_M_SECOND+0x1>
     734:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <set7SegmentTimer>
     738:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <SegmentTimerInitFlag+0x1>
     73c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <SegmentTimerInitFlag>
     740:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <SegmentStopwatchInitFlag>
		}
		
		if(SegmentStopwatchInitFlag == 1) {
     744:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <SegmentStopwatchInitFlag+0x1>
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	81 f4       	brne	.+32     	; 0x76c <main+0x76>
			SegmentStopwatchInitFlag = set7SegmentStopwatch(ClockCounter_M_SECOND, KeyInput());
     74c:	b6 de       	rcall	.-660    	; 0x4ba <KeyInput>
     74e:	68 2f       	mov	r22, r24
     750:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <ClockCounter_M_SECOND>
     754:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <ClockCounter_M_SECOND+0x1>
     758:	fd d4       	rcall	.+2554   	; 0x1154 <set7SegmentStopwatch>
     75a:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <SegmentStopwatchInitFlag+0x1>
     75e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <SegmentStopwatchInitFlag>
     762:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <ClockCounter_M_SECOND+0x1>
			ClockCounter_M_SECOND = 0;
     766:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <ClockCounter_M_SECOND>
     76a:	d0 cf       	rjmp	.-96     	; 0x70c <main+0x16>
			continue;
     76c:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <ClockCounter_SECOND+0x1>
		}
		
		// 무조건 1초 혹은 0.1초로 계산되게 하기위함
		ClockCounter_SECOND = 0;
     770:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <ClockCounter_SECOND>
		ClockCounter_M_SECOND = 0;		
     774:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <ClockCounter_M_SECOND+0x1>
     778:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <ClockCounter_M_SECOND>
		// keypad input
		keyInput = KeyInput();
		
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
     77c:	9e de       	rcall	.-708    	; 0x4ba <KeyInput>
     77e:	cd d3       	rcall	.+1946   	; 0xf1a <setMenu>
     780:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <status+0x1>
     784:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <status>

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	39 f4       	brne	.+14     	; 0x79a <main+0xa4>
			status = setCustomClock();	// Time setting(main.c 파일 안에 있음)	
     78c:	74 d2       	rcall	.+1256   	; 0xc76 <setCustomClock>
     78e:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <status+0x1>
     792:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <status>
     796:	01 97       	sbiw	r24, 0x01	; 1
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     798:	c9 f3       	breq	.-14     	; 0x78c <main+0x96>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     79a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <status>
     79e:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <status+0x1>
     7a2:	02 97       	sbiw	r24, 0x02	; 2
     7a4:	49 f4       	brne	.+18     	; 0x7b8 <main+0xc2>
			status = setTimer(&SegmentTimerInitFlag);
     7a6:	85 ed       	ldi	r24, 0xD5	; 213
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	a1 d7       	rcall	.+3906   	; 0x16ee <setTimer>
     7ac:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <status+0x1>
     7b0:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <status>
     7b4:	02 97       	sbiw	r24, 0x02	; 2
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     7b6:	b9 f3       	breq	.-18     	; 0x7a6 <main+0xb0>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     7b8:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <status>
     7bc:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <status+0x1>
     7c0:	03 97       	sbiw	r24, 0x03	; 3
     7c2:	49 f4       	brne	.+18     	; 0x7d6 <main+0xe0>
			status = setStopwatch(&SegmentStopwatchInitFlag);
     7c4:	83 ed       	ldi	r24, 0xD3	; 211
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	7f d4       	rcall	.+2302   	; 0x10c8 <setStopwatch>
     7ca:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <status+0x1>
     7ce:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <status>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     7d2:	03 97       	sbiw	r24, 0x03	; 3
     7d4:	b9 f3       	breq	.-18     	; 0x7c4 <main+0xce>
		}
	
		
		//=========================================================
		//status = 4
		while(status==4){
     7d6:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <status>
     7da:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <status+0x1>
     7de:	04 97       	sbiw	r24, 0x04	; 4
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <main+0xee>
			status = setAlarm();
     7e2:	94 cf       	rjmp	.-216    	; 0x70c <main+0x16>
     7e4:	1f d0       	rcall	.+62     	; 0x824 <setAlarm>
     7e6:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <status+0x1>
     7ea:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <status>
			int* tmp = getAlarmTime();
     7ee:	91 d1       	rcall	.+802    	; 0xb12 <getAlarmTime>
     7f0:	fc 01       	movw	r30, r24
			
			AlarmTimeStore[0] = tmp[0];
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	99 83       	std	Y+1, r25	; 0x01
     7f8:	88 83       	st	Y, r24
			AlarmTimeStore[1] = tmp[1];
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	93 81       	ldd	r25, Z+3	; 0x03
     7fe:	9b 83       	std	Y+3, r25	; 0x03
			AlarmTimeStore[2] = tmp[2];
     800:	8a 83       	std	Y+2, r24	; 0x02
     802:	84 81       	ldd	r24, Z+4	; 0x04
     804:	95 81       	ldd	r25, Z+5	; 0x05
     806:	9d 83       	std	Y+5, r25	; 0x05
			ISeg7Init();
     808:	8c 83       	std	Y+4, r24	; 0x04
     80a:	bb dd       	rcall	.-1162   	; 0x382 <ISeg7Init>
			ISeg7DispNum(AlarmTimeStore[2] , 10);
     80c:	6a e0       	ldi	r22, 0x0A	; 10
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	8c 81       	ldd	r24, Y+4	; 0x04
     812:	9d 81       	ldd	r25, Y+5	; 0x05
     814:	c9 dd       	rcall	.-1134   	; 0x3a8 <ISeg7DispNum>
     816:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <status>
		}
	
		
		//=========================================================
		//status = 4
		while(status==4){
     81a:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <status+0x1>
     81e:	04 97       	sbiw	r24, 0x04	; 4
     820:	09 f3       	breq	.-62     	; 0x7e4 <main+0xee>
     822:	74 cf       	rjmp	.-280    	; 0x70c <main+0x16>

00000824 <setAlarm>:
     824:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <customAlarmSetInitFlag>
	
int setAlarm() {
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customAlarmSetInitFlag == 0){
     828:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <customAlarmSetInitFlag+0x1>
     82c:	89 2b       	or	r24, r25
     82e:	81 f4       	brne	.+32     	; 0x850 <setAlarm+0x2c>
		// 초기화면 세팅
		LcdMove(0,0);
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	fa de       	rcall	.-524    	; 0x62a <LcdMove>
		LcdPuts("00h 00m 00s        ");
     836:	80 e7       	ldi	r24, 0x70	; 112
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	e9 de       	rcall	.-558    	; 0x60e <LcdPuts>
		LcdCommand(HOME);
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	7c de       	rcall	.-776    	; 0x538 <LcdCommand>
		LcdCommand(CURSOR_ON);
     840:	8e e0       	ldi	r24, 0x0E	; 14
     842:	7a de       	rcall	.-780    	; 0x538 <LcdCommand>
     844:	81 e0       	ldi	r24, 0x01	; 1
		customAlarmSetInitFlag = 1;
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <customAlarmSetInitFlag+0x1>
     84c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <customAlarmSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
     850:	34 de       	rcall	.-920    	; 0x4ba <KeyInput>
     852:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		switch(keyInput) {
     854:	fc 01       	movw	r30, r24
     856:	71 97       	sbiw	r30, 0x11	; 17
     858:	e4 37       	cpi	r30, 0x74	; 116
     85a:	f1 05       	cpc	r31, r1
     85c:	08 f0       	brcs	.+2      	; 0x860 <setAlarm+0x3c>
     85e:	56 c1       	rjmp	.+684    	; 0xb0c <setAlarm+0x2e8>
     860:	ea 5b       	subi	r30, 0xBA	; 186
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     868:	81 e3       	ldi	r24, 0x31	; 49
     86a:	ae de       	rcall	.-676    	; 0x5c8 <LcdPutchar>
     86c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     870:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     87a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
     87e:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 1;
     880:	99 1f       	adc	r25, r25
     882:	fc 01       	movw	r30, r24
     884:	e7 51       	subi	r30, 0x17	; 23
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	91 83       	std	Z+1, r25	; 0x01
     88e:	80 83       	st	Z, r24
				break;
     890:	3d c1       	rjmp	.+634    	; 0xb0c <setAlarm+0x2e8>
			
			case SW1:
				LcdPutchar('2');
     892:	82 e3       	ldi	r24, 0x32	; 50
     894:	99 de       	rcall	.-718    	; 0x5c8 <LcdPutchar>
     896:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     89a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     8a4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
     8a8:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 2;
     8aa:	99 1f       	adc	r25, r25
     8ac:	fc 01       	movw	r30, r24
     8ae:	e7 51       	subi	r30, 0x17	; 23
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	91 83       	std	Z+1, r25	; 0x01
     8b8:	80 83       	st	Z, r24
				break;
     8ba:	28 c1       	rjmp	.+592    	; 0xb0c <setAlarm+0x2e8>
			
			case SW2:
				LcdPutchar('3');
     8bc:	83 e3       	ldi	r24, 0x33	; 51
     8be:	84 de       	rcall	.-760    	; 0x5c8 <LcdPutchar>
     8c0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     8c4:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     8ce:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
     8d2:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 3;
     8d4:	99 1f       	adc	r25, r25
     8d6:	fc 01       	movw	r30, r24
     8d8:	e7 51       	subi	r30, 0x17	; 23
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	91 83       	std	Z+1, r25	; 0x01
     8e2:	80 83       	st	Z, r24
				break;
     8e4:	13 c1       	rjmp	.+550    	; 0xb0c <setAlarm+0x2e8>
			
			case SW4:
				LcdPutchar('4');
     8e6:	84 e3       	ldi	r24, 0x34	; 52
     8e8:	6f de       	rcall	.-802    	; 0x5c8 <LcdPutchar>
     8ea:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     8ee:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     8f8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
     8fc:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 4;
     8fe:	99 1f       	adc	r25, r25
     900:	fc 01       	movw	r30, r24
     902:	e7 51       	subi	r30, 0x17	; 23
     904:	fe 4f       	sbci	r31, 0xFE	; 254
     906:	84 e0       	ldi	r24, 0x04	; 4
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	91 83       	std	Z+1, r25	; 0x01
     90c:	80 83       	st	Z, r24
				break;
     90e:	fe c0       	rjmp	.+508    	; 0xb0c <setAlarm+0x2e8>
			
			case SW5:
				LcdPutchar('5');
     910:	85 e3       	ldi	r24, 0x35	; 53
     912:	5a de       	rcall	.-844    	; 0x5c8 <LcdPutchar>
     914:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     918:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     922:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
     926:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 5;
     928:	99 1f       	adc	r25, r25
     92a:	fc 01       	movw	r30, r24
     92c:	e7 51       	subi	r30, 0x17	; 23
     92e:	fe 4f       	sbci	r31, 0xFE	; 254
     930:	85 e0       	ldi	r24, 0x05	; 5
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	91 83       	std	Z+1, r25	; 0x01
     936:	80 83       	st	Z, r24
				break;
     938:	e9 c0       	rjmp	.+466    	; 0xb0c <setAlarm+0x2e8>
			
			case SW6:
				LcdPutchar('6');
     93a:	86 e3       	ldi	r24, 0x36	; 54
     93c:	45 de       	rcall	.-886    	; 0x5c8 <LcdPutchar>
     93e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     942:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     94c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
     950:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 6;
     952:	99 1f       	adc	r25, r25
     954:	fc 01       	movw	r30, r24
     956:	e7 51       	subi	r30, 0x17	; 23
     958:	fe 4f       	sbci	r31, 0xFE	; 254
     95a:	86 e0       	ldi	r24, 0x06	; 6
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	91 83       	std	Z+1, r25	; 0x01
     960:	80 83       	st	Z, r24
				break;
     962:	d4 c0       	rjmp	.+424    	; 0xb0c <setAlarm+0x2e8>
			
			case SW8:
				LcdPutchar('7');
     964:	87 e3       	ldi	r24, 0x37	; 55
     966:	30 de       	rcall	.-928    	; 0x5c8 <LcdPutchar>
     968:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     96c:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     976:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 7;
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	fc 01       	movw	r30, r24
     980:	e7 51       	subi	r30, 0x17	; 23
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	87 e0       	ldi	r24, 0x07	; 7
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
				break;
     98c:	bf c0       	rjmp	.+382    	; 0xb0c <setAlarm+0x2e8>
			
			case SW9:
				LcdPutchar('8');
     98e:	88 e3       	ldi	r24, 0x38	; 56
     990:	1b de       	rcall	.-970    	; 0x5c8 <LcdPutchar>
     992:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     996:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     9a0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 8;
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	fc 01       	movw	r30, r24
     9aa:	e7 51       	subi	r30, 0x17	; 23
     9ac:	fe 4f       	sbci	r31, 0xFE	; 254
     9ae:	88 e0       	ldi	r24, 0x08	; 8
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	80 83       	st	Z, r24
				break;
     9b6:	aa c0       	rjmp	.+340    	; 0xb0c <setAlarm+0x2e8>
			
			case SW10:
				LcdPutchar('9');
     9b8:	89 e3       	ldi	r24, 0x39	; 57
     9ba:	06 de       	rcall	.-1012   	; 0x5c8 <LcdPutchar>
     9bc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     9c0:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     9ca:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 9;
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	fc 01       	movw	r30, r24
     9d4:	e7 51       	subi	r30, 0x17	; 23
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	89 e0       	ldi	r24, 0x09	; 9
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	91 83       	std	Z+1, r25	; 0x01
     9de:	80 83       	st	Z, r24
				break;
     9e0:	95 c0       	rjmp	.+298    	; 0xb0c <setAlarm+0x2e8>
			
			case SW13:
				LcdPutchar('0');
     9e2:	80 e3       	ldi	r24, 0x30	; 48
     9e4:	f1 dd       	rcall	.-1054   	; 0x5c8 <LcdPutchar>
     9e6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     9ea:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     9f4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 0;
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	fc 01       	movw	r30, r24
     9fe:	e7 51       	subi	r30, 0x17	; 23
     a00:	fe 4f       	sbci	r31, 0xFE	; 254
     a02:	11 82       	std	Z+1, r1	; 0x01
     a04:	10 82       	st	Z, r1
				break;
     a06:	82 c0       	rjmp	.+260    	; 0xb0c <setAlarm+0x2e8>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	96 dd       	rcall	.-1236   	; 0x538 <LcdCommand>
     a0c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarmSettingIndex -= 1;
     a10:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     a1a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
     a1e:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 0;
     a20:	99 1f       	adc	r25, r25
     a22:	fc 01       	movw	r30, r24
     a24:	e7 51       	subi	r30, 0x17	; 23
     a26:	fe 4f       	sbci	r31, 0xFE	; 254
     a28:	11 82       	std	Z+1, r1	; 0x01
     a2a:	10 82       	st	Z, r1
				returnStatus = 4;
				break;
     a2c:	6f c0       	rjmp	.+222    	; 0xb0c <setAlarm+0x2e8>
			
			// 아래 키 입력되는 케이스
			case SW7:
				customAlarmSettingIndex += 1;
     a2e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <customAlarmSettingIndex>
     a32:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <customAlarmSettingIndex+0x1>
     a3c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <customAlarmSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
     a40:	84 e1       	ldi	r24, 0x14	; 20
     a42:	7a dd       	rcall	.-1292   	; 0x538 <LcdCommand>
     a44:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 0;
     a48:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <customAlarmSettingIndex+0x1>
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	e7 51       	subi	r30, 0x17	; 23
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
				returnStatus = 4;
				break;
     a54:	11 82       	std	Z+1, r1	; 0x01
		if(returnStatus == -1) {
			returnStatus = 4;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customAlarmSetInitFlag = 0;
     a56:	10 82       	st	Z, r1
     a58:	59 c0       	rjmp	.+178    	; 0xb0c <setAlarm+0x2e8>
     a5a:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <customAlarmSetInitFlag+0x1>
			LcdMove(0,0);
     a5e:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <customAlarmSetInitFlag>
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	80 e0       	ldi	r24, 0x00	; 0
			LcdPuts("                      ");
     a66:	e1 dd       	rcall	.-1086   	; 0x62a <LcdMove>
     a68:	84 e8       	ldi	r24, 0x84	; 132
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	d0 dd       	rcall	.-1120   	; 0x60e <LcdPuts>
			LcdCommand(CURSOR_OFF);
     a6e:	8c e0       	ldi	r24, 0x0C	; 12
     a70:	63 dd       	rcall	.-1338   	; 0x538 <LcdCommand>
     a72:	e9 ee       	ldi	r30, 0xE9	; 233
			
			// 시간 계산
			alarmHour = customAlarm[1]*10 + customAlarm[2];
			alarmMinute = customAlarm[5]*10 + customAlarm[6];
     a74:	f1 e0       	ldi	r31, 0x01	; 1
     a76:	82 85       	ldd	r24, Z+10	; 0x0a
     a78:	93 85       	ldd	r25, Z+11	; 0x0b
     a7a:	9c 01       	movw	r18, r24
     a7c:	22 0f       	add	r18, r18
     a7e:	33 1f       	adc	r19, r19
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	44 85       	ldd	r20, Z+12	; 0x0c
     a92:	55 85       	ldd	r21, Z+13	; 0x0d
     a94:	48 0f       	add	r20, r24
     a96:	59 1f       	adc	r21, r25
     a98:	82 89       	ldd	r24, Z+18	; 0x12
			alarmSecond = customAlarm[9]*10 + customAlarm[10];
     a9a:	93 89       	ldd	r25, Z+19	; 0x13
     a9c:	9c 01       	movw	r18, r24
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	82 0f       	add	r24, r18
     ab0:	93 1f       	adc	r25, r19
     ab2:	24 89       	ldd	r18, Z+20	; 0x14
     ab4:	35 89       	ldd	r19, Z+21	; 0x15
     ab6:	28 0f       	add	r18, r24
     ab8:	39 1f       	adc	r19, r25
     aba:	af ed       	ldi	r26, 0xDF	; 223
			
			alarmTimeArray[0] = alarmHour;
     abc:	b1 e0       	ldi	r27, 0x01	; 1
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	bc 01       	movw	r22, r24
     ac4:	66 0f       	add	r22, r22
     ac6:	77 1f       	adc	r23, r23
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	86 0f       	add	r24, r22
     ad6:	97 1f       	adc	r25, r23
     ad8:	64 81       	ldd	r22, Z+4	; 0x04
     ada:	75 81       	ldd	r23, Z+5	; 0x05
     adc:	86 0f       	add	r24, r22
     ade:	97 1f       	adc	r25, r23
     ae0:	11 96       	adiw	r26, 0x01	; 1
     ae2:	9c 93       	st	X, r25
     ae4:	8e 93       	st	-X, r24
     ae6:	13 96       	adiw	r26, 0x03	; 3
			alarmTimeArray[1] = alarmMinute;
     ae8:	5c 93       	st	X, r21
     aea:	4e 93       	st	-X, r20
     aec:	12 97       	sbiw	r26, 0x02	; 2
     aee:	15 96       	adiw	r26, 0x05	; 5
			alarmTimeArray[2] = alarmSecond;
     af0:	3c 93       	st	X, r19
     af2:	2e 93       	st	-X, r18
     af4:	14 97       	sbiw	r26, 0x04	; 4
     af6:	81 e0       	ldi	r24, 0x01	; 1
			customAlarmSetDoneFlag = 1;
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <customAlarmSetDoneFlag+0x1>
     afe:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <customAlarmSetDoneFlag>
     b02:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <customAlarmSettingIndex+0x1>
			customAlarmSettingIndex = 0;
     b06:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <customAlarmSettingIndex>
     b0a:	08 95       	ret
			returnStatus = 0;
			break;
		}
		return returnStatus;
	}
}
     b0c:	84 e0       	ldi	r24, 0x04	; 4
			customAlarmSetDoneFlag = 1;
			customAlarmSettingIndex = 0;
			returnStatus = 0;
			break;
		}
		return returnStatus;
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	08 95       	ret

00000b12 <getAlarmTime>:
	}
}
     b12:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <customAlarmSetDoneFlag>

int* getAlarmTime() {
	if(customAlarmSetDoneFlag == 1){
     b16:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <customAlarmSetDoneFlag+0x1>
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	39 f4       	brne	.+14     	; 0xb2c <getAlarmTime+0x1a>
		customAlarmSetDoneFlag = 0;
     b1e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <customAlarmSetDoneFlag+0x1>
     b22:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <customAlarmSetDoneFlag>
		return alarmTimeArray;
     b26:	8f ed       	ldi	r24, 0xDF	; 223
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	08 95       	ret
	}
	else {
		int *tmp[3] = {-1,};
		return tmp;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
	}
     b30:	08 95       	ret

00000b32 <setClock>:
static int second = 0;
static int minute = 0;
static int hour = 0;


void setClock(int interruptSecond, int segmentStopwatchInitFlag, int* alarmStore) {
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	eb 01       	movw	r28, r22
     b3e:	fa 01       	movw	r30, r20
	second += interruptSecond;
     b40:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <second>
     b44:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <second+0x1>
     b48:	82 0f       	add	r24, r18
     b4a:	93 1f       	adc	r25, r19
	minute += second/60; 
     b4c:	2c e3       	ldi	r18, 0x3C	; 60
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	b9 01       	movw	r22, r18
     b52:	85 d7       	rcall	.+3850   	; 0x1a5e <__divmodhi4>
     b54:	f8 2e       	mov	r15, r24
     b56:	49 2f       	mov	r20, r25
     b58:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <minute>
     b5c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <minute+0x1>
     b60:	86 0f       	add	r24, r22
     b62:	97 1f       	adc	r25, r23
	hour += minute/60;
     b64:	b9 01       	movw	r22, r18
     b66:	7b d7       	rcall	.+3830   	; 0x1a5e <__divmodhi4>
     b68:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <hour>
     b6c:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <hour+0x1>
     b70:	62 0f       	add	r22, r18
     b72:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
     b74:	0f 2d       	mov	r16, r15
     b76:	14 2f       	mov	r17, r20
     b78:	f0 92 07 02 	sts	0x0207, r15	; 0x800207 <second>
     b7c:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <second+0x1>
	minute = minute%60;
     b80:	28 2f       	mov	r18, r24
     b82:	39 2f       	mov	r19, r25
     b84:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <minute>
     b88:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <minute+0x1>
	hour = hour%24;
     b8c:	cb 01       	movw	r24, r22
     b8e:	68 e1       	ldi	r22, 0x18	; 24
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	65 d7       	rcall	.+3786   	; 0x1a5e <__divmodhi4>
     b94:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <hour+0x1>
     b98:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <hour>
	
	if(alarmStore[0] == hour && alarmStore[1] == minute && alarmStore[2] == second ){
     b9c:	40 81       	ld	r20, Z
     b9e:	51 81       	ldd	r21, Z+1	; 0x01
     ba0:	84 17       	cp	r24, r20
     ba2:	95 07       	cpc	r25, r21
     ba4:	a9 f4       	brne	.+42     	; 0xbd0 <setClock+0x9e>
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	93 81       	ldd	r25, Z+3	; 0x03
     baa:	28 17       	cp	r18, r24
     bac:	39 07       	cpc	r19, r25
     bae:	81 f4       	brne	.+32     	; 0xbd0 <setClock+0x9e>
     bb0:	84 81       	ldd	r24, Z+4	; 0x04
     bb2:	95 81       	ldd	r25, Z+5	; 0x05
     bb4:	08 17       	cp	r16, r24
     bb6:	19 07       	cpc	r17, r25
     bb8:	59 f4       	brne	.+22     	; 0xbd0 <setClock+0x9e>
		LcdMove(1,0);
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	35 dd       	rcall	.-1430   	; 0x62a <LcdMove>
		LcdPuts("Alarm Alert");
     bc0:	8b e9       	ldi	r24, 0x9B	; 155
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	24 dd       	rcall	.-1464   	; 0x60e <LcdPuts>
		LcdMove(0, 12);
     bc6:	6c e0       	ldi	r22, 0x0C	; 12
     bc8:	80 e0       	ldi	r24, 0x00	; 0
		LcdPutchar('a');
     bca:	2f dd       	rcall	.-1442   	; 0x62a <LcdMove>
     bcc:	81 e6       	ldi	r24, 0x61	; 97
     bce:	fc dc       	rcall	.-1544   	; 0x5c8 <LcdPutchar>
	}
	// STOPWATCH에서 LCD 사용중인 경우 미노출
	if(segmentStopwatchInitFlag == 0) {
     bd0:	cd 2b       	or	r28, r29
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <setClock+0xa4>
		LcdMove(0,0);
     bd4:	4a c0       	rjmp	.+148    	; 0xc6a <setClock+0x138>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	27 dd       	rcall	.-1458   	; 0x62a <LcdMove>
		LcdPutchar((hour/10%10) + '0');
     bdc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <hour>
     be0:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <hour+0x1>
     be4:	ca e0       	ldi	r28, 0x0A	; 10
     be6:	d0 e0       	ldi	r29, 0x00	; 0
     be8:	be 01       	movw	r22, r28
     bea:	39 d7       	rcall	.+3698   	; 0x1a5e <__divmodhi4>
     bec:	cb 01       	movw	r24, r22
     bee:	be 01       	movw	r22, r28
     bf0:	36 d7       	rcall	.+3692   	; 0x1a5e <__divmodhi4>
     bf2:	80 5d       	subi	r24, 0xD0	; 208
     bf4:	e9 dc       	rcall	.-1582   	; 0x5c8 <LcdPutchar>
		LcdPutchar(hour%10 + '0');
     bf6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <hour>
     bfa:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <hour+0x1>
     bfe:	be 01       	movw	r22, r28
     c00:	2e d7       	rcall	.+3676   	; 0x1a5e <__divmodhi4>
     c02:	80 5d       	subi	r24, 0xD0	; 208
     c04:	e1 dc       	rcall	.-1598   	; 0x5c8 <LcdPutchar>
		LcdPutchar('h');
     c06:	88 e6       	ldi	r24, 0x68	; 104
     c08:	df dc       	rcall	.-1602   	; 0x5c8 <LcdPutchar>
		
		LcdMove(0,4);
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	80 e0       	ldi	r24, 0x00	; 0
		LcdPutchar((minute/10%10) + '0');
     c0e:	0d dd       	rcall	.-1510   	; 0x62a <LcdMove>
     c10:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <minute>
     c14:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <minute+0x1>
     c18:	be 01       	movw	r22, r28
     c1a:	21 d7       	rcall	.+3650   	; 0x1a5e <__divmodhi4>
     c1c:	cb 01       	movw	r24, r22
     c1e:	be 01       	movw	r22, r28
     c20:	1e d7       	rcall	.+3644   	; 0x1a5e <__divmodhi4>
     c22:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar(minute%10 + '0');
     c24:	d1 dc       	rcall	.-1630   	; 0x5c8 <LcdPutchar>
     c26:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <minute>
     c2a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <minute+0x1>
     c2e:	be 01       	movw	r22, r28
     c30:	16 d7       	rcall	.+3628   	; 0x1a5e <__divmodhi4>
     c32:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar('m');
     c34:	c9 dc       	rcall	.-1646   	; 0x5c8 <LcdPutchar>
     c36:	8d e6       	ldi	r24, 0x6D	; 109
     c38:	c7 dc       	rcall	.-1650   	; 0x5c8 <LcdPutchar>
		
		LcdMove(0,8);
     c3a:	68 e0       	ldi	r22, 0x08	; 8
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	f5 dc       	rcall	.-1558   	; 0x62a <LcdMove>
		LcdPutchar((second/10%10) + '0');
     c40:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <second>
     c44:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <second+0x1>
     c48:	be 01       	movw	r22, r28
     c4a:	09 d7       	rcall	.+3602   	; 0x1a5e <__divmodhi4>
     c4c:	cb 01       	movw	r24, r22
     c4e:	be 01       	movw	r22, r28
     c50:	06 d7       	rcall	.+3596   	; 0x1a5e <__divmodhi4>
     c52:	80 5d       	subi	r24, 0xD0	; 208
     c54:	b9 dc       	rcall	.-1678   	; 0x5c8 <LcdPutchar>
     c56:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <second>
		LcdPutchar(second%10 + '0');
     c5a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <second+0x1>
     c5e:	be 01       	movw	r22, r28
     c60:	fe d6       	rcall	.+3580   	; 0x1a5e <__divmodhi4>
     c62:	80 5d       	subi	r24, 0xD0	; 208
     c64:	b1 dc       	rcall	.-1694   	; 0x5c8 <LcdPutchar>
     c66:	83 e7       	ldi	r24, 0x73	; 115
     c68:	af dc       	rcall	.-1698   	; 0x5c8 <LcdPutchar>
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
		LcdPutchar('s');
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
	}
}
     c74:	08 95       	ret

00000c76 <setCustomClock>:
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	8c 01       	movw	r16, r24
     c7e:	1d dc       	rcall	.-1990   	; 0x4ba <KeyInput>
int setCustomClock(int* ClockCounter_SECOND) {
	// -1 : 숫자가 눌린 경우(전) , 0: 선택이 눌린 경우, 1: 숫자가 눌린 경우(후), 위로 눌린 경우
	int returnStatus = -1;
	// 키를 입력받는 변수
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
     c80:	c8 2f       	mov	r28, r24
	
	LcdMove(1,customClockSettingIndex);
     c82:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <customClockSettingIndex>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	d0 dc       	rcall	.-1632   	; 0x62a <LcdMove>
	while(1) {
		if(customClockSetInitFlag == 0){
     c8a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <customClockSetInitFlag>
     c8e:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <customClockSetInitFlag+0x1>
     c92:	89 2b       	or	r24, r25
     c94:	79 f4       	brne	.+30     	; 0xcb4 <setCustomClock+0x3e>
			LcdMove(1,0);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	c7 dc       	rcall	.-1650   	; 0x62a <LcdMove>
			LcdPuts("______");
     c9c:	87 ea       	ldi	r24, 0xA7	; 167
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	b6 dc       	rcall	.-1684   	; 0x60e <LcdPuts>
			LcdMove(1,0);
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	c1 dc       	rcall	.-1662   	; 0x62a <LcdMove>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
			customClockSetInitFlag = 1;
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <customClockSetInitFlag+0x1>
     cb0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <customClockSetInitFlag>
		}
		
		if(keyInput == NO_KEY){
     cb4:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <setCustomClock+0x5c>
     cb8:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
     cba:	3e dc       	rcall	.-1924   	; 0x538 <LcdCommand>
     cbc:	84 ef       	ldi	r24, 0xF4	; 244
     cbe:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
     cc0:	bc dc       	rcall	.-1672   	; 0x63a <msec_delay>
     cc2:	8c e0       	ldi	r24, 0x0C	; 12
     cc4:	39 dc       	rcall	.-1934   	; 0x538 <LcdCommand>
			msec_delay(500);
     cc6:	84 ef       	ldi	r24, 0xF4	; 244
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	b7 dc       	rcall	.-1682   	; 0x63a <msec_delay>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	13 c1       	rjmp	.+550    	; 0xef8 <setCustomClock+0x282>
     cd2:	8c 2f       	mov	r24, r28
		}
		
		switch(keyInput) {
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	fc 01       	movw	r30, r24
     cd8:	71 97       	sbiw	r30, 0x11	; 17
     cda:	e4 37       	cpi	r30, 0x74	; 116
     cdc:	f1 05       	cpc	r31, r1
     cde:	08 f0       	brcs	.+2      	; 0xce2 <setCustomClock+0x6c>
     ce0:	fd c0       	rjmp	.+506    	; 0xedc <setCustomClock+0x266>
     ce2:	e6 54       	subi	r30, 0x46	; 70
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	ce c6       	rjmp	.+3484   	; 0x1a84 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     ce8:	81 e3       	ldi	r24, 0x31	; 49
     cea:	6e dc       	rcall	.-1828   	; 0x5c8 <LcdPutchar>
     cec:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 1;
     cf0:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	e5 5f       	subi	r30, 0xF5	; 245
     cfa:	fd 4f       	sbci	r31, 0xFD	; 253
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
				break;
     d04:	ee c0       	rjmp	.+476    	; 0xee2 <setCustomClock+0x26c>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
     d06:	82 e3       	ldi	r24, 0x32	; 50
     d08:	5f dc       	rcall	.-1858   	; 0x5c8 <LcdPutchar>
     d0a:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 2;
     d0e:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	e5 5f       	subi	r30, 0xF5	; 245
     d18:	fd 4f       	sbci	r31, 0xFD	; 253
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
				break;
     d22:	df c0       	rjmp	.+446    	; 0xee2 <setCustomClock+0x26c>
			
			case SW2:
				LcdPutchar('3');
     d24:	83 e3       	ldi	r24, 0x33	; 51
     d26:	50 dc       	rcall	.-1888   	; 0x5c8 <LcdPutchar>
     d28:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 3;
     d2c:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	e5 5f       	subi	r30, 0xF5	; 245
     d36:	fd 4f       	sbci	r31, 0xFD	; 253
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	80 83       	st	Z, r24
				break;
     d40:	d0 c0       	rjmp	.+416    	; 0xee2 <setCustomClock+0x26c>
			
			case SW4:
				LcdPutchar('4');
     d42:	84 e3       	ldi	r24, 0x34	; 52
     d44:	41 dc       	rcall	.-1918   	; 0x5c8 <LcdPutchar>
     d46:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 4;
     d4a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	e5 5f       	subi	r30, 0xF5	; 245
     d54:	fd 4f       	sbci	r31, 0xFD	; 253
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
				break;
     d5e:	c1 c0       	rjmp	.+386    	; 0xee2 <setCustomClock+0x26c>
			
			case SW5:
				LcdPutchar('5');
     d60:	85 e3       	ldi	r24, 0x35	; 53
     d62:	32 dc       	rcall	.-1948   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 5;
     d64:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
     d68:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	e5 5f       	subi	r30, 0xF5	; 245
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	80 83       	st	Z, r24
				break;
     d7c:	b2 c0       	rjmp	.+356    	; 0xee2 <setCustomClock+0x26c>
			
			case SW6:
				LcdPutchar('6');
     d7e:	86 e3       	ldi	r24, 0x36	; 54
     d80:	23 dc       	rcall	.-1978   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 6;
     d82:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
     d86:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	e5 5f       	subi	r30, 0xF5	; 245
     d90:	fd 4f       	sbci	r31, 0xFD	; 253
     d92:	86 e0       	ldi	r24, 0x06	; 6
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
				break;
     d9a:	a3 c0       	rjmp	.+326    	; 0xee2 <setCustomClock+0x26c>
			
			case SW8:
				LcdPutchar('7');
     d9c:	87 e3       	ldi	r24, 0x37	; 55
     d9e:	14 dc       	rcall	.-2008   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 7;
     da0:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
     da4:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	e5 5f       	subi	r30, 0xF5	; 245
     dae:	fd 4f       	sbci	r31, 0xFD	; 253
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
				break;
			
			case SW9:
				LcdPutchar('8');
     db8:	94 c0       	rjmp	.+296    	; 0xee2 <setCustomClock+0x26c>
     dba:	88 e3       	ldi	r24, 0x38	; 56
     dbc:	05 dc       	rcall	.-2038   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 8;
     dbe:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
     dc2:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	e5 5f       	subi	r30, 0xF5	; 245
     dcc:	fd 4f       	sbci	r31, 0xFD	; 253
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	91 83       	std	Z+1, r25	; 0x01
				break;
     dd4:	80 83       	st	Z, r24
			
			case SW10:
				LcdPutchar('9');
     dd6:	85 c0       	rjmp	.+266    	; 0xee2 <setCustomClock+0x26c>
     dd8:	89 e3       	ldi	r24, 0x39	; 57
     dda:	f6 db       	rcall	.-2068   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 9;
     ddc:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
     de0:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	e5 5f       	subi	r30, 0xF5	; 245
     dea:	fd 4f       	sbci	r31, 0xFD	; 253
     dec:	89 e0       	ldi	r24, 0x09	; 9
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	91 83       	std	Z+1, r25	; 0x01
				break;
			
			case SW13:
				LcdPutchar('0');
     df2:	80 83       	st	Z, r24
     df4:	76 c0       	rjmp	.+236    	; 0xee2 <setCustomClock+0x26c>
     df6:	80 e3       	ldi	r24, 0x30	; 48
				customClock[customClockSettingIndex] = 0;
     df8:	e7 db       	rcall	.-2098   	; 0x5c8 <LcdPutchar>
     dfa:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <customClockSettingIndex>
     dfe:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     e02:	ee 0f       	add	r30, r30
     e04:	ff 1f       	adc	r31, r31
     e06:	e5 5f       	subi	r30, 0xF5	; 245
     e08:	fd 4f       	sbci	r31, 0xFD	; 253
     e0a:	11 82       	std	Z+1, r1	; 0x01
				break;
     e0c:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
     e0e:	69 c0       	rjmp	.+210    	; 0xee2 <setCustomClock+0x26c>
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0a dc       	rcall	.-2028   	; 0x62a <LcdMove>
				LcdPuts("1. SET          ");				
     e16:	8e ea       	ldi	r24, 0xAE	; 174
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	f9 db       	rcall	.-2062   	; 0x60e <LcdPuts>
     e1c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <customClockSettingIndex+0x1>
			customClockSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			customClockSettingIndex = 0;
     e20:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <customClockSettingIndex>
     e24:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
     e26:	11 82       	std	Z+1, r1	; 0x01
     e28:	10 82       	st	Z, r1
     e2a:	eb e0       	ldi	r30, 0x0B	; 11
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customClock[0] * 10 + customClock[1];
     e2c:	f2 e0       	ldi	r31, 0x02	; 2
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	9c 01       	movw	r18, r24
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	82 0f       	add	r24, r18
     e46:	93 1f       	adc	r25, r19
     e48:	22 81       	ldd	r18, Z+2	; 0x02
     e4a:	33 81       	ldd	r19, Z+3	; 0x03
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <hour+0x1>
     e54:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <hour>
     e58:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customClock[2] * 10 + customClock[3];
     e5a:	95 81       	ldd	r25, Z+5	; 0x05
     e5c:	9c 01       	movw	r18, r24
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	26 81       	ldd	r18, Z+6	; 0x06
     e74:	37 81       	ldd	r19, Z+7	; 0x07
     e76:	82 0f       	add	r24, r18
     e78:	93 1f       	adc	r25, r19
     e7a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <minute+0x1>
     e7e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <minute>
     e82:	80 85       	ldd	r24, Z+8	; 0x08
			second = customClock[4] * 10 + customClock[5];
     e84:	91 85       	ldd	r25, Z+9	; 0x09
     e86:	9c 01       	movw	r18, r24
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	82 0f       	add	r24, r18
     e9a:	93 1f       	adc	r25, r19
     e9c:	22 85       	ldd	r18, Z+10	; 0x0a
     e9e:	33 85       	ldd	r19, Z+11	; 0x0b
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <second+0x1>
     ea8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <second>
			customClockSetInitFlag = 0;
     eac:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <customClockSetInitFlag+0x1>
     eb0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <customClockSetInitFlag>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --customClockSettingIndex);
     eb8:	1f c0       	rjmp	.+62     	; 0xef8 <setCustomClock+0x282>
     eba:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <customClockSettingIndex>
     ebe:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     ec2:	61 50       	subi	r22, 0x01	; 1
     ec4:	71 09       	sbc	r23, r1
     ec6:	70 93 18 02 	sts	0x0218, r23	; 0x800218 <customClockSettingIndex+0x1>
     eca:	60 93 17 02 	sts	0x0217, r22	; 0x800217 <customClockSettingIndex>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	ac db       	rcall	.-2216   	; 0x62a <LcdMove>
				LcdPutchar('_');
     ed2:	8f e5       	ldi	r24, 0x5F	; 95
     ed4:	79 db       	rcall	.-2318   	; 0x5c8 <LcdPutchar>
     ed6:	81 e0       	ldi	r24, 0x01	; 1
				returnStatus = 1;
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e c0       	rjmp	.+28     	; 0xef8 <setCustomClock+0x282>
     edc:	81 e0       	ldi	r24, 0x01	; 1
				break;
				
			default:
				returnStatus = 1;
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0b c0       	rjmp	.+22     	; 0xef8 <setCustomClock+0x282>
     ee2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <customClockSettingIndex>
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			customClockSettingIndex++;
     ee6:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <customClockSettingIndex+0x1>
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <customClockSettingIndex+0x1>
     ef0:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <customClockSettingIndex>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 1;
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	cf 91       	pop	r28
			customClockSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <initMenu>:
static char str1[] = "00h 00m 00s";
static int nowMenuCursor = 0;
static int nowStatus = 1;

void initMenu() {
	LcdMove(0,0);
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	92 db       	rcall	.-2268   	; 0x62a <LcdMove>
	LcdPuts(str1);
     f06:	8e e0       	ldi	r24, 0x0E	; 14
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	81 db       	rcall	.-2302   	; 0x60e <LcdPuts>
	LcdMove(1,0);
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	8c db       	rcall	.-2280   	; 0x62a <LcdMove>
	LcdPuts(Set);
     f12:	8f e4       	ldi	r24, 0x4F	; 79
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	7b cb       	rjmp	.-2314   	; 0x60e <LcdPuts>
     f18:	08 95       	ret

00000f1a <setMenu>:
     f1a:	cf 93       	push	r28
}



// MENU 세팅용 함수
int setMenu(char clickedButton) {
     f1c:	df 93       	push	r29
     f1e:	c8 2f       	mov	r28, r24
	LcdMove(1,0);			// 2행으로
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	82 db       	rcall	.-2300   	; 0x62a <LcdMove>
	switch(clickedButton) {
     f26:	c1 32       	cpi	r28, 0x21	; 33
     f28:	09 f4       	brne	.+2      	; 0xf2c <setMenu+0x12>
     f2a:	52 c0       	rjmp	.+164    	; 0xfd0 <setMenu+0xb6>
     f2c:	c1 34       	cpi	r28, 0x41	; 65
     f2e:	09 f4       	brne	.+2      	; 0xf32 <setMenu+0x18>
     f30:	9a c0       	rjmp	.+308    	; 0x1066 <setMenu+0x14c>
     f32:	c1 31       	cpi	r28, 0x11	; 17
     f34:	09 f0       	breq	.+2      	; 0xf38 <setMenu+0x1e>
     f36:	9c c0       	rjmp	.+312    	; 0x1070 <setMenu+0x156>
		// up button clicked
		case SW3:
			if ( nowMenuCursor == 1) {
     f38:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <nowMenuCursor>
     f3c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <nowMenuCursor+0x1>
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	81 f4       	brne	.+32     	; 0xf66 <setMenu+0x4c>
				nowMenuCursor--;
     f46:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <nowMenuCursor+0x1>
     f4a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <nowMenuCursor>
				LcdPuts(Set);
     f4e:	8f e4       	ldi	r24, 0x4F	; 79
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	5d db       	rcall	.-2374   	; 0x60e <LcdPuts>
				nowStatus = 1;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
     f5c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     f60:	c0 e0       	ldi	r28, 0x00	; 0
     f62:	d0 e0       	ldi	r29, 0x00	; 0
     f64:	87 c0       	rjmp	.+270    	; 0x1074 <setMenu+0x15a>
			if ( nowMenuCursor == 1) {
				nowMenuCursor--;
				LcdPuts(Set);
				nowStatus = 1;
			}
			else if ( nowMenuCursor == 2) {
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	91 05       	cpc	r25, r1
     f6a:	91 f4       	brne	.+36     	; 0xf90 <setMenu+0x76>
				nowMenuCursor--;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <nowMenuCursor+0x1>
     f74:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <nowMenuCursor>
				LcdPuts(Timer);
     f78:	8d e3       	ldi	r24, 0x3D	; 61
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	48 db       	rcall	.-2416   	; 0x60e <LcdPuts>
				nowStatus = 2;
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
     f86:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     f8a:	c0 e0       	ldi	r28, 0x00	; 0
     f8c:	d0 e0       	ldi	r29, 0x00	; 0
     f8e:	72 c0       	rjmp	.+228    	; 0x1074 <setMenu+0x15a>
			else if ( nowMenuCursor == 2) {
				nowMenuCursor--;
				LcdPuts(Timer);
				nowStatus = 2;
			}
			else if ( nowMenuCursor == 3) {
     f90:	03 97       	sbiw	r24, 0x03	; 3
     f92:	91 f4       	brne	.+36     	; 0xfb8 <setMenu+0x9e>
				nowMenuCursor--;
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <nowMenuCursor+0x1>
     f9c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <nowMenuCursor>
				LcdPuts(StopWatch);
     fa0:	8d e2       	ldi	r24, 0x2D	; 45
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	34 db       	rcall	.-2456   	; 0x60e <LcdPuts>
				nowStatus = 3;
     fa6:	83 e0       	ldi	r24, 0x03	; 3
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
     fae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     fb2:	c0 e0       	ldi	r28, 0x00	; 0
     fb4:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor--;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else{
				LcdPuts(Set);
     fb6:	5e c0       	rjmp	.+188    	; 0x1074 <setMenu+0x15a>
     fb8:	8f e4       	ldi	r24, 0x4F	; 79
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	28 db       	rcall	.-2480   	; 0x60e <LcdPuts>
				nowStatus = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
     fc6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			return 0;
     fca:	c0 e0       	ldi	r28, 0x00	; 0
     fcc:	d0 e0       	ldi	r29, 0x00	; 0
     fce:	52 c0       	rjmp	.+164    	; 0x1074 <setMenu+0x15a>
			break;
		
		
		// down button clicked
		case SW7:
			if ( nowMenuCursor == 0) {
     fd0:	c0 91 19 02 	lds	r28, 0x0219	; 0x800219 <nowMenuCursor>
     fd4:	d0 91 1a 02 	lds	r29, 0x021A	; 0x80021a <nowMenuCursor+0x1>
     fd8:	20 97       	sbiw	r28, 0x00	; 0
     fda:	81 f4       	brne	.+32     	; 0xffc <setMenu+0xe2>
				nowMenuCursor++;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <nowMenuCursor+0x1>
     fe4:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <nowMenuCursor>
				LcdPuts(Timer);
     fe8:	8d e3       	ldi	r24, 0x3D	; 61
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	10 db       	rcall	.-2528   	; 0x60e <LcdPuts>
				nowStatus = 2;
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
     ff6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
     ffa:	3c c0       	rjmp	.+120    	; 0x1074 <setMenu+0x15a>
			}
			else if ( nowMenuCursor == 1) {
     ffc:	c1 30       	cpi	r28, 0x01	; 1
     ffe:	d1 05       	cpc	r29, r1
    1000:	91 f4       	brne	.+36     	; 0x1026 <setMenu+0x10c>
				nowMenuCursor++;
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <nowMenuCursor+0x1>
    100a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <nowMenuCursor>
				LcdPuts(StopWatch);
    100e:	8d e2       	ldi	r24, 0x2D	; 45
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	fd da       	rcall	.-2566   	; 0x60e <LcdPuts>
				nowStatus = 3;
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
    101c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
    1020:	c0 e0       	ldi	r28, 0x00	; 0
    1022:	d0 e0       	ldi	r29, 0x00	; 0
    1024:	27 c0       	rjmp	.+78     	; 0x1074 <setMenu+0x15a>
			else if ( nowMenuCursor == 1) {
				nowMenuCursor++;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else if ( nowMenuCursor == 2) {
    1026:	22 97       	sbiw	r28, 0x02	; 2
    1028:	91 f4       	brne	.+36     	; 0x104e <setMenu+0x134>
				nowMenuCursor++;
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <nowMenuCursor+0x1>
    1032:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <nowMenuCursor>
				LcdPuts(Alarm);
    1036:	8a e1       	ldi	r24, 0x1A	; 26
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	e9 da       	rcall	.-2606   	; 0x60e <LcdPuts>
				nowStatus = 4;
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
    1044:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
    1048:	c0 e0       	ldi	r28, 0x00	; 0
    104a:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor++;
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			else{
				LcdPuts(Alarm);
    104c:	13 c0       	rjmp	.+38     	; 0x1074 <setMenu+0x15a>
    104e:	8a e1       	ldi	r24, 0x1A	; 26
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	dd da       	rcall	.-2630   	; 0x60e <LcdPuts>
				nowStatus = 4;
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
    105c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			return 0;
    1060:	c0 e0       	ldi	r28, 0x00	; 0
    1062:	d0 e0       	ldi	r29, 0x00	; 0
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <setMenu+0x15a>
			break;
		
		
		// When select button clicked, 메인파일의 각 status에 해당하는 기능을 위한 while문을 돌림
		case SW11:
			return nowStatus;
    1066:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <nowStatus>
    106a:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <nowStatus+0x1>
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <setMenu+0x15a>
			break;
		
		default:
			return 0;
    1070:	c0 e0       	ldi	r28, 0x00	; 0
    1072:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
    1074:	ce 01       	movw	r24, r28
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <__vector_21>:

static int stopwatchDisplayIndex = 0;
static int n_enter = 0;


ISR(ADC_vect){
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	2f 93       	push	r18
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
	// 타이머1A가 16비트 타이머라서 8비트로 전환시키기 위한 코드
	OCR1A = ADC>>2;	
    108c:	84 b1       	in	r24, 0x04	; 4
    108e:	95 b1       	in	r25, 0x05	; 5
    1090:	96 95       	lsr	r25
    1092:	87 95       	ror	r24
    1094:	96 95       	lsr	r25
    1096:	87 95       	ror	r24
    1098:	9b bd       	out	0x2b, r25	; 43
    109a:	8a bd       	out	0x2a, r24	; 42
	n_enter++;
    109c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <n_enter>
    10a0:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <n_enter+0x1>
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <n_enter+0x1>
    10aa:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <n_enter>
	if(n_enter == 1000){
    10ae:	88 3e       	cpi	r24, 0xE8	; 232
    10b0:	93 40       	sbci	r25, 0x03	; 3
    10b2:	11 f4       	brne	.+4      	; 0x10b8 <__vector_21+0x3c>
		DDRB |= 0<<PB5;	// 모터 정지
    10b4:	87 b3       	in	r24, 0x17	; 23
    10b6:	87 bb       	out	0x17, r24	; 23
	}
}
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <setStopwatch>:

int setStopwatch(int* stopwatchInitFlag) {
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	8c 01       	movw	r16, r24
	int returnStatus = -1;
	// 처음 진입시에만 실행
	if(customStopwatchSetInitFlag == 0) {
    10d0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <customStopwatchSetInitFlag>
    10d4:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <customStopwatchSetInitFlag+0x1>
    10d8:	89 2b       	or	r24, r25
    10da:	71 f4       	brne	.+28     	; 0x10f8 <setStopwatch+0x30>
		ISeg7Init();
    10dc:	52 d9       	rcall	.-3420   	; 0x382 <ISeg7Init>
		ISeg7DispNum(segmentStopwatchDisplayNumber , 10);
    10de:	6a e0       	ldi	r22, 0x0A	; 10
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <segmentStopwatchDisplayNumber>
    10e6:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <segmentStopwatchDisplayNumber+0x1>
    10ea:	5e d9       	rcall	.-3396   	; 0x3a8 <ISeg7DispNum>
		// 초기화면 세팅
		LcdMove(0,0);
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	9c da       	rcall	.-2760   	; 0x62a <LcdMove>
		LcdPuts("0m 00.0s     ");
    10f2:	8f eb       	ldi	r24, 0xBF	; 191
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	8b da       	rcall	.-2794   	; 0x60e <LcdPuts>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	customStopwatchSetInitFlag = 1;
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <customStopwatchSetInitFlag+0x1>
    1100:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <customStopwatchSetInitFlag>

	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
    1104:	da d9       	rcall	.-3148   	; 0x4ba <KeyInput>
    1106:	c8 2f       	mov	r28, r24
    1108:	6a e0       	ldi	r22, 0x0A	; 10
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <segmentStopwatchDisplayNumber>
    1110:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <segmentStopwatchDisplayNumber+0x1>
    1114:	49 d9       	rcall	.-3438   	; 0x3a8 <ISeg7DispNum>
    1116:	c1 34       	cpi	r28, 0x41	; 65
	while(1) {
		switch(keyInput) {
    1118:	b9 f4       	brne	.+46     	; 0x1148 <__stack+0x49>
    111a:	81 e0       	ldi	r24, 0x01	; 1
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	f8 01       	movw	r30, r16
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
				returnStatus = 0;
				LcdMove(0,0);
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	80 da       	rcall	.-2816   	; 0x62a <LcdMove>
				LcdPuts("              ");
    112a:	8c e8       	ldi	r24, 0x8C	; 140
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	6f da       	rcall	.-2850   	; 0x60e <LcdPuts>
				
				LcdMove(1,0);
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	7a da       	rcall	.-2828   	; 0x62a <LcdMove>
				LcdPuts("              ");
    1136:	8c e8       	ldi	r24, 0x8C	; 140
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	69 da       	rcall	.-2862   	; 0x60e <LcdPuts>
    113c:	60 e0       	ldi	r22, 0x00	; 0
				
				LcdMove(0,0);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	74 da       	rcall	.-2840   	; 0x62a <LcdMove>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
				returnStatus = 0;
    1146:	02 c0       	rjmp	.+4      	; 0x114c <__stack+0x4d>
    1148:	83 e0       	ldi	r24, 0x03	; 3
				
				LcdMove(1,0);
				LcdPuts("              ");
				
				LcdMove(0,0);
				break;
    114a:	90 e0       	ldi	r25, 0x00	; 0
			
			default:
				returnStatus = 3;
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
		if(returnStatus == 0) {
			
		}
		return returnStatus;
	}
}
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <set7SegmentStopwatch>:
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15

// 스톱워치 시간증가 시작 및 버튼 별 기능 구현
int set7SegmentStopwatch(int clock_counter, unsigned char stopwatchKeyInput) {
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	8c 01       	movw	r16, r24
    1162:	c6 2f       	mov	r28, r22
	ISeg7Init();
    1164:	0e d9       	rcall	.-3556   	; 0x382 <ISeg7Init>
	if(stopwatchStopFlag == 0 ) {	
    1166:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <stopwatchStopFlag>
    116a:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <stopwatchStopFlag+0x1>
    116e:	89 2b       	or	r24, r25
    1170:	09 f0       	breq	.+2      	; 0x1174 <set7SegmentStopwatch+0x20>
    1172:	ae c2       	rjmp	.+1372   	; 0x16d0 <set7SegmentStopwatch+0x57c>
		int nowStopwatchDisplayNumber = segmentStopwatchDisplayNumber + clock_counter;
    1174:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <segmentStopwatchDisplayNumber>
    1178:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <segmentStopwatchDisplayNumber+0x1>
    117c:	80 0f       	add	r24, r16
    117e:	91 1f       	adc	r25, r17
		if(nowStopwatchDisplayNumber == 600) {	
    1180:	88 35       	cpi	r24, 0x58	; 88
    1182:	22 e0       	ldi	r18, 0x02	; 2
    1184:	92 07       	cpc	r25, r18
    1186:	11 f4       	brne	.+4      	; 0x118c <set7SegmentStopwatch+0x38>
			nowStopwatchDisplayNumber += 400;	// 60초가 되면 1분으로 갱신
    1188:	88 ee       	ldi	r24, 0xE8	; 232
    118a:	93 e0       	ldi	r25, 0x03	; 3
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
    118c:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <segmentStopwatchDisplayNumber+0x1>
    1190:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <segmentStopwatchDisplayNumber>
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
    1194:	6a e0       	ldi	r22, 0x0A	; 10
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	07 d9       	rcall	.-3570   	; 0x3a8 <ISeg7DispNum>
	}
	
	switch(stopwatchKeyInput) {
    119a:	c1 31       	cpi	r28, 0x11	; 17
    119c:	21 f0       	breq	.+8      	; 0x11a6 <set7SegmentStopwatch+0x52>
    119e:	c1 32       	cpi	r28, 0x21	; 33
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <set7SegmentStopwatch+0x50>
    11a2:	c4 c1       	rjmp	.+904    	; 0x152c <set7SegmentStopwatch+0x3d8>
    11a4:	9b c2       	rjmp	.+1334   	; 0x16dc <set7SegmentStopwatch+0x588>
		case SW3:
			// 스톱워치 진행중 시간기록
			if(stopwatchStopFlag == 0){
    11a6:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <stopwatchStopFlag>
    11aa:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <stopwatchStopFlag+0x1>
    11ae:	89 2b       	or	r24, r25
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <set7SegmentStopwatch+0x60>
    11b2:	11 c1       	rjmp	.+546    	; 0x13d6 <set7SegmentStopwatch+0x282>
			
				// 시간이 기록됨을 알리는 모터구동**************
				
				DDRB |= 1<<PB5; //PB5 = OC1A
    11b4:	bd 9a       	sbi	0x17, 5	; 23
				
				//타이머/카운터1 위상정정 PWM 파형발생모드
				//타이머/카운터1 OCR1A와 하강일치 PWM 펄스 출력
				TCCR1A = 1<<WGM10 | 1<<COM1A1;
    11b6:	81 e8       	ldi	r24, 0x81	; 129
    11b8:	8f bd       	out	0x2f, r24	; 47
				
				// 타이머/카운터1 64분주
				// 주기 = 2*255(TOP)*64 / 16[MHz] = 2[ms]
				TCCR1B = 1<<CS11 | 1<<CS10;
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	8e bd       	out	0x2e, r24	; 46
				
				// A/D변환 활성화
				// 연속모드 A/D 변환
				// A/D변환 인터럽트 활성화
				// 128분주 -> ADC클럭주파수 125[KHz] = 주기 8[us]
				ADCSRA = 1<<ADEN | 1<<ADFR | 1<<ADIE | 7;
    11be:	8f ea       	ldi	r24, 0xAF	; 175
    11c0:	86 b9       	out	0x06, r24	; 6
				
				ADCSRA |= 1<<ADSC; // A/D변환 시작
    11c2:	36 9a       	sbi	0x06, 6	; 6
				//************************************************


				
				// 첫 or 두번째 입력
				if(stopwatchDisplayIndex<=1) {
    11c4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    11c8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	91 05       	cpc	r25, r1
    11d0:	0c f0       	brlt	.+2      	; 0x11d4 <set7SegmentStopwatch+0x80>
					LcdMove(stopwatchDisplayIndex, 0);
    11d2:	52 c0       	rjmp	.+164    	; 0x1278 <set7SegmentStopwatch+0x124>
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	29 da       	rcall	.-2990   	; 0x62a <LcdMove>
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
    11d8:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <segmentStopwatchDisplayNumber>
    11dc:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <segmentStopwatchDisplayNumber+0x1>
    11e0:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    11e4:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	ed 5d       	subi	r30, 0xDD	; 221
    11ee:	fd 4f       	sbci	r31, 0xFD	; 253
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');	//1000으로 나누면 몫은 '분'에 해당하는 숫자만 남음.
    11f4:	c8 ee       	ldi	r28, 0xE8	; 232
    11f6:	d3 e0       	ldi	r29, 0x03	; 3
    11f8:	be 01       	movw	r22, r28
    11fa:	31 d4       	rcall	.+2146   	; 0x1a5e <__divmodhi4>
    11fc:	80 e3       	ldi	r24, 0x30	; 48
    11fe:	86 0f       	add	r24, r22
					LcdPutchar('m');
    1200:	e3 d9       	rcall	.-3130   	; 0x5c8 <LcdPutchar>
    1202:	8d e6       	ldi	r24, 0x6D	; 109
    1204:	e1 d9       	rcall	.-3134   	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    1206:	80 e2       	ldi	r24, 0x20	; 32
    1208:	df d9       	rcall	.-3138   	; 0x5c8 <LcdPutchar>
    120a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');	//1000으로 나눈 나머지를 100으로 나누면 초의 십의자리에 해당하는 숫자만 남음
    120e:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	ed 5d       	subi	r30, 0xDD	; 221
    1218:	fd 4f       	sbci	r31, 0xFD	; 253
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	be 01       	movw	r22, r28
    1220:	1e d4       	rcall	.+2108   	; 0x1a5e <__divmodhi4>
    1222:	c4 e6       	ldi	r28, 0x64	; 100
    1224:	d0 e0       	ldi	r29, 0x00	; 0
    1226:	be 01       	movw	r22, r28
    1228:	1a d4       	rcall	.+2100   	; 0x1a5e <__divmodhi4>
    122a:	80 e3       	ldi	r24, 0x30	; 48
    122c:	86 0f       	add	r24, r22
    122e:	cc d9       	rcall	.-3176   	; 0x5c8 <LcdPutchar>
    1230:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0'); //위와 비슷한 논리
    1234:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	ed 5d       	subi	r30, 0xDD	; 221
    123e:	fd 4f       	sbci	r31, 0xFD	; 253
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	be 01       	movw	r22, r28
    1246:	0b d4       	rcall	.+2070   	; 0x1a5e <__divmodhi4>
    1248:	ca e0       	ldi	r28, 0x0A	; 10
    124a:	d0 e0       	ldi	r29, 0x00	; 0
    124c:	be 01       	movw	r22, r28
    124e:	07 d4       	rcall	.+2062   	; 0x1a5e <__divmodhi4>
    1250:	80 e3       	ldi	r24, 0x30	; 48
    1252:	86 0f       	add	r24, r22
    1254:	b9 d9       	rcall	.-3214   	; 0x5c8 <LcdPutchar>
					LcdPutchar('.');
    1256:	8e e2       	ldi	r24, 0x2E	; 46
    1258:	b7 d9       	rcall	.-3218   	; 0x5c8 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0'); //위와 비슷한 논리
    125a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    125e:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	ed 5d       	subi	r30, 0xDD	; 221
    1268:	fd 4f       	sbci	r31, 0xFD	; 253
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	be 01       	movw	r22, r28
    1270:	f6 d3       	rcall	.+2028   	; 0x1a5e <__divmodhi4>
    1272:	80 5d       	subi	r24, 0xD0	; 208
    1274:	a9 d9       	rcall	.-3246   	; 0x5c8 <LcdPutchar>
    1276:	a5 c0       	rjmp	.+330    	; 0x13c2 <set7SegmentStopwatch+0x26e>
    1278:	88 0f       	add	r24, r24
				}
				// 세번째 이상 입력
				else {
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
    127a:	99 1f       	adc	r25, r25
    127c:	fc 01       	movw	r30, r24
    127e:	ed 5d       	subi	r30, 0xDD	; 221
    1280:	fd 4f       	sbci	r31, 0xFD	; 253
    1282:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <segmentStopwatchDisplayNumber>
    1286:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <segmentStopwatchDisplayNumber+0x1>
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	60 e0       	ldi	r22, 0x00	; 0
					// 0번째 행 변경
					LcdMove(0,0);
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	cb d9       	rcall	.-3178   	; 0x62a <LcdMove>
    1294:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
    1298:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	ef 5d       	subi	r30, 0xDF	; 223
    12a2:	fd 4f       	sbci	r31, 0xFD	; 253
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	0f 2e       	mov	r0, r31
    12aa:	f8 ee       	ldi	r31, 0xE8	; 232
    12ac:	ef 2e       	mov	r14, r31
    12ae:	f3 e0       	ldi	r31, 0x03	; 3
    12b0:	ff 2e       	mov	r15, r31
    12b2:	f0 2d       	mov	r31, r0
    12b4:	b7 01       	movw	r22, r14
    12b6:	d3 d3       	rcall	.+1958   	; 0x1a5e <__divmodhi4>
    12b8:	80 e3       	ldi	r24, 0x30	; 48
    12ba:	86 0f       	add	r24, r22
    12bc:	85 d9       	rcall	.-3318   	; 0x5c8 <LcdPutchar>
					LcdPutchar('m');
    12be:	8d e6       	ldi	r24, 0x6D	; 109
    12c0:	83 d9       	rcall	.-3322   	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    12c2:	80 e2       	ldi	r24, 0x20	; 32
    12c4:	81 d9       	rcall	.-3326   	; 0x5c8 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    12c6:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    12ca:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ef 5d       	subi	r30, 0xDF	; 223
    12d4:	fd 4f       	sbci	r31, 0xFD	; 253
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	b7 01       	movw	r22, r14
    12dc:	c0 d3       	rcall	.+1920   	; 0x1a5e <__divmodhi4>
    12de:	c4 e6       	ldi	r28, 0x64	; 100
    12e0:	d0 e0       	ldi	r29, 0x00	; 0
    12e2:	be 01       	movw	r22, r28
    12e4:	bc d3       	rcall	.+1912   	; 0x1a5e <__divmodhi4>
    12e6:	80 e3       	ldi	r24, 0x30	; 48
    12e8:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    12ea:	6e d9       	rcall	.-3364   	; 0x5c8 <LcdPutchar>
    12ec:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    12f0:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	ef 5d       	subi	r30, 0xDF	; 223
    12fa:	fd 4f       	sbci	r31, 0xFD	; 253
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	be 01       	movw	r22, r28
    1302:	ad d3       	rcall	.+1882   	; 0x1a5e <__divmodhi4>
    1304:	0a e0       	ldi	r16, 0x0A	; 10
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	b8 01       	movw	r22, r16
    130a:	a9 d3       	rcall	.+1874   	; 0x1a5e <__divmodhi4>
    130c:	80 e3       	ldi	r24, 0x30	; 48
    130e:	86 0f       	add	r24, r22
					LcdPutchar('.');
    1310:	5b d9       	rcall	.-3402   	; 0x5c8 <LcdPutchar>
    1312:	8e e2       	ldi	r24, 0x2E	; 46
    1314:	59 d9       	rcall	.-3406   	; 0x5c8 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');
    1316:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    131a:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	ef 5d       	subi	r30, 0xDF	; 223
    1324:	fd 4f       	sbci	r31, 0xFD	; 253
    1326:	80 81       	ld	r24, Z
    1328:	91 81       	ldd	r25, Z+1	; 0x01
    132a:	b8 01       	movw	r22, r16
    132c:	98 d3       	rcall	.+1840   	; 0x1a5e <__divmodhi4>
					
					// 1번째 행 변경
					LcdMove(1,0);
    132e:	80 5d       	subi	r24, 0xD0	; 208
    1330:	4b d9       	rcall	.-3434   	; 0x5c8 <LcdPutchar>
    1332:	60 e0       	ldi	r22, 0x00	; 0
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	79 d9       	rcall	.-3342   	; 0x62a <LcdMove>
    1338:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    133c:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	ed 5d       	subi	r30, 0xDD	; 221
    1346:	fd 4f       	sbci	r31, 0xFD	; 253
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	b7 01       	movw	r22, r14
    134e:	87 d3       	rcall	.+1806   	; 0x1a5e <__divmodhi4>
    1350:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('m');
    1352:	86 0f       	add	r24, r22
    1354:	39 d9       	rcall	.-3470   	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    1356:	8d e6       	ldi	r24, 0x6D	; 109
    1358:	37 d9       	rcall	.-3474   	; 0x5c8 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    135a:	80 e2       	ldi	r24, 0x20	; 32
    135c:	35 d9       	rcall	.-3478   	; 0x5c8 <LcdPutchar>
    135e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1362:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	ed 5d       	subi	r30, 0xDD	; 221
    136c:	fd 4f       	sbci	r31, 0xFD	; 253
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	b7 01       	movw	r22, r14
    1374:	74 d3       	rcall	.+1768   	; 0x1a5e <__divmodhi4>
    1376:	be 01       	movw	r22, r28
    1378:	72 d3       	rcall	.+1764   	; 0x1a5e <__divmodhi4>
    137a:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    137c:	86 0f       	add	r24, r22
    137e:	24 d9       	rcall	.-3512   	; 0x5c8 <LcdPutchar>
    1380:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1384:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ed 5d       	subi	r30, 0xDD	; 221
    138e:	fd 4f       	sbci	r31, 0xFD	; 253
    1390:	80 81       	ld	r24, Z
    1392:	91 81       	ldd	r25, Z+1	; 0x01
    1394:	be 01       	movw	r22, r28
    1396:	63 d3       	rcall	.+1734   	; 0x1a5e <__divmodhi4>
    1398:	b8 01       	movw	r22, r16
    139a:	61 d3       	rcall	.+1730   	; 0x1a5e <__divmodhi4>
    139c:	80 e3       	ldi	r24, 0x30	; 48
    139e:	86 0f       	add	r24, r22
    13a0:	13 d9       	rcall	.-3546   	; 0x5c8 <LcdPutchar>
					LcdPutchar('.');
    13a2:	8e e2       	ldi	r24, 0x2E	; 46
    13a4:	11 d9       	rcall	.-3550   	; 0x5c8 <LcdPutchar>
    13a6:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    13aa:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	ed 5d       	subi	r30, 0xDD	; 221
    13b4:	fd 4f       	sbci	r31, 0xFD	; 253
    13b6:	80 81       	ld	r24, Z
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	b8 01       	movw	r22, r16
    13bc:	50 d3       	rcall	.+1696   	; 0x1a5e <__divmodhi4>
    13be:	80 5d       	subi	r24, 0xD0	; 208
    13c0:	03 d9       	rcall	.-3578   	; 0x5c8 <LcdPutchar>
    13c2:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <stopwatchDisplayIndex>
				}
				stopwatchDisplayIndex += 1;
    13c6:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <stopwatchDisplayIndex+0x1>
    13d0:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <stopwatchDisplayIndex>
    13d4:	83 c1       	rjmp	.+774    	; 0x16dc <set7SegmentStopwatch+0x588>
			}
			// 아래키 눌러서 stopwatchStopFlag = 1이 된 경우 즉, 스톱워치가 멈춘 경우
			else {
				// 기록된 시간이 3개 이상인 경우에만
				if(stopwatchDisplayIndex >= 2){				
    13d6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    13da:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    13de:	02 97       	sbiw	r24, 0x02	; 2
    13e0:	0c f4       	brge	.+2      	; 0x13e4 <set7SegmentStopwatch+0x290>
					LcdMove(0,0);
    13e2:	7c c1       	rjmp	.+760    	; 0x16dc <set7SegmentStopwatch+0x588>
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	80 e0       	ldi	r24, 0x00	; 0
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]/1000+'0');
    13e8:	20 d9       	rcall	.-3520   	; 0x62a <LcdMove>
    13ea:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    13ee:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	e1 5e       	subi	r30, 0xE1	; 225
    13f8:	fd 4f       	sbci	r31, 0xFD	; 253
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	0f 2e       	mov	r0, r31
    1400:	f8 ee       	ldi	r31, 0xE8	; 232
    1402:	ef 2e       	mov	r14, r31
    1404:	f3 e0       	ldi	r31, 0x03	; 3
    1406:	ff 2e       	mov	r15, r31
    1408:	f0 2d       	mov	r31, r0
    140a:	b7 01       	movw	r22, r14
    140c:	28 d3       	rcall	.+1616   	; 0x1a5e <__divmodhi4>
					LcdPutchar('m');
    140e:	80 e3       	ldi	r24, 0x30	; 48
    1410:	86 0f       	add	r24, r22
    1412:	da d8       	rcall	.-3660   	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    1414:	8d e6       	ldi	r24, 0x6D	; 109
    1416:	d8 d8       	rcall	.-3664   	; 0x5c8 <LcdPutchar>
    1418:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%1000/100+'0');
    141a:	d6 d8       	rcall	.-3668   	; 0x5c8 <LcdPutchar>
    141c:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1420:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	e1 5e       	subi	r30, 0xE1	; 225
    142a:	fd 4f       	sbci	r31, 0xFD	; 253
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	b7 01       	movw	r22, r14
    1432:	15 d3       	rcall	.+1578   	; 0x1a5e <__divmodhi4>
    1434:	04 e6       	ldi	r16, 0x64	; 100
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	b8 01       	movw	r22, r16
    143a:	11 d3       	rcall	.+1570   	; 0x1a5e <__divmodhi4>
    143c:	80 e3       	ldi	r24, 0x30	; 48
    143e:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%100/10+'0');
    1440:	c3 d8       	rcall	.-3706   	; 0x5c8 <LcdPutchar>
    1442:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1446:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	e1 5e       	subi	r30, 0xE1	; 225
    1450:	fd 4f       	sbci	r31, 0xFD	; 253
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	b8 01       	movw	r22, r16
    1458:	02 d3       	rcall	.+1540   	; 0x1a5e <__divmodhi4>
    145a:	ca e0       	ldi	r28, 0x0A	; 10
    145c:	d0 e0       	ldi	r29, 0x00	; 0
    145e:	be 01       	movw	r22, r28
    1460:	fe d2       	rcall	.+1532   	; 0x1a5e <__divmodhi4>
    1462:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('.');
    1464:	86 0f       	add	r24, r22
    1466:	b0 d8       	rcall	.-3744   	; 0x5c8 <LcdPutchar>
    1468:	8e e2       	ldi	r24, 0x2E	; 46
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%10+'0');
    146a:	ae d8       	rcall	.-3748   	; 0x5c8 <LcdPutchar>
    146c:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1470:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	e1 5e       	subi	r30, 0xE1	; 225
    147a:	fd 4f       	sbci	r31, 0xFD	; 253
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	be 01       	movw	r22, r28
    1482:	ed d2       	rcall	.+1498   	; 0x1a5e <__divmodhi4>
					
					// 1번째 행 변경
					LcdMove(1,0);
    1484:	80 5d       	subi	r24, 0xD0	; 208
    1486:	a0 d8       	rcall	.-3776   	; 0x5c8 <LcdPutchar>
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
    148c:	ce d8       	rcall	.-3684   	; 0x62a <LcdMove>
    148e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1492:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	ef 5d       	subi	r30, 0xDF	; 223
    149c:	fd 4f       	sbci	r31, 0xFD	; 253
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	b7 01       	movw	r22, r14
    14a4:	dc d2       	rcall	.+1464   	; 0x1a5e <__divmodhi4>
    14a6:	80 e3       	ldi	r24, 0x30	; 48
    14a8:	86 0f       	add	r24, r22
					LcdPutchar('m');
    14aa:	8e d8       	rcall	.-3812   	; 0x5c8 <LcdPutchar>
    14ac:	8d e6       	ldi	r24, 0x6D	; 109
    14ae:	8c d8       	rcall	.-3816   	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    14b0:	80 e2       	ldi	r24, 0x20	; 32
    14b2:	8a d8       	rcall	.-3820   	; 0x5c8 <LcdPutchar>
    14b4:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    14b8:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	ef 5d       	subi	r30, 0xDF	; 223
    14c2:	fd 4f       	sbci	r31, 0xFD	; 253
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	b7 01       	movw	r22, r14
    14ca:	c9 d2       	rcall	.+1426   	; 0x1a5e <__divmodhi4>
    14cc:	b8 01       	movw	r22, r16
    14ce:	c7 d2       	rcall	.+1422   	; 0x1a5e <__divmodhi4>
    14d0:	80 e3       	ldi	r24, 0x30	; 48
    14d2:	86 0f       	add	r24, r22
    14d4:	79 d8       	rcall	.-3854   	; 0x5c8 <LcdPutchar>
    14d6:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    14da:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	ef 5d       	subi	r30, 0xDF	; 223
    14e4:	fd 4f       	sbci	r31, 0xFD	; 253
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	b8 01       	movw	r22, r16
    14ec:	b8 d2       	rcall	.+1392   	; 0x1a5e <__divmodhi4>
    14ee:	be 01       	movw	r22, r28
    14f0:	b6 d2       	rcall	.+1388   	; 0x1a5e <__divmodhi4>
    14f2:	80 e3       	ldi	r24, 0x30	; 48
    14f4:	86 0f       	add	r24, r22
    14f6:	68 d8       	rcall	.-3888   	; 0x5c8 <LcdPutchar>
    14f8:	8e e2       	ldi	r24, 0x2E	; 46
    14fa:	66 d8       	rcall	.-3892   	; 0x5c8 <LcdPutchar>
    14fc:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1500:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
					LcdPutchar('.');
    1504:	ee 0f       	add	r30, r30
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');	
    1506:	ff 1f       	adc	r31, r31
    1508:	ef 5d       	subi	r30, 0xDF	; 223
    150a:	fd 4f       	sbci	r31, 0xFD	; 253
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	be 01       	movw	r22, r28
    1512:	a5 d2       	rcall	.+1354   	; 0x1a5e <__divmodhi4>
    1514:	80 5d       	subi	r24, 0xD0	; 208
    1516:	58 d8       	rcall	.-3920   	; 0x5c8 <LcdPutchar>
    1518:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    151c:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <stopwatchDisplayIndex+0x1>
					stopwatchDisplayIndex -= 1;
    1526:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <stopwatchDisplayIndex>
    152a:	d8 c0       	rjmp	.+432    	; 0x16dc <set7SegmentStopwatch+0x588>
    152c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <stopwatchStopFlag>
    1530:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <stopwatchStopFlag+0x1>
				}
			}
			break;
			
		case SW7:
			if(stopwatchStopFlag == 1) {	//스톱워치가 멈춘 경우		
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	09 f0       	breq	.+2      	; 0x153a <set7SegmentStopwatch+0x3e6>
    1538:	bb c0       	rjmp	.+374    	; 0x16b0 <set7SegmentStopwatch+0x55c>
    153a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    153e:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
				if(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1] != 0){
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	eb 5d       	subi	r30, 0xDB	; 219
    1548:	fd 4f       	sbci	r31, 0xFD	; 253
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	89 2b       	or	r24, r25
    1550:	09 f4       	brne	.+2      	; 0x1554 <set7SegmentStopwatch+0x400>
    1552:	c4 c0       	rjmp	.+392    	; 0x16dc <set7SegmentStopwatch+0x588>
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	68 d8       	rcall	.-3888   	; 0x62a <LcdMove>
					LcdMove(0,0);
    155a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    155e:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	ed 5d       	subi	r30, 0xDD	; 221
    1568:	fd 4f       	sbci	r31, 0xFD	; 253
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	0f 2e       	mov	r0, r31
    1570:	f8 ee       	ldi	r31, 0xE8	; 232
    1572:	ef 2e       	mov	r14, r31
    1574:	f3 e0       	ldi	r31, 0x03	; 3
    1576:	ff 2e       	mov	r15, r31
    1578:	f0 2d       	mov	r31, r0
    157a:	b7 01       	movw	r22, r14
    157c:	70 d2       	rcall	.+1248   	; 0x1a5e <__divmodhi4>
    157e:	80 e3       	ldi	r24, 0x30	; 48
    1580:	86 0f       	add	r24, r22
    1582:	22 d8       	rcall	.-4028   	; 0x5c8 <LcdPutchar>
    1584:	8d e6       	ldi	r24, 0x6D	; 109
    1586:	20 d8       	rcall	.-4032   	; 0x5c8 <LcdPutchar>
    1588:	80 e2       	ldi	r24, 0x20	; 32
    158a:	1e d8       	rcall	.-4036   	; 0x5c8 <LcdPutchar>
					LcdPutchar('m');
    158c:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1590:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
					LcdPutchar(' ');
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    1598:	ed 5d       	subi	r30, 0xDD	; 221
    159a:	fd 4f       	sbci	r31, 0xFD	; 253
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	b7 01       	movw	r22, r14
    15a2:	5d d2       	rcall	.+1210   	; 0x1a5e <__divmodhi4>
    15a4:	04 e6       	ldi	r16, 0x64	; 100
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	b8 01       	movw	r22, r16
    15aa:	59 d2       	rcall	.+1202   	; 0x1a5e <__divmodhi4>
    15ac:	80 e3       	ldi	r24, 0x30	; 48
    15ae:	86 0f       	add	r24, r22
    15b0:	0b d8       	rcall	.-4074   	; 0x5c8 <LcdPutchar>
    15b2:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    15b6:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    15ba:	ee 0f       	add	r30, r30
    15bc:	ff 1f       	adc	r31, r31
    15be:	ed 5d       	subi	r30, 0xDD	; 221
    15c0:	fd 4f       	sbci	r31, 0xFD	; 253
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	b8 01       	movw	r22, r16
    15c8:	4a d2       	rcall	.+1172   	; 0x1a5e <__divmodhi4>
    15ca:	ca e0       	ldi	r28, 0x0A	; 10
    15cc:	d0 e0       	ldi	r29, 0x00	; 0
    15ce:	be 01       	movw	r22, r28
    15d0:	46 d2       	rcall	.+1164   	; 0x1a5e <__divmodhi4>
    15d2:	80 e3       	ldi	r24, 0x30	; 48
    15d4:	86 0f       	add	r24, r22
    15d6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    15da:	8e e2       	ldi	r24, 0x2E	; 46
    15dc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    15e0:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    15e4:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    15e8:	ee 0f       	add	r30, r30
					LcdPutchar('.');
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ed 5d       	subi	r30, 0xDD	; 221
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    15ee:	fd 4f       	sbci	r31, 0xFD	; 253
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	be 01       	movw	r22, r28
    15f6:	33 d2       	rcall	.+1126   	; 0x1a5e <__divmodhi4>
    15f8:	80 5d       	subi	r24, 0xD0	; 208
    15fa:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	13 d8       	rcall	.-4058   	; 0x62a <LcdMove>
    1604:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1608:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    160c:	ee 0f       	add	r30, r30
					
					// 1번째 행 변경
					LcdMove(1,0);
    160e:	ff 1f       	adc	r31, r31
    1610:	eb 5d       	subi	r30, 0xDB	; 219
    1612:	fd 4f       	sbci	r31, 0xFD	; 253
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]/1000+'0');
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	b7 01       	movw	r22, r14
    161a:	21 d2       	rcall	.+1090   	; 0x1a5e <__divmodhi4>
    161c:	80 e3       	ldi	r24, 0x30	; 48
    161e:	86 0f       	add	r24, r22
    1620:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    1624:	8d e6       	ldi	r24, 0x6D	; 109
    1626:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    162a:	80 e2       	ldi	r24, 0x20	; 32
    162c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    1630:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1634:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
					LcdPutchar('m');
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
					LcdPutchar(' ');
    163c:	eb 5d       	subi	r30, 0xDB	; 219
    163e:	fd 4f       	sbci	r31, 0xFD	; 253
    1640:	80 81       	ld	r24, Z
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%1000/100+'0');
    1642:	91 81       	ldd	r25, Z+1	; 0x01
    1644:	b7 01       	movw	r22, r14
    1646:	0b d2       	rcall	.+1046   	; 0x1a5e <__divmodhi4>
    1648:	b8 01       	movw	r22, r16
    164a:	09 d2       	rcall	.+1042   	; 0x1a5e <__divmodhi4>
    164c:	80 e3       	ldi	r24, 0x30	; 48
    164e:	86 0f       	add	r24, r22
    1650:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    1654:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1658:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	eb 5d       	subi	r30, 0xDB	; 219
    1662:	fd 4f       	sbci	r31, 0xFD	; 253
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	b8 01       	movw	r22, r16
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%100/10+'0');
    166a:	f9 d1       	rcall	.+1010   	; 0x1a5e <__divmodhi4>
    166c:	be 01       	movw	r22, r28
    166e:	f7 d1       	rcall	.+1006   	; 0x1a5e <__divmodhi4>
    1670:	80 e3       	ldi	r24, 0x30	; 48
    1672:	86 0f       	add	r24, r22
    1674:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    1678:	8e e2       	ldi	r24, 0x2E	; 46
    167a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    167e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    1682:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	eb 5d       	subi	r30, 0xDB	; 219
    168c:	fd 4f       	sbci	r31, 0xFD	; 253
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
					LcdPutchar('.');
    1692:	be 01       	movw	r22, r28
    1694:	e4 d1       	rcall	.+968    	; 0x1a5e <__divmodhi4>
    1696:	80 5d       	subi	r24, 0xD0	; 208
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%10+'0');
    1698:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    169c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    16a0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <stopwatchDisplayIndex+0x1>
    16aa:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <stopwatchDisplayIndex>
    16ae:	16 c0       	rjmp	.+44     	; 0x16dc <set7SegmentStopwatch+0x588>
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <stopwatchStopFlag+0x1>
					stopwatchDisplayIndex += 1;
    16b8:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <stopwatchStopFlag>
    16bc:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <stopwatchDisplayIndex>
    16c0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <stopwatchDisplayIndex+0x1>
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <stopwatchDisplayIndex+0x1>
    16ca:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <stopwatchDisplayIndex>
				}
			}
			else {
				stopwatchStopFlag = 1;
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <set7SegmentStopwatch+0x588>
    16d0:	c1 31       	cpi	r28, 0x11	; 17
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <set7SegmentStopwatch+0x582>
    16d4:	80 ce       	rjmp	.-768    	; 0x13d6 <set7SegmentStopwatch+0x282>
    16d6:	c1 32       	cpi	r28, 0x21	; 33
				stopwatchDisplayIndex-=1;	
    16d8:	09 f4       	brne	.+2      	; 0x16dc <set7SegmentStopwatch+0x588>
    16da:	28 cf       	rjmp	.-432    	; 0x152c <set7SegmentStopwatch+0x3d8>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
	}
	
	switch(stopwatchKeyInput) {
    16ec:	08 95       	ret

000016ee <setTimer>:
static int m_second = 0;

// 7세그먼트 출력용 숫자
unsigned short segmentDisplayNumber = 0;

int setTimer(int* timerInitFlag) {
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ec 01       	movw	r28, r24
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customTimerSetInitFlag == 0){
    16f4:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <customTimerSetInitFlag>
    16f8:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <customTimerSetInitFlag+0x1>
    16fc:	89 2b       	or	r24, r25
    16fe:	a1 f4       	brne	.+40     	; 0x1728 <setTimer+0x3a>
		// 초기화면 세팅
		LcdMove(0,0);
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	0e 94 15 03 	call	0x62a	; 0x62a <LcdMove>
		LcdPuts("0m 00.0s     ");
    1708:	8f eb       	ldi	r24, 0xBF	; 191
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 07 03 	call	0x60e	; 0x60e <LcdPuts>
		LcdCommand(HOME);
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
		LcdCommand(CURSOR_ON);
    1716:	8e e0       	ldi	r24, 0x0E	; 14
    1718:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
		customTimerSetInitFlag = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	90 93 f8 09 	sts	0x09F8, r25	; 0x8009f8 <customTimerSetInitFlag+0x1>
    1724:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <customTimerSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
    1728:	0e 94 5d 02 	call	0x4ba	; 0x4ba <KeyInput>
	
	while(1) {
		switch(keyInput) {
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	fc 01       	movw	r30, r24
    1730:	71 97       	sbiw	r30, 0x11	; 17
    1732:	e4 37       	cpi	r30, 0x74	; 116
    1734:	f1 05       	cpc	r31, r1
    1736:	08 f0       	brcs	.+2      	; 0x173a <setTimer+0x4c>
    1738:	56 c1       	rjmp	.+684    	; 0x19e6 <setTimer+0x2f8>
    173a:	e2 5d       	subi	r30, 0xD2	; 210
    173c:	fe 4f       	sbci	r31, 0xFE	; 254
    173e:	a2 c1       	rjmp	.+836    	; 0x1a84 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
    1740:	81 e3       	ldi	r24, 0x31	; 49
    1742:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    1746:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    174a:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    1754:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 1;
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	fc 01       	movw	r30, r24
    175e:	e7 50       	subi	r30, 0x07	; 7
    1760:	f6 4f       	sbci	r31, 0xF6	; 246
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
				break;
    176a:	3d c1       	rjmp	.+634    	; 0x19e6 <setTimer+0x2f8>
			
			case SW1:				
				LcdPutchar('2');
    176c:	82 e3       	ldi	r24, 0x32	; 50
    176e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    1772:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    1776:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    1780:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 2;
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	fc 01       	movw	r30, r24
    178a:	e7 50       	subi	r30, 0x07	; 7
    178c:	f6 4f       	sbci	r31, 0xF6	; 246
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	80 83       	st	Z, r24
				break;
    1796:	27 c1       	rjmp	.+590    	; 0x19e6 <setTimer+0x2f8>
			
			case SW2:
				LcdPutchar('3');
    1798:	83 e3       	ldi	r24, 0x33	; 51
    179a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    179e:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    17a2:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    17ac:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 3;
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	fc 01       	movw	r30, r24
    17b6:	e7 50       	subi	r30, 0x07	; 7
    17b8:	f6 4f       	sbci	r31, 0xF6	; 246
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
				break;
    17c2:	11 c1       	rjmp	.+546    	; 0x19e6 <setTimer+0x2f8>
			
			case SW4:
				LcdPutchar('4');
    17c4:	84 e3       	ldi	r24, 0x34	; 52
    17c6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    17ca:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    17ce:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    17d8:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 4;
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	fc 01       	movw	r30, r24
    17e2:	e7 50       	subi	r30, 0x07	; 7
    17e4:	f6 4f       	sbci	r31, 0xF6	; 246
    17e6:	84 e0       	ldi	r24, 0x04	; 4
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	80 83       	st	Z, r24
				break;
    17ee:	fb c0       	rjmp	.+502    	; 0x19e6 <setTimer+0x2f8>
			
			case SW5:
				LcdPutchar('5');
    17f0:	85 e3       	ldi	r24, 0x35	; 53
    17f2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    17f6:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    17fa:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    1804:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 5;
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	fc 01       	movw	r30, r24
    180e:	e7 50       	subi	r30, 0x07	; 7
    1810:	f6 4f       	sbci	r31, 0xF6	; 246
    1812:	85 e0       	ldi	r24, 0x05	; 5
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
				break;
    181a:	e5 c0       	rjmp	.+458    	; 0x19e6 <setTimer+0x2f8>
			
			case SW6:
				LcdPutchar('6');
    181c:	86 e3       	ldi	r24, 0x36	; 54
    181e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    1822:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    1826:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    1830:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 6;
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	fc 01       	movw	r30, r24
    183a:	e7 50       	subi	r30, 0x07	; 7
    183c:	f6 4f       	sbci	r31, 0xF6	; 246
    183e:	86 e0       	ldi	r24, 0x06	; 6
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
				break;
    1846:	cf c0       	rjmp	.+414    	; 0x19e6 <setTimer+0x2f8>
			
			case SW8:
				LcdPutchar('7');
    1848:	87 e3       	ldi	r24, 0x37	; 55
    184a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    184e:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    1852:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    185c:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 7;
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	fc 01       	movw	r30, r24
    1866:	e7 50       	subi	r30, 0x07	; 7
    1868:	f6 4f       	sbci	r31, 0xF6	; 246
    186a:	87 e0       	ldi	r24, 0x07	; 7
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	80 83       	st	Z, r24
				break;
    1872:	b9 c0       	rjmp	.+370    	; 0x19e6 <setTimer+0x2f8>
			
			case SW9:
				LcdPutchar('8');
    1874:	88 e3       	ldi	r24, 0x38	; 56
    1876:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    187a:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    187e:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    1888:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 8;
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	fc 01       	movw	r30, r24
    1892:	e7 50       	subi	r30, 0x07	; 7
    1894:	f6 4f       	sbci	r31, 0xF6	; 246
    1896:	88 e0       	ldi	r24, 0x08	; 8
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	80 83       	st	Z, r24
				break;
    189e:	a3 c0       	rjmp	.+326    	; 0x19e6 <setTimer+0x2f8>
			
			case SW10:
				LcdPutchar('9');
    18a0:	89 e3       	ldi	r24, 0x39	; 57
    18a2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    18a6:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    18aa:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    18b4:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 9;
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	fc 01       	movw	r30, r24
    18be:	e7 50       	subi	r30, 0x07	; 7
    18c0:	f6 4f       	sbci	r31, 0xF6	; 246
    18c2:	89 e0       	ldi	r24, 0x09	; 9
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
				break;
    18ca:	8d c0       	rjmp	.+282    	; 0x19e6 <setTimer+0x2f8>
			
			case SW13:
				LcdPutchar('0');
    18cc:	80 e3       	ldi	r24, 0x30	; 48
    18ce:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    18d2:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    18d6:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    18e0:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	fc 01       	movw	r30, r24
    18ea:	e7 50       	subi	r30, 0x07	; 7
    18ec:	f6 4f       	sbci	r31, 0xF6	; 246
    18ee:	11 82       	std	Z+1, r1	; 0x01
    18f0:	10 82       	st	Z, r1
				break;
    18f2:	79 c0       	rjmp	.+242    	; 0x19e6 <setTimer+0x2f8>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
    18f4:	80 e1       	ldi	r24, 0x10	; 16
    18f6:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
				customTimerSettingIndex -= 1;
    18fa:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    18fe:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    1908:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	fc 01       	movw	r30, r24
    1912:	e7 50       	subi	r30, 0x07	; 7
    1914:	f6 4f       	sbci	r31, 0xF6	; 246
    1916:	11 82       	std	Z+1, r1	; 0x01
    1918:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    191a:	65 c0       	rjmp	.+202    	; 0x19e6 <setTimer+0x2f8>
				
			// 아래 키 입력되는 케이스
			case SW7:
				customTimerSettingIndex += 1;
    191c:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    1920:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <customTimerSettingIndex+0x1>
    192a:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <customTimerSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
    192e:	84 e1       	ldi	r24, 0x14	; 20
    1930:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
				customTimer[customTimerSettingIndex] = 0;
    1934:	e0 91 09 0a 	lds	r30, 0x0A09	; 0x800a09 <customTimerSettingIndex>
    1938:	f0 91 0a 0a 	lds	r31, 0x0A0A	; 0x800a0a <customTimerSettingIndex+0x1>
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	e7 50       	subi	r30, 0x07	; 7
    1942:	f6 4f       	sbci	r31, 0xF6	; 246
    1944:	11 82       	std	Z+1, r1	; 0x01
    1946:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    1948:	4e c0       	rjmp	.+156    	; 0x19e6 <setTimer+0x2f8>
		if(returnStatus == -1) {
			returnStatus = 2;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customTimerSetInitFlag = 0;
    194a:	10 92 f8 09 	sts	0x09F8, r1	; 0x8009f8 <customTimerSetInitFlag+0x1>
    194e:	10 92 f7 09 	sts	0x09F7, r1	; 0x8009f7 <customTimerSetInitFlag>
			LcdMove(0,0);
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	0e 94 15 03 	call	0x62a	; 0x62a <LcdMove>
			LcdPuts("                      ");
    195a:	84 e8       	ldi	r24, 0x84	; 132
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	0e 94 07 03 	call	0x60e	; 0x60e <LcdPuts>
			LcdCommand(CURSOR_OFF);
    1962:	8c e0       	ldi	r24, 0x0C	; 12
    1964:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
			minute = customTimer[0];
			second = customTimer[3] * 10 + customTimer[4];
			m_second = customTimer[6];
			
			// 7 세그먼트 계산
			ISeg7Init();
    1968:	0e 94 c1 01 	call	0x382	; 0x382 <ISeg7Init>
			segmentDisplayNumber = customTimer[1]*1000 + customTimer[4]*100 + customTimer[5]*10 + customTimer[7];
    196c:	e9 ef       	ldi	r30, 0xF9	; 249
    196e:	f9 e0       	ldi	r31, 0x09	; 9
    1970:	42 81       	ldd	r20, Z+2	; 0x02
    1972:	53 81       	ldd	r21, Z+3	; 0x03
    1974:	88 ee       	ldi	r24, 0xE8	; 232
    1976:	93 e0       	ldi	r25, 0x03	; 3
    1978:	48 9f       	mul	r20, r24
    197a:	90 01       	movw	r18, r0
    197c:	49 9f       	mul	r20, r25
    197e:	30 0d       	add	r19, r0
    1980:	58 9f       	mul	r21, r24
    1982:	30 0d       	add	r19, r0
    1984:	11 24       	eor	r1, r1
    1986:	40 85       	ldd	r20, Z+8	; 0x08
    1988:	51 85       	ldd	r21, Z+9	; 0x09
    198a:	64 e6       	ldi	r22, 0x64	; 100
    198c:	64 9f       	mul	r22, r20
    198e:	c0 01       	movw	r24, r0
    1990:	65 9f       	mul	r22, r21
    1992:	90 0d       	add	r25, r0
    1994:	11 24       	eor	r1, r1
    1996:	82 0f       	add	r24, r18
    1998:	93 1f       	adc	r25, r19
    199a:	22 85       	ldd	r18, Z+10	; 0x0a
    199c:	33 85       	ldd	r19, Z+11	; 0x0b
    199e:	b9 01       	movw	r22, r18
    19a0:	66 0f       	add	r22, r22
    19a2:	77 1f       	adc	r23, r23
    19a4:	a9 01       	movw	r20, r18
    19a6:	44 0f       	add	r20, r20
    19a8:	55 1f       	adc	r21, r21
    19aa:	44 0f       	add	r20, r20
    19ac:	55 1f       	adc	r21, r21
    19ae:	44 0f       	add	r20, r20
    19b0:	55 1f       	adc	r21, r21
    19b2:	9b 01       	movw	r18, r22
    19b4:	24 0f       	add	r18, r20
    19b6:	35 1f       	adc	r19, r21
    19b8:	28 0f       	add	r18, r24
    19ba:	39 1f       	adc	r19, r25
    19bc:	86 85       	ldd	r24, Z+14	; 0x0e
    19be:	97 85       	ldd	r25, Z+15	; 0x0f
    19c0:	82 0f       	add	r24, r18
    19c2:	93 1f       	adc	r25, r19
    19c4:	90 93 f6 09 	sts	0x09F6, r25	; 0x8009f6 <segmentDisplayNumber+0x1>
    19c8:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <segmentDisplayNumber>
			ISeg7DispNum(segmentDisplayNumber , 10);
    19cc:	6a e0       	ldi	r22, 0x0A	; 10
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <ISeg7DispNum>
				
			customTimerSettingIndex = 0;
    19d4:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <customTimerSettingIndex+0x1>
    19d8:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <customTimerSettingIndex>
			returnStatus = 0;
			*timerInitFlag = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	99 83       	std	Y+1, r25	; 0x01
    19e2:	88 83       	st	Y, r24
			break;
		}
		return returnStatus;
	}
}
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <setTimer+0x2fc>
			customTimerSettingIndex = 0;
			returnStatus = 0;
			*timerInitFlag = 1;
			break;
		}
		return returnStatus;
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	08 95       	ret

000019f0 <set7SegmentTimer>:

int set7SegmentTimer(int counter_m_seoncd) {	
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
	int nowDisplayNumber = segmentDisplayNumber - counter_m_seoncd;
    19f4:	c0 91 f5 09 	lds	r28, 0x09F5	; 0x8009f5 <segmentDisplayNumber>
    19f8:	d0 91 f6 09 	lds	r29, 0x09F6	; 0x8009f6 <segmentDisplayNumber+0x1>
    19fc:	c8 1b       	sub	r28, r24
    19fe:	d9 0b       	sbc	r29, r25
	//1분 00.0초
	//9분 99.9초
	if(nowDisplayNumber%1000 == 999 ){
    1a00:	ce 01       	movw	r24, r28
    1a02:	68 ee       	ldi	r22, 0xE8	; 232
    1a04:	73 e0       	ldi	r23, 0x03	; 3
    1a06:	2b d0       	rcall	.+86     	; 0x1a5e <__divmodhi4>
    1a08:	87 3e       	cpi	r24, 0xE7	; 231
    1a0a:	93 40       	sbci	r25, 0x03	; 3
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <set7SegmentTimer+0x22>
		nowDisplayNumber -= 400;
    1a0e:	c0 59       	subi	r28, 0x90	; 144
    1a10:	d1 40       	sbci	r29, 0x01	; 1
	}
	segmentDisplayNumber = nowDisplayNumber;
    1a12:	d0 93 f6 09 	sts	0x09F6, r29	; 0x8009f6 <segmentDisplayNumber+0x1>
    1a16:	c0 93 f5 09 	sts	0x09F5, r28	; 0x8009f5 <segmentDisplayNumber>
	ISeg7DispNum(nowDisplayNumber , 10);
    1a1a:	6a e0       	ldi	r22, 0x0A	; 10
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <ISeg7DispNum>
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	cd 2b       	or	r28, r29
    1a2a:	11 f4       	brne	.+4      	; 0x1a30 <set7SegmentTimer+0x40>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
		// do something
		
		return 0;	
	}
	return 1;
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <__udivmodhi4>:
    1a36:	aa 1b       	sub	r26, r26
    1a38:	bb 1b       	sub	r27, r27
    1a3a:	51 e1       	ldi	r21, 0x11	; 17
    1a3c:	07 c0       	rjmp	.+14     	; 0x1a4c <__udivmodhi4_ep>

00001a3e <__udivmodhi4_loop>:
    1a3e:	aa 1f       	adc	r26, r26
    1a40:	bb 1f       	adc	r27, r27
    1a42:	a6 17       	cp	r26, r22
    1a44:	b7 07       	cpc	r27, r23
    1a46:	10 f0       	brcs	.+4      	; 0x1a4c <__udivmodhi4_ep>
    1a48:	a6 1b       	sub	r26, r22
    1a4a:	b7 0b       	sbc	r27, r23

00001a4c <__udivmodhi4_ep>:
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	5a 95       	dec	r21
    1a52:	a9 f7       	brne	.-22     	; 0x1a3e <__udivmodhi4_loop>
    1a54:	80 95       	com	r24
    1a56:	90 95       	com	r25
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	08 95       	ret

00001a5e <__divmodhi4>:
    1a5e:	97 fb       	bst	r25, 7
    1a60:	07 2e       	mov	r0, r23
    1a62:	16 f4       	brtc	.+4      	; 0x1a68 <__divmodhi4+0xa>
    1a64:	00 94       	com	r0
    1a66:	06 d0       	rcall	.+12     	; 0x1a74 <__divmodhi4_neg1>
    1a68:	77 fd       	sbrc	r23, 7
    1a6a:	08 d0       	rcall	.+16     	; 0x1a7c <__divmodhi4_neg2>
    1a6c:	e4 df       	rcall	.-56     	; 0x1a36 <__udivmodhi4>
    1a6e:	07 fc       	sbrc	r0, 7
    1a70:	05 d0       	rcall	.+10     	; 0x1a7c <__divmodhi4_neg2>
    1a72:	3e f4       	brtc	.+14     	; 0x1a82 <__divmodhi4_exit>

00001a74 <__divmodhi4_neg1>:
    1a74:	90 95       	com	r25
    1a76:	81 95       	neg	r24
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	08 95       	ret

00001a7c <__divmodhi4_neg2>:
    1a7c:	70 95       	com	r23
    1a7e:	61 95       	neg	r22
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255

00001a82 <__divmodhi4_exit>:
    1a82:	08 95       	ret

00001a84 <__tablejump2__>:
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	00 24       	eor	r0, r0
    1a8a:	00 1c       	adc	r0, r0
    1a8c:	0b be       	out	0x3b, r0	; 59
    1a8e:	07 90       	elpm	r0, Z+
    1a90:	f6 91       	elpm	r31, Z
    1a92:	e0 2d       	mov	r30, r0
    1a94:	09 94       	ijmp

00001a96 <_exit>:
    1a96:	f8 94       	cli

00001a98 <__stop_program>:
    1a98:	ff cf       	rjmp	.-2      	; 0x1a98 <__stop_program>
