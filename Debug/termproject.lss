
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  000015be  00001652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000819  008001a8  008001a8  000016fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b48  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001031  00000000  00000000  00004460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014cf  00000000  00000000  00005491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00006960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000984  00000000  00000000  00006d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019ff  00000000  00000000  000076c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000090c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2d c1       	rjmp	.+602    	; 0x25c <__ctors_end>
       2:	00 00       	nop
       4:	49 c1       	rjmp	.+658    	; 0x298 <__bad_interrupt>
       6:	00 00       	nop
       8:	47 c1       	rjmp	.+654    	; 0x298 <__bad_interrupt>
       a:	00 00       	nop
       c:	45 c1       	rjmp	.+650    	; 0x298 <__bad_interrupt>
       e:	00 00       	nop
      10:	43 c1       	rjmp	.+646    	; 0x298 <__bad_interrupt>
      12:	00 00       	nop
      14:	41 c1       	rjmp	.+642    	; 0x298 <__bad_interrupt>
      16:	00 00       	nop
      18:	3f c1       	rjmp	.+638    	; 0x298 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3d c1       	rjmp	.+634    	; 0x298 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3b c1       	rjmp	.+630    	; 0x298 <__bad_interrupt>
      22:	00 00       	nop
      24:	aa c2       	rjmp	.+1364   	; 0x57a <__vector_9>
      26:	00 00       	nop
      28:	37 c1       	rjmp	.+622    	; 0x298 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	35 c1       	rjmp	.+618    	; 0x298 <__bad_interrupt>
      2e:	00 00       	nop
      30:	33 c1       	rjmp	.+614    	; 0x298 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c1       	rjmp	.+610    	; 0x298 <__bad_interrupt>
      36:	00 00       	nop
      38:	2f c1       	rjmp	.+606    	; 0x298 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	61 c1       	rjmp	.+706    	; 0x300 <__vector_15>
      3e:	00 00       	nop
      40:	2b c1       	rjmp	.+598    	; 0x298 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c1       	rjmp	.+594    	; 0x298 <__bad_interrupt>
      46:	00 00       	nop
      48:	27 c1       	rjmp	.+590    	; 0x298 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	25 c1       	rjmp	.+586    	; 0x298 <__bad_interrupt>
      4e:	00 00       	nop
      50:	23 c1       	rjmp	.+582    	; 0x298 <__bad_interrupt>
      52:	00 00       	nop
      54:	c8 c5       	rjmp	.+2960   	; 0xbe6 <__vector_21>
      56:	00 00       	nop
      58:	1f c1       	rjmp	.+574    	; 0x298 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1d c1       	rjmp	.+570    	; 0x298 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1b c1       	rjmp	.+566    	; 0x298 <__bad_interrupt>
      62:	00 00       	nop
      64:	19 c1       	rjmp	.+562    	; 0x298 <__bad_interrupt>
      66:	00 00       	nop
      68:	17 c1       	rjmp	.+558    	; 0x298 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	15 c1       	rjmp	.+554    	; 0x298 <__bad_interrupt>
      6e:	00 00       	nop
      70:	13 c1       	rjmp	.+550    	; 0x298 <__bad_interrupt>
      72:	00 00       	nop
      74:	11 c1       	rjmp	.+546    	; 0x298 <__bad_interrupt>
      76:	00 00       	nop
      78:	0f c1       	rjmp	.+542    	; 0x298 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0d c1       	rjmp	.+538    	; 0x298 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0b c1       	rjmp	.+534    	; 0x298 <__bad_interrupt>
      82:	00 00       	nop
      84:	09 c1       	rjmp	.+530    	; 0x298 <__bad_interrupt>
      86:	00 00       	nop
      88:	07 c1       	rjmp	.+526    	; 0x298 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	12 05       	cpc	r17, r2
      8e:	47 04       	cpc	r4, r7
      90:	23 05       	cpc	r18, r3
      92:	38 04       	cpc	r3, r8
      94:	23 05       	cpc	r18, r3
      96:	23 05       	cpc	r18, r3
      98:	23 05       	cpc	r18, r3
      9a:	29 04       	cpc	r2, r9
      9c:	23 05       	cpc	r18, r3
      9e:	23 05       	cpc	r18, r3
      a0:	23 05       	cpc	r18, r3
      a2:	23 05       	cpc	r18, r3
      a4:	23 05       	cpc	r18, r3
      a6:	23 05       	cpc	r18, r3
      a8:	23 05       	cpc	r18, r3
      aa:	23 05       	cpc	r18, r3
      ac:	23 05       	cpc	r18, r3
      ae:	74 04       	cpc	r7, r4
      b0:	23 05       	cpc	r18, r3
      b2:	65 04       	cpc	r6, r5
      b4:	23 05       	cpc	r18, r3
      b6:	23 05       	cpc	r18, r3
      b8:	23 05       	cpc	r18, r3
      ba:	56 04       	cpc	r5, r6
      bc:	23 05       	cpc	r18, r3
      be:	23 05       	cpc	r18, r3
      c0:	23 05       	cpc	r18, r3
      c2:	23 05       	cpc	r18, r3
      c4:	23 05       	cpc	r18, r3
      c6:	23 05       	cpc	r18, r3
      c8:	23 05       	cpc	r18, r3
      ca:	23 05       	cpc	r18, r3
      cc:	23 05       	cpc	r18, r3
      ce:	23 05       	cpc	r18, r3
      d0:	23 05       	cpc	r18, r3
      d2:	23 05       	cpc	r18, r3
      d4:	23 05       	cpc	r18, r3
      d6:	23 05       	cpc	r18, r3
      d8:	23 05       	cpc	r18, r3
      da:	23 05       	cpc	r18, r3
      dc:	23 05       	cpc	r18, r3
      de:	23 05       	cpc	r18, r3
      e0:	23 05       	cpc	r18, r3
      e2:	23 05       	cpc	r18, r3
      e4:	23 05       	cpc	r18, r3
      e6:	23 05       	cpc	r18, r3
      e8:	23 05       	cpc	r18, r3
      ea:	23 05       	cpc	r18, r3
      ec:	bd 04       	cpc	r11, r13
      ee:	a1 04       	cpc	r10, r1
      f0:	23 05       	cpc	r18, r3
      f2:	92 04       	cpc	r9, r2
      f4:	23 05       	cpc	r18, r3
      f6:	23 05       	cpc	r18, r3
      f8:	23 05       	cpc	r18, r3
      fa:	83 04       	cpc	r8, r3
      fc:	23 05       	cpc	r18, r3
      fe:	23 05       	cpc	r18, r3
     100:	23 05       	cpc	r18, r3
     102:	23 05       	cpc	r18, r3
     104:	23 05       	cpc	r18, r3
     106:	23 05       	cpc	r18, r3
     108:	23 05       	cpc	r18, r3
     10a:	23 05       	cpc	r18, r3
     10c:	23 05       	cpc	r18, r3
     10e:	23 05       	cpc	r18, r3
     110:	23 05       	cpc	r18, r3
     112:	23 05       	cpc	r18, r3
     114:	23 05       	cpc	r18, r3
     116:	23 05       	cpc	r18, r3
     118:	23 05       	cpc	r18, r3
     11a:	23 05       	cpc	r18, r3
     11c:	23 05       	cpc	r18, r3
     11e:	23 05       	cpc	r18, r3
     120:	23 05       	cpc	r18, r3
     122:	23 05       	cpc	r18, r3
     124:	23 05       	cpc	r18, r3
     126:	23 05       	cpc	r18, r3
     128:	23 05       	cpc	r18, r3
     12a:	23 05       	cpc	r18, r3
     12c:	23 05       	cpc	r18, r3
     12e:	23 05       	cpc	r18, r3
     130:	23 05       	cpc	r18, r3
     132:	23 05       	cpc	r18, r3
     134:	23 05       	cpc	r18, r3
     136:	23 05       	cpc	r18, r3
     138:	23 05       	cpc	r18, r3
     13a:	23 05       	cpc	r18, r3
     13c:	23 05       	cpc	r18, r3
     13e:	23 05       	cpc	r18, r3
     140:	23 05       	cpc	r18, r3
     142:	23 05       	cpc	r18, r3
     144:	23 05       	cpc	r18, r3
     146:	23 05       	cpc	r18, r3
     148:	23 05       	cpc	r18, r3
     14a:	23 05       	cpc	r18, r3
     14c:	23 05       	cpc	r18, r3
     14e:	23 05       	cpc	r18, r3
     150:	23 05       	cpc	r18, r3
     152:	23 05       	cpc	r18, r3
     154:	23 05       	cpc	r18, r3
     156:	23 05       	cpc	r18, r3
     158:	23 05       	cpc	r18, r3
     15a:	23 05       	cpc	r18, r3
     15c:	23 05       	cpc	r18, r3
     15e:	23 05       	cpc	r18, r3
     160:	23 05       	cpc	r18, r3
     162:	23 05       	cpc	r18, r3
     164:	23 05       	cpc	r18, r3
     166:	23 05       	cpc	r18, r3
     168:	23 05       	cpc	r18, r3
     16a:	23 05       	cpc	r18, r3
     16c:	23 05       	cpc	r18, r3
     16e:	23 05       	cpc	r18, r3
     170:	23 05       	cpc	r18, r3
     172:	b0 04       	cpc	r11, r0
     174:	0f 0a       	sbc	r0, r31
     176:	69 09       	sbc	r22, r9
     178:	85 0a       	sbc	r8, r21
     17a:	54 09       	sbc	r21, r4
     17c:	85 0a       	sbc	r8, r21
     17e:	85 0a       	sbc	r8, r21
     180:	85 0a       	sbc	r8, r21
     182:	3f 09       	sbc	r19, r15
     184:	85 0a       	sbc	r8, r21
     186:	85 0a       	sbc	r8, r21
     188:	85 0a       	sbc	r8, r21
     18a:	85 0a       	sbc	r8, r21
     18c:	85 0a       	sbc	r8, r21
     18e:	85 0a       	sbc	r8, r21
     190:	85 0a       	sbc	r8, r21
     192:	85 0a       	sbc	r8, r21
     194:	22 0a       	sbc	r2, r18
     196:	a8 09       	sbc	r26, r8
     198:	85 0a       	sbc	r8, r21
     19a:	93 09       	sbc	r25, r3
     19c:	85 0a       	sbc	r8, r21
     19e:	85 0a       	sbc	r8, r21
     1a0:	85 0a       	sbc	r8, r21
     1a2:	7e 09       	sbc	r23, r14
     1a4:	85 0a       	sbc	r8, r21
     1a6:	85 0a       	sbc	r8, r21
     1a8:	85 0a       	sbc	r8, r21
     1aa:	85 0a       	sbc	r8, r21
     1ac:	85 0a       	sbc	r8, r21
     1ae:	85 0a       	sbc	r8, r21
     1b0:	85 0a       	sbc	r8, r21
     1b2:	85 0a       	sbc	r8, r21
     1b4:	85 0a       	sbc	r8, r21
     1b6:	85 0a       	sbc	r8, r21
     1b8:	85 0a       	sbc	r8, r21
     1ba:	85 0a       	sbc	r8, r21
     1bc:	85 0a       	sbc	r8, r21
     1be:	85 0a       	sbc	r8, r21
     1c0:	85 0a       	sbc	r8, r21
     1c2:	85 0a       	sbc	r8, r21
     1c4:	85 0a       	sbc	r8, r21
     1c6:	85 0a       	sbc	r8, r21
     1c8:	85 0a       	sbc	r8, r21
     1ca:	85 0a       	sbc	r8, r21
     1cc:	85 0a       	sbc	r8, r21
     1ce:	85 0a       	sbc	r8, r21
     1d0:	85 0a       	sbc	r8, r21
     1d2:	85 0a       	sbc	r8, r21
     1d4:	39 0a       	sbc	r3, r25
     1d6:	e7 09       	sbc	r30, r7
     1d8:	85 0a       	sbc	r8, r21
     1da:	d2 09       	sbc	r29, r2
     1dc:	85 0a       	sbc	r8, r21
     1de:	85 0a       	sbc	r8, r21
     1e0:	85 0a       	sbc	r8, r21
     1e2:	bd 09       	sbc	r27, r13
     1e4:	85 0a       	sbc	r8, r21
     1e6:	85 0a       	sbc	r8, r21
     1e8:	85 0a       	sbc	r8, r21
     1ea:	85 0a       	sbc	r8, r21
     1ec:	85 0a       	sbc	r8, r21
     1ee:	85 0a       	sbc	r8, r21
     1f0:	85 0a       	sbc	r8, r21
     1f2:	85 0a       	sbc	r8, r21
     1f4:	85 0a       	sbc	r8, r21
     1f6:	85 0a       	sbc	r8, r21
     1f8:	85 0a       	sbc	r8, r21
     1fa:	85 0a       	sbc	r8, r21
     1fc:	85 0a       	sbc	r8, r21
     1fe:	85 0a       	sbc	r8, r21
     200:	85 0a       	sbc	r8, r21
     202:	85 0a       	sbc	r8, r21
     204:	85 0a       	sbc	r8, r21
     206:	85 0a       	sbc	r8, r21
     208:	85 0a       	sbc	r8, r21
     20a:	85 0a       	sbc	r8, r21
     20c:	85 0a       	sbc	r8, r21
     20e:	85 0a       	sbc	r8, r21
     210:	85 0a       	sbc	r8, r21
     212:	85 0a       	sbc	r8, r21
     214:	85 0a       	sbc	r8, r21
     216:	85 0a       	sbc	r8, r21
     218:	85 0a       	sbc	r8, r21
     21a:	85 0a       	sbc	r8, r21
     21c:	85 0a       	sbc	r8, r21
     21e:	85 0a       	sbc	r8, r21
     220:	85 0a       	sbc	r8, r21
     222:	85 0a       	sbc	r8, r21
     224:	85 0a       	sbc	r8, r21
     226:	85 0a       	sbc	r8, r21
     228:	85 0a       	sbc	r8, r21
     22a:	85 0a       	sbc	r8, r21
     22c:	85 0a       	sbc	r8, r21
     22e:	85 0a       	sbc	r8, r21
     230:	85 0a       	sbc	r8, r21
     232:	85 0a       	sbc	r8, r21
     234:	85 0a       	sbc	r8, r21
     236:	85 0a       	sbc	r8, r21
     238:	85 0a       	sbc	r8, r21
     23a:	85 0a       	sbc	r8, r21
     23c:	85 0a       	sbc	r8, r21
     23e:	85 0a       	sbc	r8, r21
     240:	85 0a       	sbc	r8, r21
     242:	85 0a       	sbc	r8, r21
     244:	85 0a       	sbc	r8, r21
     246:	85 0a       	sbc	r8, r21
     248:	85 0a       	sbc	r8, r21
     24a:	85 0a       	sbc	r8, r21
     24c:	85 0a       	sbc	r8, r21
     24e:	85 0a       	sbc	r8, r21
     250:	85 0a       	sbc	r8, r21
     252:	85 0a       	sbc	r8, r21
     254:	85 0a       	sbc	r8, r21
     256:	85 0a       	sbc	r8, r21
     258:	85 0a       	sbc	r8, r21
     25a:	fc 09       	sbc	r31, r12

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d0 e1       	ldi	r29, 0x10	; 16
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	ee eb       	ldi	r30, 0xBE	; 190
     270:	f5 e1       	ldi	r31, 0x15	; 21
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	a8 3a       	cpi	r26, 0xA8	; 168
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
     282:	29 e0       	ldi	r18, 0x09	; 9
     284:	a8 ea       	ldi	r26, 0xA8	; 168
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a1 3c       	cpi	r26, 0xC1	; 193
     28e:	b2 07       	cpc	r27, r18
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	bc d1       	rcall	.+888    	; 0x60c <main>
     294:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <_exit>

00000298 <__bad_interrupt>:
     298:	b3 ce       	rjmp	.-666    	; 0x0 <__vectors>

0000029a <ISeg7Init>:
= {16,16,16,16,16, 16};      //초기에 모두 끈다.


void ISeg7Init(void)
{
	SSEG_CONT  |=  CONT_MASK; //모든 7-세그먼트를 끈다.
     29a:	82 b3       	in	r24, 0x12	; 18
     29c:	80 6f       	ori	r24, 0xF0	; 240
     29e:	82 bb       	out	0x12, r24	; 18
	DDR_CONT   |=  CONT_MASK; //제어포트의 상위니블을
     2a0:	81 b3       	in	r24, 0x11	; 17
     2a2:	80 6f       	ori	r24, 0xF0	; 240
     2a4:	81 bb       	out	0x11, r24	; 17
	//출력으로 설정
	DDR_DATA = 0xFF;     //테이터포트는 모두 출력으로 설정
     2a6:	8f ef       	ldi	r24, 0xFF	; 255
     2a8:	8a bb       	out	0x1a, r24	; 26
	
	// 타이머/카운터0 비교 일치 인터럽트 설정
	// 타이머/카운터0는 CTC모드로 동작
	
	TCCR0 = (1<<WGM01);		 //CTC모드/타이머 정지, OC0핀 미사용
     2aa:	88 e0       	ldi	r24, 0x08	; 8
     2ac:	83 bf       	out	0x33, r24	; 51
	OCR0  = 78;				//5msec마다 비교일치 인터럽트 발생
     2ae:	8e e4       	ldi	r24, 0x4E	; 78
     2b0:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     2b2:	87 b7       	in	r24, 0x37	; 55
     2b4:	82 60       	ori	r24, 0x02	; 2
     2b6:	87 bf       	out	0x37, r24	; 55
	
	TCCR0 |= 0x07;		   //분주비 1024로 타이머 시작
     2b8:	83 b7       	in	r24, 0x33	; 51
     2ba:	87 60       	ori	r24, 0x07	; 7
     2bc:	83 bf       	out	0x33, r24	; 51
     2be:	08 95       	ret

000002c0 <ISeg7DispNum>:
}


void ISeg7DispNum(unsigned short num, unsigned short radix)
{
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	eb 01       	movw	r28, r22
	int  j;
	TIMSK &= ~(1<<OCIE0);	// 타이머0 비교일치 인터럽트 금지
     2c6:	27 b7       	in	r18, 0x37	; 55
     2c8:	2d 7f       	andi	r18, 0xFD	; 253
     2ca:	27 bf       	out	0x37, r18	; 55
	// cnumber[]에 수 0저장
	// cnumber[0] = 0
	// cnumber[1] ~ cnumber[4] = 16: 세그먼트를 끈다.
	
	
	cnumber[0] = 0;
     2cc:	e0 e0       	ldi	r30, 0x00	; 0
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	10 82       	st	Z, r1
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
     2d2:	20 e1       	ldi	r18, 0x10	; 16
     2d4:	21 83       	std	Z+1, r18	; 0x01
     2d6:	22 83       	std	Z+2, r18	; 0x02
     2d8:	23 83       	std	Z+3, r18	; 0x03
     2da:	24 83       	std	Z+4, r18	; 0x04
     2dc:	25 83       	std	Z+5, r18	; 0x05
     2de:	25 e0       	ldi	r18, 0x05	; 5
     2e0:	31 e0       	ldi	r19, 0x01	; 1
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
	{
		cnumber[j++] = num % radix;  //나머지
     2e2:	be 01       	movw	r22, r28
     2e4:	0e 94 ad 0a 	call	0x155a	; 0x155a <__udivmodhi4>
     2e8:	81 93       	st	Z+, r24
		num /= radix;                 // 몫
     2ea:	86 2f       	mov	r24, r22
     2ec:	97 2f       	mov	r25, r23
	
	cnumber[0] = 0;
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
     2ee:	e2 17       	cp	r30, r18
     2f0:	f3 07       	cpc	r31, r19
     2f2:	b9 f7       	brne	.-18     	; 0x2e2 <ISeg7DispNum+0x22>
	{
		cnumber[j++] = num % radix;  //나머지
		num /= radix;                 // 몫
	}
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     2f4:	87 b7       	in	r24, 0x37	; 55
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	87 bf       	out	0x37, r24	; 55
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <__vector_15>:
//====================================================
// ISR : 인터럽트가 걸릴 때마다 index가 가리키는 세그먼트에
//       데이터를 표시하고, index는 계속 회전이동하게 된다.
//=====================================================

ISR(TIMER0_COMP_vect){	//카운터/타이머0 비교일치 인터럽트
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	0b b6       	in	r0, 0x3b	; 59
     30c:	0f 92       	push	r0
     30e:	2f 93       	push	r18
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
	static int index = 0;
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
     318:	22 b3       	in	r18, 0x12	; 18
     31a:	80 e1       	ldi	r24, 0x10	; 16
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	00 90 a8 01 	lds	r0, 0x01A8	; 0x8001a8 <__data_end>
     322:	02 c0       	rjmp	.+4      	; 0x328 <__vector_15+0x28>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <__vector_15+0x24>
     32c:	80 95       	com	r24
     32e:	80 7f       	andi	r24, 0xF0	; 240
     330:	92 2f       	mov	r25, r18
     332:	9f 70       	andi	r25, 0x0F	; 15
     334:	89 2b       	or	r24, r25
     336:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
     338:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <__data_end>
     33c:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <__data_end+0x1>
     340:	e0 50       	subi	r30, 0x00	; 0
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	e0 81       	ld	r30, Z
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	e7 5a       	subi	r30, 0xA7	; 167
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	80 81       	ld	r24, Z
     34e:	80 95       	com	r24
     350:	8b bb       	out	0x1b, r24	; 27
	
	index++; //인덱스 이동
     352:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
     356:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__data_end+0x1>
     35a:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) { index = 0; }
     35c:	84 30       	cpi	r24, 0x04	; 4
     35e:	91 05       	cpc	r25, r1
     360:	29 f0       	breq	.+10     	; 0x36c <__vector_15+0x6c>
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];
	
	index++; //인덱스 이동
     362:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
     366:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
     36a:	04 c0       	rjmp	.+8      	; 0x374 <__vector_15+0x74>
	if(index == N_SEGMENT) { index = 0; }
     36c:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__data_end+0x1>
     370:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
}
     374:	ff 91       	pop	r31
     376:	ef 91       	pop	r30
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <key_scan>:
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     38c:	8e ef       	ldi	r24, 0xFE	; 254
     38e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
     392:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     394:	80 b1       	in	r24, 0x00	; 0
     396:	80 95       	com	r24
     398:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     39a:	69 f4       	brne	.+26     	; 0x3b6 <key_scan+0x2a>
     39c:	23 e0       	ldi	r18, 0x03	; 3
     39e:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     3a0:	e2 e6       	ldi	r30, 0x62	; 98
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	89 2f       	mov	r24, r25
     3a6:	80 95       	com	r24
     3a8:	80 83       	st	Z, r24
		asm("nop"::);
     3aa:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     3ac:	80 b1       	in	r24, 0x00	; 0
     3ae:	80 95       	com	r24
     3b0:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     3b2:	21 f0       	breq	.+8      	; 0x3bc <key_scan+0x30>
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <key_scan+0x2c>

static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
     3b6:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);
		
		in = (~KEY_IN) & 0xF0;
		if(in)			//have key input
		{
			in += out;	//make a code
     3b8:	89 0f       	add	r24, r25
			break;
     3ba:	08 95       	ret
		}
		out <<= 1;	//change to next scan-code
     3bc:	99 0f       	add	r25, r25
     3be:	21 50       	subi	r18, 0x01	; 1
static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
     3c0:	89 f7       	brne	.-30     	; 0x3a4 <key_scan+0x18>
		}
		out <<= 1;	//change to next scan-code
		
	}
	return in;	//return the value of scan-code
}
     3c2:	08 95       	ret

000003c4 <KeyInit>:
static unsigned char key_scan(void);
static unsigned char pin = NO_KEY;		//previous key value

void KeyInit()	//Initialize keypad
{
	KEY_OUT = 0xF0;		// Initialize output as 0
     3c4:	80 ef       	ldi	r24, 0xF0	; 240
     3c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;		//high-ranking nibble = input, low-ranking nibble = output
     3ca:	8f e0       	ldi	r24, 0x0F	; 15
     3cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3d0:	08 95       	ret

000003d2 <KeyInput>:
// value of return :
//                   !=0 => value of scan code
//					  =0 => no input
//==========================================================================
unsigned char KeyInput(void)
{
     3d2:	cf 93       	push	r28
	unsigned char in, in1;
	
	in = key_scan();	//read keys
     3d4:	db df       	rcall	.-74     	; 0x38c <key_scan>
     3d6:	c8 2f       	mov	r28, r24
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <KeyInput+0xa>
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
		if(in == in1) break;
		in = in1;
     3da:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3dc:	8f e3       	ldi	r24, 0x3F	; 63
     3de:	9c e9       	ldi	r25, 0x9C	; 156
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <KeyInput+0xe>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <KeyInput+0x14>
     3e6:	00 00       	nop
     3e8:	8f e3       	ldi	r24, 0x3F	; 63
     3ea:	9c e9       	ldi	r25, 0x9C	; 156
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <KeyInput+0x1a>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <KeyInput+0x20>
     3f2:	00 00       	nop
     3f4:	8f e3       	ldi	r24, 0x3F	; 63
     3f6:	9c e9       	ldi	r25, 0x9C	; 156
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <KeyInput+0x26>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <KeyInput+0x2c>
	
	in = key_scan();	//read keys
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
     3fe:	00 00       	nop
     400:	c5 df       	rcall	.-118    	; 0x38c <key_scan>
		if(in == in1) break;
     402:	c8 13       	cpse	r28, r24
     404:	ea cf       	rjmp	.-44     	; 0x3da <KeyInput+0x8>
     406:	98 2f       	mov	r25, r24
     408:	90 7f       	andi	r25, 0xF0	; 240
		in = in1;
	}
	
	if (!(in & 0xF0))	// No key was pushed
     40a:	19 f4       	brne	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		pin = 0;
     40c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <pin>
		return 0;
     410:	09 c0       	rjmp	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}
	if(pin == in)
     412:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <pin>
     416:	89 17       	cp	r24, r25
     418:	21 f0       	breq	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	return 0;
	
	pin = in;		//store key value
     41a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <pin>
	return in;		//return code
     41e:	98 2f       	mov	r25, r24
     420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		pin = 0;
		return 0;
	}
	if(pin == in)
	return 0;
     422:	90 e0       	ldi	r25, 0x00	; 0
	
	pin = in;		//store key value
	return in;		//return code
}
     424:	89 2f       	mov	r24, r25
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <write_command>:
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
	LcdPutchar(font[i]);
}
     42a:	98 2f       	mov	r25, r24
     42c:	90 7f       	andi	r25, 0xF0	; 240
     42e:	94 60       	ori	r25, 0x04	; 4
     430:	95 bb       	out	0x15, r25	; 21
     432:	9b 7f       	andi	r25, 0xFB	; 251
     434:	95 bb       	out	0x15, r25	; 21
     436:	20 e1       	ldi	r18, 0x10	; 16
     438:	82 02       	muls	r24, r18
     43a:	c0 01       	movw	r24, r0
     43c:	11 24       	eor	r1, r1
     43e:	84 60       	ori	r24, 0x04	; 4
     440:	85 bb       	out	0x15, r24	; 21
     442:	8b 7f       	andi	r24, 0xFB	; 251
     444:	85 bb       	out	0x15, r24	; 21
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	8a 95       	dec	r24
     44a:	f1 f7       	brne	.-4      	; 0x448 <write_command+0x1e>
     44c:	00 00       	nop
     44e:	08 95       	ret

00000450 <LcdCommand>:
     450:	cf 93       	push	r28
     452:	c8 2f       	mov	r28, r24
     454:	85 e3       	ldi	r24, 0x35	; 53
     456:	8a 95       	dec	r24
     458:	f1 f7       	brne	.-4      	; 0x456 <LcdCommand+0x6>
     45a:	00 00       	nop
     45c:	95 e3       	ldi	r25, 0x35	; 53
     45e:	9a 95       	dec	r25
     460:	f1 f7       	brne	.-4      	; 0x45e <LcdCommand+0xe>
     462:	00 00       	nop
     464:	85 e3       	ldi	r24, 0x35	; 53
     466:	8a 95       	dec	r24
     468:	f1 f7       	brne	.-4      	; 0x466 <LcdCommand+0x16>
     46a:	00 00       	nop
     46c:	95 e3       	ldi	r25, 0x35	; 53
     46e:	9a 95       	dec	r25
     470:	f1 f7       	brne	.-4      	; 0x46e <LcdCommand+0x1e>
     472:	00 00       	nop
     474:	85 e3       	ldi	r24, 0x35	; 53
     476:	8a 95       	dec	r24
     478:	f1 f7       	brne	.-4      	; 0x476 <LcdCommand+0x26>
     47a:	00 00       	nop
     47c:	8c 2f       	mov	r24, r28
     47e:	d5 df       	rcall	.-86     	; 0x42a <write_command>
     480:	c1 50       	subi	r28, 0x01	; 1
     482:	c2 30       	cpi	r28, 0x02	; 2
     484:	30 f4       	brcc	.+12     	; 0x492 <LcdCommand+0x42>
     486:	8f e3       	ldi	r24, 0x3F	; 63
     488:	9f e1       	ldi	r25, 0x1F	; 31
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <LcdCommand+0x3a>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <LcdCommand+0x40>
     490:	00 00       	nop
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <LcdInit>:
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	84 bb       	out	0x14, r24	; 20
     49a:	8f e5       	ldi	r24, 0x5F	; 95
     49c:	9a ee       	ldi	r25, 0xEA	; 234
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <LcdInit+0x8>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LcdInit+0xe>
     4a4:	00 00       	nop
     4a6:	80 e3       	ldi	r24, 0x30	; 48
     4a8:	c0 df       	rcall	.-128    	; 0x42a <write_command>
     4aa:	8f e1       	ldi	r24, 0x1F	; 31
     4ac:	9e e4       	ldi	r25, 0x4E	; 78
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <LcdInit+0x18>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LcdInit+0x1e>
     4b4:	00 00       	nop
     4b6:	80 e3       	ldi	r24, 0x30	; 48
     4b8:	b8 df       	rcall	.-144    	; 0x42a <write_command>
     4ba:	8f e9       	ldi	r24, 0x9F	; 159
     4bc:	9f e0       	ldi	r25, 0x0F	; 15
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <LcdInit+0x28>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <LcdInit+0x2e>
     4c4:	00 00       	nop
     4c6:	82 e3       	ldi	r24, 0x32	; 50
     4c8:	b0 df       	rcall	.-160    	; 0x42a <write_command>
     4ca:	88 e2       	ldi	r24, 0x28	; 40
     4cc:	c1 df       	rcall	.-126    	; 0x450 <LcdCommand>
     4ce:	88 e0       	ldi	r24, 0x08	; 8
     4d0:	bf df       	rcall	.-130    	; 0x450 <LcdCommand>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	bd df       	rcall	.-134    	; 0x450 <LcdCommand>
     4d6:	86 e0       	ldi	r24, 0x06	; 6
     4d8:	bb df       	rcall	.-138    	; 0x450 <LcdCommand>
     4da:	8c e0       	ldi	r24, 0x0C	; 12
     4dc:	b9 cf       	rjmp	.-142    	; 0x450 <LcdCommand>
     4de:	08 95       	ret

000004e0 <LcdPutchar>:
     4e0:	25 e3       	ldi	r18, 0x35	; 53
     4e2:	2a 95       	dec	r18
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LcdPutchar+0x2>
     4e6:	00 00       	nop
     4e8:	95 e3       	ldi	r25, 0x35	; 53
     4ea:	9a 95       	dec	r25
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <LcdPutchar+0xa>
     4ee:	00 00       	nop
     4f0:	25 e3       	ldi	r18, 0x35	; 53
     4f2:	2a 95       	dec	r18
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <LcdPutchar+0x12>
     4f6:	00 00       	nop
     4f8:	95 e3       	ldi	r25, 0x35	; 53
     4fa:	9a 95       	dec	r25
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <LcdPutchar+0x1a>
     4fe:	00 00       	nop
     500:	25 e3       	ldi	r18, 0x35	; 53
     502:	2a 95       	dec	r18
     504:	f1 f7       	brne	.-4      	; 0x502 <LcdPutchar+0x22>
     506:	00 00       	nop
     508:	98 2f       	mov	r25, r24
     50a:	90 7f       	andi	r25, 0xF0	; 240
     50c:	95 60       	ori	r25, 0x05	; 5
     50e:	95 bb       	out	0x15, r25	; 21
     510:	9b 7f       	andi	r25, 0xFB	; 251
     512:	95 bb       	out	0x15, r25	; 21
     514:	20 e1       	ldi	r18, 0x10	; 16
     516:	82 02       	muls	r24, r18
     518:	c0 01       	movw	r24, r0
     51a:	11 24       	eor	r1, r1
     51c:	85 60       	ori	r24, 0x05	; 5
     51e:	85 bb       	out	0x15, r24	; 21
     520:	8b 7f       	andi	r24, 0xFB	; 251
     522:	85 bb       	out	0x15, r24	; 21
     524:	08 95       	ret

00000526 <LcdPuts>:
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
     52c:	88 81       	ld	r24, Y
     52e:	88 23       	and	r24, r24
     530:	29 f0       	breq	.+10     	; 0x53c <LcdPuts+0x16>
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	d5 df       	rcall	.-86     	; 0x4e0 <LcdPutchar>
     536:	89 91       	ld	r24, Y+
     538:	81 11       	cpse	r24, r1
     53a:	fc cf       	rjmp	.-8      	; 0x534 <LcdPuts+0xe>
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <LcdMove>:
     542:	90 e4       	ldi	r25, 0x40	; 64
     544:	89 9f       	mul	r24, r25
     546:	60 0d       	add	r22, r0
     548:	11 24       	eor	r1, r1
     54a:	86 2f       	mov	r24, r22
     54c:	80 68       	ori	r24, 0x80	; 128
     54e:	80 cf       	rjmp	.-256    	; 0x450 <LcdCommand>
     550:	08 95       	ret

00000552 <msec_delay>:
}


void msec_delay(int n)
{
	for(; n>0; n--)		//1msec 시간지연 n회	반복
     552:	18 16       	cp	r1, r24
     554:	19 06       	cpc	r1, r25
     556:	44 f4       	brge	.+16     	; 0x568 <msec_delay+0x16>
     558:	ef e9       	ldi	r30, 0x9F	; 159
     55a:	ff e0       	ldi	r31, 0x0F	; 15
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <msec_delay+0xa>
     560:	00 c0       	rjmp	.+0      	; 0x562 <msec_delay+0x10>
     562:	00 00       	nop
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	c1 f7       	brne	.-16     	; 0x558 <msec_delay+0x6>
     568:	08 95       	ret

0000056a <ClockCounterInit>:
static int SegmentStopwatchInitFlag = 0;



void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
     56a:	85 b5       	in	r24, 0x25	; 37
     56c:	88 60       	ori	r24, 0x08	; 8
     56e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
     570:	84 e6       	ldi	r24, 0x64	; 100
     572:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
     574:	80 e8       	ldi	r24, 0x80	; 128
     576:	87 bf       	out	0x37, r24	; 55
     578:	08 95       	ret

0000057a <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	2f 93       	push	r18
     586:	5f 93       	push	r21
     588:	6f 93       	push	r22
     58a:	7f 93       	push	r23
     58c:	8f 93       	push	r24
     58e:	9f 93       	push	r25
     590:	af 93       	push	r26
     592:	bf 93       	push	r27
	ClockCounter_CNT++;
     594:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <ClockCounter_CNT>
     598:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <ClockCounter_CNT+0x1>
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <ClockCounter_CNT+0x1>
     5a2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
     5a6:	80 32       	cpi	r24, 0x20	; 32
     5a8:	2e e4       	ldi	r18, 0x4E	; 78
     5aa:	92 07       	cpc	r25, r18
     5ac:	71 f4       	brne	.+28     	; 0x5ca <__vector_9+0x50>
		ClockCounter_CNT=0;
     5ae:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <ClockCounter_CNT+0x1>
     5b2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <ClockCounter_CNT>
		ClockCounter_SECOND++;
     5b6:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <ClockCounter_SECOND>
     5ba:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <ClockCounter_SECOND+0x1>
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <ClockCounter_SECOND+0x1>
     5c4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <ClockCounter_SECOND>
     5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__vector_9+0x5a>
	}
	if(ClockCounter_CNT % 2000 == 0) {
     5ca:	60 ed       	ldi	r22, 0xD0	; 208
     5cc:	77 e0       	ldi	r23, 0x07	; 7
     5ce:	d9 d7       	rcall	.+4018   	; 0x1582 <__divmodhi4>
     5d0:	89 2b       	or	r24, r25
     5d2:	79 f4       	brne	.+30     	; 0x5f2 <__vector_9+0x78>
		ClockCounter_M_SECOND = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
     5dc:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ClockCounter_M_SECOND>
		ClockCounter_M_SECOND_ONLY_STOPWATCH += 1;
     5e0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
     5e4:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     5ee:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
	}
}
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	2f 91       	pop	r18
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <main>:

// 현재 메뉴를 알려주는 변수
static int status = 0;

int main(void) {
	LcdInit();
     60c:	44 df       	rcall	.-376    	; 0x496 <LcdInit>
	KeyInit();
     60e:	da de       	rcall	.-588    	; 0x3c4 <KeyInit>
	ClockCounterInit();
     610:	ac df       	rcall	.-168    	; 0x56a <ClockCounterInit>
	DDRB = 0x00;	//모터 돌아가지 않겠금
     612:	17 ba       	out	0x17, r1	; 23
	// 박가경's project <깜박 x 3>
	//startTermProject();
	initMenu();
     614:	2a d2       	rcall	.+1108   	; 0xa6a <initMenu>
     616:	78 94       	sei
		
		
	// 전역 인터럽트 허용
	sei();						
     618:	85 b5       	in	r24, 0x25	; 37
	TCCR2 |= 1<<CS21;
     61a:	82 60       	ori	r24, 0x02	; 2
     61c:	85 bd       	out	0x25, r24	; 37
     61e:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <SegmentStopwatchInitFlag>
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅 second parameter is not display flag 
		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag);
     622:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <SegmentStopwatchInitFlag+0x1>
     626:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <ClockCounter_SECOND>
     62a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <ClockCounter_SECOND+0x1>
     62e:	5c d0       	rcall	.+184    	; 0x6e8 <setClock>
     630:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SegmentTimerInitFlag>

		if(SegmentTimerInitFlag == 1) {
     634:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <SegmentTimerInitFlag+0x1>
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	49 f4       	brne	.+18     	; 0x64e <main+0x42>
			SegmentTimerInitFlag = set7SegmentTimer(ClockCounter_M_SECOND);
     63c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ClockCounter_M_SECOND>
     640:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
     644:	67 d7       	rcall	.+3790   	; 0x1514 <set7SegmentTimer>
     646:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <SegmentTimerInitFlag+0x1>
     64a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <SegmentTimerInitFlag>
     64e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <SegmentStopwatchInitFlag>
		}
		
		if(SegmentStopwatchInitFlag == 1) {
     652:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <SegmentStopwatchInitFlag+0x1>
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	81 f4       	brne	.+32     	; 0x67a <main+0x6e>
			SegmentStopwatchInitFlag = set7SegmentStopwatch(ClockCounter_M_SECOND, KeyInput());
     65a:	bb de       	rcall	.-650    	; 0x3d2 <KeyInput>
     65c:	68 2f       	mov	r22, r24
     65e:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ClockCounter_M_SECOND>
     662:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
     666:	24 d3       	rcall	.+1608   	; 0xcb0 <set7SegmentStopwatch>
     668:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <SegmentStopwatchInitFlag+0x1>
     66c:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <SegmentStopwatchInitFlag>
     670:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
			ClockCounter_M_SECOND = 0;
     674:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ClockCounter_M_SECOND>
     678:	d2 cf       	rjmp	.-92     	; 0x61e <main+0x12>
			continue;
     67a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <ClockCounter_SECOND+0x1>
		}
		
		// 무조건 1초 혹은 0.1초로 계산되게 하기위함
		ClockCounter_SECOND = 0;
     67e:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <ClockCounter_SECOND>
		ClockCounter_M_SECOND = 0;		
     682:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
     686:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ClockCounter_M_SECOND>
		// keypad input
		keyInput = KeyInput();
		
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
     68a:	a3 de       	rcall	.-698    	; 0x3d2 <KeyInput>
     68c:	fb d1       	rcall	.+1014   	; 0xa84 <setMenu>
     68e:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
     692:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	39 f4       	brne	.+14     	; 0x6a8 <main+0x9c>
			status = setCustomClock();	// Time setting(main.c 파일 안에 있음)	
     69a:	a2 d0       	rcall	.+324    	; 0x7e0 <setCustomClock>
     69c:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
     6a0:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
     6a4:	01 97       	sbiw	r24, 0x01	; 1
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     6a6:	c9 f3       	breq	.-14     	; 0x69a <main+0x8e>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     6a8:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <status>
     6ac:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <status+0x1>
     6b0:	02 97       	sbiw	r24, 0x02	; 2
     6b2:	49 f4       	brne	.+18     	; 0x6c6 <main+0xba>
			status = setTimer(&SegmentTimerInitFlag);
     6b4:	8f ea       	ldi	r24, 0xAF	; 175
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	be d5       	rcall	.+2940   	; 0x1236 <setTimer>
     6ba:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
     6be:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
     6c2:	02 97       	sbiw	r24, 0x02	; 2
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     6c4:	b9 f3       	breq	.-18     	; 0x6b4 <main+0xa8>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     6c6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <status>
     6ca:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <status+0x1>
     6ce:	03 97       	sbiw	r24, 0x03	; 3
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0xc8>
     6d2:	a5 cf       	rjmp	.-182    	; 0x61e <main+0x12>
			status = setStopwatch(&SegmentStopwatchInitFlag);
     6d4:	8d ea       	ldi	r24, 0xAD	; 173
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	a5 d2       	rcall	.+1354   	; 0xc24 <setStopwatch>
     6da:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
     6de:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
     6e2:	03 97       	sbiw	r24, 0x03	; 3
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     6e4:	b9 f3       	breq	.-18     	; 0x6d4 <main+0xc8>
     6e6:	9b cf       	rjmp	.-202    	; 0x61e <main+0x12>

000006e8 <setClock>:
     6e8:	cf 93       	push	r28
static int second = 0;
static int minute = 0;
static int hour = 0;


void setClock(int interruptSecond, int segmentStopwatchInitFlag) {
     6ea:	df 93       	push	r29
     6ec:	fb 01       	movw	r30, r22
	second += interruptSecond;
     6ee:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <second>
     6f2:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <second+0x1>
     6f6:	82 0f       	add	r24, r18
     6f8:	93 1f       	adc	r25, r19
	minute += second/60; 
     6fa:	2c e3       	ldi	r18, 0x3C	; 60
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	b9 01       	movw	r22, r18
     700:	40 d7       	rcall	.+3712   	; 0x1582 <__divmodhi4>
     702:	ec 01       	movw	r28, r24
     704:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
     708:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
     70c:	86 0f       	add	r24, r22
     70e:	97 1f       	adc	r25, r23
	hour += minute/60;
     710:	b9 01       	movw	r22, r18
     712:	37 d7       	rcall	.+3694   	; 0x1582 <__divmodhi4>
     714:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <hour>
     718:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <hour+0x1>
     71c:	62 0f       	add	r22, r18
     71e:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
     720:	d0 93 be 01 	sts	0x01BE, r29	; 0x8001be <second+0x1>
     724:	c0 93 bd 01 	sts	0x01BD, r28	; 0x8001bd <second>
	minute = minute%60;
     728:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <minute+0x1>
     72c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <minute>
	hour = hour%24;
     730:	cb 01       	movw	r24, r22
     732:	68 e1       	ldi	r22, 0x18	; 24
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	25 d7       	rcall	.+3658   	; 0x1582 <__divmodhi4>
     738:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <hour+0x1>
     73c:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <hour>
	// STOPWATCH에서 LCD 사용중인 경우 미노출
	if(segmentStopwatchInitFlag == 0) {
     740:	ef 2b       	or	r30, r31
     742:	09 f0       	breq	.+2      	; 0x746 <setClock+0x5e>
     744:	4a c0       	rjmp	.+148    	; 0x7da <setClock+0xf2>
		LcdMove(0,0);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	fb de       	rcall	.-522    	; 0x542 <LcdMove>
		LcdPutchar((hour/10%10) + '0');
     74c:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <hour>
     750:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <hour+0x1>
     754:	ca e0       	ldi	r28, 0x0A	; 10
     756:	d0 e0       	ldi	r29, 0x00	; 0
     758:	be 01       	movw	r22, r28
     75a:	13 d7       	rcall	.+3622   	; 0x1582 <__divmodhi4>
     75c:	cb 01       	movw	r24, r22
     75e:	be 01       	movw	r22, r28
     760:	10 d7       	rcall	.+3616   	; 0x1582 <__divmodhi4>
     762:	80 5d       	subi	r24, 0xD0	; 208
     764:	bd de       	rcall	.-646    	; 0x4e0 <LcdPutchar>
		LcdPutchar(hour%10 + '0');
     766:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <hour>
     76a:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <hour+0x1>
     76e:	be 01       	movw	r22, r28
     770:	08 d7       	rcall	.+3600   	; 0x1582 <__divmodhi4>
     772:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar('h');
     774:	b5 de       	rcall	.-662    	; 0x4e0 <LcdPutchar>
     776:	88 e6       	ldi	r24, 0x68	; 104
		
		LcdMove(0,4);
     778:	b3 de       	rcall	.-666    	; 0x4e0 <LcdPutchar>
     77a:	64 e0       	ldi	r22, 0x04	; 4
     77c:	80 e0       	ldi	r24, 0x00	; 0
		LcdPutchar((minute/10%10) + '0');
     77e:	e1 de       	rcall	.-574    	; 0x542 <LcdMove>
     780:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
     784:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
     788:	be 01       	movw	r22, r28
     78a:	fb d6       	rcall	.+3574   	; 0x1582 <__divmodhi4>
     78c:	cb 01       	movw	r24, r22
     78e:	be 01       	movw	r22, r28
     790:	f8 d6       	rcall	.+3568   	; 0x1582 <__divmodhi4>
		LcdPutchar(minute%10 + '0');
     792:	80 5d       	subi	r24, 0xD0	; 208
     794:	a5 de       	rcall	.-694    	; 0x4e0 <LcdPutchar>
     796:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
     79a:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
     79e:	be 01       	movw	r22, r28
     7a0:	f0 d6       	rcall	.+3552   	; 0x1582 <__divmodhi4>
		LcdPutchar('m');
     7a2:	80 5d       	subi	r24, 0xD0	; 208
     7a4:	9d de       	rcall	.-710    	; 0x4e0 <LcdPutchar>
		
		LcdMove(0,8);
     7a6:	8d e6       	ldi	r24, 0x6D	; 109
     7a8:	9b de       	rcall	.-714    	; 0x4e0 <LcdPutchar>
     7aa:	68 e0       	ldi	r22, 0x08	; 8
		LcdPutchar((second/10%10) + '0');
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	c9 de       	rcall	.-622    	; 0x542 <LcdMove>
     7b0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <second>
     7b4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <second+0x1>
     7b8:	be 01       	movw	r22, r28
     7ba:	e3 d6       	rcall	.+3526   	; 0x1582 <__divmodhi4>
     7bc:	cb 01       	movw	r24, r22
     7be:	be 01       	movw	r22, r28
     7c0:	e0 d6       	rcall	.+3520   	; 0x1582 <__divmodhi4>
     7c2:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar(second%10 + '0');
     7c4:	8d de       	rcall	.-742    	; 0x4e0 <LcdPutchar>
     7c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <second>
     7ca:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <second+0x1>
     7ce:	be 01       	movw	r22, r28
     7d0:	d8 d6       	rcall	.+3504   	; 0x1582 <__divmodhi4>
     7d2:	80 5d       	subi	r24, 0xD0	; 208
     7d4:	85 de       	rcall	.-758    	; 0x4e0 <LcdPutchar>
     7d6:	83 e7       	ldi	r24, 0x73	; 115
		LcdPutchar('s');
     7d8:	83 de       	rcall	.-762    	; 0x4e0 <LcdPutchar>
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
	}
}
     7de:	08 95       	ret

000007e0 <setCustomClock>:
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17

// 사용자에게 입력 받아 시계 세팅
int setCustomClock(int* ClockCounter_SECOND) {
     7e4:	cf 93       	push	r28
     7e6:	8c 01       	movw	r16, r24
	// -1 : 숫자가 눌린 경우(전) , 0: 선택이 눌린 경우, 1: 숫자가 눌린 경우(후), 위로 눌린 경우
	int returnStatus = -1;
	// 키를 입력받는 변수
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
     7e8:	f4 dd       	rcall	.-1048   	; 0x3d2 <KeyInput>
     7ea:	c8 2f       	mov	r28, r24
	
	LcdMove(1,customClockSettingIndex);
     7ec:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <customClockSettingIndex>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	a7 de       	rcall	.-690    	; 0x542 <LcdMove>
	while(1) {
		if(customClockSetInitFlag == 0){
     7f4:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <customClockSetInitFlag>
     7f8:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <customClockSetInitFlag+0x1>
     7fc:	89 2b       	or	r24, r25
     7fe:	79 f4       	brne	.+30     	; 0x81e <setCustomClock+0x3e>
			LcdMove(1,0);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	9e de       	rcall	.-708    	; 0x542 <LcdMove>
			LcdPuts("______");
     806:	8a e6       	ldi	r24, 0x6A	; 106
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	8d de       	rcall	.-742    	; 0x526 <LcdPuts>
			LcdMove(1,0);
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	98 de       	rcall	.-720    	; 0x542 <LcdMove>
     812:	81 e0       	ldi	r24, 0x01	; 1
			customClockSetInitFlag = 1;
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <customClockSetInitFlag+0x1>
     81a:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <customClockSetInitFlag>
		}
		
		if(keyInput == NO_KEY){
     81e:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
     820:	0d c0       	rjmp	.+26     	; 0x83c <setCustomClock+0x5c>
     822:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
     824:	15 de       	rcall	.-982    	; 0x450 <LcdCommand>
     826:	84 ef       	ldi	r24, 0xF4	; 244
     828:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
     82a:	93 de       	rcall	.-730    	; 0x552 <msec_delay>
     82c:	8c e0       	ldi	r24, 0x0C	; 12
     82e:	10 de       	rcall	.-992    	; 0x450 <LcdCommand>
			msec_delay(500);
     830:	84 ef       	ldi	r24, 0xF4	; 244
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	8e de       	rcall	.-740    	; 0x552 <msec_delay>
     836:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	13 c1       	rjmp	.+550    	; 0xa62 <setCustomClock+0x282>
     83c:	8c 2f       	mov	r24, r28
		}
		
		switch(keyInput) {
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	fc 01       	movw	r30, r24
     842:	71 97       	sbiw	r30, 0x11	; 17
     844:	e4 37       	cpi	r30, 0x74	; 116
     846:	f1 05       	cpc	r31, r1
     848:	08 f0       	brcs	.+2      	; 0x84c <setCustomClock+0x6c>
     84a:	fd c0       	rjmp	.+506    	; 0xa46 <setCustomClock+0x266>
     84c:	ea 5b       	subi	r30, 0xBA	; 186
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	ab c6       	rjmp	.+3414   	; 0x15a8 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     852:	81 e3       	ldi	r24, 0x31	; 49
     854:	45 de       	rcall	.-886    	; 0x4e0 <LcdPutchar>
     856:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
				customClock[customClockSettingIndex] = 1;
     85a:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     85e:	ee 0f       	add	r30, r30
     860:	ff 1f       	adc	r31, r31
     862:	ef 53       	subi	r30, 0x3F	; 63
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	91 83       	std	Z+1, r25	; 0x01
     86c:	80 83       	st	Z, r24
				break;
     86e:	ee c0       	rjmp	.+476    	; 0xa4c <setCustomClock+0x26c>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
     870:	82 e3       	ldi	r24, 0x32	; 50
     872:	36 de       	rcall	.-916    	; 0x4e0 <LcdPutchar>
     874:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
				customClock[customClockSettingIndex] = 2;
     878:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     87c:	ee 0f       	add	r30, r30
     87e:	ff 1f       	adc	r31, r31
     880:	ef 53       	subi	r30, 0x3F	; 63
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	91 83       	std	Z+1, r25	; 0x01
     88a:	80 83       	st	Z, r24
				break;
     88c:	df c0       	rjmp	.+446    	; 0xa4c <setCustomClock+0x26c>
			
			case SW2:
				LcdPutchar('3');
     88e:	83 e3       	ldi	r24, 0x33	; 51
     890:	27 de       	rcall	.-946    	; 0x4e0 <LcdPutchar>
     892:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
				customClock[customClockSettingIndex] = 3;
     896:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	ef 53       	subi	r30, 0x3F	; 63
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	91 83       	std	Z+1, r25	; 0x01
     8a8:	80 83       	st	Z, r24
				break;
     8aa:	d0 c0       	rjmp	.+416    	; 0xa4c <setCustomClock+0x26c>
			
			case SW4:
				LcdPutchar('4');
     8ac:	84 e3       	ldi	r24, 0x34	; 52
     8ae:	18 de       	rcall	.-976    	; 0x4e0 <LcdPutchar>
     8b0:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
				customClock[customClockSettingIndex] = 4;
     8b4:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	ef 53       	subi	r30, 0x3F	; 63
     8be:	fe 4f       	sbci	r31, 0xFE	; 254
     8c0:	84 e0       	ldi	r24, 0x04	; 4
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	91 83       	std	Z+1, r25	; 0x01
     8c6:	80 83       	st	Z, r24
				break;
     8c8:	c1 c0       	rjmp	.+386    	; 0xa4c <setCustomClock+0x26c>
			
			case SW5:
				LcdPutchar('5');
     8ca:	85 e3       	ldi	r24, 0x35	; 53
     8cc:	09 de       	rcall	.-1006   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 5;
     8ce:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     8d2:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	ef 53       	subi	r30, 0x3F	; 63
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	85 e0       	ldi	r24, 0x05	; 5
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
				break;
     8e6:	b2 c0       	rjmp	.+356    	; 0xa4c <setCustomClock+0x26c>
			
			case SW6:
				LcdPutchar('6');
     8e8:	86 e3       	ldi	r24, 0x36	; 54
     8ea:	fa dd       	rcall	.-1036   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 6;
     8ec:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     8f0:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	ef 53       	subi	r30, 0x3F	; 63
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	86 e0       	ldi	r24, 0x06	; 6
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	91 83       	std	Z+1, r25	; 0x01
     902:	80 83       	st	Z, r24
				break;
     904:	a3 c0       	rjmp	.+326    	; 0xa4c <setCustomClock+0x26c>
			
			case SW8:
				LcdPutchar('7');
     906:	87 e3       	ldi	r24, 0x37	; 55
     908:	eb dd       	rcall	.-1066   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 7;
     90a:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     90e:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	ef 53       	subi	r30, 0x3F	; 63
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	87 e0       	ldi	r24, 0x07	; 7
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24
				break;
			
			case SW9:
				LcdPutchar('8');
     922:	94 c0       	rjmp	.+296    	; 0xa4c <setCustomClock+0x26c>
     924:	88 e3       	ldi	r24, 0x38	; 56
     926:	dc dd       	rcall	.-1096   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 8;
     928:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     92c:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	ef 53       	subi	r30, 0x3F	; 63
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	91 83       	std	Z+1, r25	; 0x01
				break;
     93e:	80 83       	st	Z, r24
			
			case SW10:
				LcdPutchar('9');
     940:	85 c0       	rjmp	.+266    	; 0xa4c <setCustomClock+0x26c>
     942:	89 e3       	ldi	r24, 0x39	; 57
     944:	cd dd       	rcall	.-1126   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 9;
     946:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     94a:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ef 53       	subi	r30, 0x3F	; 63
     954:	fe 4f       	sbci	r31, 0xFE	; 254
     956:	89 e0       	ldi	r24, 0x09	; 9
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	91 83       	std	Z+1, r25	; 0x01
				break;
			
			case SW13:
				LcdPutchar('0');
     95c:	80 83       	st	Z, r24
     95e:	76 c0       	rjmp	.+236    	; 0xa4c <setCustomClock+0x26c>
     960:	80 e3       	ldi	r24, 0x30	; 48
				customClock[customClockSettingIndex] = 0;
     962:	be dd       	rcall	.-1156   	; 0x4e0 <LcdPutchar>
     964:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     968:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	ef 53       	subi	r30, 0x3F	; 63
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	11 82       	std	Z+1, r1	; 0x01
				break;
     976:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
     978:	69 c0       	rjmp	.+210    	; 0xa4c <setCustomClock+0x26c>
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	e1 dd       	rcall	.-1086   	; 0x542 <LcdMove>
				LcdPuts("1. SET          ");				
     980:	81 e7       	ldi	r24, 0x71	; 113
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	d0 dd       	rcall	.-1120   	; 0x526 <LcdPuts>
     986:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <customClockSettingIndex+0x1>
			customClockSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			customClockSettingIndex = 0;
     98a:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <customClockSettingIndex>
     98e:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
     990:	11 82       	std	Z+1, r1	; 0x01
     992:	10 82       	st	Z, r1
     994:	e1 ec       	ldi	r30, 0xC1	; 193
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customClock[0] * 10 + customClock[1];
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	80 81       	ld	r24, Z
     99a:	91 81       	ldd	r25, Z+1	; 0x01
     99c:	9c 01       	movw	r18, r24
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	22 81       	ldd	r18, Z+2	; 0x02
     9b4:	33 81       	ldd	r19, Z+3	; 0x03
     9b6:	82 0f       	add	r24, r18
     9b8:	93 1f       	adc	r25, r19
     9ba:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <hour+0x1>
     9be:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <hour>
     9c2:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customClock[2] * 10 + customClock[3];
     9c4:	95 81       	ldd	r25, Z+5	; 0x05
     9c6:	9c 01       	movw	r18, r24
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	82 0f       	add	r24, r18
     9da:	93 1f       	adc	r25, r19
     9dc:	26 81       	ldd	r18, Z+6	; 0x06
     9de:	37 81       	ldd	r19, Z+7	; 0x07
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <minute+0x1>
     9e8:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <minute>
     9ec:	80 85       	ldd	r24, Z+8	; 0x08
			second = customClock[4] * 10 + customClock[5];
     9ee:	91 85       	ldd	r25, Z+9	; 0x09
     9f0:	9c 01       	movw	r18, r24
     9f2:	22 0f       	add	r18, r18
     9f4:	33 1f       	adc	r19, r19
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	82 0f       	add	r24, r18
     a04:	93 1f       	adc	r25, r19
     a06:	22 85       	ldd	r18, Z+10	; 0x0a
     a08:	33 85       	ldd	r19, Z+11	; 0x0b
     a0a:	82 0f       	add	r24, r18
     a0c:	93 1f       	adc	r25, r19
     a0e:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <second+0x1>
     a12:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <second>
			customClockSetInitFlag = 0;
     a16:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <customClockSetInitFlag+0x1>
     a1a:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <customClockSetInitFlag>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --customClockSettingIndex);
     a22:	1f c0       	rjmp	.+62     	; 0xa62 <setCustomClock+0x282>
     a24:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <customClockSettingIndex>
     a28:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     a2c:	61 50       	subi	r22, 0x01	; 1
     a2e:	71 09       	sbc	r23, r1
     a30:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <customClockSettingIndex+0x1>
     a34:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <customClockSettingIndex>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	83 dd       	rcall	.-1274   	; 0x542 <LcdMove>
				LcdPutchar('_');
     a3c:	8f e5       	ldi	r24, 0x5F	; 95
     a3e:	50 dd       	rcall	.-1376   	; 0x4e0 <LcdPutchar>
     a40:	81 e0       	ldi	r24, 0x01	; 1
				returnStatus = 1;
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <setCustomClock+0x282>
     a46:	81 e0       	ldi	r24, 0x01	; 1
				break;
				
			default:
				returnStatus = 1;
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0b c0       	rjmp	.+22     	; 0xa62 <setCustomClock+0x282>
     a4c:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <customClockSettingIndex>
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			customClockSettingIndex++;
     a50:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <customClockSettingIndex+0x1>
     a5a:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <customClockSettingIndex>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 1;
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	cf 91       	pop	r28
			customClockSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	08 95       	ret

00000a6a <initMenu>:
static char str1[] = "00h 00m 00s";
static int nowMenuCursor = 0;
static int nowStatus = 1;

void initMenu() {
	LcdMove(0,0);
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	69 dd       	rcall	.-1326   	; 0x542 <LcdMove>
	LcdPuts(str1);
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	58 dd       	rcall	.-1360   	; 0x526 <LcdPuts>
	LcdMove(1,0);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	63 dd       	rcall	.-1338   	; 0x542 <LcdMove>
	LcdPuts(Set);
     a7c:	89 e4       	ldi	r24, 0x49	; 73
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	52 cd       	rjmp	.-1372   	; 0x526 <LcdPuts>
     a82:	08 95       	ret

00000a84 <setMenu>:
     a84:	cf 93       	push	r28
}



// MENU 세팅용 함수
int setMenu(char clickedButton) {
     a86:	df 93       	push	r29
     a88:	c8 2f       	mov	r28, r24
	LcdMove(1,0);			// 2행으로
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	59 dd       	rcall	.-1358   	; 0x542 <LcdMove>
	switch(clickedButton) {
     a90:	c1 32       	cpi	r28, 0x21	; 33
     a92:	09 f4       	brne	.+2      	; 0xa96 <setMenu+0x12>
     a94:	52 c0       	rjmp	.+164    	; 0xb3a <setMenu+0xb6>
     a96:	c1 34       	cpi	r28, 0x41	; 65
     a98:	09 f4       	brne	.+2      	; 0xa9c <setMenu+0x18>
     a9a:	9a c0       	rjmp	.+308    	; 0xbd0 <setMenu+0x14c>
     a9c:	c1 31       	cpi	r28, 0x11	; 17
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <setMenu+0x1e>
     aa0:	9c c0       	rjmp	.+312    	; 0xbda <setMenu+0x156>
		// up button clicked
		case SW3:
			if ( nowMenuCursor == 1) {
     aa2:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <nowMenuCursor>
     aa6:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <nowMenuCursor+0x1>
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	91 05       	cpc	r25, r1
     aae:	81 f4       	brne	.+32     	; 0xad0 <setMenu+0x4c>
				nowMenuCursor--;
     ab0:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <nowMenuCursor+0x1>
     ab4:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <nowMenuCursor>
				LcdPuts(Set);
     ab8:	89 e4       	ldi	r24, 0x49	; 73
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	34 dd       	rcall	.-1432   	; 0x526 <LcdPuts>
				nowStatus = 1;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     ac6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     aca:	c0 e0       	ldi	r28, 0x00	; 0
     acc:	d0 e0       	ldi	r29, 0x00	; 0
     ace:	87 c0       	rjmp	.+270    	; 0xbde <setMenu+0x15a>
			if ( nowMenuCursor == 1) {
				nowMenuCursor--;
				LcdPuts(Set);
				nowStatus = 1;
			}
			else if ( nowMenuCursor == 2) {
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	91 05       	cpc	r25, r1
     ad4:	91 f4       	brne	.+36     	; 0xafa <setMenu+0x76>
				nowMenuCursor--;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     ade:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Timer);
     ae2:	87 e3       	ldi	r24, 0x37	; 55
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	1f dd       	rcall	.-1474   	; 0x526 <LcdPuts>
				nowStatus = 2;
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     af0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     af4:	c0 e0       	ldi	r28, 0x00	; 0
     af6:	d0 e0       	ldi	r29, 0x00	; 0
     af8:	72 c0       	rjmp	.+228    	; 0xbde <setMenu+0x15a>
			else if ( nowMenuCursor == 2) {
				nowMenuCursor--;
				LcdPuts(Timer);
				nowStatus = 2;
			}
			else if ( nowMenuCursor == 3) {
     afa:	03 97       	sbiw	r24, 0x03	; 3
     afc:	91 f4       	brne	.+36     	; 0xb22 <setMenu+0x9e>
				nowMenuCursor--;
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     b06:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(StopWatch);
     b0a:	87 e2       	ldi	r24, 0x27	; 39
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0b dd       	rcall	.-1514   	; 0x526 <LcdPuts>
				nowStatus = 3;
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b18:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
     b1e:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor--;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else{
				LcdPuts(Set);
     b20:	5e c0       	rjmp	.+188    	; 0xbde <setMenu+0x15a>
     b22:	89 e4       	ldi	r24, 0x49	; 73
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	ff dc       	rcall	.-1538   	; 0x526 <LcdPuts>
				nowStatus = 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b30:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			return 0;
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	d0 e0       	ldi	r29, 0x00	; 0
     b38:	52 c0       	rjmp	.+164    	; 0xbde <setMenu+0x15a>
			break;
		
		
		// down button clicked
		case SW7:
			if ( nowMenuCursor == 0) {
     b3a:	c0 91 cf 01 	lds	r28, 0x01CF	; 0x8001cf <nowMenuCursor>
     b3e:	d0 91 d0 01 	lds	r29, 0x01D0	; 0x8001d0 <nowMenuCursor+0x1>
     b42:	20 97       	sbiw	r28, 0x00	; 0
     b44:	81 f4       	brne	.+32     	; 0xb66 <setMenu+0xe2>
				nowMenuCursor++;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     b4e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Timer);
     b52:	87 e3       	ldi	r24, 0x37	; 55
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	e7 dc       	rcall	.-1586   	; 0x526 <LcdPuts>
				nowStatus = 2;
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b60:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
     b64:	3c c0       	rjmp	.+120    	; 0xbde <setMenu+0x15a>
			}
			else if ( nowMenuCursor == 1) {
     b66:	c1 30       	cpi	r28, 0x01	; 1
     b68:	d1 05       	cpc	r29, r1
     b6a:	91 f4       	brne	.+36     	; 0xb90 <setMenu+0x10c>
				nowMenuCursor++;
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     b74:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(StopWatch);
     b78:	87 e2       	ldi	r24, 0x27	; 39
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	d4 dc       	rcall	.-1624   	; 0x526 <LcdPuts>
				nowStatus = 3;
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b86:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
     b8a:	c0 e0       	ldi	r28, 0x00	; 0
     b8c:	d0 e0       	ldi	r29, 0x00	; 0
     b8e:	27 c0       	rjmp	.+78     	; 0xbde <setMenu+0x15a>
			else if ( nowMenuCursor == 1) {
				nowMenuCursor++;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else if ( nowMenuCursor == 2) {
     b90:	22 97       	sbiw	r28, 0x02	; 2
     b92:	91 f4       	brne	.+36     	; 0xbb8 <setMenu+0x134>
				nowMenuCursor++;
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     b9c:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Alarm);
     ba0:	84 e1       	ldi	r24, 0x14	; 20
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	c0 dc       	rcall	.-1664   	; 0x526 <LcdPuts>
				nowStatus = 4;
     ba6:	84 e0       	ldi	r24, 0x04	; 4
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     bae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
     bb2:	c0 e0       	ldi	r28, 0x00	; 0
     bb4:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor++;
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			else{
				LcdPuts(Alarm);
     bb6:	13 c0       	rjmp	.+38     	; 0xbde <setMenu+0x15a>
     bb8:	84 e1       	ldi	r24, 0x14	; 20
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	b4 dc       	rcall	.-1688   	; 0x526 <LcdPuts>
				nowStatus = 4;
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     bc6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			return 0;
     bca:	c0 e0       	ldi	r28, 0x00	; 0
     bcc:	d0 e0       	ldi	r29, 0x00	; 0
     bce:	07 c0       	rjmp	.+14     	; 0xbde <setMenu+0x15a>
			break;
		
		
		// When select button clicked, 메인파일의 각 status에 해당하는 기능을 위한 while문을 돌림
		case SW11:
			return nowStatus;
     bd0:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <nowStatus>
     bd4:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <nowStatus+0x1>
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <setMenu+0x15a>
			break;
		
		default:
			return 0;
     bda:	c0 e0       	ldi	r28, 0x00	; 0
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
     bde:	ce 01       	movw	r24, r28
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <__vector_21>:

static int stopwatchDisplayIndex = 0;
static int n_enter = 0;


ISR(ADC_vect){
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	8f 93       	push	r24
     bf2:	9f 93       	push	r25
	// 타이머1A가 16비트 타이머라서 8비트로 전환시키기 위한 코드
	OCR1A = ADC>>2;	
     bf4:	84 b1       	in	r24, 0x04	; 4
     bf6:	95 b1       	in	r25, 0x05	; 5
     bf8:	96 95       	lsr	r25
     bfa:	87 95       	ror	r24
     bfc:	96 95       	lsr	r25
     bfe:	87 95       	ror	r24
     c00:	9b bd       	out	0x2b, r25	; 43
     c02:	8a bd       	out	0x2a, r24	; 42
	n_enter++;
     c04:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <n_enter>
     c08:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <n_enter+0x1>
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <n_enter+0x1>
     c12:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <n_enter>
	if(n_enter == 100000){
		DDRB |= 0<<PB5;	// 모터 정지
	}
}
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <setStopwatch>:

int setStopwatch(int* stopwatchInitFlag) {
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	8c 01       	movw	r16, r24
	int returnStatus = -1;
	// 처음 진입시에만 실행
	if(customStopwatchSetInitFlag == 0) {
     c2c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <customStopwatchSetInitFlag>
     c30:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <customStopwatchSetInitFlag+0x1>
     c34:	89 2b       	or	r24, r25
     c36:	71 f4       	brne	.+28     	; 0xc54 <setStopwatch+0x30>
		ISeg7Init();
     c38:	30 db       	rcall	.-2464   	; 0x29a <ISeg7Init>
		ISeg7DispNum(segmentStopwatchDisplayNumber , 10);
     c3a:	6a e0       	ldi	r22, 0x0A	; 10
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <segmentStopwatchDisplayNumber>
     c42:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <segmentStopwatchDisplayNumber+0x1>
     c46:	3c db       	rcall	.-2440   	; 0x2c0 <ISeg7DispNum>
		// 초기화면 세팅
		LcdMove(0,0);
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	7a dc       	rcall	.-1804   	; 0x542 <LcdMove>
		LcdPuts("0m 00.0s     ");
     c4e:	82 e8       	ldi	r24, 0x82	; 130
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	69 dc       	rcall	.-1838   	; 0x526 <LcdPuts>
     c54:	81 e0       	ldi	r24, 0x01	; 1
	}
	customStopwatchSetInitFlag = 1;
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <customStopwatchSetInitFlag+0x1>
     c5c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <customStopwatchSetInitFlag>

	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
     c60:	b8 db       	rcall	.-2192   	; 0x3d2 <KeyInput>
     c62:	c8 2f       	mov	r28, r24
     c64:	6a e0       	ldi	r22, 0x0A	; 10
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <segmentStopwatchDisplayNumber>
     c6c:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <segmentStopwatchDisplayNumber+0x1>
     c70:	27 db       	rcall	.-2482   	; 0x2c0 <ISeg7DispNum>
     c72:	c1 34       	cpi	r28, 0x41	; 65
	while(1) {
		switch(keyInput) {
     c74:	b9 f4       	brne	.+46     	; 0xca4 <setStopwatch+0x80>
     c76:	81 e0       	ldi	r24, 0x01	; 1
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	f8 01       	movw	r30, r16
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	80 83       	st	Z, r24
				returnStatus = 0;
				LcdMove(0,0);
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	5e dc       	rcall	.-1860   	; 0x542 <LcdMove>
				LcdPuts("              ");
     c86:	88 e9       	ldi	r24, 0x98	; 152
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	4d dc       	rcall	.-1894   	; 0x526 <LcdPuts>
				
				LcdMove(1,0);
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	58 dc       	rcall	.-1872   	; 0x542 <LcdMove>
				LcdPuts("              ");
     c92:	88 e9       	ldi	r24, 0x98	; 152
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	47 dc       	rcall	.-1906   	; 0x526 <LcdPuts>
     c98:	60 e0       	ldi	r22, 0x00	; 0
				
				LcdMove(0,0);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	52 dc       	rcall	.-1884   	; 0x542 <LcdMove>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
				returnStatus = 0;
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <setStopwatch+0x84>
     ca4:	83 e0       	ldi	r24, 0x03	; 3
				
				LcdMove(1,0);
				LcdPuts("              ");
				
				LcdMove(0,0);
				break;
     ca6:	90 e0       	ldi	r25, 0x00	; 0
			
			default:
				returnStatus = 3;
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
		if(returnStatus == 0) {
			
		}
		return returnStatus;
	}
}
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <set7SegmentStopwatch>:
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15

// 스톱워치 시간증가 시작 및 버튼 별 기능 구현
int set7SegmentStopwatch(int clock_counter, unsigned char stopwatchKeyInput) {
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	8c 01       	movw	r16, r24
     cbe:	c6 2f       	mov	r28, r22
	ISeg7Init();
     cc0:	ec da       	rcall	.-2600   	; 0x29a <ISeg7Init>
	if(stopwatchStopFlag == 0 ) {	
     cc2:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <stopwatchStopFlag>
     cc6:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <stopwatchStopFlag+0x1>
     cca:	89 2b       	or	r24, r25
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <set7SegmentStopwatch+0x20>
     cce:	a4 c2       	rjmp	.+1352   	; 0x1218 <__stack+0x119>
		int nowStopwatchDisplayNumber = segmentStopwatchDisplayNumber + clock_counter;
     cd0:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <segmentStopwatchDisplayNumber>
     cd4:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <segmentStopwatchDisplayNumber+0x1>
     cd8:	80 0f       	add	r24, r16
     cda:	91 1f       	adc	r25, r17
		if(nowStopwatchDisplayNumber == 600) {	
     cdc:	88 35       	cpi	r24, 0x58	; 88
     cde:	22 e0       	ldi	r18, 0x02	; 2
     ce0:	92 07       	cpc	r25, r18
     ce2:	11 f4       	brne	.+4      	; 0xce8 <set7SegmentStopwatch+0x38>
			nowStopwatchDisplayNumber += 400;	// 60초가 되면 1분으로 갱신
     ce4:	88 ee       	ldi	r24, 0xE8	; 232
     ce6:	93 e0       	ldi	r25, 0x03	; 3
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
     ce8:	90 93 aa 09 	sts	0x09AA, r25	; 0x8009aa <segmentStopwatchDisplayNumber+0x1>
     cec:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <segmentStopwatchDisplayNumber>
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
     cf0:	6a e0       	ldi	r22, 0x0A	; 10
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	e5 da       	rcall	.-2614   	; 0x2c0 <ISeg7DispNum>
	}
	
	switch(stopwatchKeyInput) {
     cf6:	c1 31       	cpi	r28, 0x11	; 17
     cf8:	21 f0       	breq	.+8      	; 0xd02 <set7SegmentStopwatch+0x52>
     cfa:	c1 32       	cpi	r28, 0x21	; 33
     cfc:	09 f4       	brne	.+2      	; 0xd00 <set7SegmentStopwatch+0x50>
     cfe:	c4 c1       	rjmp	.+904    	; 0x1088 <set7SegmentStopwatch+0x3d8>
     d00:	91 c2       	rjmp	.+1314   	; 0x1224 <__stack+0x125>
		case SW3:
			// 스톱워치 진행중 시간기록
			if(stopwatchStopFlag == 0){
     d02:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <stopwatchStopFlag>
     d06:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <stopwatchStopFlag+0x1>
     d0a:	89 2b       	or	r24, r25
     d0c:	09 f0       	breq	.+2      	; 0xd10 <set7SegmentStopwatch+0x60>
     d0e:	11 c1       	rjmp	.+546    	; 0xf32 <set7SegmentStopwatch+0x282>
			
				// 시간이 기록됨을 알리는 모터구동**************
				
				DDRB |= 1<<PB5; //PB5 = OC1A
     d10:	bd 9a       	sbi	0x17, 5	; 23
				
				//타이머/카운터1 위상정정 PWM 파형발생모드
				//타이머/카운터1 OCR1A와 하강일치 PWM 펄스 출력
				TCCR1A = 1<<WGM10 | 1<<COM1A1;
     d12:	81 e8       	ldi	r24, 0x81	; 129
     d14:	8f bd       	out	0x2f, r24	; 47
				
				// 타이머/카운터1 64분주
				// 주기 = 2*255(TOP)*64 / 16[MHz] = 2[ms]
				TCCR1B = 1<<CS11 | 1<<CS10;
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8e bd       	out	0x2e, r24	; 46
				
				// A/D변환 활성화
				// 연속모드 A/D 변환
				// A/D변환 인터럽트 활성화
				// 128분주 -> ADC클럭주파수 125[KHz] = 주기 8[us]
				ADCSRA = 1<<ADEN | 1<<ADFR | 1<<ADIE | 7;
     d1a:	8f ea       	ldi	r24, 0xAF	; 175
     d1c:	86 b9       	out	0x06, r24	; 6
				
				ADCSRA |= 1<<ADSC; // A/D변환 시작
     d1e:	36 9a       	sbi	0x06, 6	; 6
				//************************************************


				
				// 첫 or 두번째 입력
				if(stopwatchDisplayIndex<=1) {
     d20:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     d24:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	91 05       	cpc	r25, r1
     d2c:	0c f0       	brlt	.+2      	; 0xd30 <set7SegmentStopwatch+0x80>
					LcdMove(stopwatchDisplayIndex, 0);
     d2e:	52 c0       	rjmp	.+164    	; 0xdd4 <set7SegmentStopwatch+0x124>
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	07 dc       	rcall	.-2034   	; 0x542 <LcdMove>
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
     d34:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <segmentStopwatchDisplayNumber>
     d38:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <segmentStopwatchDisplayNumber+0x1>
     d3c:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     d40:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	e7 52       	subi	r30, 0x27	; 39
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	80 83       	st	Z, r24
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');	//1000으로 나누면 몫은 '분'에 해당하는 숫자만 남음.
     d50:	c8 ee       	ldi	r28, 0xE8	; 232
     d52:	d3 e0       	ldi	r29, 0x03	; 3
     d54:	be 01       	movw	r22, r28
     d56:	15 d4       	rcall	.+2090   	; 0x1582 <__divmodhi4>
     d58:	80 e3       	ldi	r24, 0x30	; 48
     d5a:	86 0f       	add	r24, r22
					LcdPutchar('m');
     d5c:	c1 db       	rcall	.-2174   	; 0x4e0 <LcdPutchar>
     d5e:	8d e6       	ldi	r24, 0x6D	; 109
     d60:	bf db       	rcall	.-2178   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     d62:	80 e2       	ldi	r24, 0x20	; 32
     d64:	bd db       	rcall	.-2182   	; 0x4e0 <LcdPutchar>
     d66:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');	//1000으로 나눈 나머지를 100으로 나누면 초의 십의자리에 해당하는 숫자만 남음
     d6a:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	e7 52       	subi	r30, 0x27	; 39
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	be 01       	movw	r22, r28
     d7c:	02 d4       	rcall	.+2052   	; 0x1582 <__divmodhi4>
     d7e:	c4 e6       	ldi	r28, 0x64	; 100
     d80:	d0 e0       	ldi	r29, 0x00	; 0
     d82:	be 01       	movw	r22, r28
     d84:	fe d3       	rcall	.+2044   	; 0x1582 <__divmodhi4>
     d86:	80 e3       	ldi	r24, 0x30	; 48
     d88:	86 0f       	add	r24, r22
     d8a:	aa db       	rcall	.-2220   	; 0x4e0 <LcdPutchar>
     d8c:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0'); //위와 비슷한 논리
     d90:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	e7 52       	subi	r30, 0x27	; 39
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	be 01       	movw	r22, r28
     da2:	ef d3       	rcall	.+2014   	; 0x1582 <__divmodhi4>
     da4:	ca e0       	ldi	r28, 0x0A	; 10
     da6:	d0 e0       	ldi	r29, 0x00	; 0
     da8:	be 01       	movw	r22, r28
     daa:	eb d3       	rcall	.+2006   	; 0x1582 <__divmodhi4>
     dac:	80 e3       	ldi	r24, 0x30	; 48
     dae:	86 0f       	add	r24, r22
     db0:	97 db       	rcall	.-2258   	; 0x4e0 <LcdPutchar>
					LcdPutchar('.');
     db2:	8e e2       	ldi	r24, 0x2E	; 46
     db4:	95 db       	rcall	.-2262   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0'); //위와 비슷한 논리
     db6:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     dba:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	e7 52       	subi	r30, 0x27	; 39
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	be 01       	movw	r22, r28
     dcc:	da d3       	rcall	.+1972   	; 0x1582 <__divmodhi4>
     dce:	80 5d       	subi	r24, 0xD0	; 208
     dd0:	87 db       	rcall	.-2290   	; 0x4e0 <LcdPutchar>
     dd2:	a5 c0       	rjmp	.+330    	; 0xf1e <set7SegmentStopwatch+0x26e>
     dd4:	88 0f       	add	r24, r24
				}
				// 세번째 이상 입력
				else {
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
     dd6:	99 1f       	adc	r25, r25
     dd8:	fc 01       	movw	r30, r24
     dda:	e7 52       	subi	r30, 0x27	; 39
     ddc:	fe 4f       	sbci	r31, 0xFE	; 254
     dde:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <segmentStopwatchDisplayNumber>
     de2:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <segmentStopwatchDisplayNumber+0x1>
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
     dea:	60 e0       	ldi	r22, 0x00	; 0
					// 0번째 행 변경
					LcdMove(0,0);
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	a9 db       	rcall	.-2222   	; 0x542 <LcdMove>
     df0:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
     df4:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	e9 52       	subi	r30, 0x29	; 41
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
     e04:	0f 2e       	mov	r0, r31
     e06:	f8 ee       	ldi	r31, 0xE8	; 232
     e08:	ef 2e       	mov	r14, r31
     e0a:	f3 e0       	ldi	r31, 0x03	; 3
     e0c:	ff 2e       	mov	r15, r31
     e0e:	f0 2d       	mov	r31, r0
     e10:	b7 01       	movw	r22, r14
     e12:	b7 d3       	rcall	.+1902   	; 0x1582 <__divmodhi4>
     e14:	80 e3       	ldi	r24, 0x30	; 48
     e16:	86 0f       	add	r24, r22
     e18:	63 db       	rcall	.-2362   	; 0x4e0 <LcdPutchar>
					LcdPutchar('m');
     e1a:	8d e6       	ldi	r24, 0x6D	; 109
     e1c:	61 db       	rcall	.-2366   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     e1e:	80 e2       	ldi	r24, 0x20	; 32
     e20:	5f db       	rcall	.-2370   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
     e22:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     e26:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	e9 52       	subi	r30, 0x29	; 41
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	b7 01       	movw	r22, r14
     e38:	a4 d3       	rcall	.+1864   	; 0x1582 <__divmodhi4>
     e3a:	c4 e6       	ldi	r28, 0x64	; 100
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
     e3e:	be 01       	movw	r22, r28
     e40:	a0 d3       	rcall	.+1856   	; 0x1582 <__divmodhi4>
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
     e46:	4c db       	rcall	.-2408   	; 0x4e0 <LcdPutchar>
     e48:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     e4c:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	e9 52       	subi	r30, 0x29	; 41
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	be 01       	movw	r22, r28
     e5e:	91 d3       	rcall	.+1826   	; 0x1582 <__divmodhi4>
     e60:	0a e0       	ldi	r16, 0x0A	; 10
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	b8 01       	movw	r22, r16
     e66:	8d d3       	rcall	.+1818   	; 0x1582 <__divmodhi4>
     e68:	80 e3       	ldi	r24, 0x30	; 48
     e6a:	86 0f       	add	r24, r22
					LcdPutchar('.');
     e6c:	39 db       	rcall	.-2446   	; 0x4e0 <LcdPutchar>
     e6e:	8e e2       	ldi	r24, 0x2E	; 46
     e70:	37 db       	rcall	.-2450   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');
     e72:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     e76:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	e9 52       	subi	r30, 0x29	; 41
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	b8 01       	movw	r22, r16
     e88:	7c d3       	rcall	.+1784   	; 0x1582 <__divmodhi4>
					
					// 1번째 행 변경
					LcdMove(1,0);
     e8a:	80 5d       	subi	r24, 0xD0	; 208
     e8c:	29 db       	rcall	.-2478   	; 0x4e0 <LcdPutchar>
     e8e:	60 e0       	ldi	r22, 0x00	; 0
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	57 db       	rcall	.-2386   	; 0x542 <LcdMove>
     e94:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     e98:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	e7 52       	subi	r30, 0x27	; 39
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	80 81       	ld	r24, Z
     ea6:	91 81       	ldd	r25, Z+1	; 0x01
     ea8:	b7 01       	movw	r22, r14
     eaa:	6b d3       	rcall	.+1750   	; 0x1582 <__divmodhi4>
     eac:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('m');
     eae:	86 0f       	add	r24, r22
     eb0:	17 db       	rcall	.-2514   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     eb2:	8d e6       	ldi	r24, 0x6D	; 109
     eb4:	15 db       	rcall	.-2518   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	13 db       	rcall	.-2522   	; 0x4e0 <LcdPutchar>
     eba:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     ebe:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	e7 52       	subi	r30, 0x27	; 39
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
     ece:	b7 01       	movw	r22, r14
     ed0:	58 d3       	rcall	.+1712   	; 0x1582 <__divmodhi4>
     ed2:	be 01       	movw	r22, r28
     ed4:	56 d3       	rcall	.+1708   	; 0x1582 <__divmodhi4>
     ed6:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
     ed8:	86 0f       	add	r24, r22
     eda:	02 db       	rcall	.-2556   	; 0x4e0 <LcdPutchar>
     edc:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     ee0:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	e7 52       	subi	r30, 0x27	; 39
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	be 01       	movw	r22, r28
     ef2:	47 d3       	rcall	.+1678   	; 0x1582 <__divmodhi4>
     ef4:	b8 01       	movw	r22, r16
     ef6:	45 d3       	rcall	.+1674   	; 0x1582 <__divmodhi4>
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	86 0f       	add	r24, r22
     efc:	f1 da       	rcall	.-2590   	; 0x4e0 <LcdPutchar>
					LcdPutchar('.');
     efe:	8e e2       	ldi	r24, 0x2E	; 46
     f00:	ef da       	rcall	.-2594   	; 0x4e0 <LcdPutchar>
     f02:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
     f06:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	e7 52       	subi	r30, 0x27	; 39
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	b8 01       	movw	r22, r16
     f18:	34 d3       	rcall	.+1640   	; 0x1582 <__divmodhi4>
     f1a:	80 5d       	subi	r24, 0xD0	; 208
     f1c:	e1 da       	rcall	.-2622   	; 0x4e0 <LcdPutchar>
     f1e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
				}
				stopwatchDisplayIndex += 1;
     f22:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     f2c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <stopwatchDisplayIndex>
     f30:	79 c1       	rjmp	.+754    	; 0x1224 <__stack+0x125>
			}
			// 아래키 눌러서 stopwatchStopFlag = 1이 된 경우 즉, 스톱워치가 멈춘 경우
			else {
				// 기록된 시간이 3개 이상인 경우에만
				if(stopwatchDisplayIndex >= 2){				
     f32:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     f36:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     f3a:	02 97       	sbiw	r24, 0x02	; 2
     f3c:	0c f4       	brge	.+2      	; 0xf40 <set7SegmentStopwatch+0x290>
					LcdMove(0,0);
     f3e:	72 c1       	rjmp	.+740    	; 0x1224 <__stack+0x125>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	80 e0       	ldi	r24, 0x00	; 0
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]/1000+'0');
     f44:	fe da       	rcall	.-2564   	; 0x542 <LcdMove>
     f46:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     f4a:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	eb 52       	subi	r30, 0x2B	; 43
     f54:	fe 4f       	sbci	r31, 0xFE	; 254
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	0f 2e       	mov	r0, r31
     f5c:	f8 ee       	ldi	r31, 0xE8	; 232
     f5e:	ef 2e       	mov	r14, r31
     f60:	f3 e0       	ldi	r31, 0x03	; 3
     f62:	ff 2e       	mov	r15, r31
     f64:	f0 2d       	mov	r31, r0
     f66:	b7 01       	movw	r22, r14
     f68:	0c d3       	rcall	.+1560   	; 0x1582 <__divmodhi4>
					LcdPutchar('m');
     f6a:	80 e3       	ldi	r24, 0x30	; 48
     f6c:	86 0f       	add	r24, r22
     f6e:	b8 da       	rcall	.-2704   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     f70:	8d e6       	ldi	r24, 0x6D	; 109
     f72:	b6 da       	rcall	.-2708   	; 0x4e0 <LcdPutchar>
     f74:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%1000/100+'0');
     f76:	b4 da       	rcall	.-2712   	; 0x4e0 <LcdPutchar>
     f78:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     f7c:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	eb 52       	subi	r30, 0x2B	; 43
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	b7 01       	movw	r22, r14
     f8e:	f9 d2       	rcall	.+1522   	; 0x1582 <__divmodhi4>
     f90:	04 e6       	ldi	r16, 0x64	; 100
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	b8 01       	movw	r22, r16
     f96:	f5 d2       	rcall	.+1514   	; 0x1582 <__divmodhi4>
     f98:	80 e3       	ldi	r24, 0x30	; 48
     f9a:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%100/10+'0');
     f9c:	a1 da       	rcall	.-2750   	; 0x4e0 <LcdPutchar>
     f9e:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     fa2:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	eb 52       	subi	r30, 0x2B	; 43
     fac:	fe 4f       	sbci	r31, 0xFE	; 254
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	b8 01       	movw	r22, r16
     fb4:	e6 d2       	rcall	.+1484   	; 0x1582 <__divmodhi4>
     fb6:	ca e0       	ldi	r28, 0x0A	; 10
     fb8:	d0 e0       	ldi	r29, 0x00	; 0
     fba:	be 01       	movw	r22, r28
     fbc:	e2 d2       	rcall	.+1476   	; 0x1582 <__divmodhi4>
     fbe:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('.');
     fc0:	86 0f       	add	r24, r22
     fc2:	8e da       	rcall	.-2788   	; 0x4e0 <LcdPutchar>
     fc4:	8e e2       	ldi	r24, 0x2E	; 46
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%10+'0');
     fc6:	8c da       	rcall	.-2792   	; 0x4e0 <LcdPutchar>
     fc8:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     fcc:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	eb 52       	subi	r30, 0x2B	; 43
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	be 01       	movw	r22, r28
     fde:	d1 d2       	rcall	.+1442   	; 0x1582 <__divmodhi4>
					
					// 1번째 행 변경
					LcdMove(1,0);
     fe0:	80 5d       	subi	r24, 0xD0	; 208
     fe2:	7e da       	rcall	.-2820   	; 0x4e0 <LcdPutchar>
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
     fe8:	ac da       	rcall	.-2728   	; 0x542 <LcdMove>
     fea:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
     fee:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	e9 52       	subi	r30, 0x29	; 41
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	b7 01       	movw	r22, r14
    1000:	c0 d2       	rcall	.+1408   	; 0x1582 <__divmodhi4>
    1002:	80 e3       	ldi	r24, 0x30	; 48
    1004:	86 0f       	add	r24, r22
					LcdPutchar('m');
    1006:	6c da       	rcall	.-2856   	; 0x4e0 <LcdPutchar>
    1008:	8d e6       	ldi	r24, 0x6D	; 109
    100a:	6a da       	rcall	.-2860   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	68 da       	rcall	.-2864   	; 0x4e0 <LcdPutchar>
    1010:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    1014:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    1018:	ee 0f       	add	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	e9 52       	subi	r30, 0x29	; 41
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	b7 01       	movw	r22, r14
    1026:	ad d2       	rcall	.+1370   	; 0x1582 <__divmodhi4>
    1028:	b8 01       	movw	r22, r16
    102a:	ab d2       	rcall	.+1366   	; 0x1582 <__divmodhi4>
    102c:	80 e3       	ldi	r24, 0x30	; 48
    102e:	86 0f       	add	r24, r22
    1030:	57 da       	rcall	.-2898   	; 0x4e0 <LcdPutchar>
    1032:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    1036:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	e9 52       	subi	r30, 0x29	; 41
    1040:	fe 4f       	sbci	r31, 0xFE	; 254
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	b8 01       	movw	r22, r16
    1048:	9c d2       	rcall	.+1336   	; 0x1582 <__divmodhi4>
    104a:	be 01       	movw	r22, r28
    104c:	9a d2       	rcall	.+1332   	; 0x1582 <__divmodhi4>
    104e:	80 e3       	ldi	r24, 0x30	; 48
    1050:	86 0f       	add	r24, r22
    1052:	46 da       	rcall	.-2932   	; 0x4e0 <LcdPutchar>
    1054:	8e e2       	ldi	r24, 0x2E	; 46
    1056:	44 da       	rcall	.-2936   	; 0x4e0 <LcdPutchar>
    1058:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    105c:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
					LcdPutchar('.');
    1060:	ee 0f       	add	r30, r30
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');	
    1062:	ff 1f       	adc	r31, r31
    1064:	e9 52       	subi	r30, 0x29	; 41
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	be 01       	movw	r22, r28
    106e:	89 d2       	rcall	.+1298   	; 0x1582 <__divmodhi4>
    1070:	80 5d       	subi	r24, 0xD0	; 208
    1072:	36 da       	rcall	.-2964   	; 0x4e0 <LcdPutchar>
    1074:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    1078:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    107c:	01 97       	sbiw	r24, 0x01	; 1
					stopwatchDisplayIndex -= 1;
    107e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    1082:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <stopwatchDisplayIndex>
    1086:	ce c0       	rjmp	.+412    	; 0x1224 <__stack+0x125>
    1088:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <stopwatchStopFlag>
    108c:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <stopwatchStopFlag+0x1>
				}
			}
			break;
			
		case SW7:
			if(stopwatchStopFlag == 1) {	//스톱워치가 멈춘 경우		
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	09 f0       	breq	.+2      	; 0x1096 <set7SegmentStopwatch+0x3e6>
    1094:	b1 c0       	rjmp	.+354    	; 0x11f8 <__stack+0xf9>
    1096:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
				if(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1] != 0){
    109a:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	e5 52       	subi	r30, 0x25	; 37
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	89 2b       	or	r24, r25
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <set7SegmentStopwatch+0x400>
					LcdMove(0,0);
    10ae:	ba c0       	rjmp	.+372    	; 0x1224 <__stack+0x125>
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	46 da       	rcall	.-2932   	; 0x542 <LcdMove>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    10b6:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    10ba:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	e7 52       	subi	r30, 0x27	; 39
    10c4:	fe 4f       	sbci	r31, 0xFE	; 254
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f8 ee       	ldi	r31, 0xE8	; 232
    10ce:	ef 2e       	mov	r14, r31
    10d0:	f3 e0       	ldi	r31, 0x03	; 3
    10d2:	ff 2e       	mov	r15, r31
    10d4:	f0 2d       	mov	r31, r0
    10d6:	b7 01       	movw	r22, r14
    10d8:	54 d2       	rcall	.+1192   	; 0x1582 <__divmodhi4>
    10da:	80 e3       	ldi	r24, 0x30	; 48
    10dc:	86 0f       	add	r24, r22
					LcdPutchar('m');
    10de:	00 da       	rcall	.-3072   	; 0x4e0 <LcdPutchar>
    10e0:	8d e6       	ldi	r24, 0x6D	; 109
					LcdPutchar(' ');
    10e2:	fe d9       	rcall	.-3076   	; 0x4e0 <LcdPutchar>
    10e4:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    10e6:	fc d9       	rcall	.-3080   	; 0x4e0 <LcdPutchar>
    10e8:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    10ec:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	e7 52       	subi	r30, 0x27	; 39
    10f6:	fe 4f       	sbci	r31, 0xFE	; 254
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	b7 01       	movw	r22, r14
    10fe:	41 d2       	rcall	.+1154   	; 0x1582 <__divmodhi4>
    1100:	04 e6       	ldi	r16, 0x64	; 100
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	b8 01       	movw	r22, r16
    1106:	3d d2       	rcall	.+1146   	; 0x1582 <__divmodhi4>
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    110c:	e9 d9       	rcall	.-3118   	; 0x4e0 <LcdPutchar>
    110e:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    1112:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	e7 52       	subi	r30, 0x27	; 39
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	b8 01       	movw	r22, r16
    1124:	2e d2       	rcall	.+1116   	; 0x1582 <__divmodhi4>
    1126:	ca e0       	ldi	r28, 0x0A	; 10
    1128:	d0 e0       	ldi	r29, 0x00	; 0
    112a:	be 01       	movw	r22, r28
    112c:	2a d2       	rcall	.+1108   	; 0x1582 <__divmodhi4>
    112e:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('.');
    1130:	86 0f       	add	r24, r22
    1132:	d6 d9       	rcall	.-3156   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    1134:	8e e2       	ldi	r24, 0x2E	; 46
    1136:	d4 d9       	rcall	.-3160   	; 0x4e0 <LcdPutchar>
    1138:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    113c:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	e7 52       	subi	r30, 0x27	; 39
    1146:	fe 4f       	sbci	r31, 0xFE	; 254
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	be 01       	movw	r22, r28
    114e:	19 d2       	rcall	.+1074   	; 0x1582 <__divmodhi4>
    1150:	80 5d       	subi	r24, 0xD0	; 208
					
					// 1번째 행 변경
					LcdMove(1,0);
    1152:	c6 d9       	rcall	.-3188   	; 0x4e0 <LcdPutchar>
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	f4 d9       	rcall	.-3096   	; 0x542 <LcdMove>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]/1000+'0');
    115a:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    115e:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    1162:	ee 0f       	add	r30, r30
    1164:	ff 1f       	adc	r31, r31
    1166:	e5 52       	subi	r30, 0x25	; 37
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	b7 01       	movw	r22, r14
    1170:	08 d2       	rcall	.+1040   	; 0x1582 <__divmodhi4>
    1172:	80 e3       	ldi	r24, 0x30	; 48
    1174:	86 0f       	add	r24, r22
    1176:	b4 d9       	rcall	.-3224   	; 0x4e0 <LcdPutchar>
    1178:	8d e6       	ldi	r24, 0x6D	; 109
    117a:	b2 d9       	rcall	.-3228   	; 0x4e0 <LcdPutchar>
					LcdPutchar('m');
    117c:	80 e2       	ldi	r24, 0x20	; 32
    117e:	b0 d9       	rcall	.-3232   	; 0x4e0 <LcdPutchar>
    1180:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
					LcdPutchar(' ');
    1184:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%1000/100+'0');
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	e5 52       	subi	r30, 0x25	; 37
    118e:	fe 4f       	sbci	r31, 0xFE	; 254
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	b7 01       	movw	r22, r14
    1196:	f5 d1       	rcall	.+1002   	; 0x1582 <__divmodhi4>
    1198:	b8 01       	movw	r22, r16
    119a:	f3 d1       	rcall	.+998    	; 0x1582 <__divmodhi4>
    119c:	80 e3       	ldi	r24, 0x30	; 48
    119e:	86 0f       	add	r24, r22
    11a0:	9f d9       	rcall	.-3266   	; 0x4e0 <LcdPutchar>
    11a2:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    11a6:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	e5 52       	subi	r30, 0x25	; 37
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%100/10+'0');
    11b0:	fe 4f       	sbci	r31, 0xFE	; 254
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	b8 01       	movw	r22, r16
    11b8:	e4 d1       	rcall	.+968    	; 0x1582 <__divmodhi4>
    11ba:	be 01       	movw	r22, r28
    11bc:	e2 d1       	rcall	.+964    	; 0x1582 <__divmodhi4>
    11be:	80 e3       	ldi	r24, 0x30	; 48
    11c0:	86 0f       	add	r24, r22
    11c2:	8e d9       	rcall	.-3300   	; 0x4e0 <LcdPutchar>
    11c4:	8e e2       	ldi	r24, 0x2E	; 46
    11c6:	8c d9       	rcall	.-3304   	; 0x4e0 <LcdPutchar>
    11c8:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    11cc:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	e5 52       	subi	r30, 0x25	; 37
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
					LcdPutchar('.');
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	be 01       	movw	r22, r28
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%10+'0');
    11de:	d1 d1       	rcall	.+930    	; 0x1582 <__divmodhi4>
    11e0:	80 5d       	subi	r24, 0xD0	; 208
    11e2:	7e d9       	rcall	.-3332   	; 0x4e0 <LcdPutchar>
    11e4:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    11e8:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    11f2:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <stopwatchDisplayIndex>
    11f6:	16 c0       	rjmp	.+44     	; 0x1224 <__stack+0x125>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <stopwatchStopFlag+0x1>
					stopwatchDisplayIndex += 1;
    1200:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <stopwatchStopFlag>
    1204:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchDisplayIndex>
    1208:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchDisplayIndex+0x1>
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <stopwatchDisplayIndex+0x1>
				}
			}
			else {
				stopwatchStopFlag = 1;
    1212:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <stopwatchDisplayIndex>
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <__stack+0x125>
    1218:	c1 31       	cpi	r28, 0x11	; 17
    121a:	09 f4       	brne	.+2      	; 0x121e <__stack+0x11f>
    121c:	8a ce       	rjmp	.-748    	; 0xf32 <set7SegmentStopwatch+0x282>
				stopwatchDisplayIndex-=1;	
    121e:	c1 32       	cpi	r28, 0x21	; 33
    1220:	09 f4       	brne	.+2      	; 0x1224 <__stack+0x125>
    1222:	32 cf       	rjmp	.-412    	; 0x1088 <set7SegmentStopwatch+0x3d8>
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
	}
	
	switch(stopwatchKeyInput) {
    1232:	ef 90       	pop	r14
    1234:	08 95       	ret

00001236 <setTimer>:
static int m_second = 0;

// 7세그먼트 출력용 숫자
unsigned short segmentDisplayNumber = 0;

int setTimer(int* timerInitFlag) {
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	ec 01       	movw	r28, r24
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customTimerSetInitFlag == 0){
    123c:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <customTimerSetInitFlag>
    1240:	90 91 ae 09 	lds	r25, 0x09AE	; 0x8009ae <customTimerSetInitFlag+0x1>
    1244:	89 2b       	or	r24, r25
    1246:	81 f4       	brne	.+32     	; 0x1268 <setTimer+0x32>
		// 초기화면 세팅
		LcdMove(0,0);
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	7a d9       	rcall	.-3340   	; 0x542 <LcdMove>
		LcdPuts("0m 00.0s     ");
    124e:	82 e8       	ldi	r24, 0x82	; 130
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	69 d9       	rcall	.-3374   	; 0x526 <LcdPuts>
		LcdCommand(HOME);
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	fc d8       	rcall	.-3592   	; 0x450 <LcdCommand>
		LcdCommand(CURSOR_ON);
    1258:	8e e0       	ldi	r24, 0x0E	; 14
    125a:	fa d8       	rcall	.-3596   	; 0x450 <LcdCommand>
    125c:	81 e0       	ldi	r24, 0x01	; 1
		customTimerSetInitFlag = 1;
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	90 93 ae 09 	sts	0x09AE, r25	; 0x8009ae <customTimerSetInitFlag+0x1>
    1264:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <customTimerSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
    1268:	b4 d8       	rcall	.-3736   	; 0x3d2 <KeyInput>
    126a:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		switch(keyInput) {
    126c:	fc 01       	movw	r30, r24
    126e:	71 97       	sbiw	r30, 0x11	; 17
    1270:	e4 37       	cpi	r30, 0x74	; 116
    1272:	f1 05       	cpc	r31, r1
    1274:	08 f0       	brcs	.+2      	; 0x1278 <setTimer+0x42>
    1276:	49 c1       	rjmp	.+658    	; 0x150a <setTimer+0x2d4>
    1278:	e6 54       	subi	r30, 0x46	; 70
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	95 c1       	rjmp	.+810    	; 0x15a8 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
    127e:	81 e3       	ldi	r24, 0x31	; 49
    1280:	2f d9       	rcall	.-3490   	; 0x4e0 <LcdPutchar>
    1282:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    1286:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    1290:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
    1294:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 1;
    1296:	99 1f       	adc	r25, r25
    1298:	fc 01       	movw	r30, r24
    129a:	e1 55       	subi	r30, 0x51	; 81
    129c:	f6 4f       	sbci	r31, 0xF6	; 246
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	91 83       	std	Z+1, r25	; 0x01
    12a4:	80 83       	st	Z, r24
				break;
    12a6:	31 c1       	rjmp	.+610    	; 0x150a <setTimer+0x2d4>
			
			case SW1:				
				LcdPutchar('2');
    12a8:	82 e3       	ldi	r24, 0x32	; 50
    12aa:	1a d9       	rcall	.-3532   	; 0x4e0 <LcdPutchar>
    12ac:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    12b0:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    12ba:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
    12be:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 2;
    12c0:	99 1f       	adc	r25, r25
    12c2:	fc 01       	movw	r30, r24
    12c4:	e1 55       	subi	r30, 0x51	; 81
    12c6:	f6 4f       	sbci	r31, 0xF6	; 246
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
				break;
    12d0:	1c c1       	rjmp	.+568    	; 0x150a <setTimer+0x2d4>
			
			case SW2:
				LcdPutchar('3');
    12d2:	83 e3       	ldi	r24, 0x33	; 51
    12d4:	05 d9       	rcall	.-3574   	; 0x4e0 <LcdPutchar>
    12d6:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    12da:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    12e4:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
    12e8:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 3;
    12ea:	99 1f       	adc	r25, r25
    12ec:	fc 01       	movw	r30, r24
    12ee:	e1 55       	subi	r30, 0x51	; 81
    12f0:	f6 4f       	sbci	r31, 0xF6	; 246
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
				break;
    12fa:	07 c1       	rjmp	.+526    	; 0x150a <setTimer+0x2d4>
			
			case SW4:
				LcdPutchar('4');
    12fc:	84 e3       	ldi	r24, 0x34	; 52
    12fe:	f0 d8       	rcall	.-3616   	; 0x4e0 <LcdPutchar>
    1300:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    1304:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    130e:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
    1312:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 4;
    1314:	99 1f       	adc	r25, r25
    1316:	fc 01       	movw	r30, r24
    1318:	e1 55       	subi	r30, 0x51	; 81
    131a:	f6 4f       	sbci	r31, 0xF6	; 246
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	80 83       	st	Z, r24
				break;
    1324:	f2 c0       	rjmp	.+484    	; 0x150a <setTimer+0x2d4>
			
			case SW5:
				LcdPutchar('5');
    1326:	85 e3       	ldi	r24, 0x35	; 53
    1328:	db d8       	rcall	.-3658   	; 0x4e0 <LcdPutchar>
    132a:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    132e:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    1338:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
    133c:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 5;
    133e:	99 1f       	adc	r25, r25
    1340:	fc 01       	movw	r30, r24
    1342:	e1 55       	subi	r30, 0x51	; 81
    1344:	f6 4f       	sbci	r31, 0xF6	; 246
    1346:	85 e0       	ldi	r24, 0x05	; 5
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
				break;
    134e:	dd c0       	rjmp	.+442    	; 0x150a <setTimer+0x2d4>
			
			case SW6:
				LcdPutchar('6');
    1350:	86 e3       	ldi	r24, 0x36	; 54
    1352:	c6 d8       	rcall	.-3700   	; 0x4e0 <LcdPutchar>
    1354:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    1358:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    1362:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 6;
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	fc 01       	movw	r30, r24
    136c:	e1 55       	subi	r30, 0x51	; 81
    136e:	f6 4f       	sbci	r31, 0xF6	; 246
    1370:	86 e0       	ldi	r24, 0x06	; 6
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	80 83       	st	Z, r24
				break;
    1378:	c8 c0       	rjmp	.+400    	; 0x150a <setTimer+0x2d4>
			
			case SW8:
				LcdPutchar('7');
    137a:	87 e3       	ldi	r24, 0x37	; 55
    137c:	b1 d8       	rcall	.-3742   	; 0x4e0 <LcdPutchar>
    137e:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    1382:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    138c:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 7;
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	fc 01       	movw	r30, r24
    1396:	e1 55       	subi	r30, 0x51	; 81
    1398:	f6 4f       	sbci	r31, 0xF6	; 246
    139a:	87 e0       	ldi	r24, 0x07	; 7
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
				break;
    13a2:	b3 c0       	rjmp	.+358    	; 0x150a <setTimer+0x2d4>
			
			case SW9:
				LcdPutchar('8');
    13a4:	88 e3       	ldi	r24, 0x38	; 56
    13a6:	9c d8       	rcall	.-3784   	; 0x4e0 <LcdPutchar>
    13a8:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    13ac:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    13b6:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 8;
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	fc 01       	movw	r30, r24
    13c0:	e1 55       	subi	r30, 0x51	; 81
    13c2:	f6 4f       	sbci	r31, 0xF6	; 246
    13c4:	88 e0       	ldi	r24, 0x08	; 8
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
				break;
    13cc:	9e c0       	rjmp	.+316    	; 0x150a <setTimer+0x2d4>
			
			case SW10:
				LcdPutchar('9');
    13ce:	89 e3       	ldi	r24, 0x39	; 57
    13d0:	87 d8       	rcall	.-3826   	; 0x4e0 <LcdPutchar>
    13d2:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    13d6:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    13e0:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 9;
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	fc 01       	movw	r30, r24
    13ea:	e1 55       	subi	r30, 0x51	; 81
    13ec:	f6 4f       	sbci	r31, 0xF6	; 246
    13ee:	89 e0       	ldi	r24, 0x09	; 9
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24
				break;
    13f6:	89 c0       	rjmp	.+274    	; 0x150a <setTimer+0x2d4>
			
			case SW13:
				LcdPutchar('0');
    13f8:	80 e3       	ldi	r24, 0x30	; 48
    13fa:	72 d8       	rcall	.-3868   	; 0x4e0 <LcdPutchar>
    13fc:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex++;
    1400:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    140a:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	fc 01       	movw	r30, r24
    1414:	e1 55       	subi	r30, 0x51	; 81
    1416:	f6 4f       	sbci	r31, 0xF6	; 246
    1418:	11 82       	std	Z+1, r1	; 0x01
    141a:	10 82       	st	Z, r1
				break;
    141c:	76 c0       	rjmp	.+236    	; 0x150a <setTimer+0x2d4>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
    141e:	80 e1       	ldi	r24, 0x10	; 16
    1420:	17 d8       	rcall	.-4050   	; 0x450 <LcdCommand>
    1422:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimerSettingIndex -= 1;
    1426:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    1430:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
    1434:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 0;
    1436:	99 1f       	adc	r25, r25
    1438:	fc 01       	movw	r30, r24
    143a:	e1 55       	subi	r30, 0x51	; 81
    143c:	f6 4f       	sbci	r31, 0xF6	; 246
    143e:	11 82       	std	Z+1, r1	; 0x01
    1440:	10 82       	st	Z, r1
    1442:	63 c0       	rjmp	.+198    	; 0x150a <setTimer+0x2d4>
				returnStatus = 2;
				break;
    1444:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				
			// 아래 키 입력되는 케이스
			case SW7:
				customTimerSettingIndex += 1;
    1448:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <customTimerSettingIndex+0x1>
    1452:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <customTimerSettingIndex>
    1456:	84 e1       	ldi	r24, 0x14	; 20
				LcdCommand(CURSOR_RSHIFT);
    1458:	0e 94 28 02 	call	0x450	; 0x450 <LcdCommand>
    145c:	e0 91 bf 09 	lds	r30, 0x09BF	; 0x8009bf <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    1460:	f0 91 c0 09 	lds	r31, 0x09C0	; 0x8009c0 <customTimerSettingIndex+0x1>
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	e1 55       	subi	r30, 0x51	; 81
    146a:	f6 4f       	sbci	r31, 0xF6	; 246
    146c:	11 82       	std	Z+1, r1	; 0x01
				returnStatus = 2;
				break;
    146e:	10 82       	st	Z, r1
		if(returnStatus == -1) {
			returnStatus = 2;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customTimerSetInitFlag = 0;
    1470:	4c c0       	rjmp	.+152    	; 0x150a <setTimer+0x2d4>
    1472:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <customTimerSetInitFlag+0x1>
    1476:	10 92 ad 09 	sts	0x09AD, r1	; 0x8009ad <customTimerSetInitFlag>
			LcdMove(0,0);
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	61 d8       	rcall	.-3902   	; 0x542 <LcdMove>
			LcdPuts("                      ");
    1480:	80 e9       	ldi	r24, 0x90	; 144
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	50 d8       	rcall	.-3936   	; 0x526 <LcdPuts>
    1486:	8c e0       	ldi	r24, 0x0C	; 12
			LcdCommand(CURSOR_OFF);
    1488:	0e 94 28 02 	call	0x450	; 0x450 <LcdCommand>
    148c:	0e 94 4d 01 	call	0x29a	; 0x29a <ISeg7Init>
			minute = customTimer[0];
			second = customTimer[3] * 10 + customTimer[4];
			m_second = customTimer[6];
			
			// 7 세그먼트 계산
			ISeg7Init();
    1490:	ef ea       	ldi	r30, 0xAF	; 175
			segmentDisplayNumber = customTimer[1]*1000 + customTimer[4]*100 + customTimer[5]*10 + customTimer[7];
    1492:	f9 e0       	ldi	r31, 0x09	; 9
    1494:	42 81       	ldd	r20, Z+2	; 0x02
    1496:	53 81       	ldd	r21, Z+3	; 0x03
    1498:	88 ee       	ldi	r24, 0xE8	; 232
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	48 9f       	mul	r20, r24
    149e:	90 01       	movw	r18, r0
    14a0:	49 9f       	mul	r20, r25
    14a2:	30 0d       	add	r19, r0
    14a4:	58 9f       	mul	r21, r24
    14a6:	30 0d       	add	r19, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	40 85       	ldd	r20, Z+8	; 0x08
    14ac:	51 85       	ldd	r21, Z+9	; 0x09
    14ae:	64 e6       	ldi	r22, 0x64	; 100
    14b0:	64 9f       	mul	r22, r20
    14b2:	c0 01       	movw	r24, r0
    14b4:	65 9f       	mul	r22, r21
    14b6:	90 0d       	add	r25, r0
    14b8:	11 24       	eor	r1, r1
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	22 85       	ldd	r18, Z+10	; 0x0a
    14c0:	33 85       	ldd	r19, Z+11	; 0x0b
    14c2:	b9 01       	movw	r22, r18
    14c4:	66 0f       	add	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	a9 01       	movw	r20, r18
    14ca:	44 0f       	add	r20, r20
    14cc:	55 1f       	adc	r21, r21
    14ce:	44 0f       	add	r20, r20
    14d0:	55 1f       	adc	r21, r21
    14d2:	44 0f       	add	r20, r20
    14d4:	55 1f       	adc	r21, r21
    14d6:	9b 01       	movw	r18, r22
    14d8:	24 0f       	add	r18, r20
    14da:	35 1f       	adc	r19, r21
    14dc:	28 0f       	add	r18, r24
    14de:	39 1f       	adc	r19, r25
    14e0:	86 85       	ldd	r24, Z+14	; 0x0e
    14e2:	97 85       	ldd	r25, Z+15	; 0x0f
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	90 93 ac 09 	sts	0x09AC, r25	; 0x8009ac <segmentDisplayNumber+0x1>
    14ec:	80 93 ab 09 	sts	0x09AB, r24	; 0x8009ab <segmentDisplayNumber>
    14f0:	6a e0       	ldi	r22, 0x0A	; 10
			ISeg7DispNum(segmentDisplayNumber , 10);
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <ISeg7DispNum>
    14f8:	10 92 c0 09 	sts	0x09C0, r1	; 0x8009c0 <customTimerSettingIndex+0x1>
				
			customTimerSettingIndex = 0;
    14fc:	10 92 bf 09 	sts	0x09BF, r1	; 0x8009bf <customTimerSettingIndex>
    1500:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 0;
			*timerInitFlag = 1;
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	99 83       	std	Y+1, r25	; 0x01
    1506:	88 83       	st	Y, r24
    1508:	02 c0       	rjmp	.+4      	; 0x150e <setTimer+0x2d8>
			break;
		}
		return returnStatus;
	}
}
    150a:	82 e0       	ldi	r24, 0x02	; 2
			customTimerSettingIndex = 0;
			returnStatus = 0;
			*timerInitFlag = 1;
			break;
		}
		return returnStatus;
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	df 91       	pop	r29
	}
}
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <set7SegmentTimer>:
    1514:	cf 93       	push	r28

int set7SegmentTimer(int counter_m_seoncd) {	
    1516:	df 93       	push	r29
	int nowDisplayNumber = segmentDisplayNumber - counter_m_seoncd;
    1518:	c0 91 ab 09 	lds	r28, 0x09AB	; 0x8009ab <segmentDisplayNumber>
    151c:	d0 91 ac 09 	lds	r29, 0x09AC	; 0x8009ac <segmentDisplayNumber+0x1>
    1520:	c8 1b       	sub	r28, r24
    1522:	d9 0b       	sbc	r29, r25
	//1분 00.0초
	//9분 99.9초
	if(nowDisplayNumber%1000 == 999 ){
    1524:	ce 01       	movw	r24, r28
    1526:	68 ee       	ldi	r22, 0xE8	; 232
    1528:	73 e0       	ldi	r23, 0x03	; 3
    152a:	2b d0       	rcall	.+86     	; 0x1582 <__divmodhi4>
    152c:	87 3e       	cpi	r24, 0xE7	; 231
    152e:	93 40       	sbci	r25, 0x03	; 3
    1530:	11 f4       	brne	.+4      	; 0x1536 <set7SegmentTimer+0x22>
		nowDisplayNumber -= 400;
    1532:	c0 59       	subi	r28, 0x90	; 144
    1534:	d1 40       	sbci	r29, 0x01	; 1
	}
	segmentDisplayNumber = nowDisplayNumber;
    1536:	d0 93 ac 09 	sts	0x09AC, r29	; 0x8009ac <segmentDisplayNumber+0x1>
    153a:	c0 93 ab 09 	sts	0x09AB, r28	; 0x8009ab <segmentDisplayNumber>
	ISeg7DispNum(nowDisplayNumber , 10);
    153e:	6a e0       	ldi	r22, 0x0A	; 10
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	ce 01       	movw	r24, r28
    1544:	0e 94 60 01 	call	0x2c0	; 0x2c0 <ISeg7DispNum>
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	cd 2b       	or	r28, r29
    154e:	11 f4       	brne	.+4      	; 0x1554 <set7SegmentTimer+0x40>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
		// do something
		
		return 0;	
	}
	return 1;
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <__udivmodhi4>:
    155a:	aa 1b       	sub	r26, r26
    155c:	bb 1b       	sub	r27, r27
    155e:	51 e1       	ldi	r21, 0x11	; 17
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <__udivmodhi4_ep>

00001562 <__udivmodhi4_loop>:
    1562:	aa 1f       	adc	r26, r26
    1564:	bb 1f       	adc	r27, r27
    1566:	a6 17       	cp	r26, r22
    1568:	b7 07       	cpc	r27, r23
    156a:	10 f0       	brcs	.+4      	; 0x1570 <__udivmodhi4_ep>
    156c:	a6 1b       	sub	r26, r22
    156e:	b7 0b       	sbc	r27, r23

00001570 <__udivmodhi4_ep>:
    1570:	88 1f       	adc	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	5a 95       	dec	r21
    1576:	a9 f7       	brne	.-22     	; 0x1562 <__udivmodhi4_loop>
    1578:	80 95       	com	r24
    157a:	90 95       	com	r25
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	08 95       	ret

00001582 <__divmodhi4>:
    1582:	97 fb       	bst	r25, 7
    1584:	07 2e       	mov	r0, r23
    1586:	16 f4       	brtc	.+4      	; 0x158c <__divmodhi4+0xa>
    1588:	00 94       	com	r0
    158a:	06 d0       	rcall	.+12     	; 0x1598 <__divmodhi4_neg1>
    158c:	77 fd       	sbrc	r23, 7
    158e:	08 d0       	rcall	.+16     	; 0x15a0 <__divmodhi4_neg2>
    1590:	e4 df       	rcall	.-56     	; 0x155a <__udivmodhi4>
    1592:	07 fc       	sbrc	r0, 7
    1594:	05 d0       	rcall	.+10     	; 0x15a0 <__divmodhi4_neg2>
    1596:	3e f4       	brtc	.+14     	; 0x15a6 <__divmodhi4_exit>

00001598 <__divmodhi4_neg1>:
    1598:	90 95       	com	r25
    159a:	81 95       	neg	r24
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	08 95       	ret

000015a0 <__divmodhi4_neg2>:
    15a0:	70 95       	com	r23
    15a2:	61 95       	neg	r22
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255

000015a6 <__divmodhi4_exit>:
    15a6:	08 95       	ret

000015a8 <__tablejump2__>:
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	00 24       	eor	r0, r0
    15ae:	00 1c       	adc	r0, r0
    15b0:	0b be       	out	0x3b, r0	; 59
    15b2:	07 90       	elpm	r0, Z+
    15b4:	f6 91       	elpm	r31, Z
    15b6:	e0 2d       	mov	r30, r0
    15b8:	09 94       	ijmp

000015ba <_exit>:
    15ba:	f8 94       	cli

000015bc <__stop_program>:
    15bc:	ff cf       	rjmp	.-2      	; 0x15bc <__stop_program>
