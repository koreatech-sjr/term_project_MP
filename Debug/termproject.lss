
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  0000156a  000015fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000156a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000817  008001a8  008001a8  000016a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b0b  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100c  00000000  00000000  000043c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001427  00000000  00000000  000053d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  000067fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000967  00000000  00000000  00006bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019b6  00000000  00000000  00007523  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00008ed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2d c1       	rjmp	.+602    	; 0x25c <__ctors_end>
       2:	00 00       	nop
       4:	49 c1       	rjmp	.+658    	; 0x298 <__bad_interrupt>
       6:	00 00       	nop
       8:	47 c1       	rjmp	.+654    	; 0x298 <__bad_interrupt>
       a:	00 00       	nop
       c:	45 c1       	rjmp	.+650    	; 0x298 <__bad_interrupt>
       e:	00 00       	nop
      10:	43 c1       	rjmp	.+646    	; 0x298 <__bad_interrupt>
      12:	00 00       	nop
      14:	41 c1       	rjmp	.+642    	; 0x298 <__bad_interrupt>
      16:	00 00       	nop
      18:	3f c1       	rjmp	.+638    	; 0x298 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3d c1       	rjmp	.+634    	; 0x298 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3b c1       	rjmp	.+630    	; 0x298 <__bad_interrupt>
      22:	00 00       	nop
      24:	aa c2       	rjmp	.+1364   	; 0x57a <__vector_9>
      26:	00 00       	nop
      28:	37 c1       	rjmp	.+622    	; 0x298 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	35 c1       	rjmp	.+618    	; 0x298 <__bad_interrupt>
      2e:	00 00       	nop
      30:	33 c1       	rjmp	.+614    	; 0x298 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c1       	rjmp	.+610    	; 0x298 <__bad_interrupt>
      36:	00 00       	nop
      38:	2f c1       	rjmp	.+606    	; 0x298 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	61 c1       	rjmp	.+706    	; 0x300 <__vector_15>
      3e:	00 00       	nop
      40:	2b c1       	rjmp	.+598    	; 0x298 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c1       	rjmp	.+594    	; 0x298 <__bad_interrupt>
      46:	00 00       	nop
      48:	27 c1       	rjmp	.+590    	; 0x298 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	25 c1       	rjmp	.+586    	; 0x298 <__bad_interrupt>
      4e:	00 00       	nop
      50:	23 c1       	rjmp	.+582    	; 0x298 <__bad_interrupt>
      52:	00 00       	nop
      54:	21 c1       	rjmp	.+578    	; 0x298 <__bad_interrupt>
      56:	00 00       	nop
      58:	1f c1       	rjmp	.+574    	; 0x298 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1d c1       	rjmp	.+570    	; 0x298 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1b c1       	rjmp	.+566    	; 0x298 <__bad_interrupt>
      62:	00 00       	nop
      64:	19 c1       	rjmp	.+562    	; 0x298 <__bad_interrupt>
      66:	00 00       	nop
      68:	17 c1       	rjmp	.+558    	; 0x298 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	15 c1       	rjmp	.+554    	; 0x298 <__bad_interrupt>
      6e:	00 00       	nop
      70:	13 c1       	rjmp	.+550    	; 0x298 <__bad_interrupt>
      72:	00 00       	nop
      74:	11 c1       	rjmp	.+546    	; 0x298 <__bad_interrupt>
      76:	00 00       	nop
      78:	0f c1       	rjmp	.+542    	; 0x298 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0d c1       	rjmp	.+538    	; 0x298 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0b c1       	rjmp	.+534    	; 0x298 <__bad_interrupt>
      82:	00 00       	nop
      84:	09 c1       	rjmp	.+530    	; 0x298 <__bad_interrupt>
      86:	00 00       	nop
      88:	07 c1       	rjmp	.+526    	; 0x298 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	11 05       	cpc	r17, r1
      8e:	46 04       	cpc	r4, r6
      90:	22 05       	cpc	r18, r2
      92:	37 04       	cpc	r3, r7
      94:	22 05       	cpc	r18, r2
      96:	22 05       	cpc	r18, r2
      98:	22 05       	cpc	r18, r2
      9a:	28 04       	cpc	r2, r8
      9c:	22 05       	cpc	r18, r2
      9e:	22 05       	cpc	r18, r2
      a0:	22 05       	cpc	r18, r2
      a2:	22 05       	cpc	r18, r2
      a4:	22 05       	cpc	r18, r2
      a6:	22 05       	cpc	r18, r2
      a8:	22 05       	cpc	r18, r2
      aa:	22 05       	cpc	r18, r2
      ac:	22 05       	cpc	r18, r2
      ae:	73 04       	cpc	r7, r3
      b0:	22 05       	cpc	r18, r2
      b2:	64 04       	cpc	r6, r4
      b4:	22 05       	cpc	r18, r2
      b6:	22 05       	cpc	r18, r2
      b8:	22 05       	cpc	r18, r2
      ba:	55 04       	cpc	r5, r5
      bc:	22 05       	cpc	r18, r2
      be:	22 05       	cpc	r18, r2
      c0:	22 05       	cpc	r18, r2
      c2:	22 05       	cpc	r18, r2
      c4:	22 05       	cpc	r18, r2
      c6:	22 05       	cpc	r18, r2
      c8:	22 05       	cpc	r18, r2
      ca:	22 05       	cpc	r18, r2
      cc:	22 05       	cpc	r18, r2
      ce:	22 05       	cpc	r18, r2
      d0:	22 05       	cpc	r18, r2
      d2:	22 05       	cpc	r18, r2
      d4:	22 05       	cpc	r18, r2
      d6:	22 05       	cpc	r18, r2
      d8:	22 05       	cpc	r18, r2
      da:	22 05       	cpc	r18, r2
      dc:	22 05       	cpc	r18, r2
      de:	22 05       	cpc	r18, r2
      e0:	22 05       	cpc	r18, r2
      e2:	22 05       	cpc	r18, r2
      e4:	22 05       	cpc	r18, r2
      e6:	22 05       	cpc	r18, r2
      e8:	22 05       	cpc	r18, r2
      ea:	22 05       	cpc	r18, r2
      ec:	bc 04       	cpc	r11, r12
      ee:	a0 04       	cpc	r10, r0
      f0:	22 05       	cpc	r18, r2
      f2:	91 04       	cpc	r9, r1
      f4:	22 05       	cpc	r18, r2
      f6:	22 05       	cpc	r18, r2
      f8:	22 05       	cpc	r18, r2
      fa:	82 04       	cpc	r8, r2
      fc:	22 05       	cpc	r18, r2
      fe:	22 05       	cpc	r18, r2
     100:	22 05       	cpc	r18, r2
     102:	22 05       	cpc	r18, r2
     104:	22 05       	cpc	r18, r2
     106:	22 05       	cpc	r18, r2
     108:	22 05       	cpc	r18, r2
     10a:	22 05       	cpc	r18, r2
     10c:	22 05       	cpc	r18, r2
     10e:	22 05       	cpc	r18, r2
     110:	22 05       	cpc	r18, r2
     112:	22 05       	cpc	r18, r2
     114:	22 05       	cpc	r18, r2
     116:	22 05       	cpc	r18, r2
     118:	22 05       	cpc	r18, r2
     11a:	22 05       	cpc	r18, r2
     11c:	22 05       	cpc	r18, r2
     11e:	22 05       	cpc	r18, r2
     120:	22 05       	cpc	r18, r2
     122:	22 05       	cpc	r18, r2
     124:	22 05       	cpc	r18, r2
     126:	22 05       	cpc	r18, r2
     128:	22 05       	cpc	r18, r2
     12a:	22 05       	cpc	r18, r2
     12c:	22 05       	cpc	r18, r2
     12e:	22 05       	cpc	r18, r2
     130:	22 05       	cpc	r18, r2
     132:	22 05       	cpc	r18, r2
     134:	22 05       	cpc	r18, r2
     136:	22 05       	cpc	r18, r2
     138:	22 05       	cpc	r18, r2
     13a:	22 05       	cpc	r18, r2
     13c:	22 05       	cpc	r18, r2
     13e:	22 05       	cpc	r18, r2
     140:	22 05       	cpc	r18, r2
     142:	22 05       	cpc	r18, r2
     144:	22 05       	cpc	r18, r2
     146:	22 05       	cpc	r18, r2
     148:	22 05       	cpc	r18, r2
     14a:	22 05       	cpc	r18, r2
     14c:	22 05       	cpc	r18, r2
     14e:	22 05       	cpc	r18, r2
     150:	22 05       	cpc	r18, r2
     152:	22 05       	cpc	r18, r2
     154:	22 05       	cpc	r18, r2
     156:	22 05       	cpc	r18, r2
     158:	22 05       	cpc	r18, r2
     15a:	22 05       	cpc	r18, r2
     15c:	22 05       	cpc	r18, r2
     15e:	22 05       	cpc	r18, r2
     160:	22 05       	cpc	r18, r2
     162:	22 05       	cpc	r18, r2
     164:	22 05       	cpc	r18, r2
     166:	22 05       	cpc	r18, r2
     168:	22 05       	cpc	r18, r2
     16a:	22 05       	cpc	r18, r2
     16c:	22 05       	cpc	r18, r2
     16e:	22 05       	cpc	r18, r2
     170:	22 05       	cpc	r18, r2
     172:	af 04       	cpc	r10, r15
     174:	e7 09       	sbc	r30, r7
     176:	41 09       	sbc	r20, r1
     178:	5b 0a       	sbc	r5, r27
     17a:	2c 09       	sbc	r18, r12
     17c:	5b 0a       	sbc	r5, r27
     17e:	5b 0a       	sbc	r5, r27
     180:	5b 0a       	sbc	r5, r27
     182:	17 09       	sbc	r17, r7
     184:	5b 0a       	sbc	r5, r27
     186:	5b 0a       	sbc	r5, r27
     188:	5b 0a       	sbc	r5, r27
     18a:	5b 0a       	sbc	r5, r27
     18c:	5b 0a       	sbc	r5, r27
     18e:	5b 0a       	sbc	r5, r27
     190:	5b 0a       	sbc	r5, r27
     192:	5b 0a       	sbc	r5, r27
     194:	fa 09       	sbc	r31, r10
     196:	80 09       	sbc	r24, r0
     198:	5b 0a       	sbc	r5, r27
     19a:	6b 09       	sbc	r22, r11
     19c:	5b 0a       	sbc	r5, r27
     19e:	5b 0a       	sbc	r5, r27
     1a0:	5b 0a       	sbc	r5, r27
     1a2:	56 09       	sbc	r21, r6
     1a4:	5b 0a       	sbc	r5, r27
     1a6:	5b 0a       	sbc	r5, r27
     1a8:	5b 0a       	sbc	r5, r27
     1aa:	5b 0a       	sbc	r5, r27
     1ac:	5b 0a       	sbc	r5, r27
     1ae:	5b 0a       	sbc	r5, r27
     1b0:	5b 0a       	sbc	r5, r27
     1b2:	5b 0a       	sbc	r5, r27
     1b4:	5b 0a       	sbc	r5, r27
     1b6:	5b 0a       	sbc	r5, r27
     1b8:	5b 0a       	sbc	r5, r27
     1ba:	5b 0a       	sbc	r5, r27
     1bc:	5b 0a       	sbc	r5, r27
     1be:	5b 0a       	sbc	r5, r27
     1c0:	5b 0a       	sbc	r5, r27
     1c2:	5b 0a       	sbc	r5, r27
     1c4:	5b 0a       	sbc	r5, r27
     1c6:	5b 0a       	sbc	r5, r27
     1c8:	5b 0a       	sbc	r5, r27
     1ca:	5b 0a       	sbc	r5, r27
     1cc:	5b 0a       	sbc	r5, r27
     1ce:	5b 0a       	sbc	r5, r27
     1d0:	5b 0a       	sbc	r5, r27
     1d2:	5b 0a       	sbc	r5, r27
     1d4:	10 0a       	sbc	r1, r16
     1d6:	bf 09       	sbc	r27, r15
     1d8:	5b 0a       	sbc	r5, r27
     1da:	aa 09       	sbc	r26, r10
     1dc:	5b 0a       	sbc	r5, r27
     1de:	5b 0a       	sbc	r5, r27
     1e0:	5b 0a       	sbc	r5, r27
     1e2:	95 09       	sbc	r25, r5
     1e4:	5b 0a       	sbc	r5, r27
     1e6:	5b 0a       	sbc	r5, r27
     1e8:	5b 0a       	sbc	r5, r27
     1ea:	5b 0a       	sbc	r5, r27
     1ec:	5b 0a       	sbc	r5, r27
     1ee:	5b 0a       	sbc	r5, r27
     1f0:	5b 0a       	sbc	r5, r27
     1f2:	5b 0a       	sbc	r5, r27
     1f4:	5b 0a       	sbc	r5, r27
     1f6:	5b 0a       	sbc	r5, r27
     1f8:	5b 0a       	sbc	r5, r27
     1fa:	5b 0a       	sbc	r5, r27
     1fc:	5b 0a       	sbc	r5, r27
     1fe:	5b 0a       	sbc	r5, r27
     200:	5b 0a       	sbc	r5, r27
     202:	5b 0a       	sbc	r5, r27
     204:	5b 0a       	sbc	r5, r27
     206:	5b 0a       	sbc	r5, r27
     208:	5b 0a       	sbc	r5, r27
     20a:	5b 0a       	sbc	r5, r27
     20c:	5b 0a       	sbc	r5, r27
     20e:	5b 0a       	sbc	r5, r27
     210:	5b 0a       	sbc	r5, r27
     212:	5b 0a       	sbc	r5, r27
     214:	5b 0a       	sbc	r5, r27
     216:	5b 0a       	sbc	r5, r27
     218:	5b 0a       	sbc	r5, r27
     21a:	5b 0a       	sbc	r5, r27
     21c:	5b 0a       	sbc	r5, r27
     21e:	5b 0a       	sbc	r5, r27
     220:	5b 0a       	sbc	r5, r27
     222:	5b 0a       	sbc	r5, r27
     224:	5b 0a       	sbc	r5, r27
     226:	5b 0a       	sbc	r5, r27
     228:	5b 0a       	sbc	r5, r27
     22a:	5b 0a       	sbc	r5, r27
     22c:	5b 0a       	sbc	r5, r27
     22e:	5b 0a       	sbc	r5, r27
     230:	5b 0a       	sbc	r5, r27
     232:	5b 0a       	sbc	r5, r27
     234:	5b 0a       	sbc	r5, r27
     236:	5b 0a       	sbc	r5, r27
     238:	5b 0a       	sbc	r5, r27
     23a:	5b 0a       	sbc	r5, r27
     23c:	5b 0a       	sbc	r5, r27
     23e:	5b 0a       	sbc	r5, r27
     240:	5b 0a       	sbc	r5, r27
     242:	5b 0a       	sbc	r5, r27
     244:	5b 0a       	sbc	r5, r27
     246:	5b 0a       	sbc	r5, r27
     248:	5b 0a       	sbc	r5, r27
     24a:	5b 0a       	sbc	r5, r27
     24c:	5b 0a       	sbc	r5, r27
     24e:	5b 0a       	sbc	r5, r27
     250:	5b 0a       	sbc	r5, r27
     252:	5b 0a       	sbc	r5, r27
     254:	5b 0a       	sbc	r5, r27
     256:	5b 0a       	sbc	r5, r27
     258:	5b 0a       	sbc	r5, r27
     25a:	d4 09       	sbc	r29, r4

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d0 e1       	ldi	r29, 0x10	; 16
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	ea e6       	ldi	r30, 0x6A	; 106
     270:	f5 e1       	ldi	r31, 0x15	; 21
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	a8 3a       	cpi	r26, 0xA8	; 168
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
     282:	29 e0       	ldi	r18, 0x09	; 9
     284:	a8 ea       	ldi	r26, 0xA8	; 168
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	af 3b       	cpi	r26, 0xBF	; 191
     28e:	b2 07       	cpc	r27, r18
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	bc d1       	rcall	.+888    	; 0x60c <main>
     294:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <_exit>

00000298 <__bad_interrupt>:
     298:	b3 ce       	rjmp	.-666    	; 0x0 <__vectors>

0000029a <ISeg7Init>:
= {16,16,16,16,16, 16};      //초기에 모두 끈다.


void ISeg7Init(void)
{
	SSEG_CONT  |=  CONT_MASK; //모든 7-세그먼트를 끈다.
     29a:	82 b3       	in	r24, 0x12	; 18
     29c:	80 6f       	ori	r24, 0xF0	; 240
     29e:	82 bb       	out	0x12, r24	; 18
	DDR_CONT   |=  CONT_MASK; //제어포트의 상위니블을
     2a0:	81 b3       	in	r24, 0x11	; 17
     2a2:	80 6f       	ori	r24, 0xF0	; 240
     2a4:	81 bb       	out	0x11, r24	; 17
	//출력으로 설정
	DDR_DATA = 0xFF;     //테이터포트는 모두 출력으로 설정
     2a6:	8f ef       	ldi	r24, 0xFF	; 255
     2a8:	8a bb       	out	0x1a, r24	; 26
	
	// 타이머/카운터0 비교 일치 인터럽트 설정
	// 타이머/카운터0는 CTC모드로 동작
	
	TCCR0 = (1<<WGM01);		 //CTC모드/타이머 정지, OC0핀 미사용
     2aa:	88 e0       	ldi	r24, 0x08	; 8
     2ac:	83 bf       	out	0x33, r24	; 51
	OCR0  = 78;				//5msec마다 비교일치 인터럽트 발생
     2ae:	8e e4       	ldi	r24, 0x4E	; 78
     2b0:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     2b2:	87 b7       	in	r24, 0x37	; 55
     2b4:	82 60       	ori	r24, 0x02	; 2
     2b6:	87 bf       	out	0x37, r24	; 55
	
	TCCR0 |= 0x07;		   //분주비 1024로 타이머 시작
     2b8:	83 b7       	in	r24, 0x33	; 51
     2ba:	87 60       	ori	r24, 0x07	; 7
     2bc:	83 bf       	out	0x33, r24	; 51
     2be:	08 95       	ret

000002c0 <ISeg7DispNum>:
}


void ISeg7DispNum(unsigned short num, unsigned short radix)
{
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	eb 01       	movw	r28, r22
	int  j;
	TIMSK &= ~(1<<OCIE0);	// 타이머0 비교일치 인터럽트 금지
     2c6:	27 b7       	in	r18, 0x37	; 55
     2c8:	2d 7f       	andi	r18, 0xFD	; 253
     2ca:	27 bf       	out	0x37, r18	; 55
	// cnumber[]에 수 0저장
	// cnumber[0] = 0
	// cnumber[1] ~ cnumber[4] = 16: 세그먼트를 끈다.
	
	
	cnumber[0] = 0;
     2cc:	e0 e0       	ldi	r30, 0x00	; 0
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	10 82       	st	Z, r1
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
     2d2:	20 e1       	ldi	r18, 0x10	; 16
     2d4:	21 83       	std	Z+1, r18	; 0x01
     2d6:	22 83       	std	Z+2, r18	; 0x02
     2d8:	23 83       	std	Z+3, r18	; 0x03
     2da:	24 83       	std	Z+4, r18	; 0x04
     2dc:	25 83       	std	Z+5, r18	; 0x05
     2de:	25 e0       	ldi	r18, 0x05	; 5
     2e0:	31 e0       	ldi	r19, 0x01	; 1
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
	{
		cnumber[j++] = num % radix;  //나머지
     2e2:	be 01       	movw	r22, r28
     2e4:	0e 94 83 0a 	call	0x1506	; 0x1506 <__udivmodhi4>
     2e8:	81 93       	st	Z+, r24
		num /= radix;                 // 몫
     2ea:	86 2f       	mov	r24, r22
     2ec:	97 2f       	mov	r25, r23
	
	cnumber[0] = 0;
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
     2ee:	e2 17       	cp	r30, r18
     2f0:	f3 07       	cpc	r31, r19
     2f2:	b9 f7       	brne	.-18     	; 0x2e2 <ISeg7DispNum+0x22>
	{
		cnumber[j++] = num % radix;  //나머지
		num /= radix;                 // 몫
	}
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     2f4:	87 b7       	in	r24, 0x37	; 55
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	87 bf       	out	0x37, r24	; 55
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <__vector_15>:
//====================================================
// ISR : 인터럽트가 걸릴 때마다 index가 가리키는 세그먼트에
//       데이터를 표시하고, index는 계속 회전이동하게 된다.
//=====================================================

ISR(TIMER0_COMP_vect){	//카운터/타이머0 비교일치 인터럽트
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	0b b6       	in	r0, 0x3b	; 59
     30c:	0f 92       	push	r0
     30e:	2f 93       	push	r18
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
	static int index = 0;
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
     318:	22 b3       	in	r18, 0x12	; 18
     31a:	80 e1       	ldi	r24, 0x10	; 16
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	00 90 a8 01 	lds	r0, 0x01A8	; 0x8001a8 <__data_end>
     322:	02 c0       	rjmp	.+4      	; 0x328 <__vector_15+0x28>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <__vector_15+0x24>
     32c:	80 95       	com	r24
     32e:	80 7f       	andi	r24, 0xF0	; 240
     330:	92 2f       	mov	r25, r18
     332:	9f 70       	andi	r25, 0x0F	; 15
     334:	89 2b       	or	r24, r25
     336:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
     338:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <__data_end>
     33c:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <__data_end+0x1>
     340:	e0 50       	subi	r30, 0x00	; 0
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	e0 81       	ld	r30, Z
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	e7 5a       	subi	r30, 0xA7	; 167
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	80 81       	ld	r24, Z
     34e:	80 95       	com	r24
     350:	8b bb       	out	0x1b, r24	; 27
	
	index++; //인덱스 이동
     352:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
     356:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__data_end+0x1>
     35a:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) { index = 0; }
     35c:	84 30       	cpi	r24, 0x04	; 4
     35e:	91 05       	cpc	r25, r1
     360:	29 f0       	breq	.+10     	; 0x36c <__vector_15+0x6c>
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];
	
	index++; //인덱스 이동
     362:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
     366:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
     36a:	04 c0       	rjmp	.+8      	; 0x374 <__vector_15+0x74>
	if(index == N_SEGMENT) { index = 0; }
     36c:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__data_end+0x1>
     370:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
}
     374:	ff 91       	pop	r31
     376:	ef 91       	pop	r30
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <key_scan>:
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     38c:	8e ef       	ldi	r24, 0xFE	; 254
     38e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
     392:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     394:	80 b1       	in	r24, 0x00	; 0
     396:	80 95       	com	r24
     398:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     39a:	69 f4       	brne	.+26     	; 0x3b6 <key_scan+0x2a>
     39c:	23 e0       	ldi	r18, 0x03	; 3
     39e:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     3a0:	e2 e6       	ldi	r30, 0x62	; 98
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	89 2f       	mov	r24, r25
     3a6:	80 95       	com	r24
     3a8:	80 83       	st	Z, r24
		asm("nop"::);
     3aa:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     3ac:	80 b1       	in	r24, 0x00	; 0
     3ae:	80 95       	com	r24
     3b0:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     3b2:	21 f0       	breq	.+8      	; 0x3bc <key_scan+0x30>
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <key_scan+0x2c>

static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
     3b6:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);
		
		in = (~KEY_IN) & 0xF0;
		if(in)			//have key input
		{
			in += out;	//make a code
     3b8:	89 0f       	add	r24, r25
			break;
     3ba:	08 95       	ret
		}
		out <<= 1;	//change to next scan-code
     3bc:	99 0f       	add	r25, r25
     3be:	21 50       	subi	r18, 0x01	; 1
static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
     3c0:	89 f7       	brne	.-30     	; 0x3a4 <key_scan+0x18>
		}
		out <<= 1;	//change to next scan-code
		
	}
	return in;	//return the value of scan-code
}
     3c2:	08 95       	ret

000003c4 <KeyInit>:
static unsigned char key_scan(void);
static unsigned char pin = NO_KEY;		//previous key value

void KeyInit()	//Initialize keypad
{
	KEY_OUT = 0xF0;		// Initialize output as 0
     3c4:	80 ef       	ldi	r24, 0xF0	; 240
     3c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;		//high-ranking nibble = input, low-ranking nibble = output
     3ca:	8f e0       	ldi	r24, 0x0F	; 15
     3cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3d0:	08 95       	ret

000003d2 <KeyInput>:
// value of return :
//                   !=0 => value of scan code
//					  =0 => no input
//==========================================================================
unsigned char KeyInput(void)
{
     3d2:	cf 93       	push	r28
	unsigned char in, in1;
	
	in = key_scan();	//read keys
     3d4:	db df       	rcall	.-74     	; 0x38c <key_scan>
     3d6:	c8 2f       	mov	r28, r24
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <KeyInput+0xa>
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
		if(in == in1) break;
		in = in1;
     3da:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3dc:	8f e3       	ldi	r24, 0x3F	; 63
     3de:	9c e9       	ldi	r25, 0x9C	; 156
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <KeyInput+0xe>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <KeyInput+0x14>
     3e6:	00 00       	nop
     3e8:	8f e3       	ldi	r24, 0x3F	; 63
     3ea:	9c e9       	ldi	r25, 0x9C	; 156
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <KeyInput+0x1a>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <KeyInput+0x20>
     3f2:	00 00       	nop
     3f4:	8f e3       	ldi	r24, 0x3F	; 63
     3f6:	9c e9       	ldi	r25, 0x9C	; 156
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <KeyInput+0x26>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <KeyInput+0x2c>
	
	in = key_scan();	//read keys
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
     3fe:	00 00       	nop
     400:	c5 df       	rcall	.-118    	; 0x38c <key_scan>
		if(in == in1) break;
     402:	c8 13       	cpse	r28, r24
     404:	ea cf       	rjmp	.-44     	; 0x3da <KeyInput+0x8>
     406:	98 2f       	mov	r25, r24
     408:	90 7f       	andi	r25, 0xF0	; 240
		in = in1;
	}
	
	if (!(in & 0xF0))	// No key was pushed
     40a:	19 f4       	brne	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		pin = 0;
     40c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <pin>
		return 0;
     410:	09 c0       	rjmp	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}
	if(pin == in)
     412:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <pin>
     416:	89 17       	cp	r24, r25
     418:	21 f0       	breq	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	return 0;
	
	pin = in;		//store key value
     41a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <pin>
	return in;		//return code
     41e:	98 2f       	mov	r25, r24
     420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		pin = 0;
		return 0;
	}
	if(pin == in)
	return 0;
     422:	90 e0       	ldi	r25, 0x00	; 0
	
	pin = in;		//store key value
	return in;		//return code
}
     424:	89 2f       	mov	r24, r25
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <write_command>:
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
	LcdPutchar(font[i]);
}
     42a:	98 2f       	mov	r25, r24
     42c:	90 7f       	andi	r25, 0xF0	; 240
     42e:	94 60       	ori	r25, 0x04	; 4
     430:	95 bb       	out	0x15, r25	; 21
     432:	9b 7f       	andi	r25, 0xFB	; 251
     434:	95 bb       	out	0x15, r25	; 21
     436:	20 e1       	ldi	r18, 0x10	; 16
     438:	82 02       	muls	r24, r18
     43a:	c0 01       	movw	r24, r0
     43c:	11 24       	eor	r1, r1
     43e:	84 60       	ori	r24, 0x04	; 4
     440:	85 bb       	out	0x15, r24	; 21
     442:	8b 7f       	andi	r24, 0xFB	; 251
     444:	85 bb       	out	0x15, r24	; 21
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	8a 95       	dec	r24
     44a:	f1 f7       	brne	.-4      	; 0x448 <write_command+0x1e>
     44c:	00 00       	nop
     44e:	08 95       	ret

00000450 <LcdCommand>:
     450:	cf 93       	push	r28
     452:	c8 2f       	mov	r28, r24
     454:	85 e3       	ldi	r24, 0x35	; 53
     456:	8a 95       	dec	r24
     458:	f1 f7       	brne	.-4      	; 0x456 <LcdCommand+0x6>
     45a:	00 00       	nop
     45c:	95 e3       	ldi	r25, 0x35	; 53
     45e:	9a 95       	dec	r25
     460:	f1 f7       	brne	.-4      	; 0x45e <LcdCommand+0xe>
     462:	00 00       	nop
     464:	85 e3       	ldi	r24, 0x35	; 53
     466:	8a 95       	dec	r24
     468:	f1 f7       	brne	.-4      	; 0x466 <LcdCommand+0x16>
     46a:	00 00       	nop
     46c:	95 e3       	ldi	r25, 0x35	; 53
     46e:	9a 95       	dec	r25
     470:	f1 f7       	brne	.-4      	; 0x46e <LcdCommand+0x1e>
     472:	00 00       	nop
     474:	85 e3       	ldi	r24, 0x35	; 53
     476:	8a 95       	dec	r24
     478:	f1 f7       	brne	.-4      	; 0x476 <LcdCommand+0x26>
     47a:	00 00       	nop
     47c:	8c 2f       	mov	r24, r28
     47e:	d5 df       	rcall	.-86     	; 0x42a <write_command>
     480:	c1 50       	subi	r28, 0x01	; 1
     482:	c2 30       	cpi	r28, 0x02	; 2
     484:	30 f4       	brcc	.+12     	; 0x492 <LcdCommand+0x42>
     486:	8f e3       	ldi	r24, 0x3F	; 63
     488:	9f e1       	ldi	r25, 0x1F	; 31
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <LcdCommand+0x3a>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <LcdCommand+0x40>
     490:	00 00       	nop
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <LcdInit>:
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	84 bb       	out	0x14, r24	; 20
     49a:	8f e5       	ldi	r24, 0x5F	; 95
     49c:	9a ee       	ldi	r25, 0xEA	; 234
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <LcdInit+0x8>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LcdInit+0xe>
     4a4:	00 00       	nop
     4a6:	80 e3       	ldi	r24, 0x30	; 48
     4a8:	c0 df       	rcall	.-128    	; 0x42a <write_command>
     4aa:	8f e1       	ldi	r24, 0x1F	; 31
     4ac:	9e e4       	ldi	r25, 0x4E	; 78
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <LcdInit+0x18>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LcdInit+0x1e>
     4b4:	00 00       	nop
     4b6:	80 e3       	ldi	r24, 0x30	; 48
     4b8:	b8 df       	rcall	.-144    	; 0x42a <write_command>
     4ba:	8f e9       	ldi	r24, 0x9F	; 159
     4bc:	9f e0       	ldi	r25, 0x0F	; 15
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <LcdInit+0x28>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <LcdInit+0x2e>
     4c4:	00 00       	nop
     4c6:	82 e3       	ldi	r24, 0x32	; 50
     4c8:	b0 df       	rcall	.-160    	; 0x42a <write_command>
     4ca:	88 e2       	ldi	r24, 0x28	; 40
     4cc:	c1 df       	rcall	.-126    	; 0x450 <LcdCommand>
     4ce:	88 e0       	ldi	r24, 0x08	; 8
     4d0:	bf df       	rcall	.-130    	; 0x450 <LcdCommand>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	bd df       	rcall	.-134    	; 0x450 <LcdCommand>
     4d6:	86 e0       	ldi	r24, 0x06	; 6
     4d8:	bb df       	rcall	.-138    	; 0x450 <LcdCommand>
     4da:	8c e0       	ldi	r24, 0x0C	; 12
     4dc:	b9 cf       	rjmp	.-142    	; 0x450 <LcdCommand>
     4de:	08 95       	ret

000004e0 <LcdPutchar>:
     4e0:	25 e3       	ldi	r18, 0x35	; 53
     4e2:	2a 95       	dec	r18
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LcdPutchar+0x2>
     4e6:	00 00       	nop
     4e8:	95 e3       	ldi	r25, 0x35	; 53
     4ea:	9a 95       	dec	r25
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <LcdPutchar+0xa>
     4ee:	00 00       	nop
     4f0:	25 e3       	ldi	r18, 0x35	; 53
     4f2:	2a 95       	dec	r18
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <LcdPutchar+0x12>
     4f6:	00 00       	nop
     4f8:	95 e3       	ldi	r25, 0x35	; 53
     4fa:	9a 95       	dec	r25
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <LcdPutchar+0x1a>
     4fe:	00 00       	nop
     500:	25 e3       	ldi	r18, 0x35	; 53
     502:	2a 95       	dec	r18
     504:	f1 f7       	brne	.-4      	; 0x502 <LcdPutchar+0x22>
     506:	00 00       	nop
     508:	98 2f       	mov	r25, r24
     50a:	90 7f       	andi	r25, 0xF0	; 240
     50c:	95 60       	ori	r25, 0x05	; 5
     50e:	95 bb       	out	0x15, r25	; 21
     510:	9b 7f       	andi	r25, 0xFB	; 251
     512:	95 bb       	out	0x15, r25	; 21
     514:	20 e1       	ldi	r18, 0x10	; 16
     516:	82 02       	muls	r24, r18
     518:	c0 01       	movw	r24, r0
     51a:	11 24       	eor	r1, r1
     51c:	85 60       	ori	r24, 0x05	; 5
     51e:	85 bb       	out	0x15, r24	; 21
     520:	8b 7f       	andi	r24, 0xFB	; 251
     522:	85 bb       	out	0x15, r24	; 21
     524:	08 95       	ret

00000526 <LcdPuts>:
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
     52c:	88 81       	ld	r24, Y
     52e:	88 23       	and	r24, r24
     530:	29 f0       	breq	.+10     	; 0x53c <LcdPuts+0x16>
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	d5 df       	rcall	.-86     	; 0x4e0 <LcdPutchar>
     536:	89 91       	ld	r24, Y+
     538:	81 11       	cpse	r24, r1
     53a:	fc cf       	rjmp	.-8      	; 0x534 <LcdPuts+0xe>
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <LcdMove>:
     542:	90 e4       	ldi	r25, 0x40	; 64
     544:	89 9f       	mul	r24, r25
     546:	60 0d       	add	r22, r0
     548:	11 24       	eor	r1, r1
     54a:	86 2f       	mov	r24, r22
     54c:	80 68       	ori	r24, 0x80	; 128
     54e:	80 cf       	rjmp	.-256    	; 0x450 <LcdCommand>
     550:	08 95       	ret

00000552 <msec_delay>:
}


void msec_delay(int n)
{
	for(; n>0; n--)		//1msec 시간지연 n회	반복
     552:	18 16       	cp	r1, r24
     554:	19 06       	cpc	r1, r25
     556:	44 f4       	brge	.+16     	; 0x568 <msec_delay+0x16>
     558:	ef e9       	ldi	r30, 0x9F	; 159
     55a:	ff e0       	ldi	r31, 0x0F	; 15
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <msec_delay+0xa>
     560:	00 c0       	rjmp	.+0      	; 0x562 <msec_delay+0x10>
     562:	00 00       	nop
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	c1 f7       	brne	.-16     	; 0x558 <msec_delay+0x6>
     568:	08 95       	ret

0000056a <ClockCounterInit>:
static int SegmentStopwatchInitFlag = 0;



void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
     56a:	85 b5       	in	r24, 0x25	; 37
     56c:	88 60       	ori	r24, 0x08	; 8
     56e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
     570:	84 e6       	ldi	r24, 0x64	; 100
     572:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
     574:	80 e8       	ldi	r24, 0x80	; 128
     576:	87 bf       	out	0x37, r24	; 55
     578:	08 95       	ret

0000057a <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	2f 93       	push	r18
     586:	5f 93       	push	r21
     588:	6f 93       	push	r22
     58a:	7f 93       	push	r23
     58c:	8f 93       	push	r24
     58e:	9f 93       	push	r25
     590:	af 93       	push	r26
     592:	bf 93       	push	r27
	ClockCounter_CNT++;
     594:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <ClockCounter_CNT>
     598:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <ClockCounter_CNT+0x1>
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <ClockCounter_CNT+0x1>
     5a2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
     5a6:	80 32       	cpi	r24, 0x20	; 32
     5a8:	2e e4       	ldi	r18, 0x4E	; 78
     5aa:	92 07       	cpc	r25, r18
     5ac:	71 f4       	brne	.+28     	; 0x5ca <__vector_9+0x50>
		ClockCounter_CNT=0;
     5ae:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <ClockCounter_CNT+0x1>
     5b2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <ClockCounter_CNT>
		ClockCounter_SECOND++;
     5b6:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <ClockCounter_SECOND>
     5ba:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <ClockCounter_SECOND+0x1>
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <ClockCounter_SECOND+0x1>
     5c4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <ClockCounter_SECOND>
     5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__vector_9+0x5a>
	}
	if(ClockCounter_CNT % 2000 == 0) {
     5ca:	60 ed       	ldi	r22, 0xD0	; 208
     5cc:	77 e0       	ldi	r23, 0x07	; 7
     5ce:	af d7       	rcall	.+3934   	; 0x152e <__divmodhi4>
     5d0:	89 2b       	or	r24, r25
     5d2:	79 f4       	brne	.+30     	; 0x5f2 <__vector_9+0x78>
		ClockCounter_M_SECOND = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
     5dc:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ClockCounter_M_SECOND>
		ClockCounter_M_SECOND_ONLY_STOPWATCH += 1;
     5e0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
     5e4:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     5ee:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
	}
}
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	2f 91       	pop	r18
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <main>:

// 현재 메뉴 코드
static int status = 0;

int main(void) {
	LcdInit();
     60c:	44 df       	rcall	.-376    	; 0x496 <LcdInit>
	KeyInit();
     60e:	da de       	rcall	.-588    	; 0x3c4 <KeyInit>
	ClockCounterInit();
     610:	ac df       	rcall	.-168    	; 0x56a <ClockCounterInit>
     612:	2a d2       	rcall	.+1108   	; 0xa68 <initMenu>
	
	// 박가경's project 
	//startTermProject();
	initMenu();
     614:	78 94       	sei
     616:	85 b5       	in	r24, 0x25	; 37
		
	// 전역 인터럽트 허용
	sei();						
     618:	82 60       	ori	r24, 0x02	; 2
	TCCR2 |= 1<<CS21;
     61a:	85 bd       	out	0x25, r24	; 37
     61c:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <SegmentStopwatchInitFlag>
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅 second parameter is not display flag 
		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag);
     620:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <SegmentStopwatchInitFlag+0x1>
     624:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <ClockCounter_SECOND>
     628:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <ClockCounter_SECOND+0x1>
     62c:	5c d0       	rcall	.+184    	; 0x6e6 <setClock>
     62e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SegmentTimerInitFlag>

		if(SegmentTimerInitFlag == 1) {
     632:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <SegmentTimerInitFlag+0x1>
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	49 f4       	brne	.+18     	; 0x64c <main+0x40>
     63a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ClockCounter_M_SECOND>
			SegmentTimerInitFlag = set7SegmentTimer(ClockCounter_M_SECOND);
     63e:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
     642:	3e d7       	rcall	.+3708   	; 0x14c0 <set7SegmentTimer>
     644:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <SegmentTimerInitFlag+0x1>
     648:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <SegmentTimerInitFlag>
     64c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <SegmentStopwatchInitFlag>
		}
		
		if(SegmentStopwatchInitFlag == 1) {
     650:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <SegmentStopwatchInitFlag+0x1>
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	81 f4       	brne	.+32     	; 0x678 <main+0x6c>
     658:	bc de       	rcall	.-648    	; 0x3d2 <KeyInput>
			SegmentStopwatchInitFlag = set7SegmentStopwatch(ClockCounter_M_SECOND, KeyInput());
     65a:	68 2f       	mov	r22, r24
     65c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ClockCounter_M_SECOND>
     660:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
     664:	05 d3       	rcall	.+1546   	; 0xc70 <set7SegmentStopwatch>
     666:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <SegmentStopwatchInitFlag+0x1>
     66a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <SegmentStopwatchInitFlag>
     66e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
			ClockCounter_M_SECOND = 0;
     672:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ClockCounter_M_SECOND>
     676:	d2 cf       	rjmp	.-92     	; 0x61c <main+0x10>
     678:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <ClockCounter_SECOND+0x1>
			continue;
		}
		
		// 무조건 1초 혹은 0.1초로 계산되게 하기위함
		ClockCounter_SECOND = 0;
     67c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <ClockCounter_SECOND>
		ClockCounter_M_SECOND = 0;		
     680:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
     684:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ClockCounter_M_SECOND>
		// keypad input
		keyInput = KeyInput();
     688:	a4 de       	rcall	.-696    	; 0x3d2 <KeyInput>
		
		// 뭘 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
     68a:	fb d1       	rcall	.+1014   	; 0xa82 <setMenu>
     68c:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
     690:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
     694:	01 97       	sbiw	r24, 0x01	; 1

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     696:	39 f4       	brne	.+14     	; 0x6a6 <main+0x9a>
     698:	a2 d0       	rcall	.+324    	; 0x7de <setCustomClock>
			status = setCustomClock();	// Time setting(main.c 파일 안에 있음)	
     69a:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
     69e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	c9 f3       	breq	.-14     	; 0x698 <main+0x8c>
		// 뭘 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     6a6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <status>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     6aa:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <status+0x1>
     6ae:	02 97       	sbiw	r24, 0x02	; 2
     6b0:	49 f4       	brne	.+18     	; 0x6c4 <main+0xb8>
     6b2:	8f ea       	ldi	r24, 0xAF	; 175
			status = setTimer(&SegmentTimerInitFlag);
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	97 d5       	rcall	.+2862   	; 0x11e6 <setTimer>
     6b8:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
     6bc:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
     6c0:	02 97       	sbiw	r24, 0x02	; 2
     6c2:	b9 f3       	breq	.-18     	; 0x6b2 <main+0xa6>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     6c4:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <status>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     6c8:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <status+0x1>
     6cc:	03 97       	sbiw	r24, 0x03	; 3
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <main+0xc6>
     6d0:	a5 cf       	rjmp	.-182    	; 0x61c <main+0x10>
     6d2:	8d ea       	ldi	r24, 0xAD	; 173
			status = setStopwatch(&SegmentStopwatchInitFlag);
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	86 d2       	rcall	.+1292   	; 0xbe4 <setStopwatch>
     6d8:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
     6dc:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
     6e0:	03 97       	sbiw	r24, 0x03	; 3
     6e2:	b9 f3       	breq	.-18     	; 0x6d2 <main+0xc6>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     6e4:	9b cf       	rjmp	.-202    	; 0x61c <main+0x10>

000006e6 <setClock>:
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
static int second = 0;
static int minute = 0;
static int hour = 0;


void setClock(int interruptSecond, int segmentStopwatchInitFlag) {
     6ea:	fb 01       	movw	r30, r22
	second += interruptSecond;
     6ec:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <second>
     6f0:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <second+0x1>
     6f4:	82 0f       	add	r24, r18
     6f6:	93 1f       	adc	r25, r19
	minute += second/60; 
     6f8:	2c e3       	ldi	r18, 0x3C	; 60
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	b9 01       	movw	r22, r18
     6fe:	17 d7       	rcall	.+3630   	; 0x152e <__divmodhi4>
     700:	ec 01       	movw	r28, r24
     702:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
     706:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
     70a:	86 0f       	add	r24, r22
     70c:	97 1f       	adc	r25, r23
	hour += minute/60;
     70e:	b9 01       	movw	r22, r18
     710:	0e d7       	rcall	.+3612   	; 0x152e <__divmodhi4>
     712:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <hour>
     716:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <hour+0x1>
     71a:	62 0f       	add	r22, r18
     71c:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
     71e:	d0 93 be 01 	sts	0x01BE, r29	; 0x8001be <second+0x1>
     722:	c0 93 bd 01 	sts	0x01BD, r28	; 0x8001bd <second>
	minute = minute%60;
     726:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <minute+0x1>
     72a:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <minute>
	hour = hour%24;
     72e:	cb 01       	movw	r24, r22
     730:	68 e1       	ldi	r22, 0x18	; 24
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	fc d6       	rcall	.+3576   	; 0x152e <__divmodhi4>
     736:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <hour+0x1>
     73a:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <hour>
	// STOPWATCH에서 LCD 사용중인 경우 미노출
	if(segmentStopwatchInitFlag == 0) {
     73e:	ef 2b       	or	r30, r31
     740:	09 f0       	breq	.+2      	; 0x744 <setClock+0x5e>
		LcdMove(0,0);
     742:	4a c0       	rjmp	.+148    	; 0x7d8 <setClock+0xf2>
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	fc de       	rcall	.-520    	; 0x542 <LcdMove>
		LcdPutchar((hour/10%10) + '0');
     74a:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <hour>
     74e:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <hour+0x1>
     752:	ca e0       	ldi	r28, 0x0A	; 10
     754:	d0 e0       	ldi	r29, 0x00	; 0
     756:	be 01       	movw	r22, r28
     758:	ea d6       	rcall	.+3540   	; 0x152e <__divmodhi4>
     75a:	cb 01       	movw	r24, r22
     75c:	be 01       	movw	r22, r28
     75e:	e7 d6       	rcall	.+3534   	; 0x152e <__divmodhi4>
     760:	80 5d       	subi	r24, 0xD0	; 208
     762:	be de       	rcall	.-644    	; 0x4e0 <LcdPutchar>
		LcdPutchar(hour%10 + '0');
     764:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <hour>
     768:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <hour+0x1>
     76c:	be 01       	movw	r22, r28
     76e:	df d6       	rcall	.+3518   	; 0x152e <__divmodhi4>
     770:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar('h');
     772:	b6 de       	rcall	.-660    	; 0x4e0 <LcdPutchar>
     774:	88 e6       	ldi	r24, 0x68	; 104
		
		LcdMove(0,4);
     776:	b4 de       	rcall	.-664    	; 0x4e0 <LcdPutchar>
     778:	64 e0       	ldi	r22, 0x04	; 4
     77a:	80 e0       	ldi	r24, 0x00	; 0
		LcdPutchar((minute/10%10) + '0');
     77c:	e2 de       	rcall	.-572    	; 0x542 <LcdMove>
     77e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
     782:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
     786:	be 01       	movw	r22, r28
     788:	d2 d6       	rcall	.+3492   	; 0x152e <__divmodhi4>
     78a:	cb 01       	movw	r24, r22
     78c:	be 01       	movw	r22, r28
     78e:	cf d6       	rcall	.+3486   	; 0x152e <__divmodhi4>
     790:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar(minute%10 + '0');
     792:	a6 de       	rcall	.-692    	; 0x4e0 <LcdPutchar>
     794:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
     798:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
     79c:	be 01       	movw	r22, r28
     79e:	c7 d6       	rcall	.+3470   	; 0x152e <__divmodhi4>
     7a0:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar('m');
     7a2:	9e de       	rcall	.-708    	; 0x4e0 <LcdPutchar>
     7a4:	8d e6       	ldi	r24, 0x6D	; 109
     7a6:	9c de       	rcall	.-712    	; 0x4e0 <LcdPutchar>
		
		LcdMove(0,8);
     7a8:	68 e0       	ldi	r22, 0x08	; 8
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	ca de       	rcall	.-620    	; 0x542 <LcdMove>
		LcdPutchar((second/10%10) + '0');
     7ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <second>
     7b2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <second+0x1>
     7b6:	be 01       	movw	r22, r28
     7b8:	ba d6       	rcall	.+3444   	; 0x152e <__divmodhi4>
     7ba:	cb 01       	movw	r24, r22
     7bc:	be 01       	movw	r22, r28
     7be:	b7 d6       	rcall	.+3438   	; 0x152e <__divmodhi4>
     7c0:	80 5d       	subi	r24, 0xD0	; 208
     7c2:	8e de       	rcall	.-740    	; 0x4e0 <LcdPutchar>
     7c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <second>
		LcdPutchar(second%10 + '0');
     7c8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <second+0x1>
     7cc:	be 01       	movw	r22, r28
     7ce:	af d6       	rcall	.+3422   	; 0x152e <__divmodhi4>
     7d0:	80 5d       	subi	r24, 0xD0	; 208
     7d2:	86 de       	rcall	.-756    	; 0x4e0 <LcdPutchar>
     7d4:	83 e7       	ldi	r24, 0x73	; 115
     7d6:	84 de       	rcall	.-760    	; 0x4e0 <LcdPutchar>
     7d8:	df 91       	pop	r29
		LcdPutchar('s');
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <setCustomClock>:
     7de:	0f 93       	push	r16
	}
}
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	8c 01       	movw	r16, r24
int setCustomClock(int* ClockCounter_SECOND) {
	// -1 : 숫자가 눌린 경우(전) , 0: 선택이 눌린 경우, 1: 숫자가 눌린 경우(후), 위로 눌린 경우
	int returnStatus = -1;
	// 키를 입력받는 변수
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
     7e6:	f5 dd       	rcall	.-1046   	; 0x3d2 <KeyInput>
     7e8:	c8 2f       	mov	r28, r24
	
	LcdMove(1,customClockSettingIndex);
     7ea:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <customClockSettingIndex>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	a8 de       	rcall	.-688    	; 0x542 <LcdMove>
	while(1) {
		if(customClockSetInitFlag == 0){
     7f2:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <customClockSetInitFlag>
     7f6:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <customClockSetInitFlag+0x1>
     7fa:	89 2b       	or	r24, r25
     7fc:	79 f4       	brne	.+30     	; 0x81c <setCustomClock+0x3e>
			LcdMove(1,0);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	9f de       	rcall	.-706    	; 0x542 <LcdMove>
			LcdPuts("______");
     804:	8a e6       	ldi	r24, 0x6A	; 106
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	8e de       	rcall	.-740    	; 0x526 <LcdPuts>
			LcdMove(1,0);
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	99 de       	rcall	.-718    	; 0x542 <LcdMove>
     810:	81 e0       	ldi	r24, 0x01	; 1
			customClockSetInitFlag = 1;
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <customClockSetInitFlag+0x1>
     818:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <customClockSetInitFlag>
		}
		
		if(keyInput == NO_KEY){
     81c:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
     81e:	0d c0       	rjmp	.+26     	; 0x83a <setCustomClock+0x5c>
     820:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
     822:	16 de       	rcall	.-980    	; 0x450 <LcdCommand>
     824:	84 ef       	ldi	r24, 0xF4	; 244
     826:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
     828:	94 de       	rcall	.-728    	; 0x552 <msec_delay>
     82a:	8c e0       	ldi	r24, 0x0C	; 12
     82c:	11 de       	rcall	.-990    	; 0x450 <LcdCommand>
			msec_delay(500);
     82e:	84 ef       	ldi	r24, 0xF4	; 244
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	8f de       	rcall	.-738    	; 0x552 <msec_delay>
     834:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	13 c1       	rjmp	.+550    	; 0xa60 <setCustomClock+0x282>
     83a:	8c 2f       	mov	r24, r28
		}
		
		switch(keyInput) {
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	71 97       	sbiw	r30, 0x11	; 17
     842:	e4 37       	cpi	r30, 0x74	; 116
     844:	f1 05       	cpc	r31, r1
     846:	08 f0       	brcs	.+2      	; 0x84a <setCustomClock+0x6c>
     848:	fd c0       	rjmp	.+506    	; 0xa44 <setCustomClock+0x266>
     84a:	ea 5b       	subi	r30, 0xBA	; 186
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	82 c6       	rjmp	.+3332   	; 0x1554 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     850:	81 e3       	ldi	r24, 0x31	; 49
     852:	46 de       	rcall	.-884    	; 0x4e0 <LcdPutchar>
     854:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
				customClock[customClockSettingIndex] = 1;
     858:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	ef 53       	subi	r30, 0x3F	; 63
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	91 83       	std	Z+1, r25	; 0x01
     86a:	80 83       	st	Z, r24
				break;
     86c:	ee c0       	rjmp	.+476    	; 0xa4a <setCustomClock+0x26c>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
     86e:	82 e3       	ldi	r24, 0x32	; 50
     870:	37 de       	rcall	.-914    	; 0x4e0 <LcdPutchar>
     872:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
				customClock[customClockSettingIndex] = 2;
     876:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	ef 53       	subi	r30, 0x3F	; 63
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	91 83       	std	Z+1, r25	; 0x01
     888:	80 83       	st	Z, r24
				break;
     88a:	df c0       	rjmp	.+446    	; 0xa4a <setCustomClock+0x26c>
			
			case SW2:
				LcdPutchar('3');
     88c:	83 e3       	ldi	r24, 0x33	; 51
     88e:	28 de       	rcall	.-944    	; 0x4e0 <LcdPutchar>
     890:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
				customClock[customClockSettingIndex] = 3;
     894:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     898:	ee 0f       	add	r30, r30
     89a:	ff 1f       	adc	r31, r31
     89c:	ef 53       	subi	r30, 0x3F	; 63
     89e:	fe 4f       	sbci	r31, 0xFE	; 254
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	91 83       	std	Z+1, r25	; 0x01
     8a6:	80 83       	st	Z, r24
				break;
     8a8:	d0 c0       	rjmp	.+416    	; 0xa4a <setCustomClock+0x26c>
			
			case SW4:
				LcdPutchar('4');
     8aa:	84 e3       	ldi	r24, 0x34	; 52
     8ac:	19 de       	rcall	.-974    	; 0x4e0 <LcdPutchar>
     8ae:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
				customClock[customClockSettingIndex] = 4;
     8b2:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	ef 53       	subi	r30, 0x3F	; 63
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	84 e0       	ldi	r24, 0x04	; 4
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	91 83       	std	Z+1, r25	; 0x01
     8c4:	80 83       	st	Z, r24
				break;
     8c6:	c1 c0       	rjmp	.+386    	; 0xa4a <setCustomClock+0x26c>
			
			case SW5:
				LcdPutchar('5');
     8c8:	85 e3       	ldi	r24, 0x35	; 53
     8ca:	0a de       	rcall	.-1004   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 5;
     8cc:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     8d0:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	ef 53       	subi	r30, 0x3F	; 63
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	85 e0       	ldi	r24, 0x05	; 5
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	91 83       	std	Z+1, r25	; 0x01
     8e2:	80 83       	st	Z, r24
				break;
     8e4:	b2 c0       	rjmp	.+356    	; 0xa4a <setCustomClock+0x26c>
			
			case SW6:
				LcdPutchar('6');
     8e6:	86 e3       	ldi	r24, 0x36	; 54
     8e8:	fb dd       	rcall	.-1034   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 6;
     8ea:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     8ee:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	ef 53       	subi	r30, 0x3F	; 63
     8f8:	fe 4f       	sbci	r31, 0xFE	; 254
     8fa:	86 e0       	ldi	r24, 0x06	; 6
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	91 83       	std	Z+1, r25	; 0x01
     900:	80 83       	st	Z, r24
				break;
     902:	a3 c0       	rjmp	.+326    	; 0xa4a <setCustomClock+0x26c>
			
			case SW8:
				LcdPutchar('7');
     904:	87 e3       	ldi	r24, 0x37	; 55
     906:	ec dd       	rcall	.-1064   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 7;
     908:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     90c:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ef 53       	subi	r30, 0x3F	; 63
     916:	fe 4f       	sbci	r31, 0xFE	; 254
     918:	87 e0       	ldi	r24, 0x07	; 7
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	91 83       	std	Z+1, r25	; 0x01
     91e:	80 83       	st	Z, r24
				break;
			
			case SW9:
				LcdPutchar('8');
     920:	94 c0       	rjmp	.+296    	; 0xa4a <setCustomClock+0x26c>
     922:	88 e3       	ldi	r24, 0x38	; 56
     924:	dd dd       	rcall	.-1094   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 8;
     926:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     92a:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ef 53       	subi	r30, 0x3F	; 63
     934:	fe 4f       	sbci	r31, 0xFE	; 254
     936:	88 e0       	ldi	r24, 0x08	; 8
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	91 83       	std	Z+1, r25	; 0x01
				break;
     93c:	80 83       	st	Z, r24
			
			case SW10:
				LcdPutchar('9');
     93e:	85 c0       	rjmp	.+266    	; 0xa4a <setCustomClock+0x26c>
     940:	89 e3       	ldi	r24, 0x39	; 57
     942:	ce dd       	rcall	.-1124   	; 0x4e0 <LcdPutchar>
				customClock[customClockSettingIndex] = 9;
     944:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     948:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	ef 53       	subi	r30, 0x3F	; 63
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	89 e0       	ldi	r24, 0x09	; 9
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	91 83       	std	Z+1, r25	; 0x01
				break;
			
			case SW13:
				LcdPutchar('0');
     95a:	80 83       	st	Z, r24
     95c:	76 c0       	rjmp	.+236    	; 0xa4a <setCustomClock+0x26c>
     95e:	80 e3       	ldi	r24, 0x30	; 48
				customClock[customClockSettingIndex] = 0;
     960:	bf dd       	rcall	.-1154   	; 0x4e0 <LcdPutchar>
     962:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <customClockSettingIndex>
     966:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ef 53       	subi	r30, 0x3F	; 63
     970:	fe 4f       	sbci	r31, 0xFE	; 254
     972:	11 82       	std	Z+1, r1	; 0x01
				break;
     974:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
     976:	69 c0       	rjmp	.+210    	; 0xa4a <setCustomClock+0x26c>
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	e2 dd       	rcall	.-1084   	; 0x542 <LcdMove>
				LcdPuts("1. SET          ");				
     97e:	81 e7       	ldi	r24, 0x71	; 113
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	d1 dd       	rcall	.-1118   	; 0x526 <LcdPuts>
     984:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <customClockSettingIndex+0x1>
			customClockSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			customClockSettingIndex = 0;
     988:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <customClockSettingIndex>
     98c:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
     98e:	11 82       	std	Z+1, r1	; 0x01
     990:	10 82       	st	Z, r1
     992:	e1 ec       	ldi	r30, 0xC1	; 193
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customClock[0] * 10 + customClock[1];
     994:	f1 e0       	ldi	r31, 0x01	; 1
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	9c 01       	movw	r18, r24
     99c:	22 0f       	add	r18, r18
     99e:	33 1f       	adc	r19, r19
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	22 81       	ldd	r18, Z+2	; 0x02
     9b2:	33 81       	ldd	r19, Z+3	; 0x03
     9b4:	82 0f       	add	r24, r18
     9b6:	93 1f       	adc	r25, r19
     9b8:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <hour+0x1>
     9bc:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <hour>
     9c0:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customClock[2] * 10 + customClock[3];
     9c2:	95 81       	ldd	r25, Z+5	; 0x05
     9c4:	9c 01       	movw	r18, r24
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	26 81       	ldd	r18, Z+6	; 0x06
     9dc:	37 81       	ldd	r19, Z+7	; 0x07
     9de:	82 0f       	add	r24, r18
     9e0:	93 1f       	adc	r25, r19
     9e2:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <minute+0x1>
     9e6:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <minute>
     9ea:	80 85       	ldd	r24, Z+8	; 0x08
			second = customClock[4] * 10 + customClock[5];
     9ec:	91 85       	ldd	r25, Z+9	; 0x09
     9ee:	9c 01       	movw	r18, r24
     9f0:	22 0f       	add	r18, r18
     9f2:	33 1f       	adc	r19, r19
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	82 0f       	add	r24, r18
     a02:	93 1f       	adc	r25, r19
     a04:	22 85       	ldd	r18, Z+10	; 0x0a
     a06:	33 85       	ldd	r19, Z+11	; 0x0b
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <second+0x1>
     a10:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <second>
			customClockSetInitFlag = 0;
     a14:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <customClockSetInitFlag+0x1>
     a18:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <customClockSetInitFlag>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --customClockSettingIndex);
     a20:	1f c0       	rjmp	.+62     	; 0xa60 <setCustomClock+0x282>
     a22:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <customClockSettingIndex>
     a26:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     a2a:	61 50       	subi	r22, 0x01	; 1
     a2c:	71 09       	sbc	r23, r1
     a2e:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <customClockSettingIndex+0x1>
     a32:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <customClockSettingIndex>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	84 dd       	rcall	.-1272   	; 0x542 <LcdMove>
				LcdPutchar('_');
     a3a:	8f e5       	ldi	r24, 0x5F	; 95
     a3c:	51 dd       	rcall	.-1374   	; 0x4e0 <LcdPutchar>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
				returnStatus = 1;
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e c0       	rjmp	.+28     	; 0xa60 <setCustomClock+0x282>
     a44:	81 e0       	ldi	r24, 0x01	; 1
				break;
				
			default:
				returnStatus = 1;
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0b c0       	rjmp	.+22     	; 0xa60 <setCustomClock+0x282>
     a4a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <customClockSettingIndex>
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			customClockSettingIndex++;
     a4e:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <customClockSettingIndex+0x1>
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <customClockSettingIndex+0x1>
     a58:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <customClockSettingIndex>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 1;
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	cf 91       	pop	r28
			customClockSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <initMenu>:
static char str1[] = "00h 00m 00s";
static int nowMenuCursor = 0;
static int nowStatus = 1;

void initMenu() {
	LcdMove(0,0);
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	6a dd       	rcall	.-1324   	; 0x542 <LcdMove>
	LcdPuts(str1);
     a6e:	88 e0       	ldi	r24, 0x08	; 8
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	59 dd       	rcall	.-1358   	; 0x526 <LcdPuts>
	LcdMove(1,0);
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	64 dd       	rcall	.-1336   	; 0x542 <LcdMove>
	LcdPuts(Set);
     a7a:	89 e4       	ldi	r24, 0x49	; 73
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	53 cd       	rjmp	.-1370   	; 0x526 <LcdPuts>
     a80:	08 95       	ret

00000a82 <setMenu>:
     a82:	cf 93       	push	r28
}



// MENU 세팅용 함수
int setMenu(char clickedButton) {
     a84:	df 93       	push	r29
     a86:	c8 2f       	mov	r28, r24
	LcdMove(1,0);			// 2행으로
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	5a dd       	rcall	.-1356   	; 0x542 <LcdMove>
	switch(clickedButton) {
     a8e:	c1 32       	cpi	r28, 0x21	; 33
     a90:	09 f4       	brne	.+2      	; 0xa94 <setMenu+0x12>
     a92:	52 c0       	rjmp	.+164    	; 0xb38 <setMenu+0xb6>
     a94:	c1 34       	cpi	r28, 0x41	; 65
     a96:	09 f4       	brne	.+2      	; 0xa9a <setMenu+0x18>
     a98:	9a c0       	rjmp	.+308    	; 0xbce <setMenu+0x14c>
     a9a:	c1 31       	cpi	r28, 0x11	; 17
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <setMenu+0x1e>
     a9e:	9c c0       	rjmp	.+312    	; 0xbd8 <setMenu+0x156>
		// up button clicked
		case SW3:
			if ( nowMenuCursor == 1) {
     aa0:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <nowMenuCursor>
     aa4:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <nowMenuCursor+0x1>
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	91 05       	cpc	r25, r1
     aac:	81 f4       	brne	.+32     	; 0xace <setMenu+0x4c>
				nowMenuCursor--;
     aae:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <nowMenuCursor+0x1>
     ab2:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <nowMenuCursor>
				LcdPuts(Set);
     ab6:	89 e4       	ldi	r24, 0x49	; 73
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	35 dd       	rcall	.-1430   	; 0x526 <LcdPuts>
				nowStatus = 1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     ac4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     ac8:	c0 e0       	ldi	r28, 0x00	; 0
     aca:	d0 e0       	ldi	r29, 0x00	; 0
     acc:	87 c0       	rjmp	.+270    	; 0xbdc <setMenu+0x15a>
			if ( nowMenuCursor == 1) {
				nowMenuCursor--;
				LcdPuts(Set);
				nowStatus = 1;
			}
			else if ( nowMenuCursor == 2) {
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	91 05       	cpc	r25, r1
     ad2:	91 f4       	brne	.+36     	; 0xaf8 <setMenu+0x76>
				nowMenuCursor--;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     adc:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Timer);
     ae0:	87 e3       	ldi	r24, 0x37	; 55
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	20 dd       	rcall	.-1472   	; 0x526 <LcdPuts>
				nowStatus = 2;
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     aee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     af2:	c0 e0       	ldi	r28, 0x00	; 0
     af4:	d0 e0       	ldi	r29, 0x00	; 0
     af6:	72 c0       	rjmp	.+228    	; 0xbdc <setMenu+0x15a>
			else if ( nowMenuCursor == 2) {
				nowMenuCursor--;
				LcdPuts(Timer);
				nowStatus = 2;
			}
			else if ( nowMenuCursor == 3) {
     af8:	03 97       	sbiw	r24, 0x03	; 3
     afa:	91 f4       	brne	.+36     	; 0xb20 <setMenu+0x9e>
				nowMenuCursor--;
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     b04:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(StopWatch);
     b08:	87 e2       	ldi	r24, 0x27	; 39
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0c dd       	rcall	.-1512   	; 0x526 <LcdPuts>
				nowStatus = 3;
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b16:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     b1a:	c0 e0       	ldi	r28, 0x00	; 0
     b1c:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor--;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else{
				LcdPuts(Set);
     b1e:	5e c0       	rjmp	.+188    	; 0xbdc <setMenu+0x15a>
     b20:	89 e4       	ldi	r24, 0x49	; 73
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	00 dd       	rcall	.-1536   	; 0x526 <LcdPuts>
				nowStatus = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b2e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			return 0;
     b32:	c0 e0       	ldi	r28, 0x00	; 0
     b34:	d0 e0       	ldi	r29, 0x00	; 0
     b36:	52 c0       	rjmp	.+164    	; 0xbdc <setMenu+0x15a>
			break;
		
		
		// down button clicked
		case SW7:
			if ( nowMenuCursor == 0) {
     b38:	c0 91 cf 01 	lds	r28, 0x01CF	; 0x8001cf <nowMenuCursor>
     b3c:	d0 91 d0 01 	lds	r29, 0x01D0	; 0x8001d0 <nowMenuCursor+0x1>
     b40:	20 97       	sbiw	r28, 0x00	; 0
     b42:	81 f4       	brne	.+32     	; 0xb64 <setMenu+0xe2>
				nowMenuCursor++;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     b4c:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Timer);
     b50:	87 e3       	ldi	r24, 0x37	; 55
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	e8 dc       	rcall	.-1584   	; 0x526 <LcdPuts>
				nowStatus = 2;
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b5e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
     b62:	3c c0       	rjmp	.+120    	; 0xbdc <setMenu+0x15a>
			}
			else if ( nowMenuCursor == 1) {
     b64:	c1 30       	cpi	r28, 0x01	; 1
     b66:	d1 05       	cpc	r29, r1
     b68:	91 f4       	brne	.+36     	; 0xb8e <setMenu+0x10c>
				nowMenuCursor++;
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     b72:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(StopWatch);
     b76:	87 e2       	ldi	r24, 0x27	; 39
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	d5 dc       	rcall	.-1622   	; 0x526 <LcdPuts>
				nowStatus = 3;
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b84:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
     b88:	c0 e0       	ldi	r28, 0x00	; 0
     b8a:	d0 e0       	ldi	r29, 0x00	; 0
     b8c:	27 c0       	rjmp	.+78     	; 0xbdc <setMenu+0x15a>
			else if ( nowMenuCursor == 1) {
				nowMenuCursor++;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else if ( nowMenuCursor == 2) {
     b8e:	22 97       	sbiw	r28, 0x02	; 2
     b90:	91 f4       	brne	.+36     	; 0xbb6 <setMenu+0x134>
				nowMenuCursor++;
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
     b9a:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Alarm);
     b9e:	84 e1       	ldi	r24, 0x14	; 20
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	c1 dc       	rcall	.-1662   	; 0x526 <LcdPuts>
				nowStatus = 4;
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     bac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
     bb0:	c0 e0       	ldi	r28, 0x00	; 0
     bb2:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor++;
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			else{
				LcdPuts(Alarm);
     bb4:	13 c0       	rjmp	.+38     	; 0xbdc <setMenu+0x15a>
     bb6:	84 e1       	ldi	r24, 0x14	; 20
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	b5 dc       	rcall	.-1686   	; 0x526 <LcdPuts>
				nowStatus = 4;
     bbc:	84 e0       	ldi	r24, 0x04	; 4
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     bc4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			return 0;
     bc8:	c0 e0       	ldi	r28, 0x00	; 0
     bca:	d0 e0       	ldi	r29, 0x00	; 0
     bcc:	07 c0       	rjmp	.+14     	; 0xbdc <setMenu+0x15a>
			break;
		
		
		// When select button clicked, 메인파일의 각 status에 해당하는 기능을 위한 while문을 돌림
		case SW11:
			return nowStatus;
     bce:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <nowStatus>
     bd2:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <nowStatus+0x1>
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <setMenu+0x15a>
			break;
		
		default:
			return 0;
     bd8:	c0 e0       	ldi	r28, 0x00	; 0
     bda:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
     bdc:	ce 01       	movw	r24, r28
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <setStopwatch>:
// stopwatch stop flag
static int stopwatchStopFlag = 0;

static int stopwatchDisplayIndex = 0;

int setStopwatch(int* stopwatchInitFlag) {
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	8c 01       	movw	r16, r24
	int returnStatus = -1;
	// 처음 진입시에만 실행
	if(customStopwatchSetInitFlag == 0) {
     bec:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <customStopwatchSetInitFlag>
     bf0:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <customStopwatchSetInitFlag+0x1>
     bf4:	89 2b       	or	r24, r25
     bf6:	71 f4       	brne	.+28     	; 0xc14 <setStopwatch+0x30>
		ISeg7Init();
     bf8:	50 db       	rcall	.-2400   	; 0x29a <ISeg7Init>
		ISeg7DispNum(segmentStopwatchDisplayNumber , 10);
     bfa:	6a e0       	ldi	r22, 0x0A	; 10
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <segmentStopwatchDisplayNumber>
     c02:	90 91 a8 09 	lds	r25, 0x09A8	; 0x8009a8 <segmentStopwatchDisplayNumber+0x1>
     c06:	5c db       	rcall	.-2376   	; 0x2c0 <ISeg7DispNum>
		// 초기화면 세팅
		LcdMove(0,0);
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	9a dc       	rcall	.-1740   	; 0x542 <LcdMove>
		LcdPuts("0m 00.0s     ");
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	89 dc       	rcall	.-1774   	; 0x526 <LcdPuts>
     c14:	81 e0       	ldi	r24, 0x01	; 1
	}
	customStopwatchSetInitFlag = 1;
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <customStopwatchSetInitFlag+0x1>
     c1c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <customStopwatchSetInitFlag>

	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
     c20:	d8 db       	rcall	.-2128   	; 0x3d2 <KeyInput>
     c22:	c8 2f       	mov	r28, r24
     c24:	6a e0       	ldi	r22, 0x0A	; 10
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <segmentStopwatchDisplayNumber>
     c2c:	90 91 a8 09 	lds	r25, 0x09A8	; 0x8009a8 <segmentStopwatchDisplayNumber+0x1>
     c30:	47 db       	rcall	.-2418   	; 0x2c0 <ISeg7DispNum>
     c32:	c1 34       	cpi	r28, 0x41	; 65
	while(1) {
		switch(keyInput) {
     c34:	b9 f4       	brne	.+46     	; 0xc64 <setStopwatch+0x80>
     c36:	81 e0       	ldi	r24, 0x01	; 1
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	f8 01       	movw	r30, r16
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	80 83       	st	Z, r24
				returnStatus = 0;
				LcdMove(0,0);
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	7e dc       	rcall	.-1796   	; 0x542 <LcdMove>
				LcdPuts("              ");
     c46:	88 e9       	ldi	r24, 0x98	; 152
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	6d dc       	rcall	.-1830   	; 0x526 <LcdPuts>
				
				LcdMove(1,0);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	78 dc       	rcall	.-1808   	; 0x542 <LcdMove>
				LcdPuts("              ");
     c52:	88 e9       	ldi	r24, 0x98	; 152
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	67 dc       	rcall	.-1842   	; 0x526 <LcdPuts>
     c58:	60 e0       	ldi	r22, 0x00	; 0
				
				LcdMove(0,0);
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	72 dc       	rcall	.-1820   	; 0x542 <LcdMove>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
				returnStatus = 0;
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <setStopwatch+0x84>
     c64:	83 e0       	ldi	r24, 0x03	; 3
				
				LcdMove(1,0);
				LcdPuts("              ");
				
				LcdMove(0,0);
				break;
     c66:	90 e0       	ldi	r25, 0x00	; 0
			
			default:
				returnStatus = 3;
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
		if(returnStatus == 0) {
			
		}
		return returnStatus;
	}
}
     c6c:	0f 91       	pop	r16
     c6e:	08 95       	ret

00000c70 <set7SegmentStopwatch>:
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15

int set7SegmentStopwatch(int clock_counter, unsigned char stopwatchKeyInput) {
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	8c 01       	movw	r16, r24
     c7e:	c6 2f       	mov	r28, r22
	ISeg7Init();
     c80:	0c db       	rcall	.-2536   	; 0x29a <ISeg7Init>
	if(stopwatchStopFlag == 0 ) {
     c82:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchStopFlag>
     c86:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchStopFlag+0x1>
     c8a:	89 2b       	or	r24, r25
     c8c:	09 f0       	breq	.+2      	; 0xc90 <set7SegmentStopwatch+0x20>
     c8e:	9c c2       	rjmp	.+1336   	; 0x11c8 <__stack+0xc9>
		int nowStopwatchDisplayNumber = segmentStopwatchDisplayNumber + clock_counter;
     c90:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <segmentStopwatchDisplayNumber>
     c94:	90 91 a8 09 	lds	r25, 0x09A8	; 0x8009a8 <segmentStopwatchDisplayNumber+0x1>
     c98:	80 0f       	add	r24, r16
     c9a:	91 1f       	adc	r25, r17
		if(nowStopwatchDisplayNumber == 600) {
     c9c:	88 35       	cpi	r24, 0x58	; 88
     c9e:	22 e0       	ldi	r18, 0x02	; 2
     ca0:	92 07       	cpc	r25, r18
     ca2:	11 f4       	brne	.+4      	; 0xca8 <set7SegmentStopwatch+0x38>
			nowStopwatchDisplayNumber += 400;
     ca4:	88 ee       	ldi	r24, 0xE8	; 232
     ca6:	93 e0       	ldi	r25, 0x03	; 3
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
     ca8:	90 93 a8 09 	sts	0x09A8, r25	; 0x8009a8 <segmentStopwatchDisplayNumber+0x1>
     cac:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <segmentStopwatchDisplayNumber>
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
     cb0:	6a e0       	ldi	r22, 0x0A	; 10
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 db       	rcall	.-2550   	; 0x2c0 <ISeg7DispNum>
	}
	
	
	
	switch(stopwatchKeyInput) {
     cb6:	c1 31       	cpi	r28, 0x11	; 17
     cb8:	21 f0       	breq	.+8      	; 0xcc2 <set7SegmentStopwatch+0x52>
     cba:	c1 32       	cpi	r28, 0x21	; 33
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <set7SegmentStopwatch+0x50>
     cbe:	bc c1       	rjmp	.+888    	; 0x1038 <set7SegmentStopwatch+0x3c8>
     cc0:	89 c2       	rjmp	.+1298   	; 0x11d4 <__stack+0xd5>
		case SW3:
			// 스톱워치 진행중
			if(stopwatchStopFlag == 0){
     cc2:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchStopFlag>
     cc6:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchStopFlag+0x1>
     cca:	89 2b       	or	r24, r25
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <set7SegmentStopwatch+0x60>
     cce:	09 c1       	rjmp	.+530    	; 0xee2 <set7SegmentStopwatch+0x272>
				// 첫 + 두번째 입력
				if(stopwatchDisplayIndex<=1) {
     cd0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     cd4:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	91 05       	cpc	r25, r1
     cdc:	0c f0       	brlt	.+2      	; 0xce0 <set7SegmentStopwatch+0x70>
					LcdMove(stopwatchDisplayIndex, 0);
     cde:	52 c0       	rjmp	.+164    	; 0xd84 <set7SegmentStopwatch+0x114>
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	2f dc       	rcall	.-1954   	; 0x542 <LcdMove>
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
     ce4:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <segmentStopwatchDisplayNumber>
     ce8:	90 91 a8 09 	lds	r25, 0x09A8	; 0x8009a8 <segmentStopwatchDisplayNumber+0x1>
     cec:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     cf0:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	e9 52       	subi	r30, 0x29	; 41
     cfa:	fe 4f       	sbci	r31, 0xFE	; 254
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
     d00:	c8 ee       	ldi	r28, 0xE8	; 232
     d02:	d3 e0       	ldi	r29, 0x03	; 3
     d04:	be 01       	movw	r22, r28
     d06:	13 d4       	rcall	.+2086   	; 0x152e <__divmodhi4>
     d08:	80 e3       	ldi	r24, 0x30	; 48
     d0a:	86 0f       	add	r24, r22
					LcdPutchar('m');
     d0c:	e9 db       	rcall	.-2094   	; 0x4e0 <LcdPutchar>
     d0e:	8d e6       	ldi	r24, 0x6D	; 109
     d10:	e7 db       	rcall	.-2098   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     d12:	80 e2       	ldi	r24, 0x20	; 32
     d14:	e5 db       	rcall	.-2102   	; 0x4e0 <LcdPutchar>
     d16:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
     d1a:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	e9 52       	subi	r30, 0x29	; 41
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	be 01       	movw	r22, r28
     d2c:	00 d4       	rcall	.+2048   	; 0x152e <__divmodhi4>
     d2e:	c4 e6       	ldi	r28, 0x64	; 100
     d30:	d0 e0       	ldi	r29, 0x00	; 0
     d32:	be 01       	movw	r22, r28
     d34:	fc d3       	rcall	.+2040   	; 0x152e <__divmodhi4>
     d36:	80 e3       	ldi	r24, 0x30	; 48
     d38:	86 0f       	add	r24, r22
     d3a:	d2 db       	rcall	.-2140   	; 0x4e0 <LcdPutchar>
     d3c:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
     d40:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	e9 52       	subi	r30, 0x29	; 41
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	be 01       	movw	r22, r28
     d52:	ed d3       	rcall	.+2010   	; 0x152e <__divmodhi4>
     d54:	ca e0       	ldi	r28, 0x0A	; 10
     d56:	d0 e0       	ldi	r29, 0x00	; 0
     d58:	be 01       	movw	r22, r28
     d5a:	e9 d3       	rcall	.+2002   	; 0x152e <__divmodhi4>
     d5c:	80 e3       	ldi	r24, 0x30	; 48
     d5e:	86 0f       	add	r24, r22
     d60:	bf db       	rcall	.-2178   	; 0x4e0 <LcdPutchar>
					LcdPutchar('.');
     d62:	8e e2       	ldi	r24, 0x2E	; 46
     d64:	bd db       	rcall	.-2182   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
     d66:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     d6a:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	e9 52       	subi	r30, 0x29	; 41
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	be 01       	movw	r22, r28
     d7c:	d8 d3       	rcall	.+1968   	; 0x152e <__divmodhi4>
     d7e:	80 5d       	subi	r24, 0xD0	; 208
     d80:	af db       	rcall	.-2210   	; 0x4e0 <LcdPutchar>
     d82:	a5 c0       	rjmp	.+330    	; 0xece <set7SegmentStopwatch+0x25e>
     d84:	88 0f       	add	r24, r24
				}
				else {
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
     d86:	99 1f       	adc	r25, r25
     d88:	fc 01       	movw	r30, r24
     d8a:	e9 52       	subi	r30, 0x29	; 41
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <segmentStopwatchDisplayNumber>
     d92:	90 91 a8 09 	lds	r25, 0x09A8	; 0x8009a8 <segmentStopwatchDisplayNumber+0x1>
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
     d9a:	60 e0       	ldi	r22, 0x00	; 0
					// 0번째 행 변경
					LcdMove(0,0);
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	d1 db       	rcall	.-2142   	; 0x542 <LcdMove>
     da0:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
     da4:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	eb 52       	subi	r30, 0x2B	; 43
     dae:	fe 4f       	sbci	r31, 0xFE	; 254
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	0f 2e       	mov	r0, r31
     db6:	f8 ee       	ldi	r31, 0xE8	; 232
     db8:	ef 2e       	mov	r14, r31
     dba:	f3 e0       	ldi	r31, 0x03	; 3
     dbc:	ff 2e       	mov	r15, r31
     dbe:	f0 2d       	mov	r31, r0
     dc0:	b7 01       	movw	r22, r14
     dc2:	b5 d3       	rcall	.+1898   	; 0x152e <__divmodhi4>
     dc4:	80 e3       	ldi	r24, 0x30	; 48
     dc6:	86 0f       	add	r24, r22
     dc8:	8b db       	rcall	.-2282   	; 0x4e0 <LcdPutchar>
					LcdPutchar('m');
     dca:	8d e6       	ldi	r24, 0x6D	; 109
     dcc:	89 db       	rcall	.-2286   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     dce:	80 e2       	ldi	r24, 0x20	; 32
     dd0:	87 db       	rcall	.-2290   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
     dd2:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     dd6:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	eb 52       	subi	r30, 0x2B	; 43
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	b7 01       	movw	r22, r14
     de8:	a2 d3       	rcall	.+1860   	; 0x152e <__divmodhi4>
     dea:	c4 e6       	ldi	r28, 0x64	; 100
     dec:	d0 e0       	ldi	r29, 0x00	; 0
     dee:	be 01       	movw	r22, r28
     df0:	9e d3       	rcall	.+1852   	; 0x152e <__divmodhi4>
     df2:	80 e3       	ldi	r24, 0x30	; 48
     df4:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
     df6:	74 db       	rcall	.-2328   	; 0x4e0 <LcdPutchar>
     df8:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     dfc:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	eb 52       	subi	r30, 0x2B	; 43
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	be 01       	movw	r22, r28
     e0e:	8f d3       	rcall	.+1822   	; 0x152e <__divmodhi4>
     e10:	0a e0       	ldi	r16, 0x0A	; 10
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	b8 01       	movw	r22, r16
     e16:	8b d3       	rcall	.+1814   	; 0x152e <__divmodhi4>
     e18:	80 e3       	ldi	r24, 0x30	; 48
     e1a:	86 0f       	add	r24, r22
					LcdPutchar('.');
     e1c:	61 db       	rcall	.-2366   	; 0x4e0 <LcdPutchar>
     e1e:	8e e2       	ldi	r24, 0x2E	; 46
     e20:	5f db       	rcall	.-2370   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');
     e22:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     e26:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	eb 52       	subi	r30, 0x2B	; 43
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	b8 01       	movw	r22, r16
     e38:	7a d3       	rcall	.+1780   	; 0x152e <__divmodhi4>
					
					// 1번째 행 변경
					LcdMove(1,0);
     e3a:	80 5d       	subi	r24, 0xD0	; 208
     e3c:	51 db       	rcall	.-2398   	; 0x4e0 <LcdPutchar>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	7f db       	rcall	.-2306   	; 0x542 <LcdMove>
     e44:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     e48:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	e9 52       	subi	r30, 0x29	; 41
     e52:	fe 4f       	sbci	r31, 0xFE	; 254
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	b7 01       	movw	r22, r14
     e5a:	69 d3       	rcall	.+1746   	; 0x152e <__divmodhi4>
     e5c:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('m');
     e5e:	86 0f       	add	r24, r22
     e60:	3f db       	rcall	.-2434   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     e62:	8d e6       	ldi	r24, 0x6D	; 109
     e64:	3d db       	rcall	.-2438   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	3b db       	rcall	.-2442   	; 0x4e0 <LcdPutchar>
     e6a:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     e6e:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	e9 52       	subi	r30, 0x29	; 41
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	b7 01       	movw	r22, r14
     e80:	56 d3       	rcall	.+1708   	; 0x152e <__divmodhi4>
     e82:	be 01       	movw	r22, r28
     e84:	54 d3       	rcall	.+1704   	; 0x152e <__divmodhi4>
     e86:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
     e88:	86 0f       	add	r24, r22
     e8a:	2a db       	rcall	.-2476   	; 0x4e0 <LcdPutchar>
     e8c:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     e90:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	e9 52       	subi	r30, 0x29	; 41
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	be 01       	movw	r22, r28
     ea2:	45 d3       	rcall	.+1674   	; 0x152e <__divmodhi4>
     ea4:	b8 01       	movw	r22, r16
     ea6:	43 d3       	rcall	.+1670   	; 0x152e <__divmodhi4>
     ea8:	80 e3       	ldi	r24, 0x30	; 48
     eaa:	86 0f       	add	r24, r22
     eac:	19 db       	rcall	.-2510   	; 0x4e0 <LcdPutchar>
					LcdPutchar('.');
     eae:	8e e2       	ldi	r24, 0x2E	; 46
     eb0:	17 db       	rcall	.-2514   	; 0x4e0 <LcdPutchar>
     eb2:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
     eb6:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	e9 52       	subi	r30, 0x29	; 41
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	b8 01       	movw	r22, r16
     ec8:	32 d3       	rcall	.+1636   	; 0x152e <__divmodhi4>
     eca:	80 5d       	subi	r24, 0xD0	; 208
     ecc:	09 db       	rcall	.-2542   	; 0x4e0 <LcdPutchar>
     ece:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
				}
				stopwatchDisplayIndex += 1;
     ed2:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     edc:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <stopwatchDisplayIndex>
     ee0:	79 c1       	rjmp	.+754    	; 0x11d4 <__stack+0xd5>
			}
			// 아래키 눌러서 변경한 경우
			else {
				// 이미 행 두개 추가되있는 경우에만
				if(stopwatchDisplayIndex >= 2){
     ee2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     ee6:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     eea:	02 97       	sbiw	r24, 0x02	; 2
     eec:	0c f4       	brge	.+2      	; 0xef0 <set7SegmentStopwatch+0x280>
					//TODO: 모터구동
					
					LcdMove(0,0);
     eee:	72 c1       	rjmp	.+740    	; 0x11d4 <__stack+0xd5>
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]/1000+'0');
     ef4:	26 db       	rcall	.-2484   	; 0x542 <LcdMove>
     ef6:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     efa:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	ed 52       	subi	r30, 0x2D	; 45
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	0f 2e       	mov	r0, r31
     f0c:	f8 ee       	ldi	r31, 0xE8	; 232
     f0e:	ef 2e       	mov	r14, r31
     f10:	f3 e0       	ldi	r31, 0x03	; 3
     f12:	ff 2e       	mov	r15, r31
     f14:	f0 2d       	mov	r31, r0
     f16:	b7 01       	movw	r22, r14
     f18:	0a d3       	rcall	.+1556   	; 0x152e <__divmodhi4>
					LcdPutchar('m');
     f1a:	80 e3       	ldi	r24, 0x30	; 48
     f1c:	86 0f       	add	r24, r22
     f1e:	e0 da       	rcall	.-2624   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     f20:	8d e6       	ldi	r24, 0x6D	; 109
     f22:	de da       	rcall	.-2628   	; 0x4e0 <LcdPutchar>
     f24:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%1000/100+'0');
     f26:	dc da       	rcall	.-2632   	; 0x4e0 <LcdPutchar>
     f28:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     f2c:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	ed 52       	subi	r30, 0x2D	; 45
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	b7 01       	movw	r22, r14
     f3e:	f7 d2       	rcall	.+1518   	; 0x152e <__divmodhi4>
     f40:	04 e6       	ldi	r16, 0x64	; 100
     f42:	10 e0       	ldi	r17, 0x00	; 0
     f44:	b8 01       	movw	r22, r16
     f46:	f3 d2       	rcall	.+1510   	; 0x152e <__divmodhi4>
     f48:	80 e3       	ldi	r24, 0x30	; 48
     f4a:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%100/10+'0');
     f4c:	c9 da       	rcall	.-2670   	; 0x4e0 <LcdPutchar>
     f4e:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     f52:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ed 52       	subi	r30, 0x2D	; 45
     f5c:	fe 4f       	sbci	r31, 0xFE	; 254
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	b8 01       	movw	r22, r16
     f64:	e4 d2       	rcall	.+1480   	; 0x152e <__divmodhi4>
     f66:	ca e0       	ldi	r28, 0x0A	; 10
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	be 01       	movw	r22, r28
     f6c:	e0 d2       	rcall	.+1472   	; 0x152e <__divmodhi4>
     f6e:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('.');
     f70:	86 0f       	add	r24, r22
     f72:	b6 da       	rcall	.-2708   	; 0x4e0 <LcdPutchar>
     f74:	8e e2       	ldi	r24, 0x2E	; 46
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%10+'0');
     f76:	b4 da       	rcall	.-2712   	; 0x4e0 <LcdPutchar>
     f78:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     f7c:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	ed 52       	subi	r30, 0x2D	; 45
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	be 01       	movw	r22, r28
     f8e:	cf d2       	rcall	.+1438   	; 0x152e <__divmodhi4>
					
					// 1번째 행 변경
					LcdMove(1,0);
     f90:	80 5d       	subi	r24, 0xD0	; 208
     f92:	a6 da       	rcall	.-2740   	; 0x4e0 <LcdPutchar>
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
     f98:	d4 da       	rcall	.-2648   	; 0x542 <LcdMove>
     f9a:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     f9e:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	eb 52       	subi	r30, 0x2B	; 43
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	b7 01       	movw	r22, r14
     fb0:	be d2       	rcall	.+1404   	; 0x152e <__divmodhi4>
     fb2:	80 e3       	ldi	r24, 0x30	; 48
     fb4:	86 0f       	add	r24, r22
					LcdPutchar('m');
     fb6:	94 da       	rcall	.-2776   	; 0x4e0 <LcdPutchar>
     fb8:	8d e6       	ldi	r24, 0x6D	; 109
     fba:	92 da       	rcall	.-2780   	; 0x4e0 <LcdPutchar>
					LcdPutchar(' ');
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	90 da       	rcall	.-2784   	; 0x4e0 <LcdPutchar>
     fc0:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
     fc4:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
     fc8:	ee 0f       	add	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	eb 52       	subi	r30, 0x2B	; 43
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	b7 01       	movw	r22, r14
     fd6:	ab d2       	rcall	.+1366   	; 0x152e <__divmodhi4>
     fd8:	b8 01       	movw	r22, r16
     fda:	a9 d2       	rcall	.+1362   	; 0x152e <__divmodhi4>
     fdc:	80 e3       	ldi	r24, 0x30	; 48
     fde:	86 0f       	add	r24, r22
     fe0:	7f da       	rcall	.-2818   	; 0x4e0 <LcdPutchar>
     fe2:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
     fe6:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	eb 52       	subi	r30, 0x2B	; 43
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	b8 01       	movw	r22, r16
     ff8:	9a d2       	rcall	.+1332   	; 0x152e <__divmodhi4>
     ffa:	be 01       	movw	r22, r28
     ffc:	98 d2       	rcall	.+1328   	; 0x152e <__divmodhi4>
     ffe:	80 e3       	ldi	r24, 0x30	; 48
    1000:	86 0f       	add	r24, r22
    1002:	6e da       	rcall	.-2852   	; 0x4e0 <LcdPutchar>
    1004:	8e e2       	ldi	r24, 0x2E	; 46
    1006:	6c da       	rcall	.-2856   	; 0x4e0 <LcdPutchar>
    1008:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    100c:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
					LcdPutchar('.');
    1010:	ee 0f       	add	r30, r30
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');	
    1012:	ff 1f       	adc	r31, r31
    1014:	eb 52       	subi	r30, 0x2B	; 43
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	be 01       	movw	r22, r28
    101e:	87 d2       	rcall	.+1294   	; 0x152e <__divmodhi4>
    1020:	80 5d       	subi	r24, 0xD0	; 208
    1022:	5e da       	rcall	.-2884   	; 0x4e0 <LcdPutchar>
    1024:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    1028:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    102c:	01 97       	sbiw	r24, 0x01	; 1
					stopwatchDisplayIndex -= 1;
    102e:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    1032:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <stopwatchDisplayIndex>
    1036:	ce c0       	rjmp	.+412    	; 0x11d4 <__stack+0xd5>
    1038:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <stopwatchStopFlag>
    103c:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <stopwatchStopFlag+0x1>
				}
			}
			break;
			
		case SW7:
			if(stopwatchStopFlag == 1) {			
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	09 f0       	breq	.+2      	; 0x1046 <set7SegmentStopwatch+0x3d6>
    1044:	b1 c0       	rjmp	.+354    	; 0x11a8 <__stack+0xa9>
    1046:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
				if(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1] != 0){
    104a:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	e7 52       	subi	r30, 0x27	; 39
    1054:	fe 4f       	sbci	r31, 0xFE	; 254
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	89 2b       	or	r24, r25
    105c:	09 f4       	brne	.+2      	; 0x1060 <set7SegmentStopwatch+0x3f0>
					LcdMove(0,0);
    105e:	ba c0       	rjmp	.+372    	; 0x11d4 <__stack+0xd5>
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	6e da       	rcall	.-2852   	; 0x542 <LcdMove>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    1066:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    106a:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	e9 52       	subi	r30, 0x29	; 41
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	0f 2e       	mov	r0, r31
    107c:	f8 ee       	ldi	r31, 0xE8	; 232
    107e:	ef 2e       	mov	r14, r31
    1080:	f3 e0       	ldi	r31, 0x03	; 3
    1082:	ff 2e       	mov	r15, r31
    1084:	f0 2d       	mov	r31, r0
    1086:	b7 01       	movw	r22, r14
    1088:	52 d2       	rcall	.+1188   	; 0x152e <__divmodhi4>
    108a:	80 e3       	ldi	r24, 0x30	; 48
    108c:	86 0f       	add	r24, r22
					LcdPutchar('m');
    108e:	28 da       	rcall	.-2992   	; 0x4e0 <LcdPutchar>
    1090:	8d e6       	ldi	r24, 0x6D	; 109
					LcdPutchar(' ');
    1092:	26 da       	rcall	.-2996   	; 0x4e0 <LcdPutchar>
    1094:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    1096:	24 da       	rcall	.-3000   	; 0x4e0 <LcdPutchar>
    1098:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    109c:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	e9 52       	subi	r30, 0x29	; 41
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	b7 01       	movw	r22, r14
    10ae:	3f d2       	rcall	.+1150   	; 0x152e <__divmodhi4>
    10b0:	04 e6       	ldi	r16, 0x64	; 100
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	b8 01       	movw	r22, r16
    10b6:	3b d2       	rcall	.+1142   	; 0x152e <__divmodhi4>
    10b8:	80 e3       	ldi	r24, 0x30	; 48
    10ba:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    10bc:	11 da       	rcall	.-3038   	; 0x4e0 <LcdPutchar>
    10be:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    10c2:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	e9 52       	subi	r30, 0x29	; 41
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	b8 01       	movw	r22, r16
    10d4:	2c d2       	rcall	.+1112   	; 0x152e <__divmodhi4>
    10d6:	ca e0       	ldi	r28, 0x0A	; 10
    10d8:	d0 e0       	ldi	r29, 0x00	; 0
    10da:	be 01       	movw	r22, r28
    10dc:	28 d2       	rcall	.+1104   	; 0x152e <__divmodhi4>
    10de:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('.');
    10e0:	86 0f       	add	r24, r22
    10e2:	fe d9       	rcall	.-3076   	; 0x4e0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    10e4:	8e e2       	ldi	r24, 0x2E	; 46
    10e6:	fc d9       	rcall	.-3080   	; 0x4e0 <LcdPutchar>
    10e8:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    10ec:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	e9 52       	subi	r30, 0x29	; 41
    10f6:	fe 4f       	sbci	r31, 0xFE	; 254
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	be 01       	movw	r22, r28
    10fe:	17 d2       	rcall	.+1070   	; 0x152e <__divmodhi4>
    1100:	80 5d       	subi	r24, 0xD0	; 208
					
					// 1번째 행 변경
					LcdMove(1,0);
    1102:	ee d9       	rcall	.-3108   	; 0x4e0 <LcdPutchar>
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	1c da       	rcall	.-3016   	; 0x542 <LcdMove>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]/1000+'0');
    110a:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    110e:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	e7 52       	subi	r30, 0x27	; 39
    1118:	fe 4f       	sbci	r31, 0xFE	; 254
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	b7 01       	movw	r22, r14
    1120:	06 d2       	rcall	.+1036   	; 0x152e <__divmodhi4>
    1122:	80 e3       	ldi	r24, 0x30	; 48
    1124:	86 0f       	add	r24, r22
    1126:	dc d9       	rcall	.-3144   	; 0x4e0 <LcdPutchar>
    1128:	8d e6       	ldi	r24, 0x6D	; 109
    112a:	da d9       	rcall	.-3148   	; 0x4e0 <LcdPutchar>
					LcdPutchar('m');
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	d8 d9       	rcall	.-3152   	; 0x4e0 <LcdPutchar>
    1130:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
					LcdPutchar(' ');
    1134:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%1000/100+'0');
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	e7 52       	subi	r30, 0x27	; 39
    113e:	fe 4f       	sbci	r31, 0xFE	; 254
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	b7 01       	movw	r22, r14
    1146:	f3 d1       	rcall	.+998    	; 0x152e <__divmodhi4>
    1148:	b8 01       	movw	r22, r16
    114a:	f1 d1       	rcall	.+994    	; 0x152e <__divmodhi4>
    114c:	80 e3       	ldi	r24, 0x30	; 48
    114e:	86 0f       	add	r24, r22
    1150:	c7 d9       	rcall	.-3186   	; 0x4e0 <LcdPutchar>
    1152:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    1156:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	e7 52       	subi	r30, 0x27	; 39
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%100/10+'0');
    1160:	fe 4f       	sbci	r31, 0xFE	; 254
    1162:	80 81       	ld	r24, Z
    1164:	91 81       	ldd	r25, Z+1	; 0x01
    1166:	b8 01       	movw	r22, r16
    1168:	e2 d1       	rcall	.+964    	; 0x152e <__divmodhi4>
    116a:	be 01       	movw	r22, r28
    116c:	e0 d1       	rcall	.+960    	; 0x152e <__divmodhi4>
    116e:	80 e3       	ldi	r24, 0x30	; 48
    1170:	86 0f       	add	r24, r22
    1172:	b6 d9       	rcall	.-3220   	; 0x4e0 <LcdPutchar>
    1174:	8e e2       	ldi	r24, 0x2E	; 46
    1176:	b4 d9       	rcall	.-3224   	; 0x4e0 <LcdPutchar>
    1178:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    117c:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    1180:	ee 0f       	add	r30, r30
    1182:	ff 1f       	adc	r31, r31
    1184:	e7 52       	subi	r30, 0x27	; 39
    1186:	fe 4f       	sbci	r31, 0xFE	; 254
					LcdPutchar('.');
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	be 01       	movw	r22, r28
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%10+'0');
    118e:	cf d1       	rcall	.+926    	; 0x152e <__divmodhi4>
    1190:	80 5d       	subi	r24, 0xD0	; 208
    1192:	a6 d9       	rcall	.-3252   	; 0x4e0 <LcdPutchar>
    1194:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    1198:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    11a2:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <stopwatchDisplayIndex>
    11a6:	16 c0       	rjmp	.+44     	; 0x11d4 <__stack+0xd5>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <stopwatchStopFlag+0x1>
					stopwatchDisplayIndex += 1;
    11b0:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <stopwatchStopFlag>
    11b4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <stopwatchDisplayIndex>
    11b8:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <stopwatchDisplayIndex+0x1>
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <stopwatchDisplayIndex+0x1>
				}
			}
			else {
				stopwatchStopFlag = 1;
    11c2:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <stopwatchDisplayIndex>
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <__stack+0xd5>
    11c8:	c1 31       	cpi	r28, 0x11	; 17
    11ca:	09 f4       	brne	.+2      	; 0x11ce <__stack+0xcf>
    11cc:	8a ce       	rjmp	.-748    	; 0xee2 <set7SegmentStopwatch+0x272>
				stopwatchDisplayIndex-=1;	
    11ce:	c1 32       	cpi	r28, 0x21	; 33
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__stack+0xd5>
    11d2:	32 cf       	rjmp	.-412    	; 0x1038 <set7SegmentStopwatch+0x3c8>
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
	}
	
	
	
	switch(stopwatchKeyInput) {
    11e2:	ef 90       	pop	r14
    11e4:	08 95       	ret

000011e6 <setTimer>:
static int m_second = 0;

// 7세그먼트 출력용 숫자
unsigned short segmentDisplayNumber = 0;

int setTimer(int* timerInitFlag) {
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customTimerSetInitFlag == 0){
    11ec:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <customTimerSetInitFlag>
    11f0:	90 91 ac 09 	lds	r25, 0x09AC	; 0x8009ac <customTimerSetInitFlag+0x1>
    11f4:	89 2b       	or	r24, r25
    11f6:	81 f4       	brne	.+32     	; 0x1218 <setTimer+0x32>
		// 초기화면 세팅
		LcdMove(0,0);
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	a2 d9       	rcall	.-3260   	; 0x542 <LcdMove>
		LcdPuts("0m 00.0s     ");
    11fe:	82 e8       	ldi	r24, 0x82	; 130
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	91 d9       	rcall	.-3294   	; 0x526 <LcdPuts>
		LcdCommand(HOME);
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	24 d9       	rcall	.-3512   	; 0x450 <LcdCommand>
		LcdCommand(CURSOR_ON);
    1208:	8e e0       	ldi	r24, 0x0E	; 14
    120a:	22 d9       	rcall	.-3516   	; 0x450 <LcdCommand>
    120c:	81 e0       	ldi	r24, 0x01	; 1
		customTimerSetInitFlag = 1;
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	90 93 ac 09 	sts	0x09AC, r25	; 0x8009ac <customTimerSetInitFlag+0x1>
    1214:	80 93 ab 09 	sts	0x09AB, r24	; 0x8009ab <customTimerSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
    1218:	dc d8       	rcall	.-3656   	; 0x3d2 <KeyInput>
    121a:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		switch(keyInput) {
    121c:	fc 01       	movw	r30, r24
    121e:	71 97       	sbiw	r30, 0x11	; 17
    1220:	e4 37       	cpi	r30, 0x74	; 116
    1222:	f1 05       	cpc	r31, r1
    1224:	08 f0       	brcs	.+2      	; 0x1228 <setTimer+0x42>
    1226:	47 c1       	rjmp	.+654    	; 0x14b6 <setTimer+0x2d0>
    1228:	e6 54       	subi	r30, 0x46	; 70
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	93 c1       	rjmp	.+806    	; 0x1554 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
    122e:	81 e3       	ldi	r24, 0x31	; 49
    1230:	57 d9       	rcall	.-3410   	; 0x4e0 <LcdPutchar>
    1232:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    1236:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    1240:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
    1244:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 1;
    1246:	99 1f       	adc	r25, r25
    1248:	fc 01       	movw	r30, r24
    124a:	e3 55       	subi	r30, 0x53	; 83
    124c:	f6 4f       	sbci	r31, 0xF6	; 246
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
				break;
    1256:	2f c1       	rjmp	.+606    	; 0x14b6 <setTimer+0x2d0>
			
			case SW1:				
				LcdPutchar('2');
    1258:	82 e3       	ldi	r24, 0x32	; 50
    125a:	42 d9       	rcall	.-3452   	; 0x4e0 <LcdPutchar>
    125c:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    1260:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    126a:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
    126e:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 2;
    1270:	99 1f       	adc	r25, r25
    1272:	fc 01       	movw	r30, r24
    1274:	e3 55       	subi	r30, 0x53	; 83
    1276:	f6 4f       	sbci	r31, 0xF6	; 246
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
				break;
    1280:	1a c1       	rjmp	.+564    	; 0x14b6 <setTimer+0x2d0>
			
			case SW2:
				LcdPutchar('3');
    1282:	83 e3       	ldi	r24, 0x33	; 51
    1284:	2d d9       	rcall	.-3494   	; 0x4e0 <LcdPutchar>
    1286:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    128a:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    1294:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
    1298:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 3;
    129a:	99 1f       	adc	r25, r25
    129c:	fc 01       	movw	r30, r24
    129e:	e3 55       	subi	r30, 0x53	; 83
    12a0:	f6 4f       	sbci	r31, 0xF6	; 246
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	80 83       	st	Z, r24
				break;
    12aa:	05 c1       	rjmp	.+522    	; 0x14b6 <setTimer+0x2d0>
			
			case SW4:
				LcdPutchar('4');
    12ac:	84 e3       	ldi	r24, 0x34	; 52
    12ae:	18 d9       	rcall	.-3536   	; 0x4e0 <LcdPutchar>
    12b0:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    12b4:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    12be:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
    12c2:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 4;
    12c4:	99 1f       	adc	r25, r25
    12c6:	fc 01       	movw	r30, r24
    12c8:	e3 55       	subi	r30, 0x53	; 83
    12ca:	f6 4f       	sbci	r31, 0xF6	; 246
    12cc:	84 e0       	ldi	r24, 0x04	; 4
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	91 83       	std	Z+1, r25	; 0x01
    12d2:	80 83       	st	Z, r24
				break;
    12d4:	f0 c0       	rjmp	.+480    	; 0x14b6 <setTimer+0x2d0>
			
			case SW5:
				LcdPutchar('5');
    12d6:	85 e3       	ldi	r24, 0x35	; 53
    12d8:	03 d9       	rcall	.-3578   	; 0x4e0 <LcdPutchar>
    12da:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    12de:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    12e8:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
    12ec:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 5;
    12ee:	99 1f       	adc	r25, r25
    12f0:	fc 01       	movw	r30, r24
    12f2:	e3 55       	subi	r30, 0x53	; 83
    12f4:	f6 4f       	sbci	r31, 0xF6	; 246
    12f6:	85 e0       	ldi	r24, 0x05	; 5
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
				break;
    12fe:	db c0       	rjmp	.+438    	; 0x14b6 <setTimer+0x2d0>
			
			case SW6:
				LcdPutchar('6');
    1300:	86 e3       	ldi	r24, 0x36	; 54
    1302:	ee d8       	rcall	.-3620   	; 0x4e0 <LcdPutchar>
    1304:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    1308:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    1312:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 6;
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	fc 01       	movw	r30, r24
    131c:	e3 55       	subi	r30, 0x53	; 83
    131e:	f6 4f       	sbci	r31, 0xF6	; 246
    1320:	86 e0       	ldi	r24, 0x06	; 6
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
				break;
    1328:	c6 c0       	rjmp	.+396    	; 0x14b6 <setTimer+0x2d0>
			
			case SW8:
				LcdPutchar('7');
    132a:	87 e3       	ldi	r24, 0x37	; 55
    132c:	d9 d8       	rcall	.-3662   	; 0x4e0 <LcdPutchar>
    132e:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    1332:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    133c:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 7;
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	fc 01       	movw	r30, r24
    1346:	e3 55       	subi	r30, 0x53	; 83
    1348:	f6 4f       	sbci	r31, 0xF6	; 246
    134a:	87 e0       	ldi	r24, 0x07	; 7
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	80 83       	st	Z, r24
				break;
    1352:	b1 c0       	rjmp	.+354    	; 0x14b6 <setTimer+0x2d0>
			
			case SW9:
				LcdPutchar('8');
    1354:	88 e3       	ldi	r24, 0x38	; 56
    1356:	c4 d8       	rcall	.-3704   	; 0x4e0 <LcdPutchar>
    1358:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    135c:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    1366:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 8;
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	fc 01       	movw	r30, r24
    1370:	e3 55       	subi	r30, 0x53	; 83
    1372:	f6 4f       	sbci	r31, 0xF6	; 246
    1374:	88 e0       	ldi	r24, 0x08	; 8
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
				break;
    137c:	9c c0       	rjmp	.+312    	; 0x14b6 <setTimer+0x2d0>
			
			case SW10:
				LcdPutchar('9');
    137e:	89 e3       	ldi	r24, 0x39	; 57
    1380:	af d8       	rcall	.-3746   	; 0x4e0 <LcdPutchar>
    1382:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    1386:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    1390:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 9;
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	fc 01       	movw	r30, r24
    139a:	e3 55       	subi	r30, 0x53	; 83
    139c:	f6 4f       	sbci	r31, 0xF6	; 246
    139e:	89 e0       	ldi	r24, 0x09	; 9
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
				break;
    13a6:	87 c0       	rjmp	.+270    	; 0x14b6 <setTimer+0x2d0>
			
			case SW13:
				LcdPutchar('0');
    13a8:	80 e3       	ldi	r24, 0x30	; 48
    13aa:	9a d8       	rcall	.-3788   	; 0x4e0 <LcdPutchar>
    13ac:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex++;
    13b0:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    13ba:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	fc 01       	movw	r30, r24
    13c4:	e3 55       	subi	r30, 0x53	; 83
    13c6:	f6 4f       	sbci	r31, 0xF6	; 246
    13c8:	11 82       	std	Z+1, r1	; 0x01
    13ca:	10 82       	st	Z, r1
				break;
    13cc:	74 c0       	rjmp	.+232    	; 0x14b6 <setTimer+0x2d0>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
    13ce:	80 e1       	ldi	r24, 0x10	; 16
    13d0:	3f d8       	rcall	.-3970   	; 0x450 <LcdCommand>
    13d2:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
				customTimerSettingIndex -= 1;
    13d6:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    13e0:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
    13e4:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 0;
    13e6:	99 1f       	adc	r25, r25
    13e8:	fc 01       	movw	r30, r24
    13ea:	e3 55       	subi	r30, 0x53	; 83
    13ec:	f6 4f       	sbci	r31, 0xF6	; 246
    13ee:	11 82       	std	Z+1, r1	; 0x01
    13f0:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    13f2:	61 c0       	rjmp	.+194    	; 0x14b6 <setTimer+0x2d0>
				
			// 아래 키 입력되는 케이스
			case SW7:
				customTimerSettingIndex += 1;
    13f4:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <customTimerSettingIndex>
    13f8:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <customTimerSettingIndex+0x1>
    1402:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <customTimerSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
    1406:	84 e1       	ldi	r24, 0x14	; 20
    1408:	23 d8       	rcall	.-4026   	; 0x450 <LcdCommand>
				customTimer[customTimerSettingIndex] = 0;
    140a:	e0 91 bd 09 	lds	r30, 0x09BD	; 0x8009bd <customTimerSettingIndex>
    140e:	f0 91 be 09 	lds	r31, 0x09BE	; 0x8009be <customTimerSettingIndex+0x1>
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	e3 55       	subi	r30, 0x53	; 83
    1418:	f6 4f       	sbci	r31, 0xF6	; 246
				returnStatus = 2;
				break;
    141a:	11 82       	std	Z+1, r1	; 0x01
		if(returnStatus == -1) {
			returnStatus = 2;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customTimerSetInitFlag = 0;
    141c:	10 82       	st	Z, r1
    141e:	4b c0       	rjmp	.+150    	; 0x14b6 <setTimer+0x2d0>
    1420:	10 92 ac 09 	sts	0x09AC, r1	; 0x8009ac <customTimerSetInitFlag+0x1>
			LcdMove(0,0);
    1424:	10 92 ab 09 	sts	0x09AB, r1	; 0x8009ab <customTimerSetInitFlag>
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	80 e0       	ldi	r24, 0x00	; 0
			LcdPuts("                      ");
    142c:	8a d8       	rcall	.-3820   	; 0x542 <LcdMove>
    142e:	80 e9       	ldi	r24, 0x90	; 144
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	79 d8       	rcall	.-3854   	; 0x526 <LcdPuts>
			LcdCommand(CURSOR_OFF);
    1434:	8c e0       	ldi	r24, 0x0C	; 12
    1436:	0c d8       	rcall	.-4072   	; 0x450 <LcdCommand>
    1438:	0e 94 4d 01 	call	0x29a	; 0x29a <ISeg7Init>
			minute = customTimer[0];
			second = customTimer[3] * 10 + customTimer[4];
			m_second = customTimer[6];
			
			// 7 세그먼트 계산
			ISeg7Init();
    143c:	ed ea       	ldi	r30, 0xAD	; 173
			segmentDisplayNumber = customTimer[1]*1000 + customTimer[4]*100 + customTimer[5]*10 + customTimer[7];
    143e:	f9 e0       	ldi	r31, 0x09	; 9
    1440:	42 81       	ldd	r20, Z+2	; 0x02
    1442:	53 81       	ldd	r21, Z+3	; 0x03
    1444:	88 ee       	ldi	r24, 0xE8	; 232
    1446:	93 e0       	ldi	r25, 0x03	; 3
    1448:	48 9f       	mul	r20, r24
    144a:	90 01       	movw	r18, r0
    144c:	49 9f       	mul	r20, r25
    144e:	30 0d       	add	r19, r0
    1450:	58 9f       	mul	r21, r24
    1452:	30 0d       	add	r19, r0
    1454:	11 24       	eor	r1, r1
    1456:	40 85       	ldd	r20, Z+8	; 0x08
    1458:	51 85       	ldd	r21, Z+9	; 0x09
    145a:	64 e6       	ldi	r22, 0x64	; 100
    145c:	64 9f       	mul	r22, r20
    145e:	c0 01       	movw	r24, r0
    1460:	65 9f       	mul	r22, r21
    1462:	90 0d       	add	r25, r0
    1464:	11 24       	eor	r1, r1
    1466:	82 0f       	add	r24, r18
    1468:	93 1f       	adc	r25, r19
    146a:	22 85       	ldd	r18, Z+10	; 0x0a
    146c:	33 85       	ldd	r19, Z+11	; 0x0b
    146e:	b9 01       	movw	r22, r18
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	a9 01       	movw	r20, r18
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	44 0f       	add	r20, r20
    147c:	55 1f       	adc	r21, r21
    147e:	44 0f       	add	r20, r20
    1480:	55 1f       	adc	r21, r21
    1482:	9b 01       	movw	r18, r22
    1484:	24 0f       	add	r18, r20
    1486:	35 1f       	adc	r19, r21
    1488:	28 0f       	add	r18, r24
    148a:	39 1f       	adc	r19, r25
    148c:	86 85       	ldd	r24, Z+14	; 0x0e
    148e:	97 85       	ldd	r25, Z+15	; 0x0f
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	90 93 aa 09 	sts	0x09AA, r25	; 0x8009aa <segmentDisplayNumber+0x1>
    1498:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <segmentDisplayNumber>
    149c:	6a e0       	ldi	r22, 0x0A	; 10
			ISeg7DispNum(segmentDisplayNumber , 10);
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <ISeg7DispNum>
    14a4:	10 92 be 09 	sts	0x09BE, r1	; 0x8009be <customTimerSettingIndex+0x1>
				
			customTimerSettingIndex = 0;
    14a8:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <customTimerSettingIndex>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 0;
			*timerInitFlag = 1;
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	99 83       	std	Y+1, r25	; 0x01
    14b2:	88 83       	st	Y, r24
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <setTimer+0x2d4>
			break;
		}
		return returnStatus;
	}
}
    14b6:	82 e0       	ldi	r24, 0x02	; 2
			customTimerSettingIndex = 0;
			returnStatus = 0;
			*timerInitFlag = 1;
			break;
		}
		return returnStatus;
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	df 91       	pop	r29
	}
}
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <set7SegmentTimer>:
    14c0:	cf 93       	push	r28

int set7SegmentTimer(int counter_m_seoncd) {	
    14c2:	df 93       	push	r29
	int nowDisplayNumber = segmentDisplayNumber - counter_m_seoncd;
    14c4:	c0 91 a9 09 	lds	r28, 0x09A9	; 0x8009a9 <segmentDisplayNumber>
    14c8:	d0 91 aa 09 	lds	r29, 0x09AA	; 0x8009aa <segmentDisplayNumber+0x1>
    14cc:	c8 1b       	sub	r28, r24
    14ce:	d9 0b       	sbc	r29, r25
	//1분 00.0초
	//9분 99.9초
	if(nowDisplayNumber%1000 == 999 ){
    14d0:	ce 01       	movw	r24, r28
    14d2:	68 ee       	ldi	r22, 0xE8	; 232
    14d4:	73 e0       	ldi	r23, 0x03	; 3
    14d6:	2b d0       	rcall	.+86     	; 0x152e <__divmodhi4>
    14d8:	87 3e       	cpi	r24, 0xE7	; 231
    14da:	93 40       	sbci	r25, 0x03	; 3
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <set7SegmentTimer+0x22>
		nowDisplayNumber -= 400;
    14de:	c0 59       	subi	r28, 0x90	; 144
    14e0:	d1 40       	sbci	r29, 0x01	; 1
	}
	segmentDisplayNumber = nowDisplayNumber;
    14e2:	d0 93 aa 09 	sts	0x09AA, r29	; 0x8009aa <segmentDisplayNumber+0x1>
    14e6:	c0 93 a9 09 	sts	0x09A9, r28	; 0x8009a9 <segmentDisplayNumber>
	ISeg7DispNum(nowDisplayNumber , 10);
    14ea:	6a e0       	ldi	r22, 0x0A	; 10
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <ISeg7DispNum>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	cd 2b       	or	r28, r29
    14fa:	11 f4       	brne	.+4      	; 0x1500 <set7SegmentTimer+0x40>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
		// do something
		
		return 0;	
	}
	return 1;
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <__udivmodhi4>:
    1506:	aa 1b       	sub	r26, r26
    1508:	bb 1b       	sub	r27, r27
    150a:	51 e1       	ldi	r21, 0x11	; 17
    150c:	07 c0       	rjmp	.+14     	; 0x151c <__udivmodhi4_ep>

0000150e <__udivmodhi4_loop>:
    150e:	aa 1f       	adc	r26, r26
    1510:	bb 1f       	adc	r27, r27
    1512:	a6 17       	cp	r26, r22
    1514:	b7 07       	cpc	r27, r23
    1516:	10 f0       	brcs	.+4      	; 0x151c <__udivmodhi4_ep>
    1518:	a6 1b       	sub	r26, r22
    151a:	b7 0b       	sbc	r27, r23

0000151c <__udivmodhi4_ep>:
    151c:	88 1f       	adc	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	5a 95       	dec	r21
    1522:	a9 f7       	brne	.-22     	; 0x150e <__udivmodhi4_loop>
    1524:	80 95       	com	r24
    1526:	90 95       	com	r25
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	08 95       	ret

0000152e <__divmodhi4>:
    152e:	97 fb       	bst	r25, 7
    1530:	07 2e       	mov	r0, r23
    1532:	16 f4       	brtc	.+4      	; 0x1538 <__divmodhi4+0xa>
    1534:	00 94       	com	r0
    1536:	06 d0       	rcall	.+12     	; 0x1544 <__divmodhi4_neg1>
    1538:	77 fd       	sbrc	r23, 7
    153a:	08 d0       	rcall	.+16     	; 0x154c <__divmodhi4_neg2>
    153c:	e4 df       	rcall	.-56     	; 0x1506 <__udivmodhi4>
    153e:	07 fc       	sbrc	r0, 7
    1540:	05 d0       	rcall	.+10     	; 0x154c <__divmodhi4_neg2>
    1542:	3e f4       	brtc	.+14     	; 0x1552 <__divmodhi4_exit>

00001544 <__divmodhi4_neg1>:
    1544:	90 95       	com	r25
    1546:	81 95       	neg	r24
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	08 95       	ret

0000154c <__divmodhi4_neg2>:
    154c:	70 95       	com	r23
    154e:	61 95       	neg	r22
    1550:	7f 4f       	sbci	r23, 0xFF	; 255

00001552 <__divmodhi4_exit>:
    1552:	08 95       	ret

00001554 <__tablejump2__>:
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	00 24       	eor	r0, r0
    155a:	00 1c       	adc	r0, r0
    155c:	0b be       	out	0x3b, r0	; 59
    155e:	07 90       	elpm	r0, Z+
    1560:	f6 91       	elpm	r31, Z
    1562:	e0 2d       	mov	r30, r0
    1564:	09 94       	ijmp

00001566 <_exit>:
    1566:	f8 94       	cli

00001568 <__stop_program>:
    1568:	ff cf       	rjmp	.-2      	; 0x1568 <__stop_program>
