
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00000ee6  00000f7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  008001a8  008001a8  00001022  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000246f  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f39  00000000  00000000  0000367f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ec  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  000056a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000808  00000000  00000000  000059f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ce  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000078ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2d c1       	rjmp	.+602    	; 0x25c <__ctors_end>
   2:	00 00       	nop
   4:	48 c1       	rjmp	.+656    	; 0x296 <__bad_interrupt>
   6:	00 00       	nop
   8:	46 c1       	rjmp	.+652    	; 0x296 <__bad_interrupt>
   a:	00 00       	nop
   c:	44 c1       	rjmp	.+648    	; 0x296 <__bad_interrupt>
   e:	00 00       	nop
  10:	42 c1       	rjmp	.+644    	; 0x296 <__bad_interrupt>
  12:	00 00       	nop
  14:	40 c1       	rjmp	.+640    	; 0x296 <__bad_interrupt>
  16:	00 00       	nop
  18:	3e c1       	rjmp	.+636    	; 0x296 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3c c1       	rjmp	.+632    	; 0x296 <__bad_interrupt>
  1e:	00 00       	nop
  20:	3a c1       	rjmp	.+628    	; 0x296 <__bad_interrupt>
  22:	00 00       	nop
  24:	a3 c2       	rjmp	.+1350   	; 0x56c <__vector_9>
  26:	00 00       	nop
  28:	36 c1       	rjmp	.+620    	; 0x296 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	34 c1       	rjmp	.+616    	; 0x296 <__bad_interrupt>
  2e:	00 00       	nop
  30:	32 c1       	rjmp	.+612    	; 0x296 <__bad_interrupt>
  32:	00 00       	nop
  34:	30 c1       	rjmp	.+608    	; 0x296 <__bad_interrupt>
  36:	00 00       	nop
  38:	2e c1       	rjmp	.+604    	; 0x296 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5a c1       	rjmp	.+692    	; 0x2f2 <__vector_15>
  3e:	00 00       	nop
  40:	2a c1       	rjmp	.+596    	; 0x296 <__bad_interrupt>
  42:	00 00       	nop
  44:	28 c1       	rjmp	.+592    	; 0x296 <__bad_interrupt>
  46:	00 00       	nop
  48:	26 c1       	rjmp	.+588    	; 0x296 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	24 c1       	rjmp	.+584    	; 0x296 <__bad_interrupt>
  4e:	00 00       	nop
  50:	22 c1       	rjmp	.+580    	; 0x296 <__bad_interrupt>
  52:	00 00       	nop
  54:	20 c1       	rjmp	.+576    	; 0x296 <__bad_interrupt>
  56:	00 00       	nop
  58:	1e c1       	rjmp	.+572    	; 0x296 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1c c1       	rjmp	.+568    	; 0x296 <__bad_interrupt>
  5e:	00 00       	nop
  60:	1a c1       	rjmp	.+564    	; 0x296 <__bad_interrupt>
  62:	00 00       	nop
  64:	18 c1       	rjmp	.+560    	; 0x296 <__bad_interrupt>
  66:	00 00       	nop
  68:	16 c1       	rjmp	.+556    	; 0x296 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	14 c1       	rjmp	.+552    	; 0x296 <__bad_interrupt>
  6e:	00 00       	nop
  70:	12 c1       	rjmp	.+548    	; 0x296 <__bad_interrupt>
  72:	00 00       	nop
  74:	10 c1       	rjmp	.+544    	; 0x296 <__bad_interrupt>
  76:	00 00       	nop
  78:	0e c1       	rjmp	.+540    	; 0x296 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0c c1       	rjmp	.+536    	; 0x296 <__bad_interrupt>
  7e:	00 00       	nop
  80:	0a c1       	rjmp	.+532    	; 0x296 <__bad_interrupt>
  82:	00 00       	nop
  84:	08 c1       	rjmp	.+528    	; 0x296 <__bad_interrupt>
  86:	00 00       	nop
  88:	06 c1       	rjmp	.+524    	; 0x296 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d3 04       	cpc	r13, r3
  8e:	08 04       	cpc	r0, r8
  90:	e4 04       	cpc	r14, r4
  92:	f9 03       	fmulsu	r23, r17
  94:	e4 04       	cpc	r14, r4
  96:	e4 04       	cpc	r14, r4
  98:	e4 04       	cpc	r14, r4
  9a:	ea 03       	fmulsu	r22, r18
  9c:	e4 04       	cpc	r14, r4
  9e:	e4 04       	cpc	r14, r4
  a0:	e4 04       	cpc	r14, r4
  a2:	e4 04       	cpc	r14, r4
  a4:	e4 04       	cpc	r14, r4
  a6:	e4 04       	cpc	r14, r4
  a8:	e4 04       	cpc	r14, r4
  aa:	e4 04       	cpc	r14, r4
  ac:	e4 04       	cpc	r14, r4
  ae:	35 04       	cpc	r3, r5
  b0:	e4 04       	cpc	r14, r4
  b2:	26 04       	cpc	r2, r6
  b4:	e4 04       	cpc	r14, r4
  b6:	e4 04       	cpc	r14, r4
  b8:	e4 04       	cpc	r14, r4
  ba:	17 04       	cpc	r1, r7
  bc:	e4 04       	cpc	r14, r4
  be:	e4 04       	cpc	r14, r4
  c0:	e4 04       	cpc	r14, r4
  c2:	e4 04       	cpc	r14, r4
  c4:	e4 04       	cpc	r14, r4
  c6:	e4 04       	cpc	r14, r4
  c8:	e4 04       	cpc	r14, r4
  ca:	e4 04       	cpc	r14, r4
  cc:	e4 04       	cpc	r14, r4
  ce:	e4 04       	cpc	r14, r4
  d0:	e4 04       	cpc	r14, r4
  d2:	e4 04       	cpc	r14, r4
  d4:	e4 04       	cpc	r14, r4
  d6:	e4 04       	cpc	r14, r4
  d8:	e4 04       	cpc	r14, r4
  da:	e4 04       	cpc	r14, r4
  dc:	e4 04       	cpc	r14, r4
  de:	e4 04       	cpc	r14, r4
  e0:	e4 04       	cpc	r14, r4
  e2:	e4 04       	cpc	r14, r4
  e4:	e4 04       	cpc	r14, r4
  e6:	e4 04       	cpc	r14, r4
  e8:	e4 04       	cpc	r14, r4
  ea:	e4 04       	cpc	r14, r4
  ec:	7e 04       	cpc	r7, r14
  ee:	62 04       	cpc	r6, r2
  f0:	e4 04       	cpc	r14, r4
  f2:	53 04       	cpc	r5, r3
  f4:	e4 04       	cpc	r14, r4
  f6:	e4 04       	cpc	r14, r4
  f8:	e4 04       	cpc	r14, r4
  fa:	44 04       	cpc	r4, r4
  fc:	e4 04       	cpc	r14, r4
  fe:	e4 04       	cpc	r14, r4
 100:	e4 04       	cpc	r14, r4
 102:	e4 04       	cpc	r14, r4
 104:	e4 04       	cpc	r14, r4
 106:	e4 04       	cpc	r14, r4
 108:	e4 04       	cpc	r14, r4
 10a:	e4 04       	cpc	r14, r4
 10c:	e4 04       	cpc	r14, r4
 10e:	e4 04       	cpc	r14, r4
 110:	e4 04       	cpc	r14, r4
 112:	e4 04       	cpc	r14, r4
 114:	e4 04       	cpc	r14, r4
 116:	e4 04       	cpc	r14, r4
 118:	e4 04       	cpc	r14, r4
 11a:	e4 04       	cpc	r14, r4
 11c:	e4 04       	cpc	r14, r4
 11e:	e4 04       	cpc	r14, r4
 120:	e4 04       	cpc	r14, r4
 122:	e4 04       	cpc	r14, r4
 124:	e4 04       	cpc	r14, r4
 126:	e4 04       	cpc	r14, r4
 128:	e4 04       	cpc	r14, r4
 12a:	e4 04       	cpc	r14, r4
 12c:	e4 04       	cpc	r14, r4
 12e:	e4 04       	cpc	r14, r4
 130:	e4 04       	cpc	r14, r4
 132:	e4 04       	cpc	r14, r4
 134:	e4 04       	cpc	r14, r4
 136:	e4 04       	cpc	r14, r4
 138:	e4 04       	cpc	r14, r4
 13a:	e4 04       	cpc	r14, r4
 13c:	e4 04       	cpc	r14, r4
 13e:	e4 04       	cpc	r14, r4
 140:	e4 04       	cpc	r14, r4
 142:	e4 04       	cpc	r14, r4
 144:	e4 04       	cpc	r14, r4
 146:	e4 04       	cpc	r14, r4
 148:	e4 04       	cpc	r14, r4
 14a:	e4 04       	cpc	r14, r4
 14c:	e4 04       	cpc	r14, r4
 14e:	e4 04       	cpc	r14, r4
 150:	e4 04       	cpc	r14, r4
 152:	e4 04       	cpc	r14, r4
 154:	e4 04       	cpc	r14, r4
 156:	e4 04       	cpc	r14, r4
 158:	e4 04       	cpc	r14, r4
 15a:	e4 04       	cpc	r14, r4
 15c:	e4 04       	cpc	r14, r4
 15e:	e4 04       	cpc	r14, r4
 160:	e4 04       	cpc	r14, r4
 162:	e4 04       	cpc	r14, r4
 164:	e4 04       	cpc	r14, r4
 166:	e4 04       	cpc	r14, r4
 168:	e4 04       	cpc	r14, r4
 16a:	e4 04       	cpc	r14, r4
 16c:	e4 04       	cpc	r14, r4
 16e:	e4 04       	cpc	r14, r4
 170:	e4 04       	cpc	r14, r4
 172:	71 04       	cpc	r7, r1
 174:	a8 06       	cpc	r10, r24
 176:	02 06       	cpc	r0, r18
 178:	1a 07       	cpc	r17, r26
 17a:	ed 05       	cpc	r30, r13
 17c:	1a 07       	cpc	r17, r26
 17e:	1a 07       	cpc	r17, r26
 180:	1a 07       	cpc	r17, r26
 182:	d8 05       	cpc	r29, r8
 184:	1a 07       	cpc	r17, r26
 186:	1a 07       	cpc	r17, r26
 188:	1a 07       	cpc	r17, r26
 18a:	1a 07       	cpc	r17, r26
 18c:	1a 07       	cpc	r17, r26
 18e:	1a 07       	cpc	r17, r26
 190:	1a 07       	cpc	r17, r26
 192:	1a 07       	cpc	r17, r26
 194:	bb 06       	cpc	r11, r27
 196:	41 06       	cpc	r4, r17
 198:	1a 07       	cpc	r17, r26
 19a:	2c 06       	cpc	r2, r28
 19c:	1a 07       	cpc	r17, r26
 19e:	1a 07       	cpc	r17, r26
 1a0:	1a 07       	cpc	r17, r26
 1a2:	17 06       	cpc	r1, r23
 1a4:	1a 07       	cpc	r17, r26
 1a6:	1a 07       	cpc	r17, r26
 1a8:	1a 07       	cpc	r17, r26
 1aa:	1a 07       	cpc	r17, r26
 1ac:	1a 07       	cpc	r17, r26
 1ae:	1a 07       	cpc	r17, r26
 1b0:	1a 07       	cpc	r17, r26
 1b2:	1a 07       	cpc	r17, r26
 1b4:	1a 07       	cpc	r17, r26
 1b6:	1a 07       	cpc	r17, r26
 1b8:	1a 07       	cpc	r17, r26
 1ba:	1a 07       	cpc	r17, r26
 1bc:	1a 07       	cpc	r17, r26
 1be:	1a 07       	cpc	r17, r26
 1c0:	1a 07       	cpc	r17, r26
 1c2:	1a 07       	cpc	r17, r26
 1c4:	1a 07       	cpc	r17, r26
 1c6:	1a 07       	cpc	r17, r26
 1c8:	1a 07       	cpc	r17, r26
 1ca:	1a 07       	cpc	r17, r26
 1cc:	1a 07       	cpc	r17, r26
 1ce:	1a 07       	cpc	r17, r26
 1d0:	1a 07       	cpc	r17, r26
 1d2:	1a 07       	cpc	r17, r26
 1d4:	d1 06       	cpc	r13, r17
 1d6:	80 06       	cpc	r8, r16
 1d8:	1a 07       	cpc	r17, r26
 1da:	6b 06       	cpc	r6, r27
 1dc:	1a 07       	cpc	r17, r26
 1de:	1a 07       	cpc	r17, r26
 1e0:	1a 07       	cpc	r17, r26
 1e2:	56 06       	cpc	r5, r22
 1e4:	1a 07       	cpc	r17, r26
 1e6:	1a 07       	cpc	r17, r26
 1e8:	1a 07       	cpc	r17, r26
 1ea:	1a 07       	cpc	r17, r26
 1ec:	1a 07       	cpc	r17, r26
 1ee:	1a 07       	cpc	r17, r26
 1f0:	1a 07       	cpc	r17, r26
 1f2:	1a 07       	cpc	r17, r26
 1f4:	1a 07       	cpc	r17, r26
 1f6:	1a 07       	cpc	r17, r26
 1f8:	1a 07       	cpc	r17, r26
 1fa:	1a 07       	cpc	r17, r26
 1fc:	1a 07       	cpc	r17, r26
 1fe:	1a 07       	cpc	r17, r26
 200:	1a 07       	cpc	r17, r26
 202:	1a 07       	cpc	r17, r26
 204:	1a 07       	cpc	r17, r26
 206:	1a 07       	cpc	r17, r26
 208:	1a 07       	cpc	r17, r26
 20a:	1a 07       	cpc	r17, r26
 20c:	1a 07       	cpc	r17, r26
 20e:	1a 07       	cpc	r17, r26
 210:	1a 07       	cpc	r17, r26
 212:	1a 07       	cpc	r17, r26
 214:	1a 07       	cpc	r17, r26
 216:	1a 07       	cpc	r17, r26
 218:	1a 07       	cpc	r17, r26
 21a:	1a 07       	cpc	r17, r26
 21c:	1a 07       	cpc	r17, r26
 21e:	1a 07       	cpc	r17, r26
 220:	1a 07       	cpc	r17, r26
 222:	1a 07       	cpc	r17, r26
 224:	1a 07       	cpc	r17, r26
 226:	1a 07       	cpc	r17, r26
 228:	1a 07       	cpc	r17, r26
 22a:	1a 07       	cpc	r17, r26
 22c:	1a 07       	cpc	r17, r26
 22e:	1a 07       	cpc	r17, r26
 230:	1a 07       	cpc	r17, r26
 232:	1a 07       	cpc	r17, r26
 234:	1a 07       	cpc	r17, r26
 236:	1a 07       	cpc	r17, r26
 238:	1a 07       	cpc	r17, r26
 23a:	1a 07       	cpc	r17, r26
 23c:	1a 07       	cpc	r17, r26
 23e:	1a 07       	cpc	r17, r26
 240:	1a 07       	cpc	r17, r26
 242:	1a 07       	cpc	r17, r26
 244:	1a 07       	cpc	r17, r26
 246:	1a 07       	cpc	r17, r26
 248:	1a 07       	cpc	r17, r26
 24a:	1a 07       	cpc	r17, r26
 24c:	1a 07       	cpc	r17, r26
 24e:	1a 07       	cpc	r17, r26
 250:	1a 07       	cpc	r17, r26
 252:	1a 07       	cpc	r17, r26
 254:	1a 07       	cpc	r17, r26
 256:	1a 07       	cpc	r17, r26
 258:	1a 07       	cpc	r17, r26
 25a:	95 06       	cpc	r9, r21

0000025c <__ctors_end>:
 25c:	11 24       	eor	r1, r1
 25e:	1f be       	out	0x3f, r1	; 63
 260:	cf ef       	ldi	r28, 0xFF	; 255
 262:	d0 e1       	ldi	r29, 0x10	; 16
 264:	de bf       	out	0x3e, r29	; 62
 266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
 268:	11 e0       	ldi	r17, 0x01	; 1
 26a:	a0 e0       	ldi	r26, 0x00	; 0
 26c:	b1 e0       	ldi	r27, 0x01	; 1
 26e:	e6 ee       	ldi	r30, 0xE6	; 230
 270:	fe e0       	ldi	r31, 0x0E	; 14
 272:	00 e0       	ldi	r16, 0x00	; 0
 274:	0b bf       	out	0x3b, r16	; 59
 276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
 278:	07 90       	elpm	r0, Z+
 27a:	0d 92       	st	X+, r0
 27c:	a8 3a       	cpi	r26, 0xA8	; 168
 27e:	b1 07       	cpc	r27, r17
 280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	a8 ea       	ldi	r26, 0xA8	; 168
 286:	b1 e0       	ldi	r27, 0x01	; 1
 288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
 28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
 28c:	a3 3e       	cpi	r26, 0xE3	; 227
 28e:	b2 07       	cpc	r27, r18
 290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
 292:	ac d1       	rcall	.+856    	; 0x5ec <main>
 294:	26 c6       	rjmp	.+3148   	; 0xee2 <_exit>

00000296 <__bad_interrupt>:
 296:	b4 ce       	rjmp	.-664    	; 0x0 <__vectors>

00000298 <ISeg7Init>:
= {16,16,16,16,16, 16};      //초기에 모두 끈다.


void ISeg7Init(void)
{
	SSEG_CONT  |=  CONT_MASK; //모든 7-세그먼트를 끈다.
 298:	82 b3       	in	r24, 0x12	; 18
 29a:	80 6f       	ori	r24, 0xF0	; 240
 29c:	82 bb       	out	0x12, r24	; 18
	DDR_CONT   |=  CONT_MASK; //제어포트의 상위니블을
 29e:	81 b3       	in	r24, 0x11	; 17
 2a0:	80 6f       	ori	r24, 0xF0	; 240
 2a2:	81 bb       	out	0x11, r24	; 17
	//출력으로 설정
	DDR_DATA = 0xFF;     //테이터포트는 모두 출력으로 설정
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	8a bb       	out	0x1a, r24	; 26
	
	// 타이머/카운터0 비교 일치 인터럽트 설정
	// 타이머/카운터0는 CTC모드로 동작
	
	TCCR0 = (1<<WGM01);		 //CTC모드/타이머 정지, OC0핀 미사용
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	83 bf       	out	0x33, r24	; 51
	OCR0  = 78;				//5msec마다 비교일치 인터럽트 발생
 2ac:	8e e4       	ldi	r24, 0x4E	; 78
 2ae:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
 2b0:	87 b7       	in	r24, 0x37	; 55
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	87 bf       	out	0x37, r24	; 55
	
	TCCR0 |= 0x07;		   //분주비 1024로 타이머 시작
 2b6:	83 b7       	in	r24, 0x33	; 51
 2b8:	87 60       	ori	r24, 0x07	; 7
 2ba:	83 bf       	out	0x33, r24	; 51
 2bc:	08 95       	ret

000002be <ISeg7DispNum>:
}


void ISeg7DispNum(unsigned short num, unsigned short radix)
{
 2be:	9b 01       	movw	r18, r22
	int  j;
	TIMSK &= ~(1<<OCIE0);	// 타이머0 비교일치 인터럽트 금지
 2c0:	47 b7       	in	r20, 0x37	; 55
 2c2:	4d 7f       	andi	r20, 0xFD	; 253
 2c4:	47 bf       	out	0x37, r20	; 55
	// cnumber[]에 수 0저장
	// cnumber[0] = 0
	// cnumber[1] ~ cnumber[4] = 16: 세그먼트를 끈다.
	
	
	cnumber[0] = 0;
 2c6:	e0 e0       	ldi	r30, 0x00	; 0
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	10 82       	st	Z, r1
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
 2cc:	40 e1       	ldi	r20, 0x10	; 16
 2ce:	41 83       	std	Z+1, r20	; 0x01
 2d0:	42 83       	std	Z+2, r20	; 0x02
 2d2:	43 83       	std	Z+3, r20	; 0x03
 2d4:	44 83       	std	Z+4, r20	; 0x04
 2d6:	45 83       	std	Z+5, r20	; 0x05
	
	j = 0;    		         //1자리를 가리킴
	while(num)
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	39 f0       	breq	.+14     	; 0x2ea <ISeg7DispNum+0x2c>
	{
		cnumber[j++] = num % radix;  //나머지
 2dc:	b9 01       	movw	r22, r18
 2de:	d1 d5       	rcall	.+2978   	; 0xe82 <__udivmodhi4>
 2e0:	81 93       	st	Z+, r24
		num /= radix;                 // 몫
 2e2:	86 2f       	mov	r24, r22
 2e4:	97 2f       	mov	r25, r23
	
	cnumber[0] = 0;
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
	
	j = 0;    		         //1자리를 가리킴
	while(num)
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	c9 f7       	brne	.-14     	; 0x2dc <ISeg7DispNum+0x1e>
	{
		cnumber[j++] = num % radix;  //나머지
		num /= radix;                 // 몫
	}
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
 2ea:	87 b7       	in	r24, 0x37	; 55
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	87 bf       	out	0x37, r24	; 55
 2f0:	08 95       	ret

000002f2 <__vector_15>:
//====================================================
// ISR : 인터럽트가 걸릴 때마다 index가 가리키는 세그먼트에
//       데이터를 표시하고, index는 계속 회전이동하게 된다.
//=====================================================

ISR(TIMER0_COMP_vect){	//카운터/타이머0 비교일치 인터럽트
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	0b b6       	in	r0, 0x3b	; 59
 2fe:	0f 92       	push	r0
 300:	2f 93       	push	r18
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	static int index = 0;
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
 30a:	22 b3       	in	r18, 0x12	; 18
 30c:	80 e1       	ldi	r24, 0x10	; 16
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	00 90 a8 01 	lds	r0, 0x01A8	; 0x8001a8 <__data_end>
 314:	02 c0       	rjmp	.+4      	; 0x31a <__vector_15+0x28>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <__vector_15+0x24>
 31e:	80 95       	com	r24
 320:	80 7f       	andi	r24, 0xF0	; 240
 322:	92 2f       	mov	r25, r18
 324:	9f 70       	andi	r25, 0x0F	; 15
 326:	89 2b       	or	r24, r25
 328:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
 32a:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <__data_end>
 32e:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <__data_end+0x1>
 332:	e0 50       	subi	r30, 0x00	; 0
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	e0 81       	ld	r30, Z
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	e7 5a       	subi	r30, 0xA7	; 167
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	80 81       	ld	r24, Z
 340:	80 95       	com	r24
 342:	8b bb       	out	0x1b, r24	; 27
	
	index++; //인덱스 이동
 344:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 348:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__data_end+0x1>
 34c:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) { index = 0; }
 34e:	84 30       	cpi	r24, 0x04	; 4
 350:	91 05       	cpc	r25, r1
 352:	29 f0       	breq	.+10     	; 0x35e <__vector_15+0x6c>
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];
	
	index++; //인덱스 이동
 354:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
 358:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
 35c:	04 c0       	rjmp	.+8      	; 0x366 <__vector_15+0x74>
	if(index == N_SEGMENT) { index = 0; }
 35e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__data_end+0x1>
 362:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0b be       	out	0x3b, r0	; 59
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <key_scan>:
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
 37e:	8e ef       	ldi	r24, 0xFE	; 254
 380:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
 384:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
 386:	80 b1       	in	r24, 0x00	; 0
 388:	80 95       	com	r24
 38a:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
 38c:	69 f4       	brne	.+26     	; 0x3a8 <key_scan+0x2a>
 38e:	23 e0       	ldi	r18, 0x03	; 3
 390:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
 392:	e2 e6       	ldi	r30, 0x62	; 98
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	89 2f       	mov	r24, r25
 398:	80 95       	com	r24
 39a:	80 83       	st	Z, r24
		asm("nop"::);
 39c:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
 39e:	80 b1       	in	r24, 0x00	; 0
 3a0:	80 95       	com	r24
 3a2:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
 3a4:	21 f0       	breq	.+8      	; 0x3ae <key_scan+0x30>
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <key_scan+0x2c>

static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
 3a8:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);
		
		in = (~KEY_IN) & 0xF0;
		if(in)			//have key input
		{
			in += out;	//make a code
 3aa:	89 0f       	add	r24, r25
			break;
 3ac:	08 95       	ret
		}
		out <<= 1;	//change to next scan-code
 3ae:	99 0f       	add	r25, r25
 3b0:	21 50       	subi	r18, 0x01	; 1
static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
 3b2:	89 f7       	brne	.-30     	; 0x396 <key_scan+0x18>
		}
		out <<= 1;	//change to next scan-code
		
	}
	return in;	//return the value of scan-code
}
 3b4:	08 95       	ret

000003b6 <KeyInit>:
static unsigned char key_scan(void);
static unsigned char pin = NO_KEY;		//previous key value

void KeyInit()	//Initialize keypad
{
	KEY_OUT = 0xF0;		// Initialize output as 0
 3b6:	80 ef       	ldi	r24, 0xF0	; 240
 3b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;		//high-ranking nibble = input, low-ranking nibble = output
 3bc:	8f e0       	ldi	r24, 0x0F	; 15
 3be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3c2:	08 95       	ret

000003c4 <KeyInput>:
// value of return :
//                   !=0 => value of scan code
//					  =0 => no input
//==========================================================================
unsigned char KeyInput(void)
{
 3c4:	cf 93       	push	r28
	unsigned char in, in1;
	
	in = key_scan();	//read keys
 3c6:	db df       	rcall	.-74     	; 0x37e <key_scan>
 3c8:	c8 2f       	mov	r28, r24
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <KeyInput+0xa>
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
		if(in == in1) break;
		in = in1;
 3cc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	8f e3       	ldi	r24, 0x3F	; 63
 3d0:	9c e9       	ldi	r25, 0x9C	; 156
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <KeyInput+0xe>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <KeyInput+0x14>
 3d8:	00 00       	nop
 3da:	8f e3       	ldi	r24, 0x3F	; 63
 3dc:	9c e9       	ldi	r25, 0x9C	; 156
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <KeyInput+0x1a>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <KeyInput+0x20>
 3e4:	00 00       	nop
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	9c e9       	ldi	r25, 0x9C	; 156
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <KeyInput+0x26>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <KeyInput+0x2c>
	
	in = key_scan();	//read keys
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
 3f0:	00 00       	nop
 3f2:	c5 df       	rcall	.-118    	; 0x37e <key_scan>
		if(in == in1) break;
 3f4:	c8 13       	cpse	r28, r24
 3f6:	ea cf       	rjmp	.-44     	; 0x3cc <KeyInput+0x8>
 3f8:	98 2f       	mov	r25, r24
 3fa:	90 7f       	andi	r25, 0xF0	; 240
		in = in1;
	}
	
	if (!(in & 0xF0))	// No key was pushed
 3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		pin = 0;
 3fe:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <pin>
		return 0;
 402:	09 c0       	rjmp	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}
	if(pin == in)
 404:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <pin>
 408:	89 17       	cp	r24, r25
 40a:	21 f0       	breq	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	return 0;
	
	pin = in;		//store key value
 40c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <pin>
	return in;		//return code
 410:	98 2f       	mov	r25, r24
 412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	{
		pin = 0;
		return 0;
	}
	if(pin == in)
	return 0;
 414:	90 e0       	ldi	r25, 0x00	; 0
	
	pin = in;		//store key value
	return in;		//return code
}
 416:	89 2f       	mov	r24, r25
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <write_command>:
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
	LcdPutchar(font[i]);
}
 41c:	98 2f       	mov	r25, r24
 41e:	90 7f       	andi	r25, 0xF0	; 240
 420:	94 60       	ori	r25, 0x04	; 4
 422:	95 bb       	out	0x15, r25	; 21
 424:	9b 7f       	andi	r25, 0xFB	; 251
 426:	95 bb       	out	0x15, r25	; 21
 428:	20 e1       	ldi	r18, 0x10	; 16
 42a:	82 02       	muls	r24, r18
 42c:	c0 01       	movw	r24, r0
 42e:	11 24       	eor	r1, r1
 430:	84 60       	ori	r24, 0x04	; 4
 432:	85 bb       	out	0x15, r24	; 21
 434:	8b 7f       	andi	r24, 0xFB	; 251
 436:	85 bb       	out	0x15, r24	; 21
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <write_command+0x1e>
 43e:	00 00       	nop
 440:	08 95       	ret

00000442 <LcdCommand>:
 442:	cf 93       	push	r28
 444:	c8 2f       	mov	r28, r24
 446:	85 e3       	ldi	r24, 0x35	; 53
 448:	8a 95       	dec	r24
 44a:	f1 f7       	brne	.-4      	; 0x448 <LcdCommand+0x6>
 44c:	00 00       	nop
 44e:	95 e3       	ldi	r25, 0x35	; 53
 450:	9a 95       	dec	r25
 452:	f1 f7       	brne	.-4      	; 0x450 <LcdCommand+0xe>
 454:	00 00       	nop
 456:	85 e3       	ldi	r24, 0x35	; 53
 458:	8a 95       	dec	r24
 45a:	f1 f7       	brne	.-4      	; 0x458 <LcdCommand+0x16>
 45c:	00 00       	nop
 45e:	95 e3       	ldi	r25, 0x35	; 53
 460:	9a 95       	dec	r25
 462:	f1 f7       	brne	.-4      	; 0x460 <LcdCommand+0x1e>
 464:	00 00       	nop
 466:	85 e3       	ldi	r24, 0x35	; 53
 468:	8a 95       	dec	r24
 46a:	f1 f7       	brne	.-4      	; 0x468 <LcdCommand+0x26>
 46c:	00 00       	nop
 46e:	8c 2f       	mov	r24, r28
 470:	d5 df       	rcall	.-86     	; 0x41c <write_command>
 472:	c1 50       	subi	r28, 0x01	; 1
 474:	c2 30       	cpi	r28, 0x02	; 2
 476:	30 f4       	brcc	.+12     	; 0x484 <LcdCommand+0x42>
 478:	8f e3       	ldi	r24, 0x3F	; 63
 47a:	9f e1       	ldi	r25, 0x1F	; 31
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <LcdCommand+0x3a>
 480:	00 c0       	rjmp	.+0      	; 0x482 <LcdCommand+0x40>
 482:	00 00       	nop
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <LcdInit>:
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	84 bb       	out	0x14, r24	; 20
 48c:	8f e5       	ldi	r24, 0x5F	; 95
 48e:	9a ee       	ldi	r25, 0xEA	; 234
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <LcdInit+0x8>
 494:	00 c0       	rjmp	.+0      	; 0x496 <LcdInit+0xe>
 496:	00 00       	nop
 498:	80 e3       	ldi	r24, 0x30	; 48
 49a:	c0 df       	rcall	.-128    	; 0x41c <write_command>
 49c:	8f e1       	ldi	r24, 0x1F	; 31
 49e:	9e e4       	ldi	r25, 0x4E	; 78
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LcdInit+0x18>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LcdInit+0x1e>
 4a6:	00 00       	nop
 4a8:	80 e3       	ldi	r24, 0x30	; 48
 4aa:	b8 df       	rcall	.-144    	; 0x41c <write_command>
 4ac:	8f e9       	ldi	r24, 0x9F	; 159
 4ae:	9f e0       	ldi	r25, 0x0F	; 15
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LcdInit+0x28>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LcdInit+0x2e>
 4b6:	00 00       	nop
 4b8:	82 e3       	ldi	r24, 0x32	; 50
 4ba:	b0 df       	rcall	.-160    	; 0x41c <write_command>
 4bc:	88 e2       	ldi	r24, 0x28	; 40
 4be:	c1 df       	rcall	.-126    	; 0x442 <LcdCommand>
 4c0:	88 e0       	ldi	r24, 0x08	; 8
 4c2:	bf df       	rcall	.-130    	; 0x442 <LcdCommand>
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	bd df       	rcall	.-134    	; 0x442 <LcdCommand>
 4c8:	86 e0       	ldi	r24, 0x06	; 6
 4ca:	bb df       	rcall	.-138    	; 0x442 <LcdCommand>
 4cc:	8c e0       	ldi	r24, 0x0C	; 12
 4ce:	b9 cf       	rjmp	.-142    	; 0x442 <LcdCommand>
 4d0:	08 95       	ret

000004d2 <LcdPutchar>:
 4d2:	25 e3       	ldi	r18, 0x35	; 53
 4d4:	2a 95       	dec	r18
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LcdPutchar+0x2>
 4d8:	00 00       	nop
 4da:	95 e3       	ldi	r25, 0x35	; 53
 4dc:	9a 95       	dec	r25
 4de:	f1 f7       	brne	.-4      	; 0x4dc <LcdPutchar+0xa>
 4e0:	00 00       	nop
 4e2:	25 e3       	ldi	r18, 0x35	; 53
 4e4:	2a 95       	dec	r18
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <LcdPutchar+0x12>
 4e8:	00 00       	nop
 4ea:	95 e3       	ldi	r25, 0x35	; 53
 4ec:	9a 95       	dec	r25
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <LcdPutchar+0x1a>
 4f0:	00 00       	nop
 4f2:	25 e3       	ldi	r18, 0x35	; 53
 4f4:	2a 95       	dec	r18
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LcdPutchar+0x22>
 4f8:	00 00       	nop
 4fa:	98 2f       	mov	r25, r24
 4fc:	90 7f       	andi	r25, 0xF0	; 240
 4fe:	95 60       	ori	r25, 0x05	; 5
 500:	95 bb       	out	0x15, r25	; 21
 502:	9b 7f       	andi	r25, 0xFB	; 251
 504:	95 bb       	out	0x15, r25	; 21
 506:	20 e1       	ldi	r18, 0x10	; 16
 508:	82 02       	muls	r24, r18
 50a:	c0 01       	movw	r24, r0
 50c:	11 24       	eor	r1, r1
 50e:	85 60       	ori	r24, 0x05	; 5
 510:	85 bb       	out	0x15, r24	; 21
 512:	8b 7f       	andi	r24, 0xFB	; 251
 514:	85 bb       	out	0x15, r24	; 21
 516:	08 95       	ret

00000518 <LcdPuts>:
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
 51e:	88 81       	ld	r24, Y
 520:	88 23       	and	r24, r24
 522:	29 f0       	breq	.+10     	; 0x52e <LcdPuts+0x16>
 524:	21 96       	adiw	r28, 0x01	; 1
 526:	d5 df       	rcall	.-86     	; 0x4d2 <LcdPutchar>
 528:	89 91       	ld	r24, Y+
 52a:	81 11       	cpse	r24, r1
 52c:	fc cf       	rjmp	.-8      	; 0x526 <LcdPuts+0xe>
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <LcdMove>:
 534:	90 e4       	ldi	r25, 0x40	; 64
 536:	89 9f       	mul	r24, r25
 538:	60 0d       	add	r22, r0
 53a:	11 24       	eor	r1, r1
 53c:	86 2f       	mov	r24, r22
 53e:	80 68       	ori	r24, 0x80	; 128
 540:	80 cf       	rjmp	.-256    	; 0x442 <LcdCommand>
 542:	08 95       	ret

00000544 <msec_delay>:
}


void msec_delay(int n)
{
	for(; n>0; n--)		//1msec 시간지연 n회	반복
 544:	18 16       	cp	r1, r24
 546:	19 06       	cpc	r1, r25
 548:	44 f4       	brge	.+16     	; 0x55a <msec_delay+0x16>
 54a:	ef e9       	ldi	r30, 0x9F	; 159
 54c:	ff e0       	ldi	r31, 0x0F	; 15
 54e:	31 97       	sbiw	r30, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <msec_delay+0xa>
 552:	00 c0       	rjmp	.+0      	; 0x554 <msec_delay+0x10>
 554:	00 00       	nop
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	c1 f7       	brne	.-16     	; 0x54a <msec_delay+0x6>
 55a:	08 95       	ret

0000055c <ClockCounterInit>:

static int SegmentTimerInitFlag = 0;


void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
 55c:	85 b5       	in	r24, 0x25	; 37
 55e:	88 60       	ori	r24, 0x08	; 8
 560:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
 562:	84 e6       	ldi	r24, 0x64	; 100
 564:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
 566:	80 e8       	ldi	r24, 0x80	; 128
 568:	87 bf       	out	0x37, r24	; 55
 56a:	08 95       	ret

0000056c <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
 56c:	1f 92       	push	r1
 56e:	0f 92       	push	r0
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	0f 92       	push	r0
 574:	11 24       	eor	r1, r1
 576:	2f 93       	push	r18
 578:	5f 93       	push	r21
 57a:	6f 93       	push	r22
 57c:	7f 93       	push	r23
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	af 93       	push	r26
 584:	bf 93       	push	r27
	ClockCounter_CNT++;
 586:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ClockCounter_CNT>
 58a:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ClockCounter_CNT+0x1>
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ClockCounter_CNT+0x1>
 594:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
 598:	80 32       	cpi	r24, 0x20	; 32
 59a:	2e e4       	ldi	r18, 0x4E	; 78
 59c:	92 07       	cpc	r25, r18
 59e:	71 f4       	brne	.+28     	; 0x5bc <__vector_9+0x50>
		ClockCounter_CNT=0;
 5a0:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ClockCounter_CNT+0x1>
 5a4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ClockCounter_CNT>
		ClockCounter_SECOND++;
 5a8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <ClockCounter_SECOND>
 5ac:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <ClockCounter_SECOND+0x1>
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <ClockCounter_SECOND+0x1>
 5b6:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <ClockCounter_SECOND>
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__vector_9+0x5a>
	}
	if(ClockCounter_CNT % 2000 == 0) {
 5bc:	60 ed       	ldi	r22, 0xD0	; 208
 5be:	77 e0       	ldi	r23, 0x07	; 7
 5c0:	74 d4       	rcall	.+2280   	; 0xeaa <__divmodhi4>
 5c2:	89 2b       	or	r24, r25
 5c4:	31 f4       	brne	.+12     	; 0x5d2 <__vector_9+0x66>
		ClockCounter_M_SECOND = 1;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <ClockCounter_M_SECOND+0x1>
 5ce:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <ClockCounter_M_SECOND>
	}
}
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	7f 91       	pop	r23
 5dc:	6f 91       	pop	r22
 5de:	5f 91       	pop	r21
 5e0:	2f 91       	pop	r18
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <main>:

// 현재 메뉴 코드
static int status = 0;

int main(void) {
	LcdInit();
 5ec:	4d df       	rcall	.-358    	; 0x488 <LcdInit>
	KeyInit();
 5ee:	e3 de       	rcall	.-570    	; 0x3b6 <KeyInit>
	ClockCounterInit();
 5f0:	b5 df       	rcall	.-150    	; 0x55c <ClockCounterInit>
 5f2:	fc d1       	rcall	.+1016   	; 0x9ec <initMenu>
	
	// 박가경's project 
	//startTermProject();
	initMenu();
 5f4:	78 94       	sei
 5f6:	85 b5       	in	r24, 0x25	; 37
		
	// 전역 인터럽트 허용
	sei();						
 5f8:	82 60       	ori	r24, 0x02	; 2
	TCCR2 |= 1<<CS21;
 5fa:	85 bd       	out	0x25, r24	; 37
 5fc:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <ClockCounter_SECOND>
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅
		setClock(ClockCounter_SECOND);
 600:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <ClockCounter_SECOND+0x1>
 604:	36 d0       	rcall	.+108    	; 0x672 <setClock>
 606:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <SegmentTimerInitFlag>
		
		if(SegmentTimerInitFlag == 1) {
 60a:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <SegmentTimerInitFlag+0x1>
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	49 f4       	brne	.+18     	; 0x624 <main+0x38>
 612:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <ClockCounter_M_SECOND>
			SegmentTimerInitFlag = set7SegmentTimer(ClockCounter_M_SECOND);
 616:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <ClockCounter_M_SECOND+0x1>
 61a:	11 d4       	rcall	.+2082   	; 0xe3e <set7SegmentTimer>
 61c:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <SegmentTimerInitFlag+0x1>
 620:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <SegmentTimerInitFlag>
 624:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ClockCounter_SECOND+0x1>
		}
		
		// 무조건 1초로 계산되게 하기위함
		ClockCounter_SECOND = 0;
 628:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <ClockCounter_SECOND>
 62c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <ClockCounter_M_SECOND+0x1>
		ClockCounter_M_SECOND = 0;
 630:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <ClockCounter_M_SECOND>
 634:	c7 de       	rcall	.-626    	; 0x3c4 <KeyInput>
		
		// keypad input
		keyInput = KeyInput();
 636:	e7 d1       	rcall	.+974    	; 0xa06 <setMenu>
 638:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
		
		// 뭘 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
 63c:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	39 f4       	brne	.+14     	; 0x652 <main+0x66>

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
 644:	8e d0       	rcall	.+284    	; 0x762 <setCustomClock>
 646:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
			status = setCustomClock();	// Time setting(main.c 파일 안에 있음)	
 64a:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	c9 f3       	breq	.-14     	; 0x644 <main+0x58>
 652:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <status>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
 656:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <status+0x1>
 65a:	02 97       	sbiw	r24, 0x02	; 2
 65c:	79 f6       	brne	.-98     	; 0x5fc <main+0x10>
 65e:	8d ea       	ldi	r24, 0xAD	; 173
 660:	91 e0       	ldi	r25, 0x01	; 1
			status = setTimer(&SegmentTimerInitFlag);
 662:	82 d2       	rcall	.+1284   	; 0xb68 <setTimer>
 664:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <status+0x1>
 668:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <status>
 66c:	02 97       	sbiw	r24, 0x02	; 2
 66e:	b9 f3       	breq	.-18     	; 0x65e <main+0x72>
 670:	c5 cf       	rjmp	.-118    	; 0x5fc <main+0x10>

00000672 <setClock>:
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <second>
static int minute = 0;
static int hour = 0;


void setClock(int interruptSecond) {
	second += interruptSecond;
 67a:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <second+0x1>
 67e:	82 0f       	add	r24, r18
 680:	93 1f       	adc	r25, r19
	minute += second/60; 
 682:	2c e3       	ldi	r18, 0x3C	; 60
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	b9 01       	movw	r22, r18
 688:	10 d4       	rcall	.+2080   	; 0xeaa <__divmodhi4>
 68a:	fc 01       	movw	r30, r24
 68c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minute>
 690:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <minute+0x1>
 694:	86 0f       	add	r24, r22
 696:	97 1f       	adc	r25, r23
	hour += minute/60;
 698:	b9 01       	movw	r22, r18
 69a:	07 d4       	rcall	.+2062   	; 0xeaa <__divmodhi4>
 69c:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <hour>
 6a0:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <hour+0x1>
 6a4:	62 0f       	add	r22, r18
 6a6:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
 6a8:	f0 93 ba 01 	sts	0x01BA, r31	; 0x8001ba <second+0x1>
 6ac:	e0 93 b9 01 	sts	0x01B9, r30	; 0x8001b9 <second>
	minute = minute%60;
 6b0:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <minute+0x1>
 6b4:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <minute>
	hour = hour%24;
 6b8:	cb 01       	movw	r24, r22
 6ba:	68 e1       	ldi	r22, 0x18	; 24
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	f5 d3       	rcall	.+2026   	; 0xeaa <__divmodhi4>
 6c0:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <hour+0x1>
 6c4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <hour>
	
	LcdMove(0,0);
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	33 df       	rcall	.-410    	; 0x534 <LcdMove>
 6ce:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <hour>
	LcdPutchar((hour/10%10) + '0');
 6d2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <hour+0x1>
 6d6:	ca e0       	ldi	r28, 0x0A	; 10
 6d8:	d0 e0       	ldi	r29, 0x00	; 0
 6da:	be 01       	movw	r22, r28
 6dc:	e6 d3       	rcall	.+1996   	; 0xeaa <__divmodhi4>
 6de:	cb 01       	movw	r24, r22
 6e0:	be 01       	movw	r22, r28
 6e2:	e3 d3       	rcall	.+1990   	; 0xeaa <__divmodhi4>
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	f5 de       	rcall	.-534    	; 0x4d2 <LcdPutchar>
 6e8:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <hour>
	LcdPutchar(hour%10 + '0');
 6ec:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <hour+0x1>
 6f0:	be 01       	movw	r22, r28
 6f2:	db d3       	rcall	.+1974   	; 0xeaa <__divmodhi4>
 6f4:	80 5d       	subi	r24, 0xD0	; 208
 6f6:	ed de       	rcall	.-550    	; 0x4d2 <LcdPutchar>
	LcdPutchar('h');
 6f8:	88 e6       	ldi	r24, 0x68	; 104
 6fa:	eb de       	rcall	.-554    	; 0x4d2 <LcdPutchar>
	
	LcdMove(0,4);
 6fc:	64 e0       	ldi	r22, 0x04	; 4
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	19 df       	rcall	.-462    	; 0x534 <LcdMove>
	LcdPutchar((minute/10%10) + '0');
 702:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minute>
 706:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <minute+0x1>
 70a:	be 01       	movw	r22, r28
 70c:	ce d3       	rcall	.+1948   	; 0xeaa <__divmodhi4>
 70e:	cb 01       	movw	r24, r22
 710:	be 01       	movw	r22, r28
 712:	cb d3       	rcall	.+1942   	; 0xeaa <__divmodhi4>
 714:	80 5d       	subi	r24, 0xD0	; 208
 716:	dd de       	rcall	.-582    	; 0x4d2 <LcdPutchar>
	LcdPutchar(minute%10 + '0');
 718:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minute>
 71c:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <minute+0x1>
 720:	be 01       	movw	r22, r28
 722:	c3 d3       	rcall	.+1926   	; 0xeaa <__divmodhi4>
 724:	80 5d       	subi	r24, 0xD0	; 208
 726:	d5 de       	rcall	.-598    	; 0x4d2 <LcdPutchar>
	LcdPutchar('m');
 728:	8d e6       	ldi	r24, 0x6D	; 109
 72a:	d3 de       	rcall	.-602    	; 0x4d2 <LcdPutchar>
 72c:	68 e0       	ldi	r22, 0x08	; 8
	
	LcdMove(0,8);
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	01 df       	rcall	.-510    	; 0x534 <LcdMove>
 732:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <second>
	LcdPutchar((second/10%10) + '0');
 736:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <second+0x1>
 73a:	be 01       	movw	r22, r28
 73c:	b6 d3       	rcall	.+1900   	; 0xeaa <__divmodhi4>
 73e:	cb 01       	movw	r24, r22
 740:	be 01       	movw	r22, r28
 742:	b3 d3       	rcall	.+1894   	; 0xeaa <__divmodhi4>
 744:	80 5d       	subi	r24, 0xD0	; 208
 746:	c5 de       	rcall	.-630    	; 0x4d2 <LcdPutchar>
 748:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <second>
	LcdPutchar(second%10 + '0');
 74c:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <second+0x1>
 750:	be 01       	movw	r22, r28
 752:	ab d3       	rcall	.+1878   	; 0xeaa <__divmodhi4>
 754:	80 5d       	subi	r24, 0xD0	; 208
 756:	bd de       	rcall	.-646    	; 0x4d2 <LcdPutchar>
 758:	83 e7       	ldi	r24, 0x73	; 115
 75a:	bb de       	rcall	.-650    	; 0x4d2 <LcdPutchar>
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
	LcdPutchar('s');
 760:	08 95       	ret

00000762 <setCustomClock>:
 762:	0f 93       	push	r16
 764:	1f 93       	push	r17
}
 766:	cf 93       	push	r28
 768:	8c 01       	movw	r16, r24
 76a:	2c de       	rcall	.-936    	; 0x3c4 <KeyInput>
int setCustomClock(int* ClockCounter_SECOND) {
	// -1 : 숫자가 눌린 경우(전) , 0: 선택이 눌린 경우, 1: 숫자가 눌린 경우(후), 위로 눌린 경우
	int returnStatus = -1;
	// 키를 입력받는 변수
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
 76c:	c8 2f       	mov	r28, r24
	
	LcdMove(1,customClockSettingIndex);
 76e:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <customClockSettingIndex>
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	df de       	rcall	.-578    	; 0x534 <LcdMove>
	while(1) {
		if(customClockSetInitFlag == 0){
 776:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <customClockSetInitFlag>
 77a:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <customClockSetInitFlag+0x1>
 77e:	89 2b       	or	r24, r25
 780:	79 f4       	brne	.+30     	; 0x7a0 <setCustomClock+0x3e>
			LcdMove(1,0);
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	d6 de       	rcall	.-596    	; 0x534 <LcdMove>
			LcdPuts("______");
 788:	8a e6       	ldi	r24, 0x6A	; 106
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	c5 de       	rcall	.-630    	; 0x518 <LcdPuts>
			LcdMove(1,0);
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	d0 de       	rcall	.-608    	; 0x534 <LcdMove>
 794:	81 e0       	ldi	r24, 0x01	; 1
			customClockSetInitFlag = 1;
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <customClockSetInitFlag+0x1>
 79c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <customClockSetInitFlag>
		}
		
		if(keyInput == NO_KEY){
 7a0:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <setCustomClock+0x5c>
 7a4:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
 7a6:	4d de       	rcall	.-870    	; 0x442 <LcdCommand>
 7a8:	84 ef       	ldi	r24, 0xF4	; 244
 7aa:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
 7ac:	cb de       	rcall	.-618    	; 0x544 <msec_delay>
 7ae:	8c e0       	ldi	r24, 0x0C	; 12
 7b0:	48 de       	rcall	.-880    	; 0x442 <LcdCommand>
			msec_delay(500);
 7b2:	84 ef       	ldi	r24, 0xF4	; 244
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	c6 de       	rcall	.-628    	; 0x544 <msec_delay>
 7b8:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	13 c1       	rjmp	.+550    	; 0x9e4 <setCustomClock+0x282>
 7be:	8c 2f       	mov	r24, r28
		}
		
		switch(keyInput) {
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	fc 01       	movw	r30, r24
 7c4:	71 97       	sbiw	r30, 0x11	; 17
 7c6:	e4 37       	cpi	r30, 0x74	; 116
 7c8:	f1 05       	cpc	r31, r1
 7ca:	08 f0       	brcs	.+2      	; 0x7ce <setCustomClock+0x6c>
 7cc:	fd c0       	rjmp	.+506    	; 0x9c8 <setCustomClock+0x266>
 7ce:	ea 5b       	subi	r30, 0xBA	; 186
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	7e c3       	rjmp	.+1788   	; 0xed0 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
 7d4:	81 e3       	ldi	r24, 0x31	; 49
 7d6:	7d de       	rcall	.-774    	; 0x4d2 <LcdPutchar>
 7d8:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 1;
 7dc:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	e3 54       	subi	r30, 0x43	; 67
 7e6:	fe 4f       	sbci	r31, 0xFE	; 254
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	91 83       	std	Z+1, r25	; 0x01
 7ee:	80 83       	st	Z, r24
				break;
 7f0:	ee c0       	rjmp	.+476    	; 0x9ce <setCustomClock+0x26c>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
 7f2:	82 e3       	ldi	r24, 0x32	; 50
 7f4:	6e de       	rcall	.-804    	; 0x4d2 <LcdPutchar>
 7f6:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 2;
 7fa:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	e3 54       	subi	r30, 0x43	; 67
 804:	fe 4f       	sbci	r31, 0xFE	; 254
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	91 83       	std	Z+1, r25	; 0x01
 80c:	80 83       	st	Z, r24
				break;
 80e:	df c0       	rjmp	.+446    	; 0x9ce <setCustomClock+0x26c>
			
			case SW2:
				LcdPutchar('3');
 810:	83 e3       	ldi	r24, 0x33	; 51
 812:	5f de       	rcall	.-834    	; 0x4d2 <LcdPutchar>
 814:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 3;
 818:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 81c:	ee 0f       	add	r30, r30
 81e:	ff 1f       	adc	r31, r31
 820:	e3 54       	subi	r30, 0x43	; 67
 822:	fe 4f       	sbci	r31, 0xFE	; 254
 824:	83 e0       	ldi	r24, 0x03	; 3
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	91 83       	std	Z+1, r25	; 0x01
 82a:	80 83       	st	Z, r24
				break;
 82c:	d0 c0       	rjmp	.+416    	; 0x9ce <setCustomClock+0x26c>
			
			case SW4:
				LcdPutchar('4');
 82e:	84 e3       	ldi	r24, 0x34	; 52
 830:	50 de       	rcall	.-864    	; 0x4d2 <LcdPutchar>
 832:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 4;
 836:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	e3 54       	subi	r30, 0x43	; 67
 840:	fe 4f       	sbci	r31, 0xFE	; 254
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	91 83       	std	Z+1, r25	; 0x01
 848:	80 83       	st	Z, r24
				break;
 84a:	c1 c0       	rjmp	.+386    	; 0x9ce <setCustomClock+0x26c>
			
			case SW5:
				LcdPutchar('5');
 84c:	85 e3       	ldi	r24, 0x35	; 53
 84e:	41 de       	rcall	.-894    	; 0x4d2 <LcdPutchar>
				customClock[customClockSettingIndex] = 5;
 850:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
 854:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 858:	ee 0f       	add	r30, r30
 85a:	ff 1f       	adc	r31, r31
 85c:	e3 54       	subi	r30, 0x43	; 67
 85e:	fe 4f       	sbci	r31, 0xFE	; 254
 860:	85 e0       	ldi	r24, 0x05	; 5
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	91 83       	std	Z+1, r25	; 0x01
 866:	80 83       	st	Z, r24
				break;
 868:	b2 c0       	rjmp	.+356    	; 0x9ce <setCustomClock+0x26c>
			
			case SW6:
				LcdPutchar('6');
 86a:	86 e3       	ldi	r24, 0x36	; 54
 86c:	32 de       	rcall	.-924    	; 0x4d2 <LcdPutchar>
				customClock[customClockSettingIndex] = 6;
 86e:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
 872:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 876:	ee 0f       	add	r30, r30
 878:	ff 1f       	adc	r31, r31
 87a:	e3 54       	subi	r30, 0x43	; 67
 87c:	fe 4f       	sbci	r31, 0xFE	; 254
 87e:	86 e0       	ldi	r24, 0x06	; 6
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	91 83       	std	Z+1, r25	; 0x01
 884:	80 83       	st	Z, r24
				break;
 886:	a3 c0       	rjmp	.+326    	; 0x9ce <setCustomClock+0x26c>
			
			case SW8:
				LcdPutchar('7');
 888:	87 e3       	ldi	r24, 0x37	; 55
 88a:	23 de       	rcall	.-954    	; 0x4d2 <LcdPutchar>
				customClock[customClockSettingIndex] = 7;
 88c:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
 890:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 894:	ee 0f       	add	r30, r30
 896:	ff 1f       	adc	r31, r31
 898:	e3 54       	subi	r30, 0x43	; 67
 89a:	fe 4f       	sbci	r31, 0xFE	; 254
 89c:	87 e0       	ldi	r24, 0x07	; 7
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	91 83       	std	Z+1, r25	; 0x01
 8a2:	80 83       	st	Z, r24
				break;
			
			case SW9:
				LcdPutchar('8');
 8a4:	94 c0       	rjmp	.+296    	; 0x9ce <setCustomClock+0x26c>
 8a6:	88 e3       	ldi	r24, 0x38	; 56
 8a8:	14 de       	rcall	.-984    	; 0x4d2 <LcdPutchar>
				customClock[customClockSettingIndex] = 8;
 8aa:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
 8ae:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 8b2:	ee 0f       	add	r30, r30
 8b4:	ff 1f       	adc	r31, r31
 8b6:	e3 54       	subi	r30, 0x43	; 67
 8b8:	fe 4f       	sbci	r31, 0xFE	; 254
 8ba:	88 e0       	ldi	r24, 0x08	; 8
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	91 83       	std	Z+1, r25	; 0x01
				break;
 8c0:	80 83       	st	Z, r24
			
			case SW10:
				LcdPutchar('9');
 8c2:	85 c0       	rjmp	.+266    	; 0x9ce <setCustomClock+0x26c>
 8c4:	89 e3       	ldi	r24, 0x39	; 57
 8c6:	05 de       	rcall	.-1014   	; 0x4d2 <LcdPutchar>
				customClock[customClockSettingIndex] = 9;
 8c8:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
 8cc:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 8d0:	ee 0f       	add	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	e3 54       	subi	r30, 0x43	; 67
 8d6:	fe 4f       	sbci	r31, 0xFE	; 254
 8d8:	89 e0       	ldi	r24, 0x09	; 9
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	91 83       	std	Z+1, r25	; 0x01
				break;
			
			case SW13:
				LcdPutchar('0');
 8de:	80 83       	st	Z, r24
 8e0:	76 c0       	rjmp	.+236    	; 0x9ce <setCustomClock+0x26c>
 8e2:	80 e3       	ldi	r24, 0x30	; 48
				customClock[customClockSettingIndex] = 0;
 8e4:	f6 dd       	rcall	.-1044   	; 0x4d2 <LcdPutchar>
 8e6:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <customClockSettingIndex>
 8ea:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 8ee:	ee 0f       	add	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	e3 54       	subi	r30, 0x43	; 67
 8f4:	fe 4f       	sbci	r31, 0xFE	; 254
 8f6:	11 82       	std	Z+1, r1	; 0x01
				break;
 8f8:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
 8fa:	69 c0       	rjmp	.+210    	; 0x9ce <setCustomClock+0x26c>
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	19 de       	rcall	.-974    	; 0x534 <LcdMove>
				LcdPuts("1. SET          ");				
 902:	81 e7       	ldi	r24, 0x71	; 113
 904:	91 e0       	ldi	r25, 0x01	; 1
 906:	08 de       	rcall	.-1008   	; 0x518 <LcdPuts>
 908:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <customClockSettingIndex+0x1>
			customClockSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			customClockSettingIndex = 0;
 90c:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <customClockSettingIndex>
 910:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
 912:	11 82       	std	Z+1, r1	; 0x01
 914:	10 82       	st	Z, r1
 916:	ed eb       	ldi	r30, 0xBD	; 189
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customClock[0] * 10 + customClock[1];
 918:	f1 e0       	ldi	r31, 0x01	; 1
 91a:	80 81       	ld	r24, Z
 91c:	91 81       	ldd	r25, Z+1	; 0x01
 91e:	9c 01       	movw	r18, r24
 920:	22 0f       	add	r18, r18
 922:	33 1f       	adc	r19, r19
 924:	88 0f       	add	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	82 0f       	add	r24, r18
 932:	93 1f       	adc	r25, r19
 934:	22 81       	ldd	r18, Z+2	; 0x02
 936:	33 81       	ldd	r19, Z+3	; 0x03
 938:	82 0f       	add	r24, r18
 93a:	93 1f       	adc	r25, r19
 93c:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <hour+0x1>
 940:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <hour>
 944:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customClock[2] * 10 + customClock[3];
 946:	95 81       	ldd	r25, Z+5	; 0x05
 948:	9c 01       	movw	r18, r24
 94a:	22 0f       	add	r18, r18
 94c:	33 1f       	adc	r19, r19
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	82 0f       	add	r24, r18
 95c:	93 1f       	adc	r25, r19
 95e:	26 81       	ldd	r18, Z+6	; 0x06
 960:	37 81       	ldd	r19, Z+7	; 0x07
 962:	82 0f       	add	r24, r18
 964:	93 1f       	adc	r25, r19
 966:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <minute+0x1>
 96a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <minute>
 96e:	80 85       	ldd	r24, Z+8	; 0x08
			second = customClock[4] * 10 + customClock[5];
 970:	91 85       	ldd	r25, Z+9	; 0x09
 972:	9c 01       	movw	r18, r24
 974:	22 0f       	add	r18, r18
 976:	33 1f       	adc	r19, r19
 978:	88 0f       	add	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	88 0f       	add	r24, r24
 982:	99 1f       	adc	r25, r25
 984:	82 0f       	add	r24, r18
 986:	93 1f       	adc	r25, r19
 988:	22 85       	ldd	r18, Z+10	; 0x0a
 98a:	33 85       	ldd	r19, Z+11	; 0x0b
 98c:	82 0f       	add	r24, r18
 98e:	93 1f       	adc	r25, r19
 990:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <second+0x1>
 994:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <second>
			customClockSetInitFlag = 0;
 998:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <customClockSetInitFlag+0x1>
 99c:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <customClockSetInitFlag>
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --customClockSettingIndex);
 9a4:	1f c0       	rjmp	.+62     	; 0x9e4 <setCustomClock+0x282>
 9a6:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <customClockSettingIndex>
 9aa:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 9ae:	61 50       	subi	r22, 0x01	; 1
 9b0:	71 09       	sbc	r23, r1
 9b2:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <customClockSettingIndex+0x1>
 9b6:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <customClockSettingIndex>
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	bb dd       	rcall	.-1162   	; 0x534 <LcdMove>
				LcdPutchar('_');
 9be:	8f e5       	ldi	r24, 0x5F	; 95
 9c0:	88 dd       	rcall	.-1264   	; 0x4d2 <LcdPutchar>
 9c2:	81 e0       	ldi	r24, 0x01	; 1
				returnStatus = 1;
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e c0       	rjmp	.+28     	; 0x9e4 <setCustomClock+0x282>
 9c8:	81 e0       	ldi	r24, 0x01	; 1
				break;
				
			default:
				returnStatus = 1;
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <setCustomClock+0x282>
 9ce:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <customClockSettingIndex>
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			customClockSettingIndex++;
 9d2:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <customClockSettingIndex+0x1>
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <customClockSettingIndex+0x1>
 9dc:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <customClockSettingIndex>
 9e0:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 1;
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	cf 91       	pop	r28
			customClockSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	08 95       	ret

000009ec <initMenu>:
static char str1[] = "00h 00m 00s";
static int nowMenuCursor = 0;
static int nowStatus = 1;

void initMenu() {
	LcdMove(0,0);
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	a1 dd       	rcall	.-1214   	; 0x534 <LcdMove>
	LcdPuts(str1);
 9f2:	88 e0       	ldi	r24, 0x08	; 8
 9f4:	91 e0       	ldi	r25, 0x01	; 1
 9f6:	90 dd       	rcall	.-1248   	; 0x518 <LcdPuts>
	LcdMove(1,0);
 9f8:	60 e0       	ldi	r22, 0x00	; 0
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	9b dd       	rcall	.-1226   	; 0x534 <LcdMove>
	LcdPuts(Set);
 9fe:	89 e4       	ldi	r24, 0x49	; 73
 a00:	91 e0       	ldi	r25, 0x01	; 1
 a02:	8a cd       	rjmp	.-1260   	; 0x518 <LcdPuts>
 a04:	08 95       	ret

00000a06 <setMenu>:
 a06:	cf 93       	push	r28
}



// MENU 세팅용 함수
int setMenu(char clickedButton) {
 a08:	df 93       	push	r29
 a0a:	c8 2f       	mov	r28, r24
	LcdMove(1,0);			// 2행으로
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	91 dd       	rcall	.-1246   	; 0x534 <LcdMove>
	switch(clickedButton) {
 a12:	c1 32       	cpi	r28, 0x21	; 33
 a14:	09 f4       	brne	.+2      	; 0xa18 <setMenu+0x12>
 a16:	52 c0       	rjmp	.+164    	; 0xabc <setMenu+0xb6>
 a18:	c1 34       	cpi	r28, 0x41	; 65
 a1a:	09 f4       	brne	.+2      	; 0xa1e <setMenu+0x18>
 a1c:	9a c0       	rjmp	.+308    	; 0xb52 <setMenu+0x14c>
 a1e:	c1 31       	cpi	r28, 0x11	; 17
 a20:	09 f0       	breq	.+2      	; 0xa24 <setMenu+0x1e>
 a22:	9c c0       	rjmp	.+312    	; 0xb5c <setMenu+0x156>
		// up button clicked
		case SW3:
			if ( nowMenuCursor == 1) {
 a24:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <nowMenuCursor>
 a28:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <nowMenuCursor+0x1>
 a2c:	81 30       	cpi	r24, 0x01	; 1
 a2e:	91 05       	cpc	r25, r1
 a30:	81 f4       	brne	.+32     	; 0xa52 <setMenu+0x4c>
				nowMenuCursor--;
 a32:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <nowMenuCursor+0x1>
 a36:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <nowMenuCursor>
				LcdPuts(Set);
 a3a:	89 e4       	ldi	r24, 0x49	; 73
 a3c:	91 e0       	ldi	r25, 0x01	; 1
 a3e:	6c dd       	rcall	.-1320   	; 0x518 <LcdPuts>
				nowStatus = 1;
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
 a48:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 a4c:	c0 e0       	ldi	r28, 0x00	; 0
 a4e:	d0 e0       	ldi	r29, 0x00	; 0
 a50:	87 c0       	rjmp	.+270    	; 0xb60 <setMenu+0x15a>
			if ( nowMenuCursor == 1) {
				nowMenuCursor--;
				LcdPuts(Set);
				nowStatus = 1;
			}
			else if ( nowMenuCursor == 2) {
 a52:	82 30       	cpi	r24, 0x02	; 2
 a54:	91 05       	cpc	r25, r1
 a56:	91 f4       	brne	.+36     	; 0xa7c <setMenu+0x76>
				nowMenuCursor--;
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <nowMenuCursor+0x1>
 a60:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <nowMenuCursor>
				LcdPuts(Timer);
 a64:	87 e3       	ldi	r24, 0x37	; 55
 a66:	91 e0       	ldi	r25, 0x01	; 1
 a68:	57 dd       	rcall	.-1362   	; 0x518 <LcdPuts>
				nowStatus = 2;
 a6a:	82 e0       	ldi	r24, 0x02	; 2
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
 a72:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 a76:	c0 e0       	ldi	r28, 0x00	; 0
 a78:	d0 e0       	ldi	r29, 0x00	; 0
 a7a:	72 c0       	rjmp	.+228    	; 0xb60 <setMenu+0x15a>
			else if ( nowMenuCursor == 2) {
				nowMenuCursor--;
				LcdPuts(Timer);
				nowStatus = 2;
			}
			else if ( nowMenuCursor == 3) {
 a7c:	03 97       	sbiw	r24, 0x03	; 3
 a7e:	91 f4       	brne	.+36     	; 0xaa4 <setMenu+0x9e>
				nowMenuCursor--;
 a80:	82 e0       	ldi	r24, 0x02	; 2
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <nowMenuCursor+0x1>
 a88:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <nowMenuCursor>
				LcdPuts(StopWatch);
 a8c:	87 e2       	ldi	r24, 0x27	; 39
 a8e:	91 e0       	ldi	r25, 0x01	; 1
 a90:	43 dd       	rcall	.-1402   	; 0x518 <LcdPuts>
				nowStatus = 3;
 a92:	83 e0       	ldi	r24, 0x03	; 3
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
 a9a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 a9e:	c0 e0       	ldi	r28, 0x00	; 0
 aa0:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor--;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else{
				LcdPuts(Set);
 aa2:	5e c0       	rjmp	.+188    	; 0xb60 <setMenu+0x15a>
 aa4:	89 e4       	ldi	r24, 0x49	; 73
 aa6:	91 e0       	ldi	r25, 0x01	; 1
 aa8:	37 dd       	rcall	.-1426   	; 0x518 <LcdPuts>
				nowStatus = 1;
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
 ab2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			return 0;
 ab6:	c0 e0       	ldi	r28, 0x00	; 0
 ab8:	d0 e0       	ldi	r29, 0x00	; 0
 aba:	52 c0       	rjmp	.+164    	; 0xb60 <setMenu+0x15a>
			break;
		
		
		// down button clicked
		case SW7:
			if ( nowMenuCursor == 0) {
 abc:	c0 91 cb 01 	lds	r28, 0x01CB	; 0x8001cb <nowMenuCursor>
 ac0:	d0 91 cc 01 	lds	r29, 0x01CC	; 0x8001cc <nowMenuCursor+0x1>
 ac4:	20 97       	sbiw	r28, 0x00	; 0
 ac6:	81 f4       	brne	.+32     	; 0xae8 <setMenu+0xe2>
				nowMenuCursor++;
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <nowMenuCursor+0x1>
 ad0:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <nowMenuCursor>
				LcdPuts(Timer);
 ad4:	87 e3       	ldi	r24, 0x37	; 55
 ad6:	91 e0       	ldi	r25, 0x01	; 1
 ad8:	1f dd       	rcall	.-1474   	; 0x518 <LcdPuts>
				nowStatus = 2;
 ada:	82 e0       	ldi	r24, 0x02	; 2
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
 ae2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
 ae6:	3c c0       	rjmp	.+120    	; 0xb60 <setMenu+0x15a>
			}
			else if ( nowMenuCursor == 1) {
 ae8:	c1 30       	cpi	r28, 0x01	; 1
 aea:	d1 05       	cpc	r29, r1
 aec:	91 f4       	brne	.+36     	; 0xb12 <setMenu+0x10c>
				nowMenuCursor++;
 aee:	82 e0       	ldi	r24, 0x02	; 2
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <nowMenuCursor+0x1>
 af6:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <nowMenuCursor>
				LcdPuts(StopWatch);
 afa:	87 e2       	ldi	r24, 0x27	; 39
 afc:	91 e0       	ldi	r25, 0x01	; 1
 afe:	0c dd       	rcall	.-1512   	; 0x518 <LcdPuts>
				nowStatus = 3;
 b00:	83 e0       	ldi	r24, 0x03	; 3
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
 b08:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
 b0c:	c0 e0       	ldi	r28, 0x00	; 0
 b0e:	d0 e0       	ldi	r29, 0x00	; 0
 b10:	27 c0       	rjmp	.+78     	; 0xb60 <setMenu+0x15a>
			else if ( nowMenuCursor == 1) {
				nowMenuCursor++;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else if ( nowMenuCursor == 2) {
 b12:	22 97       	sbiw	r28, 0x02	; 2
 b14:	91 f4       	brne	.+36     	; 0xb3a <setMenu+0x134>
				nowMenuCursor++;
 b16:	83 e0       	ldi	r24, 0x03	; 3
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <nowMenuCursor+0x1>
 b1e:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <nowMenuCursor>
				LcdPuts(Alarm);
 b22:	84 e1       	ldi	r24, 0x14	; 20
 b24:	91 e0       	ldi	r25, 0x01	; 1
 b26:	f8 dc       	rcall	.-1552   	; 0x518 <LcdPuts>
				nowStatus = 4;
 b28:	84 e0       	ldi	r24, 0x04	; 4
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
 b30:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
 b34:	c0 e0       	ldi	r28, 0x00	; 0
 b36:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor++;
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			else{
				LcdPuts(Alarm);
 b38:	13 c0       	rjmp	.+38     	; 0xb60 <setMenu+0x15a>
 b3a:	84 e1       	ldi	r24, 0x14	; 20
 b3c:	91 e0       	ldi	r25, 0x01	; 1
 b3e:	ec dc       	rcall	.-1576   	; 0x518 <LcdPuts>
				nowStatus = 4;
 b40:	84 e0       	ldi	r24, 0x04	; 4
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
 b48:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			return 0;
 b4c:	c0 e0       	ldi	r28, 0x00	; 0
 b4e:	d0 e0       	ldi	r29, 0x00	; 0
 b50:	07 c0       	rjmp	.+14     	; 0xb60 <setMenu+0x15a>
			break;
		
		
		// When select button clicked, 메인파일의 각 status에 해당하는 기능을 위한 while문을 돌림
		case SW11:
			return nowStatus;
 b52:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <nowStatus>
 b56:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <nowStatus+0x1>
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <setMenu+0x15a>
			break;
		
		default:
			return 0;
 b5c:	c0 e0       	ldi	r28, 0x00	; 0
 b5e:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
 b60:	ce 01       	movw	r24, r28
 b62:	df 91       	pop	r29
 b64:	cf 91       	pop	r28
 b66:	08 95       	ret

00000b68 <setTimer>:
static int m_second = 0;

// 7세그먼트 출력용 숫자
unsigned short segmentDisplayNumber = 0;

int setTimer(int* timerInitFlag) {
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	ec 01       	movw	r28, r24
	int returnStatus = -1;
	// 처음 진입시에만 실행
	if(customTimerSetInitFlag == 0){
 b6e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <customTimerSetInitFlag>
 b72:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <customTimerSetInitFlag+0x1>
 b76:	89 2b       	or	r24, r25
 b78:	81 f4       	brne	.+32     	; 0xb9a <setTimer+0x32>
		// 초기화면 세팅
		LcdMove(0,0);
 b7a:	60 e0       	ldi	r22, 0x00	; 0
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	da dc       	rcall	.-1612   	; 0x534 <LcdMove>
		LcdPuts("0m 00.0s     ");
 b80:	82 e8       	ldi	r24, 0x82	; 130
 b82:	91 e0       	ldi	r25, 0x01	; 1
 b84:	c9 dc       	rcall	.-1646   	; 0x518 <LcdPuts>
		LcdCommand(HOME);
 b86:	82 e0       	ldi	r24, 0x02	; 2
 b88:	5c dc       	rcall	.-1864   	; 0x442 <LcdCommand>
		LcdCommand(CURSOR_ON);
 b8a:	8e e0       	ldi	r24, 0x0E	; 14
 b8c:	5a dc       	rcall	.-1868   	; 0x442 <LcdCommand>
 b8e:	81 e0       	ldi	r24, 0x01	; 1
		customTimerSetInitFlag = 1;
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <customTimerSetInitFlag+0x1>
 b96:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <customTimerSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
 b9a:	14 dc       	rcall	.-2008   	; 0x3c4 <KeyInput>
 b9c:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		switch(keyInput) {
 b9e:	fc 01       	movw	r30, r24
 ba0:	71 97       	sbiw	r30, 0x11	; 17
 ba2:	e4 37       	cpi	r30, 0x74	; 116
 ba4:	f1 05       	cpc	r31, r1
 ba6:	08 f0       	brcs	.+2      	; 0xbaa <setTimer+0x42>
 ba8:	45 c1       	rjmp	.+650    	; 0xe34 <setTimer+0x2cc>
 baa:	e6 54       	subi	r30, 0x46	; 70
 bac:	ff 4f       	sbci	r31, 0xFF	; 255
 bae:	90 c1       	rjmp	.+800    	; 0xed0 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
 bb0:	81 e3       	ldi	r24, 0x31	; 49
 bb2:	8f dc       	rcall	.-1762   	; 0x4d2 <LcdPutchar>
 bb4:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 bb8:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 bbc:	01 96       	adiw	r24, 0x01	; 1
 bbe:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 bc2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
 bc6:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 1;
 bc8:	99 1f       	adc	r25, r25
 bca:	fc 01       	movw	r30, r24
 bcc:	ef 52       	subi	r30, 0x2F	; 47
 bce:	fe 4f       	sbci	r31, 0xFE	; 254
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	91 83       	std	Z+1, r25	; 0x01
 bd6:	80 83       	st	Z, r24
				break;
 bd8:	2d c1       	rjmp	.+602    	; 0xe34 <setTimer+0x2cc>
			
			case SW1:				
				LcdPutchar('2');
 bda:	82 e3       	ldi	r24, 0x32	; 50
 bdc:	7a dc       	rcall	.-1804   	; 0x4d2 <LcdPutchar>
 bde:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 be2:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 be6:	01 96       	adiw	r24, 0x01	; 1
 be8:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 bec:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
 bf0:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 2;
 bf2:	99 1f       	adc	r25, r25
 bf4:	fc 01       	movw	r30, r24
 bf6:	ef 52       	subi	r30, 0x2F	; 47
 bf8:	fe 4f       	sbci	r31, 0xFE	; 254
 bfa:	82 e0       	ldi	r24, 0x02	; 2
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	91 83       	std	Z+1, r25	; 0x01
 c00:	80 83       	st	Z, r24
				break;
 c02:	18 c1       	rjmp	.+560    	; 0xe34 <setTimer+0x2cc>
			
			case SW2:
				LcdPutchar('3');
 c04:	83 e3       	ldi	r24, 0x33	; 51
 c06:	65 dc       	rcall	.-1846   	; 0x4d2 <LcdPutchar>
 c08:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 c0c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 c10:	01 96       	adiw	r24, 0x01	; 1
 c12:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 c16:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
 c1a:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 3;
 c1c:	99 1f       	adc	r25, r25
 c1e:	fc 01       	movw	r30, r24
 c20:	ef 52       	subi	r30, 0x2F	; 47
 c22:	fe 4f       	sbci	r31, 0xFE	; 254
 c24:	83 e0       	ldi	r24, 0x03	; 3
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	91 83       	std	Z+1, r25	; 0x01
 c2a:	80 83       	st	Z, r24
				break;
 c2c:	03 c1       	rjmp	.+518    	; 0xe34 <setTimer+0x2cc>
			
			case SW4:
				LcdPutchar('4');
 c2e:	84 e3       	ldi	r24, 0x34	; 52
 c30:	50 dc       	rcall	.-1888   	; 0x4d2 <LcdPutchar>
 c32:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 c36:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 c3a:	01 96       	adiw	r24, 0x01	; 1
 c3c:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 c40:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
 c44:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 4;
 c46:	99 1f       	adc	r25, r25
 c48:	fc 01       	movw	r30, r24
 c4a:	ef 52       	subi	r30, 0x2F	; 47
 c4c:	fe 4f       	sbci	r31, 0xFE	; 254
 c4e:	84 e0       	ldi	r24, 0x04	; 4
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	91 83       	std	Z+1, r25	; 0x01
 c54:	80 83       	st	Z, r24
				break;
 c56:	ee c0       	rjmp	.+476    	; 0xe34 <setTimer+0x2cc>
			
			case SW5:
				LcdPutchar('5');
 c58:	85 e3       	ldi	r24, 0x35	; 53
 c5a:	3b dc       	rcall	.-1930   	; 0x4d2 <LcdPutchar>
 c5c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 c60:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 c64:	01 96       	adiw	r24, 0x01	; 1
 c66:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 c6a:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
 c6e:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 5;
 c70:	99 1f       	adc	r25, r25
 c72:	fc 01       	movw	r30, r24
 c74:	ef 52       	subi	r30, 0x2F	; 47
 c76:	fe 4f       	sbci	r31, 0xFE	; 254
 c78:	85 e0       	ldi	r24, 0x05	; 5
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	91 83       	std	Z+1, r25	; 0x01
 c7e:	80 83       	st	Z, r24
				break;
 c80:	d9 c0       	rjmp	.+434    	; 0xe34 <setTimer+0x2cc>
			
			case SW6:
				LcdPutchar('6');
 c82:	86 e3       	ldi	r24, 0x36	; 54
 c84:	26 dc       	rcall	.-1972   	; 0x4d2 <LcdPutchar>
 c86:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 c8a:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 c8e:	01 96       	adiw	r24, 0x01	; 1
 c90:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 c94:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 6;
 c98:	88 0f       	add	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	fc 01       	movw	r30, r24
 c9e:	ef 52       	subi	r30, 0x2F	; 47
 ca0:	fe 4f       	sbci	r31, 0xFE	; 254
 ca2:	86 e0       	ldi	r24, 0x06	; 6
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	91 83       	std	Z+1, r25	; 0x01
 ca8:	80 83       	st	Z, r24
				break;
 caa:	c4 c0       	rjmp	.+392    	; 0xe34 <setTimer+0x2cc>
			
			case SW8:
				LcdPutchar('7');
 cac:	87 e3       	ldi	r24, 0x37	; 55
 cae:	11 dc       	rcall	.-2014   	; 0x4d2 <LcdPutchar>
 cb0:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 cb4:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 cb8:	01 96       	adiw	r24, 0x01	; 1
 cba:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 cbe:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 7;
 cc2:	88 0f       	add	r24, r24
 cc4:	99 1f       	adc	r25, r25
 cc6:	fc 01       	movw	r30, r24
 cc8:	ef 52       	subi	r30, 0x2F	; 47
 cca:	fe 4f       	sbci	r31, 0xFE	; 254
 ccc:	87 e0       	ldi	r24, 0x07	; 7
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	91 83       	std	Z+1, r25	; 0x01
 cd2:	80 83       	st	Z, r24
				break;
 cd4:	af c0       	rjmp	.+350    	; 0xe34 <setTimer+0x2cc>
			
			case SW9:
				LcdPutchar('8');
 cd6:	88 e3       	ldi	r24, 0x38	; 56
 cd8:	fc db       	rcall	.-2056   	; 0x4d2 <LcdPutchar>
 cda:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 cde:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 ce2:	01 96       	adiw	r24, 0x01	; 1
 ce4:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 ce8:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 8;
 cec:	88 0f       	add	r24, r24
 cee:	99 1f       	adc	r25, r25
 cf0:	fc 01       	movw	r30, r24
 cf2:	ef 52       	subi	r30, 0x2F	; 47
 cf4:	fe 4f       	sbci	r31, 0xFE	; 254
 cf6:	88 e0       	ldi	r24, 0x08	; 8
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	91 83       	std	Z+1, r25	; 0x01
 cfc:	80 83       	st	Z, r24
				break;
 cfe:	9a c0       	rjmp	.+308    	; 0xe34 <setTimer+0x2cc>
			
			case SW10:
				LcdPutchar('9');
 d00:	89 e3       	ldi	r24, 0x39	; 57
 d02:	e7 db       	rcall	.-2098   	; 0x4d2 <LcdPutchar>
 d04:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 d08:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 d0c:	01 96       	adiw	r24, 0x01	; 1
 d0e:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 d12:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 9;
 d16:	88 0f       	add	r24, r24
 d18:	99 1f       	adc	r25, r25
 d1a:	fc 01       	movw	r30, r24
 d1c:	ef 52       	subi	r30, 0x2F	; 47
 d1e:	fe 4f       	sbci	r31, 0xFE	; 254
 d20:	89 e0       	ldi	r24, 0x09	; 9
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	91 83       	std	Z+1, r25	; 0x01
 d26:	80 83       	st	Z, r24
				break;
 d28:	85 c0       	rjmp	.+266    	; 0xe34 <setTimer+0x2cc>
			
			case SW13:
				LcdPutchar('0');
 d2a:	80 e3       	ldi	r24, 0x30	; 48
 d2c:	d2 db       	rcall	.-2140   	; 0x4d2 <LcdPutchar>
 d2e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex++;
 d32:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 d36:	01 96       	adiw	r24, 0x01	; 1
 d38:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 d3c:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
 d40:	88 0f       	add	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	fc 01       	movw	r30, r24
 d46:	ef 52       	subi	r30, 0x2F	; 47
 d48:	fe 4f       	sbci	r31, 0xFE	; 254
 d4a:	11 82       	std	Z+1, r1	; 0x01
 d4c:	10 82       	st	Z, r1
				break;
 d4e:	72 c0       	rjmp	.+228    	; 0xe34 <setTimer+0x2cc>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
 d50:	80 e1       	ldi	r24, 0x10	; 16
 d52:	77 db       	rcall	.-2322   	; 0x442 <LcdCommand>
 d54:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
				customTimerSettingIndex -= 1;
 d58:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 d5c:	01 97       	sbiw	r24, 0x01	; 1
 d5e:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 d62:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
 d66:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 0;
 d68:	99 1f       	adc	r25, r25
 d6a:	fc 01       	movw	r30, r24
 d6c:	ef 52       	subi	r30, 0x2F	; 47
 d6e:	fe 4f       	sbci	r31, 0xFE	; 254
 d70:	11 82       	std	Z+1, r1	; 0x01
 d72:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
 d74:	5f c0       	rjmp	.+190    	; 0xe34 <setTimer+0x2cc>
				
			// 아래 키 입력되는 케이스
			case SW7:
				customTimerSettingIndex += 1;
 d76:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
 d7a:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 d7e:	01 96       	adiw	r24, 0x01	; 1
 d80:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <customTimerSettingIndex+0x1>
 d84:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <customTimerSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
 d88:	84 e1       	ldi	r24, 0x14	; 20
 d8a:	5b db       	rcall	.-2378   	; 0x442 <LcdCommand>
				customTimer[customTimerSettingIndex] = 0;
 d8c:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <customTimerSettingIndex>
 d90:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <customTimerSettingIndex+0x1>
 d94:	ee 0f       	add	r30, r30
 d96:	ff 1f       	adc	r31, r31
 d98:	ef 52       	subi	r30, 0x2F	; 47
				returnStatus = 2;
				break;
 d9a:	fe 4f       	sbci	r31, 0xFE	; 254
		if(returnStatus == -1) {
			returnStatus = 2;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customTimerSetInitFlag = 0;
 d9c:	11 82       	std	Z+1, r1	; 0x01
 d9e:	10 82       	st	Z, r1
 da0:	49 c0       	rjmp	.+146    	; 0xe34 <setTimer+0x2cc>
 da2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <customTimerSetInitFlag+0x1>
			LcdMove(0,0);
 da6:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <customTimerSetInitFlag>
 daa:	60 e0       	ldi	r22, 0x00	; 0
			LcdPuts("                      ");
 dac:	80 e0       	ldi	r24, 0x00	; 0
 dae:	c2 db       	rcall	.-2172   	; 0x534 <LcdMove>
 db0:	80 e9       	ldi	r24, 0x90	; 144
 db2:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(CURSOR_OFF);
 db4:	b1 db       	rcall	.-2206   	; 0x518 <LcdPuts>
 db6:	8c e0       	ldi	r24, 0x0C	; 12
 db8:	44 db       	rcall	.-2424   	; 0x442 <LcdCommand>
			minute = customTimer[0];
			second = customTimer[3] * 10 + customTimer[4];
			m_second = customTimer[6];
			
			// 7 세그먼트 계산
			ISeg7Init();
 dba:	6e da       	rcall	.-2852   	; 0x298 <ISeg7Init>
 dbc:	e1 ed       	ldi	r30, 0xD1	; 209
			segmentDisplayNumber = customTimer[1]*1000 + customTimer[4]*100 + customTimer[5]*10 + customTimer[7];
 dbe:	f1 e0       	ldi	r31, 0x01	; 1
 dc0:	42 81       	ldd	r20, Z+2	; 0x02
 dc2:	53 81       	ldd	r21, Z+3	; 0x03
 dc4:	88 ee       	ldi	r24, 0xE8	; 232
 dc6:	93 e0       	ldi	r25, 0x03	; 3
 dc8:	48 9f       	mul	r20, r24
 dca:	90 01       	movw	r18, r0
 dcc:	49 9f       	mul	r20, r25
 dce:	30 0d       	add	r19, r0
 dd0:	58 9f       	mul	r21, r24
 dd2:	30 0d       	add	r19, r0
 dd4:	11 24       	eor	r1, r1
 dd6:	40 85       	ldd	r20, Z+8	; 0x08
 dd8:	51 85       	ldd	r21, Z+9	; 0x09
 dda:	64 e6       	ldi	r22, 0x64	; 100
 ddc:	64 9f       	mul	r22, r20
 dde:	c0 01       	movw	r24, r0
 de0:	65 9f       	mul	r22, r21
 de2:	90 0d       	add	r25, r0
 de4:	11 24       	eor	r1, r1
 de6:	82 0f       	add	r24, r18
 de8:	93 1f       	adc	r25, r19
 dea:	22 85       	ldd	r18, Z+10	; 0x0a
 dec:	33 85       	ldd	r19, Z+11	; 0x0b
 dee:	b9 01       	movw	r22, r18
 df0:	66 0f       	add	r22, r22
 df2:	77 1f       	adc	r23, r23
 df4:	a9 01       	movw	r20, r18
 df6:	44 0f       	add	r20, r20
 df8:	55 1f       	adc	r21, r21
 dfa:	44 0f       	add	r20, r20
 dfc:	55 1f       	adc	r21, r21
 dfe:	44 0f       	add	r20, r20
 e00:	55 1f       	adc	r21, r21
 e02:	9b 01       	movw	r18, r22
 e04:	24 0f       	add	r18, r20
 e06:	35 1f       	adc	r19, r21
 e08:	28 0f       	add	r18, r24
 e0a:	39 1f       	adc	r19, r25
 e0c:	86 85       	ldd	r24, Z+14	; 0x0e
 e0e:	97 85       	ldd	r25, Z+15	; 0x0f
 e10:	82 0f       	add	r24, r18
 e12:	93 1f       	adc	r25, r19
 e14:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <segmentDisplayNumber+0x1>
 e18:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <segmentDisplayNumber>
			ISeg7DispNum(segmentDisplayNumber , 10);
 e1c:	6a e0       	ldi	r22, 0x0A	; 10
 e1e:	70 e0       	ldi	r23, 0x00	; 0
 e20:	4e da       	rcall	.-2916   	; 0x2be <ISeg7DispNum>
 e22:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <customTimerSettingIndex+0x1>
				
			customTimerSettingIndex = 0;
 e26:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <customTimerSettingIndex>
 e2a:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 0;
			*timerInitFlag = 1;
 e2c:	90 e0       	ldi	r25, 0x00	; 0
 e2e:	99 83       	std	Y+1, r25	; 0x01
 e30:	88 83       	st	Y, r24
 e32:	02 c0       	rjmp	.+4      	; 0xe38 <setTimer+0x2d0>
			break;
		}
		return returnStatus;
	}
}
 e34:	82 e0       	ldi	r24, 0x02	; 2
			customTimerSettingIndex = 0;
			returnStatus = 0;
			*timerInitFlag = 1;
			break;
		}
		return returnStatus;
 e36:	90 e0       	ldi	r25, 0x00	; 0
 e38:	df 91       	pop	r29
	}
}
 e3a:	cf 91       	pop	r28
 e3c:	08 95       	ret

00000e3e <set7SegmentTimer>:
 e3e:	cf 93       	push	r28

int set7SegmentTimer(int counter_m_seoncd) {	
 e40:	df 93       	push	r29
	int nowDisplayNumber = segmentDisplayNumber - counter_m_seoncd;
 e42:	c0 91 cd 01 	lds	r28, 0x01CD	; 0x8001cd <segmentDisplayNumber>
 e46:	d0 91 ce 01 	lds	r29, 0x01CE	; 0x8001ce <segmentDisplayNumber+0x1>
 e4a:	c8 1b       	sub	r28, r24
 e4c:	d9 0b       	sbc	r29, r25
	//1분 00.0초
	//9분 99.9초
	if(nowDisplayNumber%1000 == 999 ){
 e4e:	ce 01       	movw	r24, r28
 e50:	68 ee       	ldi	r22, 0xE8	; 232
 e52:	73 e0       	ldi	r23, 0x03	; 3
 e54:	2a d0       	rcall	.+84     	; 0xeaa <__divmodhi4>
 e56:	87 3e       	cpi	r24, 0xE7	; 231
 e58:	93 40       	sbci	r25, 0x03	; 3
 e5a:	11 f4       	brne	.+4      	; 0xe60 <set7SegmentTimer+0x22>
		nowDisplayNumber -= 400;
 e5c:	c0 59       	subi	r28, 0x90	; 144
 e5e:	d1 40       	sbci	r29, 0x01	; 1
	}
	segmentDisplayNumber = nowDisplayNumber;
 e60:	d0 93 ce 01 	sts	0x01CE, r29	; 0x8001ce <segmentDisplayNumber+0x1>
 e64:	c0 93 cd 01 	sts	0x01CD, r28	; 0x8001cd <segmentDisplayNumber>
	ISeg7DispNum(nowDisplayNumber , 10);
 e68:	6a e0       	ldi	r22, 0x0A	; 10
 e6a:	70 e0       	ldi	r23, 0x00	; 0
 e6c:	ce 01       	movw	r24, r28
 e6e:	27 da       	rcall	.-2994   	; 0x2be <ISeg7DispNum>
 e70:	81 e0       	ldi	r24, 0x01	; 1
 e72:	90 e0       	ldi	r25, 0x00	; 0
 e74:	cd 2b       	or	r28, r29
 e76:	11 f4       	brne	.+4      	; 0xe7c <set7SegmentTimer+0x3e>
 e78:	80 e0       	ldi	r24, 0x00	; 0
 e7a:	90 e0       	ldi	r25, 0x00	; 0
		// do something
		
		return 0;	
	}
	return 1;
 e7c:	df 91       	pop	r29
 e7e:	cf 91       	pop	r28
 e80:	08 95       	ret

00000e82 <__udivmodhi4>:
 e82:	aa 1b       	sub	r26, r26
 e84:	bb 1b       	sub	r27, r27
 e86:	51 e1       	ldi	r21, 0x11	; 17
 e88:	07 c0       	rjmp	.+14     	; 0xe98 <__udivmodhi4_ep>

00000e8a <__udivmodhi4_loop>:
 e8a:	aa 1f       	adc	r26, r26
 e8c:	bb 1f       	adc	r27, r27
 e8e:	a6 17       	cp	r26, r22
 e90:	b7 07       	cpc	r27, r23
 e92:	10 f0       	brcs	.+4      	; 0xe98 <__udivmodhi4_ep>
 e94:	a6 1b       	sub	r26, r22
 e96:	b7 0b       	sbc	r27, r23

00000e98 <__udivmodhi4_ep>:
 e98:	88 1f       	adc	r24, r24
 e9a:	99 1f       	adc	r25, r25
 e9c:	5a 95       	dec	r21
 e9e:	a9 f7       	brne	.-22     	; 0xe8a <__udivmodhi4_loop>
 ea0:	80 95       	com	r24
 ea2:	90 95       	com	r25
 ea4:	bc 01       	movw	r22, r24
 ea6:	cd 01       	movw	r24, r26
 ea8:	08 95       	ret

00000eaa <__divmodhi4>:
 eaa:	97 fb       	bst	r25, 7
 eac:	07 2e       	mov	r0, r23
 eae:	16 f4       	brtc	.+4      	; 0xeb4 <__divmodhi4+0xa>
 eb0:	00 94       	com	r0
 eb2:	06 d0       	rcall	.+12     	; 0xec0 <__divmodhi4_neg1>
 eb4:	77 fd       	sbrc	r23, 7
 eb6:	08 d0       	rcall	.+16     	; 0xec8 <__divmodhi4_neg2>
 eb8:	e4 df       	rcall	.-56     	; 0xe82 <__udivmodhi4>
 eba:	07 fc       	sbrc	r0, 7
 ebc:	05 d0       	rcall	.+10     	; 0xec8 <__divmodhi4_neg2>
 ebe:	3e f4       	brtc	.+14     	; 0xece <__divmodhi4_exit>

00000ec0 <__divmodhi4_neg1>:
 ec0:	90 95       	com	r25
 ec2:	81 95       	neg	r24
 ec4:	9f 4f       	sbci	r25, 0xFF	; 255
 ec6:	08 95       	ret

00000ec8 <__divmodhi4_neg2>:
 ec8:	70 95       	com	r23
 eca:	61 95       	neg	r22
 ecc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ece <__divmodhi4_exit>:
 ece:	08 95       	ret

00000ed0 <__tablejump2__>:
 ed0:	ee 0f       	add	r30, r30
 ed2:	ff 1f       	adc	r31, r31
 ed4:	00 24       	eor	r0, r0
 ed6:	00 1c       	adc	r0, r0
 ed8:	0b be       	out	0x3b, r0	; 59
 eda:	07 90       	elpm	r0, Z+
 edc:	f6 91       	elpm	r31, Z
 ede:	e0 2d       	mov	r30, r0
 ee0:	09 94       	ijmp

00000ee2 <_exit>:
 ee2:	f8 94       	cli

00000ee4 <__stop_program>:
 ee4:	ff cf       	rjmp	.-2      	; 0xee4 <__stop_program>
