
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00001e2e  00001ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000841  008001ec  008001ec  00001fae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f54  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112a  00000000  00000000  00005148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c0  00000000  00000000  00006272  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00007a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4d  00000000  00000000  00007e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bbc  00000000  00000000  000088b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000a46d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a1 c1       	rjmp	.+834    	; 0x344 <__ctors_end>
       2:	00 00       	nop
       4:	bd c1       	rjmp	.+890    	; 0x380 <__bad_interrupt>
       6:	00 00       	nop
       8:	bb c1       	rjmp	.+886    	; 0x380 <__bad_interrupt>
       a:	00 00       	nop
       c:	b9 c1       	rjmp	.+882    	; 0x380 <__bad_interrupt>
       e:	00 00       	nop
      10:	b7 c1       	rjmp	.+878    	; 0x380 <__bad_interrupt>
      12:	00 00       	nop
      14:	b5 c1       	rjmp	.+874    	; 0x380 <__bad_interrupt>
      16:	00 00       	nop
      18:	b3 c1       	rjmp	.+870    	; 0x380 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b1 c1       	rjmp	.+866    	; 0x380 <__bad_interrupt>
      1e:	00 00       	nop
      20:	af c1       	rjmp	.+862    	; 0x380 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c3       	rjmp	.+1644   	; 0x692 <__vector_9>
      26:	00 00       	nop
      28:	ab c1       	rjmp	.+854    	; 0x380 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a9 c1       	rjmp	.+850    	; 0x380 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a7 c1       	rjmp	.+846    	; 0x380 <__bad_interrupt>
      32:	00 00       	nop
      34:	a5 c1       	rjmp	.+842    	; 0x380 <__bad_interrupt>
      36:	00 00       	nop
      38:	a3 c1       	rjmp	.+838    	; 0x380 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c1       	rjmp	.+938    	; 0x3e8 <__vector_15>
      3e:	00 00       	nop
      40:	9f c1       	rjmp	.+830    	; 0x380 <__bad_interrupt>
      42:	00 00       	nop
      44:	9d c1       	rjmp	.+826    	; 0x380 <__bad_interrupt>
      46:	00 00       	nop
      48:	9b c1       	rjmp	.+822    	; 0x380 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	99 c1       	rjmp	.+818    	; 0x380 <__bad_interrupt>
      4e:	00 00       	nop
      50:	97 c1       	rjmp	.+814    	; 0x380 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_21>
      58:	93 c1       	rjmp	.+806    	; 0x380 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	91 c1       	rjmp	.+802    	; 0x380 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8f c1       	rjmp	.+798    	; 0x380 <__bad_interrupt>
      62:	00 00       	nop
      64:	8d c1       	rjmp	.+794    	; 0x380 <__bad_interrupt>
      66:	00 00       	nop
      68:	8b c1       	rjmp	.+790    	; 0x380 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	89 c1       	rjmp	.+786    	; 0x380 <__bad_interrupt>
      6e:	00 00       	nop
      70:	87 c1       	rjmp	.+782    	; 0x380 <__bad_interrupt>
      72:	00 00       	nop
      74:	85 c1       	rjmp	.+778    	; 0x380 <__bad_interrupt>
      76:	00 00       	nop
      78:	83 c1       	rjmp	.+774    	; 0x380 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	81 c1       	rjmp	.+770    	; 0x380 <__bad_interrupt>
      7e:	00 00       	nop
      80:	7f c1       	rjmp	.+766    	; 0x380 <__bad_interrupt>
      82:	00 00       	nop
      84:	7d c1       	rjmp	.+762    	; 0x380 <__bad_interrupt>
      86:	00 00       	nop
      88:	7b c1       	rjmp	.+758    	; 0x380 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	92 05       	cpc	r25, r2
      8e:	ec 04       	cpc	r14, r12
      90:	1a 06       	cpc	r1, r26
      92:	d7 04       	cpc	r13, r7
      94:	1a 06       	cpc	r1, r26
      96:	1a 06       	cpc	r1, r26
      98:	1a 06       	cpc	r1, r26
      9a:	c2 04       	cpc	r12, r2
      9c:	1a 06       	cpc	r1, r26
      9e:	1a 06       	cpc	r1, r26
      a0:	1a 06       	cpc	r1, r26
      a2:	1a 06       	cpc	r1, r26
      a4:	1a 06       	cpc	r1, r26
      a6:	1a 06       	cpc	r1, r26
      a8:	1a 06       	cpc	r1, r26
      aa:	1a 06       	cpc	r1, r26
      ac:	a5 05       	cpc	r26, r5
      ae:	2b 05       	cpc	r18, r11
      b0:	1a 06       	cpc	r1, r26
      b2:	16 05       	cpc	r17, r6
      b4:	1a 06       	cpc	r1, r26
      b6:	1a 06       	cpc	r1, r26
      b8:	1a 06       	cpc	r1, r26
      ba:	01 05       	cpc	r16, r1
      bc:	1a 06       	cpc	r1, r26
      be:	1a 06       	cpc	r1, r26
      c0:	1a 06       	cpc	r1, r26
      c2:	1a 06       	cpc	r1, r26
      c4:	1a 06       	cpc	r1, r26
      c6:	1a 06       	cpc	r1, r26
      c8:	1a 06       	cpc	r1, r26
      ca:	1a 06       	cpc	r1, r26
      cc:	1a 06       	cpc	r1, r26
      ce:	1a 06       	cpc	r1, r26
      d0:	1a 06       	cpc	r1, r26
      d2:	1a 06       	cpc	r1, r26
      d4:	1a 06       	cpc	r1, r26
      d6:	1a 06       	cpc	r1, r26
      d8:	1a 06       	cpc	r1, r26
      da:	1a 06       	cpc	r1, r26
      dc:	1a 06       	cpc	r1, r26
      de:	1a 06       	cpc	r1, r26
      e0:	1a 06       	cpc	r1, r26
      e2:	1a 06       	cpc	r1, r26
      e4:	1a 06       	cpc	r1, r26
      e6:	1a 06       	cpc	r1, r26
      e8:	1a 06       	cpc	r1, r26
      ea:	1a 06       	cpc	r1, r26
      ec:	bb 05       	cpc	r27, r11
      ee:	6a 05       	cpc	r22, r10
      f0:	1a 06       	cpc	r1, r26
      f2:	55 05       	cpc	r21, r5
      f4:	1a 06       	cpc	r1, r26
      f6:	1a 06       	cpc	r1, r26
      f8:	1a 06       	cpc	r1, r26
      fa:	40 05       	cpc	r20, r0
      fc:	1a 06       	cpc	r1, r26
      fe:	1a 06       	cpc	r1, r26
     100:	1a 06       	cpc	r1, r26
     102:	1a 06       	cpc	r1, r26
     104:	1a 06       	cpc	r1, r26
     106:	1a 06       	cpc	r1, r26
     108:	1a 06       	cpc	r1, r26
     10a:	1a 06       	cpc	r1, r26
     10c:	1a 06       	cpc	r1, r26
     10e:	1a 06       	cpc	r1, r26
     110:	1a 06       	cpc	r1, r26
     112:	1a 06       	cpc	r1, r26
     114:	1a 06       	cpc	r1, r26
     116:	1a 06       	cpc	r1, r26
     118:	1a 06       	cpc	r1, r26
     11a:	1a 06       	cpc	r1, r26
     11c:	1a 06       	cpc	r1, r26
     11e:	1a 06       	cpc	r1, r26
     120:	1a 06       	cpc	r1, r26
     122:	1a 06       	cpc	r1, r26
     124:	1a 06       	cpc	r1, r26
     126:	1a 06       	cpc	r1, r26
     128:	1a 06       	cpc	r1, r26
     12a:	1a 06       	cpc	r1, r26
     12c:	1a 06       	cpc	r1, r26
     12e:	1a 06       	cpc	r1, r26
     130:	1a 06       	cpc	r1, r26
     132:	1a 06       	cpc	r1, r26
     134:	1a 06       	cpc	r1, r26
     136:	1a 06       	cpc	r1, r26
     138:	1a 06       	cpc	r1, r26
     13a:	1a 06       	cpc	r1, r26
     13c:	1a 06       	cpc	r1, r26
     13e:	1a 06       	cpc	r1, r26
     140:	1a 06       	cpc	r1, r26
     142:	1a 06       	cpc	r1, r26
     144:	1a 06       	cpc	r1, r26
     146:	1a 06       	cpc	r1, r26
     148:	1a 06       	cpc	r1, r26
     14a:	1a 06       	cpc	r1, r26
     14c:	1a 06       	cpc	r1, r26
     14e:	1a 06       	cpc	r1, r26
     150:	1a 06       	cpc	r1, r26
     152:	1a 06       	cpc	r1, r26
     154:	1a 06       	cpc	r1, r26
     156:	1a 06       	cpc	r1, r26
     158:	1a 06       	cpc	r1, r26
     15a:	1a 06       	cpc	r1, r26
     15c:	1a 06       	cpc	r1, r26
     15e:	1a 06       	cpc	r1, r26
     160:	1a 06       	cpc	r1, r26
     162:	1a 06       	cpc	r1, r26
     164:	1a 06       	cpc	r1, r26
     166:	1a 06       	cpc	r1, r26
     168:	1a 06       	cpc	r1, r26
     16a:	1a 06       	cpc	r1, r26
     16c:	14 06       	cpc	r1, r20
     16e:	1a 06       	cpc	r1, r26
     170:	1a 06       	cpc	r1, r26
     172:	7f 05       	cpc	r23, r15
     174:	ee 07       	cpc	r30, r30
     176:	23 07       	cpc	r18, r19
     178:	02 07       	cpc	r16, r18
     17a:	14 07       	cpc	r17, r20
     17c:	02 07       	cpc	r16, r18
     17e:	02 07       	cpc	r16, r18
     180:	02 07       	cpc	r16, r18
     182:	05 07       	cpc	r16, r21
     184:	02 07       	cpc	r16, r18
     186:	02 07       	cpc	r16, r18
     188:	02 07       	cpc	r16, r18
     18a:	02 07       	cpc	r16, r18
     18c:	02 07       	cpc	r16, r18
     18e:	02 07       	cpc	r16, r18
     190:	02 07       	cpc	r16, r18
     192:	02 07       	cpc	r16, r18
     194:	02 07       	cpc	r16, r18
     196:	50 07       	cpc	r21, r16
     198:	02 07       	cpc	r16, r18
     19a:	41 07       	cpc	r20, r17
     19c:	02 07       	cpc	r16, r18
     19e:	02 07       	cpc	r16, r18
     1a0:	02 07       	cpc	r16, r18
     1a2:	32 07       	cpc	r19, r18
     1a4:	02 07       	cpc	r16, r18
     1a6:	02 07       	cpc	r16, r18
     1a8:	02 07       	cpc	r16, r18
     1aa:	02 07       	cpc	r16, r18
     1ac:	02 07       	cpc	r16, r18
     1ae:	02 07       	cpc	r16, r18
     1b0:	02 07       	cpc	r16, r18
     1b2:	02 07       	cpc	r16, r18
     1b4:	02 07       	cpc	r16, r18
     1b6:	02 07       	cpc	r16, r18
     1b8:	02 07       	cpc	r16, r18
     1ba:	02 07       	cpc	r16, r18
     1bc:	02 07       	cpc	r16, r18
     1be:	02 07       	cpc	r16, r18
     1c0:	02 07       	cpc	r16, r18
     1c2:	02 07       	cpc	r16, r18
     1c4:	02 07       	cpc	r16, r18
     1c6:	02 07       	cpc	r16, r18
     1c8:	02 07       	cpc	r16, r18
     1ca:	02 07       	cpc	r16, r18
     1cc:	02 07       	cpc	r16, r18
     1ce:	02 07       	cpc	r16, r18
     1d0:	02 07       	cpc	r16, r18
     1d2:	02 07       	cpc	r16, r18
     1d4:	99 07       	cpc	r25, r25
     1d6:	7d 07       	cpc	r23, r29
     1d8:	02 07       	cpc	r16, r18
     1da:	6e 07       	cpc	r22, r30
     1dc:	02 07       	cpc	r16, r18
     1de:	02 07       	cpc	r16, r18
     1e0:	02 07       	cpc	r16, r18
     1e2:	5f 07       	cpc	r21, r31
     1e4:	02 07       	cpc	r16, r18
     1e6:	02 07       	cpc	r16, r18
     1e8:	02 07       	cpc	r16, r18
     1ea:	02 07       	cpc	r16, r18
     1ec:	02 07       	cpc	r16, r18
     1ee:	02 07       	cpc	r16, r18
     1f0:	02 07       	cpc	r16, r18
     1f2:	02 07       	cpc	r16, r18
     1f4:	02 07       	cpc	r16, r18
     1f6:	02 07       	cpc	r16, r18
     1f8:	02 07       	cpc	r16, r18
     1fa:	02 07       	cpc	r16, r18
     1fc:	02 07       	cpc	r16, r18
     1fe:	02 07       	cpc	r16, r18
     200:	02 07       	cpc	r16, r18
     202:	02 07       	cpc	r16, r18
     204:	02 07       	cpc	r16, r18
     206:	02 07       	cpc	r16, r18
     208:	02 07       	cpc	r16, r18
     20a:	02 07       	cpc	r16, r18
     20c:	02 07       	cpc	r16, r18
     20e:	02 07       	cpc	r16, r18
     210:	02 07       	cpc	r16, r18
     212:	02 07       	cpc	r16, r18
     214:	02 07       	cpc	r16, r18
     216:	02 07       	cpc	r16, r18
     218:	02 07       	cpc	r16, r18
     21a:	02 07       	cpc	r16, r18
     21c:	02 07       	cpc	r16, r18
     21e:	02 07       	cpc	r16, r18
     220:	02 07       	cpc	r16, r18
     222:	02 07       	cpc	r16, r18
     224:	02 07       	cpc	r16, r18
     226:	02 07       	cpc	r16, r18
     228:	02 07       	cpc	r16, r18
     22a:	02 07       	cpc	r16, r18
     22c:	02 07       	cpc	r16, r18
     22e:	02 07       	cpc	r16, r18
     230:	02 07       	cpc	r16, r18
     232:	02 07       	cpc	r16, r18
     234:	02 07       	cpc	r16, r18
     236:	02 07       	cpc	r16, r18
     238:	02 07       	cpc	r16, r18
     23a:	02 07       	cpc	r16, r18
     23c:	02 07       	cpc	r16, r18
     23e:	02 07       	cpc	r16, r18
     240:	02 07       	cpc	r16, r18
     242:	02 07       	cpc	r16, r18
     244:	02 07       	cpc	r16, r18
     246:	02 07       	cpc	r16, r18
     248:	02 07       	cpc	r16, r18
     24a:	02 07       	cpc	r16, r18
     24c:	02 07       	cpc	r16, r18
     24e:	02 07       	cpc	r16, r18
     250:	02 07       	cpc	r16, r18
     252:	02 07       	cpc	r16, r18
     254:	ff 07       	cpc	r31, r31
     256:	02 07       	cpc	r16, r18
     258:	02 07       	cpc	r16, r18
     25a:	8c 07       	cpc	r24, r28
     25c:	1d 0d       	add	r17, r13
     25e:	6f 0c       	add	r6, r15
     260:	9c 0d       	add	r25, r12
     262:	59 0c       	add	r5, r9
     264:	9c 0d       	add	r25, r12
     266:	9c 0d       	add	r25, r12
     268:	9c 0d       	add	r25, r12
     26a:	43 0c       	add	r4, r3
     26c:	9c 0d       	add	r25, r12
     26e:	9c 0d       	add	r25, r12
     270:	9c 0d       	add	r25, r12
     272:	9c 0d       	add	r25, r12
     274:	9c 0d       	add	r25, r12
     276:	9c 0d       	add	r25, r12
     278:	9c 0d       	add	r25, r12
     27a:	9c 0d       	add	r25, r12
     27c:	31 0d       	add	r19, r1
     27e:	b1 0c       	add	r11, r1
     280:	9c 0d       	add	r25, r12
     282:	9b 0c       	add	r9, r11
     284:	9c 0d       	add	r25, r12
     286:	9c 0d       	add	r25, r12
     288:	9c 0d       	add	r25, r12
     28a:	85 0c       	add	r8, r5
     28c:	9c 0d       	add	r25, r12
     28e:	9c 0d       	add	r25, r12
     290:	9c 0d       	add	r25, r12
     292:	9c 0d       	add	r25, r12
     294:	9c 0d       	add	r25, r12
     296:	9c 0d       	add	r25, r12
     298:	9c 0d       	add	r25, r12
     29a:	9c 0d       	add	r25, r12
     29c:	9c 0d       	add	r25, r12
     29e:	9c 0d       	add	r25, r12
     2a0:	9c 0d       	add	r25, r12
     2a2:	9c 0d       	add	r25, r12
     2a4:	9c 0d       	add	r25, r12
     2a6:	9c 0d       	add	r25, r12
     2a8:	9c 0d       	add	r25, r12
     2aa:	9c 0d       	add	r25, r12
     2ac:	9c 0d       	add	r25, r12
     2ae:	9c 0d       	add	r25, r12
     2b0:	9c 0d       	add	r25, r12
     2b2:	9c 0d       	add	r25, r12
     2b4:	9c 0d       	add	r25, r12
     2b6:	9c 0d       	add	r25, r12
     2b8:	9c 0d       	add	r25, r12
     2ba:	9c 0d       	add	r25, r12
     2bc:	48 0d       	add	r20, r8
     2be:	f3 0c       	add	r15, r3
     2c0:	9c 0d       	add	r25, r12
     2c2:	dd 0c       	add	r13, r13
     2c4:	9c 0d       	add	r25, r12
     2c6:	9c 0d       	add	r25, r12
     2c8:	9c 0d       	add	r25, r12
     2ca:	c7 0c       	add	r12, r7
     2cc:	9c 0d       	add	r25, r12
     2ce:	9c 0d       	add	r25, r12
     2d0:	9c 0d       	add	r25, r12
     2d2:	9c 0d       	add	r25, r12
     2d4:	9c 0d       	add	r25, r12
     2d6:	9c 0d       	add	r25, r12
     2d8:	9c 0d       	add	r25, r12
     2da:	9c 0d       	add	r25, r12
     2dc:	9c 0d       	add	r25, r12
     2de:	9c 0d       	add	r25, r12
     2e0:	9c 0d       	add	r25, r12
     2e2:	9c 0d       	add	r25, r12
     2e4:	9c 0d       	add	r25, r12
     2e6:	9c 0d       	add	r25, r12
     2e8:	9c 0d       	add	r25, r12
     2ea:	9c 0d       	add	r25, r12
     2ec:	9c 0d       	add	r25, r12
     2ee:	9c 0d       	add	r25, r12
     2f0:	9c 0d       	add	r25, r12
     2f2:	9c 0d       	add	r25, r12
     2f4:	9c 0d       	add	r25, r12
     2f6:	9c 0d       	add	r25, r12
     2f8:	9c 0d       	add	r25, r12
     2fa:	9c 0d       	add	r25, r12
     2fc:	9c 0d       	add	r25, r12
     2fe:	9c 0d       	add	r25, r12
     300:	9c 0d       	add	r25, r12
     302:	9c 0d       	add	r25, r12
     304:	9c 0d       	add	r25, r12
     306:	9c 0d       	add	r25, r12
     308:	9c 0d       	add	r25, r12
     30a:	9c 0d       	add	r25, r12
     30c:	9c 0d       	add	r25, r12
     30e:	9c 0d       	add	r25, r12
     310:	9c 0d       	add	r25, r12
     312:	9c 0d       	add	r25, r12
     314:	9c 0d       	add	r25, r12
     316:	9c 0d       	add	r25, r12
     318:	9c 0d       	add	r25, r12
     31a:	9c 0d       	add	r25, r12
     31c:	9c 0d       	add	r25, r12
     31e:	9c 0d       	add	r25, r12
     320:	9c 0d       	add	r25, r12
     322:	9c 0d       	add	r25, r12
     324:	9c 0d       	add	r25, r12
     326:	9c 0d       	add	r25, r12
     328:	9c 0d       	add	r25, r12
     32a:	9c 0d       	add	r25, r12
     32c:	9c 0d       	add	r25, r12
     32e:	9c 0d       	add	r25, r12
     330:	9c 0d       	add	r25, r12
     332:	9c 0d       	add	r25, r12
     334:	9c 0d       	add	r25, r12
     336:	9c 0d       	add	r25, r12
     338:	9c 0d       	add	r25, r12
     33a:	9c 0d       	add	r25, r12
     33c:	96 0d       	add	r25, r6
     33e:	9c 0d       	add	r25, r12
     340:	9c 0d       	add	r25, r12
     342:	09 0d       	add	r16, r9

00000344 <__ctors_end>:
     344:	11 24       	eor	r1, r1
     346:	1f be       	out	0x3f, r1	; 63
     348:	cf ef       	ldi	r28, 0xFF	; 255
     34a:	d0 e1       	ldi	r29, 0x10	; 16
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	cd bf       	out	0x3d, r28	; 61

00000350 <__do_copy_data>:
     350:	11 e0       	ldi	r17, 0x01	; 1
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b1 e0       	ldi	r27, 0x01	; 1
     356:	ee e2       	ldi	r30, 0x2E	; 46
     358:	fe e1       	ldi	r31, 0x1E	; 30
     35a:	00 e0       	ldi	r16, 0x00	; 0
     35c:	0b bf       	out	0x3b, r16	; 59
     35e:	02 c0       	rjmp	.+4      	; 0x364 <__do_copy_data+0x14>
     360:	07 90       	elpm	r0, Z+
     362:	0d 92       	st	X+, r0
     364:	ac 3e       	cpi	r26, 0xEC	; 236
     366:	b1 07       	cpc	r27, r17
     368:	d9 f7       	brne	.-10     	; 0x360 <__do_copy_data+0x10>

0000036a <__do_clear_bss>:
     36a:	2a e0       	ldi	r18, 0x0A	; 10
     36c:	ac ee       	ldi	r26, 0xEC	; 236
     36e:	b1 e0       	ldi	r27, 0x01	; 1
     370:	01 c0       	rjmp	.+2      	; 0x374 <.do_clear_bss_start>

00000372 <.do_clear_bss_loop>:
     372:	1d 92       	st	X+, r1

00000374 <.do_clear_bss_start>:
     374:	ad 32       	cpi	r26, 0x2D	; 45
     376:	b2 07       	cpc	r27, r18
     378:	e1 f7       	brne	.-8      	; 0x372 <.do_clear_bss_loop>
     37a:	48 d2       	rcall	.+1168   	; 0x80c <main>
     37c:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <_exit>

00000380 <__bad_interrupt>:
     380:	3f ce       	rjmp	.-898    	; 0x0 <__vectors>

00000382 <ISeg7Init>:
= {16,16,16,16,16, 16};      //초기에 모두 끈다.


void ISeg7Init(void)
{
	SSEG_CONT  |=  CONT_MASK; //모든 7-세그먼트를 끈다.
     382:	82 b3       	in	r24, 0x12	; 18
     384:	80 6f       	ori	r24, 0xF0	; 240
     386:	82 bb       	out	0x12, r24	; 18
	DDR_CONT   |=  CONT_MASK; //제어포트의 상위니블을
     388:	81 b3       	in	r24, 0x11	; 17
     38a:	80 6f       	ori	r24, 0xF0	; 240
     38c:	81 bb       	out	0x11, r24	; 17
	//출력으로 설정
	DDR_DATA = 0xFF;     //테이터포트는 모두 출력으로 설정
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	8a bb       	out	0x1a, r24	; 26
	
	// 타이머/카운터0 비교 일치 인터럽트 설정
	// 타이머/카운터0는 CTC모드로 동작
	
	TCCR0 = (1<<WGM01);		 //CTC모드/타이머 정지, OC0핀 미사용
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	83 bf       	out	0x33, r24	; 51
	OCR0  = 78;				//5msec마다 비교일치 인터럽트 발생
     396:	8e e4       	ldi	r24, 0x4E	; 78
     398:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     39a:	87 b7       	in	r24, 0x37	; 55
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	87 bf       	out	0x37, r24	; 55
	
	TCCR0 |= 0x07;		   //분주비 1024로 타이머 시작
     3a0:	83 b7       	in	r24, 0x33	; 51
     3a2:	87 60       	ori	r24, 0x07	; 7
     3a4:	83 bf       	out	0x33, r24	; 51
     3a6:	08 95       	ret

000003a8 <ISeg7DispNum>:
}


void ISeg7DispNum(unsigned short num, unsigned short radix)
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	eb 01       	movw	r28, r22
	int  j;
	TIMSK &= ~(1<<OCIE0);	// 타이머0 비교일치 인터럽트 금지
     3ae:	27 b7       	in	r18, 0x37	; 55
     3b0:	2d 7f       	andi	r18, 0xFD	; 253
     3b2:	27 bf       	out	0x37, r18	; 55
	// cnumber[]에 수 0저장
	// cnumber[0] = 0
	// cnumber[1] ~ cnumber[4] = 16: 세그먼트를 끈다.
	
	
	cnumber[0] = 0;
     3b4:	e6 e0       	ldi	r30, 0x06	; 6
     3b6:	f1 e0       	ldi	r31, 0x01	; 1
     3b8:	10 82       	st	Z, r1
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
     3ba:	20 e1       	ldi	r18, 0x10	; 16
     3bc:	21 83       	std	Z+1, r18	; 0x01
     3be:	22 83       	std	Z+2, r18	; 0x02
     3c0:	23 83       	std	Z+3, r18	; 0x03
     3c2:	24 83       	std	Z+4, r18	; 0x04
     3c4:	25 83       	std	Z+5, r18	; 0x05
     3c6:	2b e0       	ldi	r18, 0x0B	; 11
     3c8:	31 e0       	ldi	r19, 0x01	; 1
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
	{
		cnumber[j++] = num % radix;  //나머지
     3ca:	be 01       	movw	r22, r28
     3cc:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__udivmodhi4>
     3d0:	81 93       	st	Z+, r24
		num /= radix;                 // 몫
     3d2:	86 2f       	mov	r24, r22
     3d4:	97 2f       	mov	r25, r23
	
	cnumber[0] = 0;
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
     3d6:	e2 17       	cp	r30, r18
     3d8:	f3 07       	cpc	r31, r19
     3da:	b9 f7       	brne	.-18     	; 0x3ca <ISeg7DispNum+0x22>
	{
		cnumber[j++] = num % radix;  //나머지
		num /= radix;                 // 몫
	}
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     3dc:	87 b7       	in	r24, 0x37	; 55
     3de:	82 60       	ori	r24, 0x02	; 2
     3e0:	87 bf       	out	0x37, r24	; 55
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <__vector_15>:
//====================================================
// ISR : 인터럽트가 걸릴 때마다 index가 가리키는 세그먼트에
//       데이터를 표시하고, index는 계속 회전이동하게 된다.
//=====================================================

ISR(TIMER0_COMP_vect){	//카운터/타이머0 비교일치 인터럽트
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	0b b6       	in	r0, 0x3b	; 59
     3f4:	0f 92       	push	r0
     3f6:	2f 93       	push	r18
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	ef 93       	push	r30
     3fe:	ff 93       	push	r31
	static int index = 0;
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
     400:	22 b3       	in	r18, 0x12	; 18
     402:	80 e1       	ldi	r24, 0x10	; 16
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	00 90 ec 01 	lds	r0, 0x01EC	; 0x8001ec <__data_end>
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	80 95       	com	r24
     416:	80 7f       	andi	r24, 0xF0	; 240
     418:	92 2f       	mov	r25, r18
     41a:	9f 70       	andi	r25, 0x0F	; 15
     41c:	89 2b       	or	r24, r25
     41e:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
     420:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <__data_end>
     424:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <__data_end+0x1>
     428:	ea 5f       	subi	r30, 0xFA	; 250
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	e0 81       	ld	r30, Z
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	e3 58       	subi	r30, 0x83	; 131
     432:	fe 4f       	sbci	r31, 0xFE	; 254
     434:	80 81       	ld	r24, Z
     436:	80 95       	com	r24
     438:	8b bb       	out	0x1b, r24	; 27
	
	index++; //인덱스 이동
     43a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     43e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <__data_end+0x1>
     442:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) { index = 0; }
     444:	84 30       	cpi	r24, 0x04	; 4
     446:	91 05       	cpc	r25, r1
     448:	29 f0       	breq	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];
	
	index++; //인덱스 이동
     44a:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <__data_end+0x1>
     44e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
     452:	04 c0       	rjmp	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	if(index == N_SEGMENT) { index = 0; }
     454:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <__data_end+0x1>
     458:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__data_end>
}
     45c:	ff 91       	pop	r31
     45e:	ef 91       	pop	r30
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0b be       	out	0x3b, r0	; 59
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <key_scan>:
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     474:	8e ef       	ldi	r24, 0xFE	; 254
     476:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
     47a:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     47c:	80 b1       	in	r24, 0x00	; 0
     47e:	80 95       	com	r24
     480:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     482:	69 f4       	brne	.+26     	; 0x49e <key_scan+0x2a>
     484:	23 e0       	ldi	r18, 0x03	; 3
     486:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     488:	e2 e6       	ldi	r30, 0x62	; 98
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	89 2f       	mov	r24, r25
     48e:	80 95       	com	r24
     490:	80 83       	st	Z, r24
		asm("nop"::);
     492:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     494:	80 b1       	in	r24, 0x00	; 0
     496:	80 95       	com	r24
     498:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     49a:	21 f0       	breq	.+8      	; 0x4a4 <key_scan+0x30>
     49c:	01 c0       	rjmp	.+2      	; 0x4a0 <key_scan+0x2c>

static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
     49e:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);
		
		in = (~KEY_IN) & 0xF0;
		if(in)			//have key input
		{
			in += out;	//make a code
     4a0:	89 0f       	add	r24, r25
			break;
     4a2:	08 95       	ret
		}
		out <<= 1;	//change to next scan-code
     4a4:	99 0f       	add	r25, r25
     4a6:	21 50       	subi	r18, 0x01	; 1
static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
     4a8:	89 f7       	brne	.-30     	; 0x48c <key_scan+0x18>
		}
		out <<= 1;	//change to next scan-code
		
	}
	return in;	//return the value of scan-code
}
     4aa:	08 95       	ret

000004ac <KeyInit>:
static unsigned char key_scan(void);
static unsigned char pin = NO_KEY;		//previous key value

void KeyInit()	//Initialize keypad
{
	KEY_OUT = 0xF0;		// Initialize output as 0
     4ac:	80 ef       	ldi	r24, 0xF0	; 240
     4ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;		//high-ranking nibble = input, low-ranking nibble = output
     4b2:	8f e0       	ldi	r24, 0x0F	; 15
     4b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4b8:	08 95       	ret

000004ba <KeyInput>:
// value of return :
//                   !=0 => value of scan code
//					  =0 => no input
//==========================================================================
unsigned char KeyInput(void)
{
     4ba:	cf 93       	push	r28
	unsigned char in, in1;
	
	in = key_scan();	//read keys
     4bc:	db df       	rcall	.-74     	; 0x474 <key_scan>
     4be:	c8 2f       	mov	r28, r24
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <KeyInput+0xa>
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
		if(in == in1) break;
		in = in1;
     4c2:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c4:	8f e3       	ldi	r24, 0x3F	; 63
     4c6:	9c e9       	ldi	r25, 0x9C	; 156
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <KeyInput+0xe>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <KeyInput+0x14>
     4ce:	00 00       	nop
     4d0:	8f e3       	ldi	r24, 0x3F	; 63
     4d2:	9c e9       	ldi	r25, 0x9C	; 156
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <KeyInput+0x1a>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <KeyInput+0x20>
     4da:	00 00       	nop
     4dc:	8f e3       	ldi	r24, 0x3F	; 63
     4de:	9c e9       	ldi	r25, 0x9C	; 156
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <KeyInput+0x26>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <KeyInput+0x2c>
	
	in = key_scan();	//read keys
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
     4e6:	00 00       	nop
     4e8:	c5 df       	rcall	.-118    	; 0x474 <key_scan>
		if(in == in1) break;
     4ea:	c8 13       	cpse	r28, r24
     4ec:	ea cf       	rjmp	.-44     	; 0x4c2 <KeyInput+0x8>
     4ee:	98 2f       	mov	r25, r24
     4f0:	90 7f       	andi	r25, 0xF0	; 240
		in = in1;
	}
	
	if (!(in & 0xF0))	// No key was pushed
     4f2:	19 f4       	brne	.+6      	; 0x4fa <KeyInput+0x40>
	{
		pin = 0;
     4f4:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <pin>
		return 0;
     4f8:	09 c0       	rjmp	.+18     	; 0x50c <KeyInput+0x52>
	}
	if(pin == in)
     4fa:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <pin>
     4fe:	89 17       	cp	r24, r25
     500:	21 f0       	breq	.+8      	; 0x50a <KeyInput+0x50>
	return 0;
	
	pin = in;		//store key value
     502:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <pin>
	return in;		//return code
     506:	98 2f       	mov	r25, r24
     508:	01 c0       	rjmp	.+2      	; 0x50c <KeyInput+0x52>
	{
		pin = 0;
		return 0;
	}
	if(pin == in)
	return 0;
     50a:	90 e0       	ldi	r25, 0x00	; 0
	
	pin = in;		//store key value
	return in;		//return code
}
     50c:	89 2f       	mov	r24, r25
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <write_command>:

	LcdCommand(ch);

	for(i=0; i<8; i++)
	LcdPutchar(font[i]);
}
     512:	98 2f       	mov	r25, r24
     514:	90 7f       	andi	r25, 0xF0	; 240
     516:	94 60       	ori	r25, 0x04	; 4
     518:	95 bb       	out	0x15, r25	; 21
     51a:	9b 7f       	andi	r25, 0xFB	; 251
     51c:	95 bb       	out	0x15, r25	; 21
     51e:	20 e1       	ldi	r18, 0x10	; 16
     520:	82 02       	muls	r24, r18
     522:	c0 01       	movw	r24, r0
     524:	11 24       	eor	r1, r1
     526:	84 60       	ori	r24, 0x04	; 4
     528:	85 bb       	out	0x15, r24	; 21
     52a:	8b 7f       	andi	r24, 0xFB	; 251
     52c:	85 bb       	out	0x15, r24	; 21
     52e:	85 e0       	ldi	r24, 0x05	; 5
     530:	8a 95       	dec	r24
     532:	f1 f7       	brne	.-4      	; 0x530 <write_command+0x1e>
     534:	00 00       	nop
     536:	08 95       	ret

00000538 <LcdCommand>:
     538:	cf 93       	push	r28
     53a:	c8 2f       	mov	r28, r24
     53c:	85 e3       	ldi	r24, 0x35	; 53
     53e:	8a 95       	dec	r24
     540:	f1 f7       	brne	.-4      	; 0x53e <LcdCommand+0x6>
     542:	00 00       	nop
     544:	95 e3       	ldi	r25, 0x35	; 53
     546:	9a 95       	dec	r25
     548:	f1 f7       	brne	.-4      	; 0x546 <LcdCommand+0xe>
     54a:	00 00       	nop
     54c:	85 e3       	ldi	r24, 0x35	; 53
     54e:	8a 95       	dec	r24
     550:	f1 f7       	brne	.-4      	; 0x54e <LcdCommand+0x16>
     552:	00 00       	nop
     554:	95 e3       	ldi	r25, 0x35	; 53
     556:	9a 95       	dec	r25
     558:	f1 f7       	brne	.-4      	; 0x556 <LcdCommand+0x1e>
     55a:	00 00       	nop
     55c:	85 e3       	ldi	r24, 0x35	; 53
     55e:	8a 95       	dec	r24
     560:	f1 f7       	brne	.-4      	; 0x55e <LcdCommand+0x26>
     562:	00 00       	nop
     564:	8c 2f       	mov	r24, r28
     566:	d5 df       	rcall	.-86     	; 0x512 <write_command>
     568:	c1 50       	subi	r28, 0x01	; 1
     56a:	c2 30       	cpi	r28, 0x02	; 2
     56c:	30 f4       	brcc	.+12     	; 0x57a <LcdCommand+0x42>
     56e:	8f e3       	ldi	r24, 0x3F	; 63
     570:	9f e1       	ldi	r25, 0x1F	; 31
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <LcdCommand+0x3a>
     576:	00 c0       	rjmp	.+0      	; 0x578 <LcdCommand+0x40>
     578:	00 00       	nop
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <LcdInit>:
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	84 bb       	out	0x14, r24	; 20
     582:	8f e5       	ldi	r24, 0x5F	; 95
     584:	9a ee       	ldi	r25, 0xEA	; 234
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <LcdInit+0x8>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <LcdInit+0xe>
     58c:	00 00       	nop
     58e:	80 e3       	ldi	r24, 0x30	; 48
     590:	c0 df       	rcall	.-128    	; 0x512 <write_command>
     592:	8f e1       	ldi	r24, 0x1F	; 31
     594:	9e e4       	ldi	r25, 0x4E	; 78
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <LcdInit+0x18>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <LcdInit+0x1e>
     59c:	00 00       	nop
     59e:	80 e3       	ldi	r24, 0x30	; 48
     5a0:	b8 df       	rcall	.-144    	; 0x512 <write_command>
     5a2:	8f e9       	ldi	r24, 0x9F	; 159
     5a4:	9f e0       	ldi	r25, 0x0F	; 15
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LcdInit+0x28>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <LcdInit+0x2e>
     5ac:	00 00       	nop
     5ae:	82 e3       	ldi	r24, 0x32	; 50
     5b0:	b0 df       	rcall	.-160    	; 0x512 <write_command>
     5b2:	88 e2       	ldi	r24, 0x28	; 40
     5b4:	c1 df       	rcall	.-126    	; 0x538 <LcdCommand>
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	bf df       	rcall	.-130    	; 0x538 <LcdCommand>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	bd df       	rcall	.-134    	; 0x538 <LcdCommand>
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	bb df       	rcall	.-138    	; 0x538 <LcdCommand>
     5c2:	8c e0       	ldi	r24, 0x0C	; 12
     5c4:	b9 cf       	rjmp	.-142    	; 0x538 <LcdCommand>
     5c6:	08 95       	ret

000005c8 <LcdPutchar>:
     5c8:	25 e3       	ldi	r18, 0x35	; 53
     5ca:	2a 95       	dec	r18
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <LcdPutchar+0x2>
     5ce:	00 00       	nop
     5d0:	95 e3       	ldi	r25, 0x35	; 53
     5d2:	9a 95       	dec	r25
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LcdPutchar+0xa>
     5d6:	00 00       	nop
     5d8:	25 e3       	ldi	r18, 0x35	; 53
     5da:	2a 95       	dec	r18
     5dc:	f1 f7       	brne	.-4      	; 0x5da <LcdPutchar+0x12>
     5de:	00 00       	nop
     5e0:	95 e3       	ldi	r25, 0x35	; 53
     5e2:	9a 95       	dec	r25
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LcdPutchar+0x1a>
     5e6:	00 00       	nop
     5e8:	25 e3       	ldi	r18, 0x35	; 53
     5ea:	2a 95       	dec	r18
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <LcdPutchar+0x22>
     5ee:	00 00       	nop
     5f0:	98 2f       	mov	r25, r24
     5f2:	90 7f       	andi	r25, 0xF0	; 240
     5f4:	95 60       	ori	r25, 0x05	; 5
     5f6:	95 bb       	out	0x15, r25	; 21
     5f8:	9b 7f       	andi	r25, 0xFB	; 251
     5fa:	95 bb       	out	0x15, r25	; 21
     5fc:	20 e1       	ldi	r18, 0x10	; 16
     5fe:	82 02       	muls	r24, r18
     600:	c0 01       	movw	r24, r0
     602:	11 24       	eor	r1, r1
     604:	85 60       	ori	r24, 0x05	; 5
     606:	85 bb       	out	0x15, r24	; 21
     608:	8b 7f       	andi	r24, 0xFB	; 251
     60a:	85 bb       	out	0x15, r24	; 21
     60c:	08 95       	ret

0000060e <LcdPuts>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	ec 01       	movw	r28, r24
     614:	88 81       	ld	r24, Y
     616:	88 23       	and	r24, r24
     618:	29 f0       	breq	.+10     	; 0x624 <LcdPuts+0x16>
     61a:	21 96       	adiw	r28, 0x01	; 1
     61c:	d5 df       	rcall	.-86     	; 0x5c8 <LcdPutchar>
     61e:	89 91       	ld	r24, Y+
     620:	81 11       	cpse	r24, r1
     622:	fc cf       	rjmp	.-8      	; 0x61c <LcdPuts+0xe>
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <LcdMove>:
     62a:	90 e4       	ldi	r25, 0x40	; 64
     62c:	89 9f       	mul	r24, r25
     62e:	60 0d       	add	r22, r0
     630:	11 24       	eor	r1, r1
     632:	86 2f       	mov	r24, r22
     634:	80 68       	ori	r24, 0x80	; 128
     636:	80 cf       	rjmp	.-256    	; 0x538 <LcdCommand>
     638:	08 95       	ret

0000063a <LcdNewchar>:
// 문자코드 ch에 새로운 글꼴 등록
// 입력 : ch - 문자코드
//		 font - 글꼴 데이터
//=======================================================
void LcdNewchar(char ch, char font[])
{
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	8b 01       	movw	r16, r22
	int i;
	
	ch <<= 3;		//ch = ch <<3;과 같음
     644:	28 e0       	ldi	r18, 0x08	; 8
     646:	82 02       	muls	r24, r18
     648:	c0 01       	movw	r24, r0
     64a:	11 24       	eor	r1, r1
	ch |= 0x40;		//비트6 세트 -> CGRAM 주소설정
	
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
     64c:	80 64       	ori	r24, 0x40	; 64
     64e:	74 df       	rcall	.-280    	; 0x538 <LcdCommand>
     650:	e8 01       	movw	r28, r16
     652:	08 5f       	subi	r16, 0xF8	; 248
     654:	1f 4f       	sbci	r17, 0xFF	; 255
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
	LcdPutchar(font[i]);
     656:	89 91       	ld	r24, Y+
     658:	b7 df       	rcall	.-146    	; 0x5c8 <LcdPutchar>
	ch |= 0x40;		//비트6 세트 -> CGRAM 주소설정
	
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
     65a:	c0 17       	cp	r28, r16
     65c:	d1 07       	cpc	r29, r17
     65e:	d9 f7       	brne	.-10     	; 0x656 <LcdNewchar+0x1c>
	LcdPutchar(font[i]);
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	08 95       	ret

0000066a <msec_delay>:
}


void msec_delay(int n)
{
	for(; n>0; n--)		//1msec 시간지연 n회	반복
     66a:	18 16       	cp	r1, r24
     66c:	19 06       	cpc	r1, r25
     66e:	44 f4       	brge	.+16     	; 0x680 <msec_delay+0x16>
     670:	ef e9       	ldi	r30, 0x9F	; 159
     672:	ff e0       	ldi	r31, 0x0F	; 15
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <msec_delay+0xa>
     678:	00 c0       	rjmp	.+0      	; 0x67a <msec_delay+0x10>
     67a:	00 00       	nop
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	c1 f7       	brne	.-16     	; 0x670 <msec_delay+0x6>
     680:	08 95       	ret

00000682 <ClockCounterInit>:

static int* AlarmTimeStore[3] = {-1,};


void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
     682:	85 b5       	in	r24, 0x25	; 37
     684:	88 60       	ori	r24, 0x08	; 8
     686:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
     688:	84 e6       	ldi	r24, 0x64	; 100
     68a:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
     68c:	80 e8       	ldi	r24, 0x80	; 128
     68e:	87 bf       	out	0x37, r24	; 55
     690:	08 95       	ret

00000692 <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	2f 93       	push	r18
     69e:	5f 93       	push	r21
     6a0:	6f 93       	push	r22
     6a2:	7f 93       	push	r23
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
	ClockCounter_CNT++;
     6ac:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <ClockCounter_CNT>
     6b0:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <ClockCounter_CNT+0x1>
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <ClockCounter_CNT+0x1>
     6ba:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
     6be:	80 32       	cpi	r24, 0x20	; 32
     6c0:	2e e4       	ldi	r18, 0x4E	; 78
     6c2:	92 07       	cpc	r25, r18
     6c4:	71 f4       	brne	.+28     	; 0x6e2 <__vector_9+0x50>
		ClockCounter_CNT=0;
     6c6:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <ClockCounter_CNT+0x1>
     6ca:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <ClockCounter_CNT>
		ClockCounter_SECOND++;
     6ce:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <ClockCounter_SECOND>
     6d2:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <ClockCounter_SECOND+0x1>
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <ClockCounter_SECOND+0x1>
     6dc:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <ClockCounter_SECOND>
     6e0:	06 c0       	rjmp	.+12     	; 0x6ee <__vector_9+0x5c>
	}
	if(ClockCounter_CNT % 2000 == 0) {
     6e2:	60 ed       	ldi	r22, 0xD0	; 208
     6e4:	77 e0       	ldi	r23, 0x07	; 7
     6e6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__divmodhi4>
     6ea:	89 2b       	or	r24, r25
     6ec:	79 f4       	brne	.+30     	; 0x70c <__vector_9+0x7a>
		ClockCounter_M_SECOND = 1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <ClockCounter_M_SECOND+0x1>
     6f6:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <ClockCounter_M_SECOND>
		ClockCounter_M_SECOND_ONLY_STOPWATCH += 1;
     6fa:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
     6fe:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     708:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
	}
}
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <startTermProject>:


//============================================================================
//======박가경's Watch===flash x 3==============================================
//============================================================================
char* startTermProject() {
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	68 97       	sbiw	r28, 0x18	; 24
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
	char *initTitle = malloc(sizeof(char) * 20);
     73e:	84 e1       	ldi	r24, 0x14	; 20
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <malloc>
     746:	8c 01       	movw	r16, r24
	
	char font1[8] = {0x02, 0x1A, 0x1F, 0x1E, 0x02, 0x1C, 0x04, 0x04};	// 박
     748:	88 e0       	ldi	r24, 0x08	; 8
     74a:	e5 e6       	ldi	r30, 0x65	; 101
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	de 01       	movw	r26, r28
     750:	11 96       	adiw	r26, 0x01	; 1
     752:	01 90       	ld	r0, Z+
     754:	0d 92       	st	X+, r0
     756:	8a 95       	dec	r24
     758:	e1 f7       	brne	.-8      	; 0x752 <startTermProject+0x2c>
	char font2[8] = {0x02, 0x02, 0x1A, 0x0B, 0x0A, 0x0A, 0x02, 0x00};	// 가
     75a:	88 e0       	ldi	r24, 0x08	; 8
     75c:	ed e6       	ldi	r30, 0x6D	; 109
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	de 01       	movw	r26, r28
     762:	19 96       	adiw	r26, 0x09	; 9
     764:	01 90       	ld	r0, Z+
     766:	0d 92       	st	X+, r0
     768:	8a 95       	dec	r24
     76a:	e1 f7       	brne	.-8      	; 0x764 <startTermProject+0x3e>
	char font3[8] = {0x02, 0x1E, 0x0A, 0x0E, 0x08, 0x0C, 0x12, 0x0C};	// 경
     76c:	88 e0       	ldi	r24, 0x08	; 8
     76e:	e5 e7       	ldi	r30, 0x75	; 117
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	de 01       	movw	r26, r28
     774:	51 96       	adiw	r26, 0x11	; 17
     776:	01 90       	ld	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	8a 95       	dec	r24
     77c:	e1 f7       	brne	.-8      	; 0x776 <startTermProject+0x50>
	
	LcdNewchar(1, font1);
     77e:	be 01       	movw	r22, r28
     780:	6f 5f       	subi	r22, 0xFF	; 255
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	59 df       	rcall	.-334    	; 0x63a <LcdNewchar>
	LcdNewchar(2, font2);
     788:	be 01       	movw	r22, r28
     78a:	67 5f       	subi	r22, 0xF7	; 247
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	54 df       	rcall	.-344    	; 0x63a <LcdNewchar>
	LcdNewchar(3, font3);
     792:	be 01       	movw	r22, r28
     794:	6f 5e       	subi	r22, 0xEF	; 239
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	4f df       	rcall	.-354    	; 0x63a <LcdNewchar>

	initTitle[0] = 1;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	f8 01       	movw	r30, r16
     7a0:	80 83       	st	Z, r24
	initTitle[1] = 2;
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	81 83       	std	Z+1, r24	; 0x01
	initTitle[2] = 3;
     7a6:	83 e0       	ldi	r24, 0x03	; 3
     7a8:	82 83       	std	Z+2, r24	; 0x02
	initTitle[3] = '\'';
     7aa:	87 e2       	ldi	r24, 0x27	; 39
     7ac:	83 83       	std	Z+3, r24	; 0x03
	initTitle[4] = 's';
     7ae:	83 e7       	ldi	r24, 0x73	; 115
     7b0:	84 83       	std	Z+4, r24	; 0x04
	initTitle[5] = ' ';
     7b2:	80 e2       	ldi	r24, 0x20	; 32
     7b4:	85 83       	std	Z+5, r24	; 0x05
	initTitle[6] = 'W';
     7b6:	87 e5       	ldi	r24, 0x57	; 87
     7b8:	86 83       	std	Z+6, r24	; 0x06
	initTitle[7] = 'a';
     7ba:	81 e6       	ldi	r24, 0x61	; 97
     7bc:	87 83       	std	Z+7, r24	; 0x07
	initTitle[8] = 't';
     7be:	84 e7       	ldi	r24, 0x74	; 116
     7c0:	80 87       	std	Z+8, r24	; 0x08
	initTitle[9] = 'c';
     7c2:	83 e6       	ldi	r24, 0x63	; 99
     7c4:	81 87       	std	Z+9, r24	; 0x09
	initTitle[10] = 'h';
     7c6:	88 e6       	ldi	r24, 0x68	; 104
     7c8:	82 87       	std	Z+10, r24	; 0x0a
	initTitle[11] = '\0';
	
	LcdMove(0,0);			// cursor go to home
     7ca:	13 86       	std	Z+11, r1	; 0x0b
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
	LcdPuts(initTitle);		// 박가경's Watch
     7d0:	2c df       	rcall	.-424    	; 0x62a <LcdMove>
     7d2:	c8 01       	movw	r24, r16
     7d4:	1c df       	rcall	.-456    	; 0x60e <LcdPuts>
     7d6:	03 e0       	ldi	r16, 0x03	; 3
	
	for(int i=0; i<3; i++)		// flash x 3
	{
		LcdCommand(DISP_ON);		// 점
     7d8:	10 e0       	ldi	r17, 0x00	; 0
     7da:	8c e0       	ldi	r24, 0x0C	; 12
		msec_delay(500);			// 0.5s delay
     7dc:	ad de       	rcall	.-678    	; 0x538 <LcdCommand>
     7de:	84 ef       	ldi	r24, 0xF4	; 244
     7e0:	91 e0       	ldi	r25, 0x01	; 1
		LcdCommand(DISP_OFF);		// 멸
     7e2:	43 df       	rcall	.-378    	; 0x66a <msec_delay>
     7e4:	88 e0       	ldi	r24, 0x08	; 8
		msec_delay(500);			// 0.5s delay
     7e6:	a8 de       	rcall	.-688    	; 0x538 <LcdCommand>
     7e8:	84 ef       	ldi	r24, 0xF4	; 244
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	3e df       	rcall	.-388    	; 0x66a <msec_delay>
     7ee:	01 50       	subi	r16, 0x01	; 1
     7f0:	11 09       	sbc	r17, r1
	initTitle[11] = '\0';
	
	LcdMove(0,0);			// cursor go to home
	LcdPuts(initTitle);		// 박가경's Watch
	
	for(int i=0; i<3; i++)		// flash x 3
     7f2:	99 f7       	brne	.-26     	; 0x7da <startTermProject+0xb4>
		LcdCommand(DISP_ON);		// 점
		msec_delay(500);			// 0.5s delay
		LcdCommand(DISP_OFF);		// 멸
		msec_delay(500);			// 0.5s delay
	}
	LcdInit();
     7f4:	c4 de       	rcall	.-632    	; 0x57e <LcdInit>
     7f6:	68 96       	adiw	r28, 0x18	; 24
}
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <main>:
     80c:	cc e0       	ldi	r28, 0x0C	; 12
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅 second parameter is not display flag 
		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag, AlarmTimeStore);
     80e:	d1 e0       	ldi	r29, 0x01	; 1
		//status = 4
		while(status==4){
			status = setAlarm();
			int* tmp = getAlarmTime();
			
			AlarmTimeStore[0] = tmp[0];
     810:	0c 2f       	mov	r16, r28
     812:	1d 2f       	mov	r17, r29
// 현재 메뉴를 알려주는 변수
static int status = 0;

int main(void) {
back:
	LcdInit();
     814:	b4 de       	rcall	.-664    	; 0x57e <LcdInit>
	KeyInit();
     816:	4a de       	rcall	.-876    	; 0x4ac <KeyInit>
	ClockCounterInit();
     818:	34 df       	rcall	.-408    	; 0x682 <ClockCounterInit>
	DDRB = 0x00;	//모터 돌아가지 않겠금
     81a:	17 ba       	out	0x17, r1	; 23
	// 박가경's project <깜박 x 3>
	startTermProject();
     81c:	84 df       	rcall	.-248    	; 0x726 <startTermProject>
     81e:	01 d4       	rcall	.+2050   	; 0x1022 <initMenu>
	initMenu();
     820:	78 94       	sei
     822:	85 b5       	in	r24, 0x25	; 37
		
		
	// 전역 인터럽트 허용
	sei();						
     824:	82 60       	ori	r24, 0x02	; 2
	TCCR2 |= 1<<CS21;
     826:	85 bd       	out	0x25, r24	; 37
     828:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <SegmentStopwatchInitFlag>
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅 second parameter is not display flag 
		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag, AlarmTimeStore);
     82c:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <SegmentStopwatchInitFlag+0x1>
     830:	40 2f       	mov	r20, r16
     832:	51 2f       	mov	r21, r17
     834:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <ClockCounter_SECOND>
     838:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <ClockCounter_SECOND+0x1>
     83c:	0e d2       	rcall	.+1052   	; 0xc5a <setClock>
     83e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SegmentTimerInitFlag>

		if(SegmentTimerInitFlag == 1) {
     842:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <SegmentTimerInitFlag+0x1>
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	51 f4       	brne	.+20     	; 0x85e <main+0x52>
     84a:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <ClockCounter_M_SECOND>
			SegmentTimerInitFlag = set7SegmentTimer(ClockCounter_M_SECOND);
     84e:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <ClockCounter_M_SECOND+0x1>
     852:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <set7SegmentTimer>
     856:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <SegmentTimerInitFlag+0x1>
     85a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <SegmentTimerInitFlag>
     85e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <SegmentStopwatchInitFlag>
		}
		
		if(SegmentStopwatchInitFlag == 1) {
     862:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <SegmentStopwatchInitFlag+0x1>
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	81 f4       	brne	.+32     	; 0x88a <main+0x7e>
     86a:	27 de       	rcall	.-946    	; 0x4ba <KeyInput>
			SegmentStopwatchInitFlag = set7SegmentStopwatch(ClockCounter_M_SECOND, KeyInput());
     86c:	68 2f       	mov	r22, r24
     86e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <ClockCounter_M_SECOND>
     872:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <ClockCounter_M_SECOND+0x1>
     876:	04 d5       	rcall	.+2568   	; 0x1280 <set7SegmentStopwatch>
     878:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <SegmentStopwatchInitFlag+0x1>
     87c:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <SegmentStopwatchInitFlag>
     880:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <ClockCounter_M_SECOND+0x1>
			ClockCounter_M_SECOND = 0;
     884:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <ClockCounter_M_SECOND>
     888:	cf cf       	rjmp	.-98     	; 0x828 <main+0x1c>
     88a:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <ClockCounter_SECOND+0x1>
			continue;
		}
		
		// 무조건 1초 혹은 0.1초로 계산되게 하기위함
		ClockCounter_SECOND = 0;
     88e:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <ClockCounter_SECOND>
		ClockCounter_M_SECOND = 0;		
     892:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <ClockCounter_M_SECOND+0x1>
     896:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <ClockCounter_M_SECOND>
		// keypad input
		keyInput = KeyInput();
     89a:	0f de       	rcall	.-994    	; 0x4ba <KeyInput>
		
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
     89c:	cf d3       	rcall	.+1950   	; 0x103c <setMenu>
     89e:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <status+0x1>
     8a2:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <status>
     8a6:	01 97       	sbiw	r24, 0x01	; 1

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     8a8:	39 f4       	brne	.+14     	; 0x8b8 <main+0xac>
     8aa:	74 d2       	rcall	.+1256   	; 0xd94 <setCustomClock>
			status = setCustomClock();	// Time setting(main.c 파일 안에 있음)	
     8ac:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <status+0x1>
     8b0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <status>
     8b4:	01 97       	sbiw	r24, 0x01	; 1
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     8b6:	c9 f3       	breq	.-14     	; 0x8aa <main+0x9e>
     8b8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <status>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     8bc:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <status+0x1>
     8c0:	02 97       	sbiw	r24, 0x02	; 2
     8c2:	49 f4       	brne	.+18     	; 0x8d6 <main+0xca>
     8c4:	83 ef       	ldi	r24, 0xF3	; 243
			status = setTimer(&SegmentTimerInitFlag);
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	b5 d7       	rcall	.+3946   	; 0x1834 <setTimer>
     8ca:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <status+0x1>
     8ce:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <status>
     8d2:	02 97       	sbiw	r24, 0x02	; 2
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     8d4:	b9 f3       	breq	.-18     	; 0x8c4 <main+0xb8>
     8d6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <status>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     8da:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <status+0x1>
     8de:	03 97       	sbiw	r24, 0x03	; 3
     8e0:	49 f4       	brne	.+18     	; 0x8f4 <main+0xe8>
     8e2:	81 ef       	ldi	r24, 0xF1	; 241
			status = setStopwatch(&SegmentStopwatchInitFlag);
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	81 d4       	rcall	.+2306   	; 0x11ea <setStopwatch>
     8e8:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <status+0x1>
     8ec:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <status>
     8f0:	03 97       	sbiw	r24, 0x03	; 3
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     8f2:	b9 f3       	breq	.-18     	; 0x8e2 <main+0xd6>
     8f4:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <status>
		}
	
		
		//=========================================================
		//status = 4
		while(status==4){
     8f8:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <status+0x1>
     8fc:	84 30       	cpi	r24, 0x04	; 4
     8fe:	91 05       	cpc	r25, r1
     900:	d1 f4       	brne	.+52     	; 0x936 <main+0x12a>
			status = setAlarm();
     902:	1e d0       	rcall	.+60     	; 0x940 <setAlarm>
     904:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <status+0x1>
     908:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <status>
     90c:	96 d1       	rcall	.+812    	; 0xc3a <getAlarmTime>
			int* tmp = getAlarmTime();
     90e:	fc 01       	movw	r30, r24
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
			
			AlarmTimeStore[0] = tmp[0];
     914:	99 83       	std	Y+1, r25	; 0x01
     916:	88 83       	st	Y, r24
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	93 81       	ldd	r25, Z+3	; 0x03
			AlarmTimeStore[1] = tmp[1];
     91c:	9b 83       	std	Y+3, r25	; 0x03
     91e:	8a 83       	std	Y+2, r24	; 0x02
     920:	84 81       	ldd	r24, Z+4	; 0x04
     922:	95 81       	ldd	r25, Z+5	; 0x05
			AlarmTimeStore[2] = tmp[2];
     924:	9d 83       	std	Y+5, r25	; 0x05
     926:	8c 83       	std	Y+4, r24	; 0x04
     928:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <status>
		}
	
		
		//=========================================================
		//status = 4
		while(status==4){
     92c:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <status+0x1>
     930:	84 30       	cpi	r24, 0x04	; 4
     932:	91 05       	cpc	r25, r1
     934:	31 f3       	breq	.-52     	; 0x902 <main+0xf6>
     936:	8d 39       	cpi	r24, 0x9D	; 157
     938:	9f 4f       	sbci	r25, 0xFF	; 255
			AlarmTimeStore[0] = tmp[0];
			AlarmTimeStore[1] = tmp[1];
			AlarmTimeStore[2] = tmp[2];
		}
		
		if(status == -99) {
     93a:	09 f0       	breq	.+2      	; 0x93e <main+0x132>
     93c:	75 cf       	rjmp	.-278    	; 0x828 <main+0x1c>
     93e:	6a cf       	rjmp	.-300    	; 0x814 <main+0x8>

00000940 <setAlarm>:
     940:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <customAlarmSetInitFlag>
	
int setAlarm() {
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customAlarmSetInitFlag == 0){
     944:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <customAlarmSetInitFlag+0x1>
     948:	89 2b       	or	r24, r25
     94a:	81 f4       	brne	.+32     	; 0x96c <setAlarm+0x2c>
		// 초기화면 세팅
		LcdMove(0,0);
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	6c de       	rcall	.-808    	; 0x62a <LcdMove>
		LcdPuts("00h 00m 00s        ");
     952:	8e e8       	ldi	r24, 0x8E	; 142
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	5b de       	rcall	.-842    	; 0x60e <LcdPuts>
		LcdCommand(HOME);
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	ee dd       	rcall	.-1060   	; 0x538 <LcdCommand>
		LcdCommand(CURSOR_ON);
     95c:	8e e0       	ldi	r24, 0x0E	; 14
     95e:	ec dd       	rcall	.-1064   	; 0x538 <LcdCommand>
     960:	81 e0       	ldi	r24, 0x01	; 1
		customAlarmSetInitFlag = 1;
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <customAlarmSetInitFlag+0x1>
     968:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <customAlarmSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
     96c:	a6 dd       	rcall	.-1204   	; 0x4ba <KeyInput>
     96e:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		switch(keyInput) {
     970:	fc 01       	movw	r30, r24
     972:	71 97       	sbiw	r30, 0x11	; 17
     974:	e4 37       	cpi	r30, 0x74	; 116
     976:	f1 05       	cpc	r31, r1
     978:	08 f0       	brcs	.+2      	; 0x97c <setAlarm+0x3c>
     97a:	5c c1       	rjmp	.+696    	; 0xc34 <setAlarm+0x2f4>
     97c:	ea 5b       	subi	r30, 0xBA	; 186
     97e:	ff 4f       	sbci	r31, 0xFF	; 255
     980:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     984:	81 e3       	ldi	r24, 0x31	; 49
     986:	20 de       	rcall	.-960    	; 0x5c8 <LcdPutchar>
     988:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     98c:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     996:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
     99a:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 1;
     99c:	99 1f       	adc	r25, r25
     99e:	fc 01       	movw	r30, r24
     9a0:	e9 5f       	subi	r30, 0xF9	; 249
     9a2:	fd 4f       	sbci	r31, 0xFD	; 253
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24
				break;
     9ac:	40 c1       	rjmp	.+640    	; 0xc2e <setAlarm+0x2ee>
			
			case SW1:
				LcdPutchar('2');
     9ae:	82 e3       	ldi	r24, 0x32	; 50
     9b0:	0b de       	rcall	.-1002   	; 0x5c8 <LcdPutchar>
     9b2:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     9b6:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     9c0:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
     9c4:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 2;
     9c6:	99 1f       	adc	r25, r25
     9c8:	fc 01       	movw	r30, r24
     9ca:	e9 5f       	subi	r30, 0xF9	; 249
     9cc:	fd 4f       	sbci	r31, 0xFD	; 253
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	91 83       	std	Z+1, r25	; 0x01
     9d4:	80 83       	st	Z, r24
				break;
     9d6:	2b c1       	rjmp	.+598    	; 0xc2e <setAlarm+0x2ee>
			
			case SW2:
				LcdPutchar('3');
     9d8:	83 e3       	ldi	r24, 0x33	; 51
     9da:	f6 dd       	rcall	.-1044   	; 0x5c8 <LcdPutchar>
     9dc:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     9e0:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     9ea:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
     9ee:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 3;
     9f0:	99 1f       	adc	r25, r25
     9f2:	fc 01       	movw	r30, r24
     9f4:	e9 5f       	subi	r30, 0xF9	; 249
     9f6:	fd 4f       	sbci	r31, 0xFD	; 253
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	80 83       	st	Z, r24
				break;
     a00:	16 c1       	rjmp	.+556    	; 0xc2e <setAlarm+0x2ee>
			
			case SW4:
				LcdPutchar('4');
     a02:	84 e3       	ldi	r24, 0x34	; 52
     a04:	e1 dd       	rcall	.-1086   	; 0x5c8 <LcdPutchar>
     a06:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     a0a:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     a14:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
     a18:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 4;
     a1a:	99 1f       	adc	r25, r25
     a1c:	fc 01       	movw	r30, r24
     a1e:	e9 5f       	subi	r30, 0xF9	; 249
     a20:	fd 4f       	sbci	r31, 0xFD	; 253
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	80 83       	st	Z, r24
				break;
     a2a:	01 c1       	rjmp	.+514    	; 0xc2e <setAlarm+0x2ee>
			
			case SW5:
				LcdPutchar('5');
     a2c:	85 e3       	ldi	r24, 0x35	; 53
     a2e:	cc dd       	rcall	.-1128   	; 0x5c8 <LcdPutchar>
     a30:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     a34:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     a3e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
     a42:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 5;
     a44:	99 1f       	adc	r25, r25
     a46:	fc 01       	movw	r30, r24
     a48:	e9 5f       	subi	r30, 0xF9	; 249
     a4a:	fd 4f       	sbci	r31, 0xFD	; 253
     a4c:	85 e0       	ldi	r24, 0x05	; 5
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	91 83       	std	Z+1, r25	; 0x01
     a52:	80 83       	st	Z, r24
				break;
     a54:	ec c0       	rjmp	.+472    	; 0xc2e <setAlarm+0x2ee>
			
			case SW6:
				LcdPutchar('6');
     a56:	86 e3       	ldi	r24, 0x36	; 54
     a58:	b7 dd       	rcall	.-1170   	; 0x5c8 <LcdPutchar>
     a5a:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     a5e:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     a68:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
     a6c:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 6;
     a6e:	99 1f       	adc	r25, r25
     a70:	fc 01       	movw	r30, r24
     a72:	e9 5f       	subi	r30, 0xF9	; 249
     a74:	fd 4f       	sbci	r31, 0xFD	; 253
     a76:	86 e0       	ldi	r24, 0x06	; 6
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	91 83       	std	Z+1, r25	; 0x01
     a7c:	80 83       	st	Z, r24
				break;
     a7e:	d7 c0       	rjmp	.+430    	; 0xc2e <setAlarm+0x2ee>
			
			case SW8:
				LcdPutchar('7');
     a80:	87 e3       	ldi	r24, 0x37	; 55
     a82:	a2 dd       	rcall	.-1212   	; 0x5c8 <LcdPutchar>
     a84:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     a88:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     a92:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 7;
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	fc 01       	movw	r30, r24
     a9c:	e9 5f       	subi	r30, 0xF9	; 249
     a9e:	fd 4f       	sbci	r31, 0xFD	; 253
     aa0:	87 e0       	ldi	r24, 0x07	; 7
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	80 83       	st	Z, r24
				break;
     aa8:	c2 c0       	rjmp	.+388    	; 0xc2e <setAlarm+0x2ee>
			
			case SW9:
				LcdPutchar('8');
     aaa:	88 e3       	ldi	r24, 0x38	; 56
     aac:	8d dd       	rcall	.-1254   	; 0x5c8 <LcdPutchar>
     aae:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     ab2:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     abc:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 8;
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	fc 01       	movw	r30, r24
     ac6:	e9 5f       	subi	r30, 0xF9	; 249
     ac8:	fd 4f       	sbci	r31, 0xFD	; 253
     aca:	88 e0       	ldi	r24, 0x08	; 8
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
				break;
     ad2:	ad c0       	rjmp	.+346    	; 0xc2e <setAlarm+0x2ee>
			
			case SW10:
				LcdPutchar('9');
     ad4:	89 e3       	ldi	r24, 0x39	; 57
     ad6:	78 dd       	rcall	.-1296   	; 0x5c8 <LcdPutchar>
     ad8:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     adc:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     ae6:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 9;
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	fc 01       	movw	r30, r24
     af0:	e9 5f       	subi	r30, 0xF9	; 249
     af2:	fd 4f       	sbci	r31, 0xFD	; 253
     af4:	89 e0       	ldi	r24, 0x09	; 9
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	91 83       	std	Z+1, r25	; 0x01
     afa:	80 83       	st	Z, r24
				break;
     afc:	98 c0       	rjmp	.+304    	; 0xc2e <setAlarm+0x2ee>
			
			case SW13:
				LcdPutchar('0');
     afe:	80 e3       	ldi	r24, 0x30	; 48
     b00:	63 dd       	rcall	.-1338   	; 0x5c8 <LcdPutchar>
     b02:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     b06:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     b10:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 0;
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	fc 01       	movw	r30, r24
     b1a:	e9 5f       	subi	r30, 0xF9	; 249
     b1c:	fd 4f       	sbci	r31, 0xFD	; 253
     b1e:	11 82       	std	Z+1, r1	; 0x01
     b20:	10 82       	st	Z, r1
				break;
     b22:	85 c0       	rjmp	.+266    	; 0xc2e <setAlarm+0x2ee>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
     b24:	80 e1       	ldi	r24, 0x10	; 16
     b26:	08 dd       	rcall	.-1520   	; 0x538 <LcdCommand>
     b28:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarmSettingIndex -= 1;
     b2c:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     b36:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
     b3a:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 0;
     b3c:	99 1f       	adc	r25, r25
     b3e:	fc 01       	movw	r30, r24
     b40:	e9 5f       	subi	r30, 0xF9	; 249
     b42:	fd 4f       	sbci	r31, 0xFD	; 253
     b44:	11 82       	std	Z+1, r1	; 0x01
     b46:	10 82       	st	Z, r1
				returnStatus = 4;
				break;
     b48:	75 c0       	rjmp	.+234    	; 0xc34 <setAlarm+0x2f4>
			
			// 아래 키 입력되는 케이스
			case SW7:
				customAlarmSettingIndex += 1;
     b4a:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <customAlarmSettingIndex>
     b4e:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <customAlarmSettingIndex+0x1>
     b58:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <customAlarmSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
     b5c:	84 e1       	ldi	r24, 0x14	; 20
     b5e:	ec dc       	rcall	.-1576   	; 0x538 <LcdCommand>
     b60:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 0;
     b64:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <customAlarmSettingIndex+0x1>
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	e9 5f       	subi	r30, 0xF9	; 249
     b6e:	fd 4f       	sbci	r31, 0xFD	; 253
				returnStatus = 4;
				break;
     b70:	11 82       	std	Z+1, r1	; 0x01
		if(returnStatus == -1) {
			returnStatus = 4;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customAlarmSetInitFlag = 0;
     b72:	10 82       	st	Z, r1
     b74:	5f c0       	rjmp	.+190    	; 0xc34 <setAlarm+0x2f4>
     b76:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <customAlarmSetInitFlag+0x1>
			LcdMove(0,0);
     b7a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <customAlarmSetInitFlag>
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
			LcdPuts("                      ");
     b82:	53 dd       	rcall	.-1370   	; 0x62a <LcdMove>
     b84:	82 ea       	ldi	r24, 0xA2	; 162
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	42 dd       	rcall	.-1404   	; 0x60e <LcdPuts>
			LcdCommand(CURSOR_OFF);
     b8a:	8c e0       	ldi	r24, 0x0C	; 12
     b8c:	d5 dc       	rcall	.-1622   	; 0x538 <LcdCommand>
     b8e:	e7 e0       	ldi	r30, 0x07	; 7
			
			// 시간 계산
			alarmHour = customAlarm[1]*10 + customAlarm[2];
			alarmMinute = customAlarm[5]*10 + customAlarm[6];
     b90:	f2 e0       	ldi	r31, 0x02	; 2
     b92:	82 85       	ldd	r24, Z+10	; 0x0a
     b94:	93 85       	ldd	r25, Z+11	; 0x0b
     b96:	9c 01       	movw	r18, r24
     b98:	22 0f       	add	r18, r18
     b9a:	33 1f       	adc	r19, r19
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	82 0f       	add	r24, r18
     baa:	93 1f       	adc	r25, r19
     bac:	44 85       	ldd	r20, Z+12	; 0x0c
     bae:	55 85       	ldd	r21, Z+13	; 0x0d
     bb0:	48 0f       	add	r20, r24
     bb2:	59 1f       	adc	r21, r25
     bb4:	82 89       	ldd	r24, Z+18	; 0x12
			alarmSecond = customAlarm[9]*10 + customAlarm[10];
     bb6:	93 89       	ldd	r25, Z+19	; 0x13
     bb8:	9c 01       	movw	r18, r24
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	24 89       	ldd	r18, Z+20	; 0x14
     bd0:	35 89       	ldd	r19, Z+21	; 0x15
     bd2:	28 0f       	add	r18, r24
     bd4:	39 1f       	adc	r19, r25
     bd6:	ad ef       	ldi	r26, 0xFD	; 253
			
			alarmTimeArray[0] = alarmHour;
     bd8:	b1 e0       	ldi	r27, 0x01	; 1
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	93 81       	ldd	r25, Z+3	; 0x03
     bde:	bc 01       	movw	r22, r24
     be0:	66 0f       	add	r22, r22
     be2:	77 1f       	adc	r23, r23
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	86 0f       	add	r24, r22
     bf2:	97 1f       	adc	r25, r23
     bf4:	64 81       	ldd	r22, Z+4	; 0x04
     bf6:	75 81       	ldd	r23, Z+5	; 0x05
     bf8:	86 0f       	add	r24, r22
     bfa:	97 1f       	adc	r25, r23
     bfc:	11 96       	adiw	r26, 0x01	; 1
     bfe:	9c 93       	st	X, r25
     c00:	8e 93       	st	-X, r24
     c02:	13 96       	adiw	r26, 0x03	; 3
			alarmTimeArray[1] = alarmMinute;
     c04:	5c 93       	st	X, r21
     c06:	4e 93       	st	-X, r20
     c08:	12 97       	sbiw	r26, 0x02	; 2
     c0a:	15 96       	adiw	r26, 0x05	; 5
			alarmTimeArray[2] = alarmSecond;
     c0c:	3c 93       	st	X, r19
     c0e:	2e 93       	st	-X, r18
     c10:	14 97       	sbiw	r26, 0x04	; 4
     c12:	81 e0       	ldi	r24, 0x01	; 1
			customAlarmSetDoneFlag = 1;
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <customAlarmSetDoneFlag+0x1>
     c1a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <customAlarmSetDoneFlag>
     c1e:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <customAlarmSettingIndex+0x1>
			customAlarmSettingIndex = 0;
     c22:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <customAlarmSettingIndex>
     c26:	08 95       	ret
			returnStatus = 0;
			break;
		}
		return returnStatus;
	}
}
     c28:	8d e9       	ldi	r24, 0x9D	; 157
				customAlarm[customAlarmSettingIndex] = 0;
				returnStatus = 4;
				break;
				
			case SW15:
				return -99;
     c2a:	9f ef       	ldi	r25, 0xFF	; 255
     c2c:	08 95       	ret
     c2e:	84 e0       	ldi	r24, 0x04	; 4
				returnStatus = 4;
				break;
		}
		//////////////////////////////////////////////////////////////////////////
		if(returnStatus == -1) {
			returnStatus = 4;
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	08 95       	ret
     c34:	84 e0       	ldi	r24, 0x04	; 4
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	08 95       	ret

00000c3a <getAlarmTime>:
			returnStatus = 0;
			break;
		}
		return returnStatus;
	}
}
     c3a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <customAlarmSetDoneFlag>

int* getAlarmTime() {
	if(customAlarmSetDoneFlag == 1){
     c3e:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <customAlarmSetDoneFlag+0x1>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	39 f4       	brne	.+14     	; 0xc54 <getAlarmTime+0x1a>
		customAlarmSetDoneFlag = 0;
     c46:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <customAlarmSetDoneFlag+0x1>
     c4a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <customAlarmSetDoneFlag>
		return alarmTimeArray;
     c4e:	8d ef       	ldi	r24, 0xFD	; 253
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	08 95       	ret
	}
	else {
		int *tmp[3] = {-1,};
		return tmp;
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
	}
     c58:	08 95       	ret

00000c5a <setClock>:
static int second = 0;
static int minute = 0;
static int hour = 0;


void setClock(int interruptSecond, int segmentStopwatchInitFlag, int* alarmStore) {
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	eb 01       	movw	r28, r22
     c66:	fa 01       	movw	r30, r20
	second += interruptSecond;
     c68:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <second>
     c6c:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <second+0x1>
     c70:	82 0f       	add	r24, r18
     c72:	93 1f       	adc	r25, r19
	minute += second/60; 
     c74:	2c e3       	ldi	r18, 0x3C	; 60
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	b9 01       	movw	r22, r18
     c7a:	9a d7       	rcall	.+3892   	; 0x1bb0 <__divmodhi4>
     c7c:	f8 2e       	mov	r15, r24
     c7e:	49 2f       	mov	r20, r25
     c80:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <minute>
     c84:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <minute+0x1>
     c88:	86 0f       	add	r24, r22
     c8a:	97 1f       	adc	r25, r23
	hour += minute/60;
     c8c:	b9 01       	movw	r22, r18
     c8e:	90 d7       	rcall	.+3872   	; 0x1bb0 <__divmodhi4>
     c90:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <hour>
     c94:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <hour+0x1>
     c98:	62 0f       	add	r22, r18
     c9a:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
     c9c:	0f 2d       	mov	r16, r15
     c9e:	14 2f       	mov	r17, r20
     ca0:	f0 92 25 02 	sts	0x0225, r15	; 0x800225 <second>
     ca4:	40 93 26 02 	sts	0x0226, r20	; 0x800226 <second+0x1>
	minute = minute%60;
     ca8:	28 2f       	mov	r18, r24
     caa:	39 2f       	mov	r19, r25
     cac:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <minute>
     cb0:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <minute+0x1>
	hour = hour%24;
     cb4:	cb 01       	movw	r24, r22
     cb6:	68 e1       	ldi	r22, 0x18	; 24
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	7a d7       	rcall	.+3828   	; 0x1bb0 <__divmodhi4>
     cbc:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <hour+0x1>
     cc0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <hour>
	
	if(alarmStore[0] == hour && alarmStore[1] == minute && alarmStore[2] == second ){
     cc4:	40 81       	ld	r20, Z
     cc6:	51 81       	ldd	r21, Z+1	; 0x01
     cc8:	84 17       	cp	r24, r20
     cca:	95 07       	cpc	r25, r21
     ccc:	81 f4       	brne	.+32     	; 0xcee <setClock+0x94>
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	28 17       	cp	r18, r24
     cd4:	39 07       	cpc	r19, r25
     cd6:	59 f4       	brne	.+22     	; 0xcee <setClock+0x94>
     cd8:	84 81       	ldd	r24, Z+4	; 0x04
     cda:	95 81       	ldd	r25, Z+5	; 0x05
     cdc:	08 17       	cp	r16, r24
     cde:	19 07       	cpc	r17, r25
     ce0:	31 f4       	brne	.+12     	; 0xcee <setClock+0x94>
		//TODO: dotmatrix 추가
		LcdMove(1,0);
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	a1 dc       	rcall	.-1726   	; 0x62a <LcdMove>
		LcdPuts("Alarm Alert");
     ce8:	89 eb       	ldi	r24, 0xB9	; 185
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	90 dc       	rcall	.-1760   	; 0x60e <LcdPuts>
	}
	// STOPWATCH에서 LCD 사용중인 경우 미노출
	if(segmentStopwatchInitFlag == 0) {
     cee:	cd 2b       	or	r28, r29
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <setClock+0x9a>
     cf2:	4a c0       	rjmp	.+148    	; 0xd88 <setClock+0x12e>
		LcdMove(0,0);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	98 dc       	rcall	.-1744   	; 0x62a <LcdMove>
		LcdPutchar((hour/10%10) + '0');
     cfa:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <hour>
     cfe:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <hour+0x1>
     d02:	ca e0       	ldi	r28, 0x0A	; 10
     d04:	d0 e0       	ldi	r29, 0x00	; 0
     d06:	be 01       	movw	r22, r28
     d08:	53 d7       	rcall	.+3750   	; 0x1bb0 <__divmodhi4>
     d0a:	cb 01       	movw	r24, r22
     d0c:	be 01       	movw	r22, r28
     d0e:	50 d7       	rcall	.+3744   	; 0x1bb0 <__divmodhi4>
     d10:	80 5d       	subi	r24, 0xD0	; 208
     d12:	5a dc       	rcall	.-1868   	; 0x5c8 <LcdPutchar>
		LcdPutchar(hour%10 + '0');
     d14:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <hour>
     d18:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <hour+0x1>
     d1c:	be 01       	movw	r22, r28
     d1e:	48 d7       	rcall	.+3728   	; 0x1bb0 <__divmodhi4>
     d20:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar('h');
     d22:	52 dc       	rcall	.-1884   	; 0x5c8 <LcdPutchar>
     d24:	88 e6       	ldi	r24, 0x68	; 104
		
		LcdMove(0,4);
     d26:	50 dc       	rcall	.-1888   	; 0x5c8 <LcdPutchar>
     d28:	64 e0       	ldi	r22, 0x04	; 4
     d2a:	80 e0       	ldi	r24, 0x00	; 0
		LcdPutchar((minute/10%10) + '0');
     d2c:	7e dc       	rcall	.-1796   	; 0x62a <LcdMove>
     d2e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <minute>
     d32:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <minute+0x1>
     d36:	be 01       	movw	r22, r28
     d38:	3b d7       	rcall	.+3702   	; 0x1bb0 <__divmodhi4>
     d3a:	cb 01       	movw	r24, r22
     d3c:	be 01       	movw	r22, r28
     d3e:	38 d7       	rcall	.+3696   	; 0x1bb0 <__divmodhi4>
		LcdPutchar(minute%10 + '0');
     d40:	80 5d       	subi	r24, 0xD0	; 208
     d42:	42 dc       	rcall	.-1916   	; 0x5c8 <LcdPutchar>
     d44:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <minute>
     d48:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <minute+0x1>
     d4c:	be 01       	movw	r22, r28
     d4e:	30 d7       	rcall	.+3680   	; 0x1bb0 <__divmodhi4>
		LcdPutchar('m');
     d50:	80 5d       	subi	r24, 0xD0	; 208
     d52:	3a dc       	rcall	.-1932   	; 0x5c8 <LcdPutchar>
		
		LcdMove(0,8);
     d54:	8d e6       	ldi	r24, 0x6D	; 109
     d56:	38 dc       	rcall	.-1936   	; 0x5c8 <LcdPutchar>
     d58:	68 e0       	ldi	r22, 0x08	; 8
		LcdPutchar((second/10%10) + '0');
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	66 dc       	rcall	.-1844   	; 0x62a <LcdMove>
     d5e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <second>
     d62:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <second+0x1>
     d66:	be 01       	movw	r22, r28
     d68:	23 d7       	rcall	.+3654   	; 0x1bb0 <__divmodhi4>
     d6a:	cb 01       	movw	r24, r22
     d6c:	be 01       	movw	r22, r28
     d6e:	20 d7       	rcall	.+3648   	; 0x1bb0 <__divmodhi4>
     d70:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar(second%10 + '0');
     d72:	2a dc       	rcall	.-1964   	; 0x5c8 <LcdPutchar>
     d74:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <second>
     d78:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <second+0x1>
     d7c:	be 01       	movw	r22, r28
     d7e:	18 d7       	rcall	.+3632   	; 0x1bb0 <__divmodhi4>
     d80:	80 5d       	subi	r24, 0xD0	; 208
     d82:	22 dc       	rcall	.-1980   	; 0x5c8 <LcdPutchar>
     d84:	83 e7       	ldi	r24, 0x73	; 115
		LcdPutchar('s');
     d86:	20 dc       	rcall	.-1984   	; 0x5c8 <LcdPutchar>
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
	}
}
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	08 95       	ret

00000d94 <setCustomClock>:
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17

// 사용자에게 입력 받아 시계 세팅
int setCustomClock(int* ClockCounter_SECOND) {
     d98:	cf 93       	push	r28
     d9a:	8c 01       	movw	r16, r24
	// -1 : 숫자가 눌린 경우(전) , 0: 선택이 눌린 경우, 1: 숫자가 눌린 경우(후), 위로 눌린 경우
	int returnStatus = -1;
	// 키를 입력받는 변수
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
     d9c:	8e db       	rcall	.-2276   	; 0x4ba <KeyInput>
     d9e:	c8 2f       	mov	r28, r24
	
	LcdMove(1,customClockSettingIndex);
     da0:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <customClockSettingIndex>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	41 dc       	rcall	.-1918   	; 0x62a <LcdMove>
	while(1) {
		if(customClockSetInitFlag == 0){
     da8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <customClockSetInitFlag>
     dac:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <customClockSetInitFlag+0x1>
     db0:	89 2b       	or	r24, r25
     db2:	79 f4       	brne	.+30     	; 0xdd2 <setCustomClock+0x3e>
			LcdMove(1,0);
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	38 dc       	rcall	.-1936   	; 0x62a <LcdMove>
			LcdPuts("______");
     dba:	85 ec       	ldi	r24, 0xC5	; 197
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	27 dc       	rcall	.-1970   	; 0x60e <LcdPuts>
			LcdMove(1,0);
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	32 dc       	rcall	.-1948   	; 0x62a <LcdMove>
     dc6:	81 e0       	ldi	r24, 0x01	; 1
			customClockSetInitFlag = 1;
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <customClockSetInitFlag+0x1>
     dce:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <customClockSetInitFlag>
		}
		
		if(keyInput == NO_KEY){
     dd2:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <setCustomClock+0x5c>
     dd6:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
     dd8:	af db       	rcall	.-2210   	; 0x538 <LcdCommand>
     dda:	84 ef       	ldi	r24, 0xF4	; 244
     ddc:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
     dde:	45 dc       	rcall	.-1910   	; 0x66a <msec_delay>
     de0:	8c e0       	ldi	r24, 0x0C	; 12
     de2:	aa db       	rcall	.-2220   	; 0x538 <LcdCommand>
			msec_delay(500);
     de4:	84 ef       	ldi	r24, 0xF4	; 244
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	40 dc       	rcall	.-1920   	; 0x66a <msec_delay>
     dea:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	15 c1       	rjmp	.+554    	; 0x101a <setCustomClock+0x286>
     df0:	8c 2f       	mov	r24, r28
		}
		
		switch(keyInput) {
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	fc 01       	movw	r30, r24
     df6:	71 97       	sbiw	r30, 0x11	; 17
     df8:	e4 37       	cpi	r30, 0x74	; 116
     dfa:	f1 05       	cpc	r31, r1
     dfc:	18 f4       	brcc	.+6      	; 0xe04 <setCustomClock+0x70>
     dfe:	e6 54       	subi	r30, 0x46	; 70
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	e9 c6       	rjmp	.+3538   	; 0x1bd6 <__tablejump2__>
			case SW15:
				return -99;
				break;
				
			default:
				returnStatus = 1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	08 c1       	rjmp	.+528    	; 0x101a <setCustomClock+0x286>
			return 1;
		}
		
		switch(keyInput) {
			case SW0:
				LcdPutchar('1');
     e0a:	81 e3       	ldi	r24, 0x31	; 49
     e0c:	dd db       	rcall	.-2118   	; 0x5c8 <LcdPutchar>
     e0e:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 1;
     e12:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	e7 5d       	subi	r30, 0xD7	; 215
     e1c:	fd 4f       	sbci	r31, 0xFD	; 253
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
				break;
     e26:	ee c0       	rjmp	.+476    	; 0x1004 <setCustomClock+0x270>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
     e28:	82 e3       	ldi	r24, 0x32	; 50
     e2a:	ce db       	rcall	.-2148   	; 0x5c8 <LcdPutchar>
     e2c:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 2;
     e30:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	e7 5d       	subi	r30, 0xD7	; 215
     e3a:	fd 4f       	sbci	r31, 0xFD	; 253
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
				break;
     e44:	df c0       	rjmp	.+446    	; 0x1004 <setCustomClock+0x270>
			
			case SW2:
				LcdPutchar('3');
     e46:	83 e3       	ldi	r24, 0x33	; 51
     e48:	bf db       	rcall	.-2178   	; 0x5c8 <LcdPutchar>
     e4a:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 3;
     e4e:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	e7 5d       	subi	r30, 0xD7	; 215
     e58:	fd 4f       	sbci	r31, 0xFD	; 253
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	80 83       	st	Z, r24
				break;
     e62:	d0 c0       	rjmp	.+416    	; 0x1004 <setCustomClock+0x270>
			
			case SW4:
				LcdPutchar('4');
     e64:	84 e3       	ldi	r24, 0x34	; 52
     e66:	b0 db       	rcall	.-2208   	; 0x5c8 <LcdPutchar>
     e68:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 4;
     e6c:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	e7 5d       	subi	r30, 0xD7	; 215
     e76:	fd 4f       	sbci	r31, 0xFD	; 253
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
				break;
     e80:	c1 c0       	rjmp	.+386    	; 0x1004 <setCustomClock+0x270>
			
			case SW5:
				LcdPutchar('5');
     e82:	85 e3       	ldi	r24, 0x35	; 53
     e84:	a1 db       	rcall	.-2238   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 5;
     e86:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
     e8a:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	e7 5d       	subi	r30, 0xD7	; 215
     e94:	fd 4f       	sbci	r31, 0xFD	; 253
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
				break;
     e9e:	b2 c0       	rjmp	.+356    	; 0x1004 <setCustomClock+0x270>
			
			case SW6:
				LcdPutchar('6');
     ea0:	86 e3       	ldi	r24, 0x36	; 54
     ea2:	92 db       	rcall	.-2268   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 6;
     ea4:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
     ea8:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	e7 5d       	subi	r30, 0xD7	; 215
     eb2:	fd 4f       	sbci	r31, 0xFD	; 253
     eb4:	86 e0       	ldi	r24, 0x06	; 6
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	80 83       	st	Z, r24
				break;
     ebc:	a3 c0       	rjmp	.+326    	; 0x1004 <setCustomClock+0x270>
			
			case SW8:
				LcdPutchar('7');
     ebe:	87 e3       	ldi	r24, 0x37	; 55
     ec0:	83 db       	rcall	.-2298   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 7;
     ec2:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
     ec6:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	e7 5d       	subi	r30, 0xD7	; 215
     ed0:	fd 4f       	sbci	r31, 0xFD	; 253
     ed2:	87 e0       	ldi	r24, 0x07	; 7
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
				break;
			
			case SW9:
				LcdPutchar('8');
     eda:	94 c0       	rjmp	.+296    	; 0x1004 <setCustomClock+0x270>
     edc:	88 e3       	ldi	r24, 0x38	; 56
     ede:	74 db       	rcall	.-2328   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 8;
     ee0:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
     ee4:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	e7 5d       	subi	r30, 0xD7	; 215
     eee:	fd 4f       	sbci	r31, 0xFD	; 253
     ef0:	88 e0       	ldi	r24, 0x08	; 8
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	91 83       	std	Z+1, r25	; 0x01
				break;
     ef6:	80 83       	st	Z, r24
			
			case SW10:
				LcdPutchar('9');
     ef8:	85 c0       	rjmp	.+266    	; 0x1004 <setCustomClock+0x270>
     efa:	89 e3       	ldi	r24, 0x39	; 57
     efc:	65 db       	rcall	.-2358   	; 0x5c8 <LcdPutchar>
				customClock[customClockSettingIndex] = 9;
     efe:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
     f02:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	e7 5d       	subi	r30, 0xD7	; 215
     f0c:	fd 4f       	sbci	r31, 0xFD	; 253
     f0e:	89 e0       	ldi	r24, 0x09	; 9
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	91 83       	std	Z+1, r25	; 0x01
				break;
			
			case SW13:
				LcdPutchar('0');
     f14:	80 83       	st	Z, r24
     f16:	76 c0       	rjmp	.+236    	; 0x1004 <setCustomClock+0x270>
     f18:	80 e3       	ldi	r24, 0x30	; 48
				customClock[customClockSettingIndex] = 0;
     f1a:	56 db       	rcall	.-2388   	; 0x5c8 <LcdPutchar>
     f1c:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <customClockSettingIndex>
     f20:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	e7 5d       	subi	r30, 0xD7	; 215
     f2a:	fd 4f       	sbci	r31, 0xFD	; 253
     f2c:	11 82       	std	Z+1, r1	; 0x01
				break;
     f2e:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
     f30:	69 c0       	rjmp	.+210    	; 0x1004 <setCustomClock+0x270>
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	79 db       	rcall	.-2318   	; 0x62a <LcdMove>
				LcdPuts("1. SET          ");				
     f38:	8c ec       	ldi	r24, 0xCC	; 204
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	68 db       	rcall	.-2352   	; 0x60e <LcdPuts>
     f3e:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <customClockSettingIndex+0x1>
			customClockSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			customClockSettingIndex = 0;
     f42:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <customClockSettingIndex>
     f46:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
     f48:	11 82       	std	Z+1, r1	; 0x01
     f4a:	10 82       	st	Z, r1
     f4c:	e9 e2       	ldi	r30, 0x29	; 41
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customClock[0] * 10 + customClock[1];
     f4e:	f2 e0       	ldi	r31, 0x02	; 2
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	9c 01       	movw	r18, r24
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	22 81       	ldd	r18, Z+2	; 0x02
     f6c:	33 81       	ldd	r19, Z+3	; 0x03
     f6e:	82 0f       	add	r24, r18
     f70:	93 1f       	adc	r25, r19
     f72:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <hour+0x1>
     f76:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <hour>
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customClock[2] * 10 + customClock[3];
     f7c:	95 81       	ldd	r25, Z+5	; 0x05
     f7e:	9c 01       	movw	r18, r24
     f80:	22 0f       	add	r18, r18
     f82:	33 1f       	adc	r19, r19
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	82 0f       	add	r24, r18
     f92:	93 1f       	adc	r25, r19
     f94:	26 81       	ldd	r18, Z+6	; 0x06
     f96:	37 81       	ldd	r19, Z+7	; 0x07
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <minute+0x1>
     fa0:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <minute>
     fa4:	80 85       	ldd	r24, Z+8	; 0x08
			second = customClock[4] * 10 + customClock[5];
     fa6:	91 85       	ldd	r25, Z+9	; 0x09
     fa8:	9c 01       	movw	r18, r24
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	22 85       	ldd	r18, Z+10	; 0x0a
     fc0:	33 85       	ldd	r19, Z+11	; 0x0b
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <second+0x1>
     fca:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <second>
			customClockSetInitFlag = 0;
     fce:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <customClockSetInitFlag+0x1>
     fd2:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <customClockSetInitFlag>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --customClockSettingIndex);
     fda:	1f c0       	rjmp	.+62     	; 0x101a <setCustomClock+0x286>
     fdc:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <customClockSettingIndex>
     fe0:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
     fe4:	61 50       	subi	r22, 0x01	; 1
     fe6:	71 09       	sbc	r23, r1
     fe8:	70 93 36 02 	sts	0x0236, r23	; 0x800236 <customClockSettingIndex+0x1>
     fec:	60 93 35 02 	sts	0x0235, r22	; 0x800235 <customClockSettingIndex>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	1b db       	rcall	.-2506   	; 0x62a <LcdMove>
				LcdPutchar('_');
     ff4:	8f e5       	ldi	r24, 0x5F	; 95
     ff6:	e8 da       	rcall	.-2608   	; 0x5c8 <LcdPutchar>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
				returnStatus = 1;
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e c0       	rjmp	.+28     	; 0x101a <setCustomClock+0x286>
     ffe:	8d e9       	ldi	r24, 0x9D	; 157
				break;
				
			case SW15:
				return -99;
    1000:	9f ef       	ldi	r25, 0xFF	; 255
    1002:	0b c0       	rjmp	.+22     	; 0x101a <setCustomClock+0x286>
    1004:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <customClockSettingIndex>
				returnStatus = 1;
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			customClockSettingIndex++;
    1008:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <customClockSettingIndex+0x1>
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <customClockSettingIndex+0x1>
    1012:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <customClockSettingIndex>
    1016:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 1;
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	cf 91       	pop	r28
			customClockSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	08 95       	ret

00001022 <initMenu>:
static char str1[] = "00h 00m 00s";
static int nowMenuCursor = 0;
static int nowStatus = 1;

void initMenu() {
	LcdMove(0,0);
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	01 db       	rcall	.-2558   	; 0x62a <LcdMove>
	LcdPuts(str1);
    1028:	84 e1       	ldi	r24, 0x14	; 20
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	f0 da       	rcall	.-2592   	; 0x60e <LcdPuts>
	LcdMove(1,0);
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	fb da       	rcall	.-2570   	; 0x62a <LcdMove>
	LcdPuts(Set);
    1034:	85 e5       	ldi	r24, 0x55	; 85
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	ea ca       	rjmp	.-2604   	; 0x60e <LcdPuts>
    103a:	08 95       	ret

0000103c <setMenu>:
    103c:	cf 93       	push	r28
}



// MENU 세팅용 함수
int setMenu(char clickedButton) {
    103e:	df 93       	push	r29
    1040:	c8 2f       	mov	r28, r24
	LcdMove(1,0);			// 2행으로
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	f1 da       	rcall	.-2590   	; 0x62a <LcdMove>
	switch(clickedButton) {
    1048:	c1 32       	cpi	r28, 0x21	; 33
    104a:	09 f4       	brne	.+2      	; 0x104e <setMenu+0x12>
    104c:	52 c0       	rjmp	.+164    	; 0x10f2 <setMenu+0xb6>
    104e:	c1 34       	cpi	r28, 0x41	; 65
    1050:	09 f4       	brne	.+2      	; 0x1054 <setMenu+0x18>
    1052:	9a c0       	rjmp	.+308    	; 0x1188 <__stack+0x89>
    1054:	c1 31       	cpi	r28, 0x11	; 17
    1056:	09 f0       	breq	.+2      	; 0x105a <setMenu+0x1e>
    1058:	9c c0       	rjmp	.+312    	; 0x1192 <__stack+0x93>
		// up button clicked
		case SW3:
			if ( nowMenuCursor == 1) {
    105a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <nowMenuCursor>
    105e:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <nowMenuCursor+0x1>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	91 05       	cpc	r25, r1
    1066:	81 f4       	brne	.+32     	; 0x1088 <setMenu+0x4c>
				nowMenuCursor--;
    1068:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <nowMenuCursor+0x1>
    106c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <nowMenuCursor>
				LcdPuts(Set);
    1070:	85 e5       	ldi	r24, 0x55	; 85
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	cc da       	rcall	.-2664   	; 0x60e <LcdPuts>
				nowStatus = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    107e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
    1082:	c0 e0       	ldi	r28, 0x00	; 0
    1084:	d0 e0       	ldi	r29, 0x00	; 0
    1086:	87 c0       	rjmp	.+270    	; 0x1196 <__stack+0x97>
			if ( nowMenuCursor == 1) {
				nowMenuCursor--;
				LcdPuts(Set);
				nowStatus = 1;
			}
			else if ( nowMenuCursor == 2) {
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	91 05       	cpc	r25, r1
    108c:	91 f4       	brne	.+36     	; 0x10b2 <setMenu+0x76>
				nowMenuCursor--;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <nowMenuCursor+0x1>
    1096:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nowMenuCursor>
				LcdPuts(Timer);
    109a:	83 e4       	ldi	r24, 0x43	; 67
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	b7 da       	rcall	.-2706   	; 0x60e <LcdPuts>
				nowStatus = 2;
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    10a8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
    10ac:	c0 e0       	ldi	r28, 0x00	; 0
    10ae:	d0 e0       	ldi	r29, 0x00	; 0
    10b0:	72 c0       	rjmp	.+228    	; 0x1196 <__stack+0x97>
			else if ( nowMenuCursor == 2) {
				nowMenuCursor--;
				LcdPuts(Timer);
				nowStatus = 2;
			}
			else if ( nowMenuCursor == 3) {
    10b2:	03 97       	sbiw	r24, 0x03	; 3
    10b4:	91 f4       	brne	.+36     	; 0x10da <setMenu+0x9e>
				nowMenuCursor--;
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <nowMenuCursor+0x1>
    10be:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nowMenuCursor>
				LcdPuts(StopWatch);
    10c2:	83 e3       	ldi	r24, 0x33	; 51
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	a3 da       	rcall	.-2746   	; 0x60e <LcdPuts>
				nowStatus = 3;
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    10d0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
    10d4:	c0 e0       	ldi	r28, 0x00	; 0
    10d6:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor--;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else{
				LcdPuts(Set);
    10d8:	5e c0       	rjmp	.+188    	; 0x1196 <__stack+0x97>
    10da:	85 e5       	ldi	r24, 0x55	; 85
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	97 da       	rcall	.-2770   	; 0x60e <LcdPuts>
				nowStatus = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    10e8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
			}
			return 0;
    10ec:	c0 e0       	ldi	r28, 0x00	; 0
    10ee:	d0 e0       	ldi	r29, 0x00	; 0
    10f0:	52 c0       	rjmp	.+164    	; 0x1196 <__stack+0x97>
			break;
		
		
		// down button clicked
		case SW7:
			if ( nowMenuCursor == 0) {
    10f2:	c0 91 37 02 	lds	r28, 0x0237	; 0x800237 <nowMenuCursor>
    10f6:	d0 91 38 02 	lds	r29, 0x0238	; 0x800238 <nowMenuCursor+0x1>
    10fa:	20 97       	sbiw	r28, 0x00	; 0
    10fc:	81 f4       	brne	.+32     	; 0x111e <__stack+0x1f>
				nowMenuCursor++;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <nowMenuCursor+0x1>
    1106:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nowMenuCursor>
				LcdPuts(Timer);
    110a:	83 e4       	ldi	r24, 0x43	; 67
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	7f da       	rcall	.-2818   	; 0x60e <LcdPuts>
				nowStatus = 2;
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    1118:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    111c:	3c c0       	rjmp	.+120    	; 0x1196 <__stack+0x97>
			}
			else if ( nowMenuCursor == 1) {
    111e:	c1 30       	cpi	r28, 0x01	; 1
    1120:	d1 05       	cpc	r29, r1
    1122:	91 f4       	brne	.+36     	; 0x1148 <__stack+0x49>
				nowMenuCursor++;
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <nowMenuCursor+0x1>
    112c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nowMenuCursor>
				LcdPuts(StopWatch);
    1130:	83 e3       	ldi	r24, 0x33	; 51
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	6c da       	rcall	.-2856   	; 0x60e <LcdPuts>
				nowStatus = 3;
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    113e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
    1142:	c0 e0       	ldi	r28, 0x00	; 0
    1144:	d0 e0       	ldi	r29, 0x00	; 0
    1146:	27 c0       	rjmp	.+78     	; 0x1196 <__stack+0x97>
			else if ( nowMenuCursor == 1) {
				nowMenuCursor++;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else if ( nowMenuCursor == 2) {
    1148:	22 97       	sbiw	r28, 0x02	; 2
    114a:	91 f4       	brne	.+36     	; 0x1170 <__stack+0x71>
				nowMenuCursor++;
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <nowMenuCursor+0x1>
    1154:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nowMenuCursor>
				LcdPuts(Alarm);
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	58 da       	rcall	.-2896   	; 0x60e <LcdPuts>
				nowStatus = 4;
    115e:	84 e0       	ldi	r24, 0x04	; 4
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    1166:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
    116a:	c0 e0       	ldi	r28, 0x00	; 0
    116c:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor++;
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			else{
				LcdPuts(Alarm);
    116e:	13 c0       	rjmp	.+38     	; 0x1196 <__stack+0x97>
    1170:	80 e2       	ldi	r24, 0x20	; 32
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	4c da       	rcall	.-2920   	; 0x60e <LcdPuts>
				nowStatus = 4;
    1176:	84 e0       	ldi	r24, 0x04	; 4
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    117e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
			}
			return 0;
    1182:	c0 e0       	ldi	r28, 0x00	; 0
    1184:	d0 e0       	ldi	r29, 0x00	; 0
    1186:	07 c0       	rjmp	.+14     	; 0x1196 <__stack+0x97>
			break;
		
		
		// When select button clicked, 메인파일의 각 status에 해당하는 기능을 위한 while문을 돌림
		case SW11:
			return nowStatus;
    1188:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <nowStatus>
    118c:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <nowStatus+0x1>
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <__stack+0x97>
		case SW15:
			return -99;
			break;
			
		default:
			return 0;
    1192:	c0 e0       	ldi	r28, 0x00	; 0
    1194:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
    1196:	ce 01       	movw	r24, r28
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <__vector_21>:

static int stopwatchDisplayIndex = 0;
static int n_enter = 0;


ISR(ADC_vect){
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
	// 타이머1A가 16비트 타이머라서 8비트로 전환시키기 위한 코드
	OCR1A = ADC>>2;	
    11ae:	84 b1       	in	r24, 0x04	; 4
    11b0:	95 b1       	in	r25, 0x05	; 5
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	96 95       	lsr	r25
    11b8:	87 95       	ror	r24
    11ba:	9b bd       	out	0x2b, r25	; 43
    11bc:	8a bd       	out	0x2a, r24	; 42
	n_enter++;
    11be:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <n_enter>
    11c2:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <n_enter+0x1>
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <n_enter+0x1>
    11cc:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <n_enter>
	if(n_enter == 1000){
    11d0:	88 3e       	cpi	r24, 0xE8	; 232
    11d2:	93 40       	sbci	r25, 0x03	; 3
    11d4:	11 f4       	brne	.+4      	; 0x11da <__vector_21+0x3c>
		DDRB |= 0<<PB5;	// 모터 정지
    11d6:	87 b3       	in	r24, 0x17	; 23
    11d8:	87 bb       	out	0x17, r24	; 23
	}
}
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	2f 91       	pop	r18
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <setStopwatch>:

int setStopwatch(int* stopwatchInitFlag) {
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	8c 01       	movw	r16, r24
	int returnStatus = -1;
	// 처음 진입시에만 실행
	if(customStopwatchSetInitFlag == 0) {
    11f2:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <customStopwatchSetInitFlag>
    11f6:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <customStopwatchSetInitFlag+0x1>
    11fa:	89 2b       	or	r24, r25
    11fc:	71 f4       	brne	.+28     	; 0x121a <setStopwatch+0x30>
		ISeg7Init();
    11fe:	c1 d8       	rcall	.-3710   	; 0x382 <ISeg7Init>
		ISeg7DispNum(segmentStopwatchDisplayNumber , 10);
    1200:	6a e0       	ldi	r22, 0x0A	; 10
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <segmentStopwatchDisplayNumber>
    1208:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <segmentStopwatchDisplayNumber+0x1>
    120c:	cd d8       	rcall	.-3686   	; 0x3a8 <ISeg7DispNum>
		// 초기화면 세팅
		LcdMove(0,0);
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	0b da       	rcall	.-3050   	; 0x62a <LcdMove>
		LcdPuts("0m 00.0s     ");
    1214:	8d ed       	ldi	r24, 0xDD	; 221
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	fa d9       	rcall	.-3084   	; 0x60e <LcdPuts>
    121a:	81 e0       	ldi	r24, 0x01	; 1
	}
	customStopwatchSetInitFlag = 1;
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <customStopwatchSetInitFlag+0x1>
    1222:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <customStopwatchSetInitFlag>

	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
    1226:	49 d9       	rcall	.-3438   	; 0x4ba <KeyInput>
    1228:	c8 2f       	mov	r28, r24
    122a:	6a e0       	ldi	r22, 0x0A	; 10
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <segmentStopwatchDisplayNumber>
    1232:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <segmentStopwatchDisplayNumber+0x1>
    1236:	b8 d8       	rcall	.-3728   	; 0x3a8 <ISeg7DispNum>
    1238:	c1 34       	cpi	r28, 0x41	; 65
	while(1) {
		switch(keyInput) {
    123a:	29 f0       	breq	.+10     	; 0x1246 <setStopwatch+0x5c>
    123c:	c1 38       	cpi	r28, 0x81	; 129
    123e:	d1 f0       	breq	.+52     	; 0x1274 <setStopwatch+0x8a>
    1240:	83 e0       	ldi	r24, 0x03	; 3
				break;
			case SW15:
				return -99;
				break;
			default:
				returnStatus = 3;
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	19 c0       	rjmp	.+50     	; 0x1278 <setStopwatch+0x8e>
    1246:	81 e0       	ldi	r24, 0x01	; 1
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	f8 01       	movw	r30, r16
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
				returnStatus = 0;
				LcdMove(0,0);
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	ea d9       	rcall	.-3116   	; 0x62a <LcdMove>
				LcdPuts("              ");
    1256:	8a ea       	ldi	r24, 0xAA	; 170
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	d9 d9       	rcall	.-3150   	; 0x60e <LcdPuts>
				
				LcdMove(1,0);
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	e4 d9       	rcall	.-3128   	; 0x62a <LcdMove>
				LcdPuts("              ");
    1262:	8a ea       	ldi	r24, 0xAA	; 170
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	d3 d9       	rcall	.-3162   	; 0x60e <LcdPuts>
    1268:	60 e0       	ldi	r22, 0x00	; 0
				
				LcdMove(0,0);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	de d9       	rcall	.-3140   	; 0x62a <LcdMove>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
				returnStatus = 0;
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <setStopwatch+0x8e>
    1274:	8d e9       	ldi	r24, 0x9D	; 157
				
				LcdMove(1,0);
				LcdPuts("              ");
				
				LcdMove(0,0);
				break;
    1276:	9f ef       	ldi	r25, 0xFF	; 255
			case SW15:
				return -99;
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
		if(returnStatus == 0) {
			
		}
		return returnStatus;
	}
}
    127c:	0f 91       	pop	r16
    127e:	08 95       	ret

00001280 <set7SegmentStopwatch>:
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15

// 스톱워치 시간증가 시작 및 버튼 별 기능 구현
int set7SegmentStopwatch(int clock_counter, unsigned char stopwatchKeyInput) {
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	8c 01       	movw	r16, r24
    128e:	c6 2f       	mov	r28, r22
	ISeg7Init();
    1290:	78 d8       	rcall	.-3856   	; 0x382 <ISeg7Init>
	if(stopwatchStopFlag == 0 ) {	
    1292:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stopwatchStopFlag>
    1296:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <stopwatchStopFlag+0x1>
    129a:	89 2b       	or	r24, r25
    129c:	09 f0       	breq	.+2      	; 0x12a0 <set7SegmentStopwatch+0x20>
    129e:	bb c2       	rjmp	.+1398   	; 0x1816 <set7SegmentStopwatch+0x596>
		int nowStopwatchDisplayNumber = segmentStopwatchDisplayNumber + clock_counter;
    12a0:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <segmentStopwatchDisplayNumber>
    12a4:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <segmentStopwatchDisplayNumber+0x1>
    12a8:	80 0f       	add	r24, r16
    12aa:	91 1f       	adc	r25, r17
		if(nowStopwatchDisplayNumber == 600) {	
    12ac:	88 35       	cpi	r24, 0x58	; 88
    12ae:	22 e0       	ldi	r18, 0x02	; 2
    12b0:	92 07       	cpc	r25, r18
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <set7SegmentStopwatch+0x38>
			nowStopwatchDisplayNumber += 400;	// 60초가 되면 1분으로 갱신
    12b4:	88 ee       	ldi	r24, 0xE8	; 232
    12b6:	93 e0       	ldi	r25, 0x03	; 3
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
    12b8:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <segmentStopwatchDisplayNumber+0x1>
    12bc:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <segmentStopwatchDisplayNumber>
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
    12c0:	6a e0       	ldi	r22, 0x0A	; 10
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	71 d8       	rcall	.-3870   	; 0x3a8 <ISeg7DispNum>
	}
	
	switch(stopwatchKeyInput) {
    12c6:	c1 31       	cpi	r28, 0x11	; 17
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <set7SegmentStopwatch+0x52>
    12ca:	c1 32       	cpi	r28, 0x21	; 33
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <set7SegmentStopwatch+0x50>
    12ce:	cb c1       	rjmp	.+918    	; 0x1666 <set7SegmentStopwatch+0x3e6>
    12d0:	a8 c2       	rjmp	.+1360   	; 0x1822 <set7SegmentStopwatch+0x5a2>
		case SW3:
			// 스톱워치 진행중 시간기록
			if(stopwatchStopFlag == 0){
    12d2:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stopwatchStopFlag>
    12d6:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <stopwatchStopFlag+0x1>
    12da:	89 2b       	or	r24, r25
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <set7SegmentStopwatch+0x60>
    12de:	11 c1       	rjmp	.+546    	; 0x1502 <set7SegmentStopwatch+0x282>
			
				// 시간이 기록됨을 알리는 모터구동**************
				
				DDRB |= 1<<PB5; //PB5 = OC1A
    12e0:	bd 9a       	sbi	0x17, 5	; 23
				
				//타이머/카운터1 위상정정 PWM 파형발생모드
				//타이머/카운터1 OCR1A와 하강일치 PWM 펄스 출력
				TCCR1A = 1<<WGM10 | 1<<COM1A1;
    12e2:	81 e8       	ldi	r24, 0x81	; 129
    12e4:	8f bd       	out	0x2f, r24	; 47
				
				// 타이머/카운터1 64분주
				// 주기 = 2*255(TOP)*64 / 16[MHz] = 2[ms]
				TCCR1B = 1<<CS11 | 1<<CS10;
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	8e bd       	out	0x2e, r24	; 46
				
				// A/D변환 활성화
				// 연속모드 A/D 변환
				// A/D변환 인터럽트 활성화
				// 128분주 -> ADC클럭주파수 125[KHz] = 주기 8[us]
				ADCSRA = 1<<ADEN | 1<<ADFR | 1<<ADIE | 7;
    12ea:	8f ea       	ldi	r24, 0xAF	; 175
    12ec:	86 b9       	out	0x06, r24	; 6
				
				ADCSRA |= 1<<ADSC; // A/D변환 시작
    12ee:	36 9a       	sbi	0x06, 6	; 6
				//************************************************


				
				// 첫 or 두번째 입력
				if(stopwatchDisplayIndex<=1) {
    12f0:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    12f4:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	91 05       	cpc	r25, r1
    12fc:	0c f0       	brlt	.+2      	; 0x1300 <set7SegmentStopwatch+0x80>
    12fe:	52 c0       	rjmp	.+164    	; 0x13a4 <set7SegmentStopwatch+0x124>
					LcdMove(stopwatchDisplayIndex, 0);
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	93 d9       	rcall	.-3290   	; 0x62a <LcdMove>
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
    1304:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <segmentStopwatchDisplayNumber>
    1308:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <segmentStopwatchDisplayNumber+0x1>
    130c:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    1310:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	ef 5b       	subi	r30, 0xBF	; 191
    131a:	fd 4f       	sbci	r31, 0xFD	; 253
    131c:	91 83       	std	Z+1, r25	; 0x01
    131e:	80 83       	st	Z, r24
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');	//1000으로 나누면 몫은 '분'에 해당하는 숫자만 남음.
    1320:	c8 ee       	ldi	r28, 0xE8	; 232
    1322:	d3 e0       	ldi	r29, 0x03	; 3
    1324:	be 01       	movw	r22, r28
    1326:	44 d4       	rcall	.+2184   	; 0x1bb0 <__divmodhi4>
    1328:	80 e3       	ldi	r24, 0x30	; 48
    132a:	86 0f       	add	r24, r22
    132c:	4d d9       	rcall	.-3430   	; 0x5c8 <LcdPutchar>
					LcdPutchar('m');
    132e:	8d e6       	ldi	r24, 0x6D	; 109
    1330:	4b d9       	rcall	.-3434   	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    1332:	80 e2       	ldi	r24, 0x20	; 32
    1334:	49 d9       	rcall	.-3438   	; 0x5c8 <LcdPutchar>
    1336:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');	//1000으로 나눈 나머지를 100으로 나누면 초의 십의자리에 해당하는 숫자만 남음
    133a:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    133e:	ee 0f       	add	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	ef 5b       	subi	r30, 0xBF	; 191
    1344:	fd 4f       	sbci	r31, 0xFD	; 253
    1346:	80 81       	ld	r24, Z
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	be 01       	movw	r22, r28
    134c:	31 d4       	rcall	.+2146   	; 0x1bb0 <__divmodhi4>
    134e:	c4 e6       	ldi	r28, 0x64	; 100
    1350:	d0 e0       	ldi	r29, 0x00	; 0
    1352:	be 01       	movw	r22, r28
    1354:	2d d4       	rcall	.+2138   	; 0x1bb0 <__divmodhi4>
    1356:	80 e3       	ldi	r24, 0x30	; 48
    1358:	86 0f       	add	r24, r22
    135a:	36 d9       	rcall	.-3476   	; 0x5c8 <LcdPutchar>
    135c:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0'); //위와 비슷한 논리
    1360:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	ef 5b       	subi	r30, 0xBF	; 191
    136a:	fd 4f       	sbci	r31, 0xFD	; 253
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
    1370:	be 01       	movw	r22, r28
    1372:	1e d4       	rcall	.+2108   	; 0x1bb0 <__divmodhi4>
    1374:	ca e0       	ldi	r28, 0x0A	; 10
    1376:	d0 e0       	ldi	r29, 0x00	; 0
    1378:	be 01       	movw	r22, r28
    137a:	1a d4       	rcall	.+2100   	; 0x1bb0 <__divmodhi4>
    137c:	80 e3       	ldi	r24, 0x30	; 48
    137e:	86 0f       	add	r24, r22
    1380:	23 d9       	rcall	.-3514   	; 0x5c8 <LcdPutchar>
					LcdPutchar('.');
    1382:	8e e2       	ldi	r24, 0x2E	; 46
    1384:	21 d9       	rcall	.-3518   	; 0x5c8 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0'); //위와 비슷한 논리
    1386:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    138a:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	ef 5b       	subi	r30, 0xBF	; 191
    1394:	fd 4f       	sbci	r31, 0xFD	; 253
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	be 01       	movw	r22, r28
    139c:	09 d4       	rcall	.+2066   	; 0x1bb0 <__divmodhi4>
    139e:	80 5d       	subi	r24, 0xD0	; 208
    13a0:	13 d9       	rcall	.-3546   	; 0x5c8 <LcdPutchar>
    13a2:	a5 c0       	rjmp	.+330    	; 0x14ee <set7SegmentStopwatch+0x26e>
    13a4:	88 0f       	add	r24, r24
				}
				// 세번째 이상 입력
				else {
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
    13a6:	99 1f       	adc	r25, r25
    13a8:	fc 01       	movw	r30, r24
    13aa:	ef 5b       	subi	r30, 0xBF	; 191
    13ac:	fd 4f       	sbci	r31, 0xFD	; 253
    13ae:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <segmentStopwatchDisplayNumber>
    13b2:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <segmentStopwatchDisplayNumber+0x1>
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	80 83       	st	Z, r24
    13ba:	60 e0       	ldi	r22, 0x00	; 0
					// 0번째 행 변경
					LcdMove(0,0);
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	35 d9       	rcall	.-3478   	; 0x62a <LcdMove>
    13c0:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
    13c4:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	e1 5c       	subi	r30, 0xC1	; 193
    13ce:	fd 4f       	sbci	r31, 0xFD	; 253
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	0f 2e       	mov	r0, r31
    13d6:	f8 ee       	ldi	r31, 0xE8	; 232
    13d8:	ef 2e       	mov	r14, r31
    13da:	f3 e0       	ldi	r31, 0x03	; 3
    13dc:	ff 2e       	mov	r15, r31
    13de:	f0 2d       	mov	r31, r0
    13e0:	b7 01       	movw	r22, r14
    13e2:	e6 d3       	rcall	.+1996   	; 0x1bb0 <__divmodhi4>
    13e4:	80 e3       	ldi	r24, 0x30	; 48
    13e6:	86 0f       	add	r24, r22
    13e8:	ef d8       	rcall	.-3618   	; 0x5c8 <LcdPutchar>
					LcdPutchar('m');
    13ea:	8d e6       	ldi	r24, 0x6D	; 109
    13ec:	ed d8       	rcall	.-3622   	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    13ee:	80 e2       	ldi	r24, 0x20	; 32
    13f0:	eb d8       	rcall	.-3626   	; 0x5c8 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    13f2:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    13f6:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	e1 5c       	subi	r30, 0xC1	; 193
    1400:	fd 4f       	sbci	r31, 0xFD	; 253
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	b7 01       	movw	r22, r14
    1408:	d3 d3       	rcall	.+1958   	; 0x1bb0 <__divmodhi4>
    140a:	c4 e6       	ldi	r28, 0x64	; 100
    140c:	d0 e0       	ldi	r29, 0x00	; 0
    140e:	be 01       	movw	r22, r28
    1410:	cf d3       	rcall	.+1950   	; 0x1bb0 <__divmodhi4>
    1412:	80 e3       	ldi	r24, 0x30	; 48
    1414:	86 0f       	add	r24, r22
    1416:	d8 d8       	rcall	.-3664   	; 0x5c8 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    1418:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    141c:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31
    1424:	e1 5c       	subi	r30, 0xC1	; 193
    1426:	fd 4f       	sbci	r31, 0xFD	; 253
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	be 01       	movw	r22, r28
    142e:	c0 d3       	rcall	.+1920   	; 0x1bb0 <__divmodhi4>
    1430:	0a e0       	ldi	r16, 0x0A	; 10
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	b8 01       	movw	r22, r16
    1436:	bc d3       	rcall	.+1912   	; 0x1bb0 <__divmodhi4>
    1438:	80 e3       	ldi	r24, 0x30	; 48
    143a:	86 0f       	add	r24, r22
    143c:	c5 d8       	rcall	.-3702   	; 0x5c8 <LcdPutchar>
					LcdPutchar('.');
    143e:	8e e2       	ldi	r24, 0x2E	; 46
    1440:	c3 d8       	rcall	.-3706   	; 0x5c8 <LcdPutchar>
    1442:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');
    1446:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	e1 5c       	subi	r30, 0xC1	; 193
    1450:	fd 4f       	sbci	r31, 0xFD	; 253
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	b8 01       	movw	r22, r16
    1458:	ab d3       	rcall	.+1878   	; 0x1bb0 <__divmodhi4>
    145a:	80 5d       	subi	r24, 0xD0	; 208
					
					// 1번째 행 변경
					LcdMove(1,0);
    145c:	b5 d8       	rcall	.-3734   	; 0x5c8 <LcdPutchar>
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	e3 d8       	rcall	.-3642   	; 0x62a <LcdMove>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    1464:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    1468:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	ef 5b       	subi	r30, 0xBF	; 191
    1472:	fd 4f       	sbci	r31, 0xFD	; 253
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	b7 01       	movw	r22, r14
    147a:	9a d3       	rcall	.+1844   	; 0x1bb0 <__divmodhi4>
    147c:	80 e3       	ldi	r24, 0x30	; 48
    147e:	86 0f       	add	r24, r22
					LcdPutchar('m');
    1480:	a3 d8       	rcall	.-3770   	; 0x5c8 <LcdPutchar>
    1482:	8d e6       	ldi	r24, 0x6D	; 109
					LcdPutchar(' ');
    1484:	a1 d8       	rcall	.-3774   	; 0x5c8 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    1486:	80 e2       	ldi	r24, 0x20	; 32
    1488:	9f d8       	rcall	.-3778   	; 0x5c8 <LcdPutchar>
    148a:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    148e:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ef 5b       	subi	r30, 0xBF	; 191
    1498:	fd 4f       	sbci	r31, 0xFD	; 253
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	b7 01       	movw	r22, r14
    14a0:	87 d3       	rcall	.+1806   	; 0x1bb0 <__divmodhi4>
    14a2:	be 01       	movw	r22, r28
    14a4:	85 d3       	rcall	.+1802   	; 0x1bb0 <__divmodhi4>
    14a6:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    14a8:	86 0f       	add	r24, r22
    14aa:	8e d8       	rcall	.-3812   	; 0x5c8 <LcdPutchar>
    14ac:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    14b0:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	ef 5b       	subi	r30, 0xBF	; 191
    14ba:	fd 4f       	sbci	r31, 0xFD	; 253
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	be 01       	movw	r22, r28
    14c2:	76 d3       	rcall	.+1772   	; 0x1bb0 <__divmodhi4>
    14c4:	b8 01       	movw	r22, r16
    14c6:	74 d3       	rcall	.+1768   	; 0x1bb0 <__divmodhi4>
    14c8:	80 e3       	ldi	r24, 0x30	; 48
    14ca:	86 0f       	add	r24, r22
    14cc:	7d d8       	rcall	.-3846   	; 0x5c8 <LcdPutchar>
					LcdPutchar('.');
    14ce:	8e e2       	ldi	r24, 0x2E	; 46
    14d0:	7b d8       	rcall	.-3850   	; 0x5c8 <LcdPutchar>
    14d2:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    14d6:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	ef 5b       	subi	r30, 0xBF	; 191
    14e0:	fd 4f       	sbci	r31, 0xFD	; 253
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	b8 01       	movw	r22, r16
    14e8:	63 d3       	rcall	.+1734   	; 0x1bb0 <__divmodhi4>
    14ea:	80 5d       	subi	r24, 0xD0	; 208
    14ec:	6d d8       	rcall	.-3878   	; 0x5c8 <LcdPutchar>
    14ee:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <stopwatchDisplayIndex>
				}
				stopwatchDisplayIndex += 1;
    14f2:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <stopwatchDisplayIndex+0x1>
    14fc:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <stopwatchDisplayIndex>
    1500:	90 c1       	rjmp	.+800    	; 0x1822 <set7SegmentStopwatch+0x5a2>
			}
			// 아래키 눌러서 stopwatchStopFlag = 1이 된 경우 즉, 스톱워치가 멈춘 경우
			else {
				// 기록된 시간이 3개 이상인 경우에만
				if(stopwatchDisplayIndex >= 2){				
    1502:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    1506:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    150a:	02 97       	sbiw	r24, 0x02	; 2
    150c:	0c f4       	brge	.+2      	; 0x1510 <set7SegmentStopwatch+0x290>
    150e:	89 c1       	rjmp	.+786    	; 0x1822 <set7SegmentStopwatch+0x5a2>
					LcdMove(0,0);
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	8a d8       	rcall	.-3820   	; 0x62a <LcdMove>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]/1000+'0');
    1516:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    151a:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	e3 5c       	subi	r30, 0xC3	; 195
    1524:	fd 4f       	sbci	r31, 0xFD	; 253
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	0f 2e       	mov	r0, r31
    152c:	f8 ee       	ldi	r31, 0xE8	; 232
    152e:	ef 2e       	mov	r14, r31
    1530:	f3 e0       	ldi	r31, 0x03	; 3
    1532:	ff 2e       	mov	r15, r31
    1534:	f0 2d       	mov	r31, r0
    1536:	b7 01       	movw	r22, r14
    1538:	3b d3       	rcall	.+1654   	; 0x1bb0 <__divmodhi4>
    153a:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('m');
    153c:	86 0f       	add	r24, r22
    153e:	44 d8       	rcall	.-3960   	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    1540:	8d e6       	ldi	r24, 0x6D	; 109
    1542:	42 d8       	rcall	.-3964   	; 0x5c8 <LcdPutchar>
    1544:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%1000/100+'0');
    1546:	40 d8       	rcall	.-3968   	; 0x5c8 <LcdPutchar>
    1548:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    154c:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	e3 5c       	subi	r30, 0xC3	; 195
    1556:	fd 4f       	sbci	r31, 0xFD	; 253
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	b7 01       	movw	r22, r14
    155e:	28 d3       	rcall	.+1616   	; 0x1bb0 <__divmodhi4>
    1560:	04 e6       	ldi	r16, 0x64	; 100
    1562:	10 e0       	ldi	r17, 0x00	; 0
    1564:	b8 01       	movw	r22, r16
    1566:	24 d3       	rcall	.+1608   	; 0x1bb0 <__divmodhi4>
    1568:	80 e3       	ldi	r24, 0x30	; 48
    156a:	86 0f       	add	r24, r22
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%100/10+'0');
    156c:	2d d8       	rcall	.-4006   	; 0x5c8 <LcdPutchar>
    156e:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    1572:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	e3 5c       	subi	r30, 0xC3	; 195
    157c:	fd 4f       	sbci	r31, 0xFD	; 253
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	b8 01       	movw	r22, r16
    1584:	15 d3       	rcall	.+1578   	; 0x1bb0 <__divmodhi4>
    1586:	ca e0       	ldi	r28, 0x0A	; 10
    1588:	d0 e0       	ldi	r29, 0x00	; 0
    158a:	be 01       	movw	r22, r28
    158c:	11 d3       	rcall	.+1570   	; 0x1bb0 <__divmodhi4>
    158e:	80 e3       	ldi	r24, 0x30	; 48
    1590:	86 0f       	add	r24, r22
    1592:	1a d8       	rcall	.-4044   	; 0x5c8 <LcdPutchar>
    1594:	8e e2       	ldi	r24, 0x2E	; 46
					LcdPutchar('.');
    1596:	18 d8       	rcall	.-4048   	; 0x5c8 <LcdPutchar>
    1598:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%10+'0');
    159c:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    15a0:	ee 0f       	add	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	e3 5c       	subi	r30, 0xC3	; 195
    15a6:	fd 4f       	sbci	r31, 0xFD	; 253
    15a8:	80 81       	ld	r24, Z
    15aa:	91 81       	ldd	r25, Z+1	; 0x01
    15ac:	be 01       	movw	r22, r28
    15ae:	00 d3       	rcall	.+1536   	; 0x1bb0 <__divmodhi4>
    15b0:	80 5d       	subi	r24, 0xD0	; 208
    15b2:	0a d8       	rcall	.-4076   	; 0x5c8 <LcdPutchar>
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
					
					// 1번째 행 변경
					LcdMove(1,0);
    15b8:	38 d8       	rcall	.-3984   	; 0x62a <LcdMove>
    15ba:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    15be:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	e1 5c       	subi	r30, 0xC1	; 193
    15c8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	b7 01       	movw	r22, r14
    15d0:	ef d2       	rcall	.+1502   	; 0x1bb0 <__divmodhi4>
    15d2:	80 e3       	ldi	r24, 0x30	; 48
    15d4:	86 0f       	add	r24, r22
    15d6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    15da:	8d e6       	ldi	r24, 0x6D	; 109
    15dc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
					LcdPutchar('m');
    15e0:	80 e2       	ldi	r24, 0x20	; 32
    15e2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    15e6:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    15ea:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    15ee:	ee 0f       	add	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	e1 5c       	subi	r30, 0xC1	; 193
    15f4:	fd 4f       	sbci	r31, 0xFD	; 253
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	b7 01       	movw	r22, r14
    15fc:	d9 d2       	rcall	.+1458   	; 0x1bb0 <__divmodhi4>
    15fe:	b8 01       	movw	r22, r16
    1600:	d7 d2       	rcall	.+1454   	; 0x1bb0 <__divmodhi4>
    1602:	80 e3       	ldi	r24, 0x30	; 48
    1604:	86 0f       	add	r24, r22
    1606:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    160a:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    160e:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	e1 5c       	subi	r30, 0xC1	; 193
    1618:	fd 4f       	sbci	r31, 0xFD	; 253
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	b8 01       	movw	r22, r16
    1620:	c7 d2       	rcall	.+1422   	; 0x1bb0 <__divmodhi4>
    1622:	be 01       	movw	r22, r28
    1624:	c5 d2       	rcall	.+1418   	; 0x1bb0 <__divmodhi4>
    1626:	80 e3       	ldi	r24, 0x30	; 48
    1628:	86 0f       	add	r24, r22
    162a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    162e:	8e e2       	ldi	r24, 0x2E	; 46
    1630:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    1634:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar('.');
    1638:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    163c:	ee 0f       	add	r30, r30
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');	
    163e:	ff 1f       	adc	r31, r31
    1640:	e1 5c       	subi	r30, 0xC1	; 193
    1642:	fd 4f       	sbci	r31, 0xFD	; 253
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	be 01       	movw	r22, r28
    164a:	b2 d2       	rcall	.+1380   	; 0x1bb0 <__divmodhi4>
    164c:	80 5d       	subi	r24, 0xD0	; 208
    164e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    1652:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    1656:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <stopwatchDisplayIndex+0x1>
					stopwatchDisplayIndex -= 1;
    1660:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <stopwatchDisplayIndex>
    1664:	de c0       	rjmp	.+444    	; 0x1822 <set7SegmentStopwatch+0x5a2>
    1666:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stopwatchStopFlag>
    166a:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <stopwatchStopFlag+0x1>
    166e:	01 97       	sbiw	r24, 0x01	; 1
				}
			}
			break;
			
		case SW7:
			if(stopwatchStopFlag == 1) {	//스톱워치가 멈춘 경우		
    1670:	09 f0       	breq	.+2      	; 0x1674 <set7SegmentStopwatch+0x3f4>
    1672:	c1 c0       	rjmp	.+386    	; 0x17f6 <set7SegmentStopwatch+0x576>
    1674:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    1678:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    167c:	ee 0f       	add	r30, r30
				if(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1] != 0){
    167e:	ff 1f       	adc	r31, r31
    1680:	ed 5b       	subi	r30, 0xBD	; 189
    1682:	fd 4f       	sbci	r31, 0xFD	; 253
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	89 2b       	or	r24, r25
    168a:	09 f4       	brne	.+2      	; 0x168e <set7SegmentStopwatch+0x40e>
    168c:	ca c0       	rjmp	.+404    	; 0x1822 <set7SegmentStopwatch+0x5a2>
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	0e 94 15 03 	call	0x62a	; 0x62a <LcdMove>
					LcdMove(0,0);
    1696:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    169a:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	ef 5b       	subi	r30, 0xBF	; 191
    16a4:	fd 4f       	sbci	r31, 0xFD	; 253
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	0f 2e       	mov	r0, r31
    16ac:	f8 ee       	ldi	r31, 0xE8	; 232
    16ae:	ef 2e       	mov	r14, r31
    16b0:	f3 e0       	ldi	r31, 0x03	; 3
    16b2:	ff 2e       	mov	r15, r31
    16b4:	f0 2d       	mov	r31, r0
    16b6:	b7 01       	movw	r22, r14
    16b8:	7b d2       	rcall	.+1270   	; 0x1bb0 <__divmodhi4>
    16ba:	80 e3       	ldi	r24, 0x30	; 48
    16bc:	86 0f       	add	r24, r22
    16be:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    16c2:	8d e6       	ldi	r24, 0x6D	; 109
    16c4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
					LcdPutchar('m');
    16c8:	80 e2       	ldi	r24, 0x20	; 32
    16ca:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    16ce:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    16d2:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	ef 5b       	subi	r30, 0xBF	; 191
    16dc:	fd 4f       	sbci	r31, 0xFD	; 253
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	b7 01       	movw	r22, r14
    16e4:	65 d2       	rcall	.+1226   	; 0x1bb0 <__divmodhi4>
    16e6:	04 e6       	ldi	r16, 0x64	; 100
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	b8 01       	movw	r22, r16
    16ec:	61 d2       	rcall	.+1218   	; 0x1bb0 <__divmodhi4>
    16ee:	80 e3       	ldi	r24, 0x30	; 48
    16f0:	86 0f       	add	r24, r22
    16f2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    16f6:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    16fa:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	ef 5b       	subi	r30, 0xBF	; 191
    1704:	fd 4f       	sbci	r31, 0xFD	; 253
    1706:	80 81       	ld	r24, Z
    1708:	91 81       	ldd	r25, Z+1	; 0x01
    170a:	b8 01       	movw	r22, r16
    170c:	51 d2       	rcall	.+1186   	; 0x1bb0 <__divmodhi4>
    170e:	ca e0       	ldi	r28, 0x0A	; 10
    1710:	d0 e0       	ldi	r29, 0x00	; 0
    1712:	be 01       	movw	r22, r28
    1714:	4d d2       	rcall	.+1178   	; 0x1bb0 <__divmodhi4>
    1716:	80 e3       	ldi	r24, 0x30	; 48
    1718:	86 0f       	add	r24, r22
    171a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    171e:	8e e2       	ldi	r24, 0x2E	; 46
    1720:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    1724:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar('.');
    1728:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	ef 5b       	subi	r30, 0xBF	; 191
    1732:	fd 4f       	sbci	r31, 0xFD	; 253
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	be 01       	movw	r22, r28
    173a:	3a d2       	rcall	.+1140   	; 0x1bb0 <__divmodhi4>
    173c:	80 5d       	subi	r24, 0xD0	; 208
    173e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	0e 94 15 03 	call	0x62a	; 0x62a <LcdMove>
					
					// 1번째 행 변경
					LcdMove(1,0);
    174a:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]/1000+'0');
    174e:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	ed 5b       	subi	r30, 0xBD	; 189
    1758:	fd 4f       	sbci	r31, 0xFD	; 253
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	b7 01       	movw	r22, r14
    1760:	27 d2       	rcall	.+1102   	; 0x1bb0 <__divmodhi4>
    1762:	80 e3       	ldi	r24, 0x30	; 48
    1764:	86 0f       	add	r24, r22
    1766:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    176a:	8d e6       	ldi	r24, 0x6D	; 109
    176c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
					LcdPutchar('m');
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
					LcdPutchar(' ');
    1776:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%1000/100+'0');
    177a:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	ed 5b       	subi	r30, 0xBD	; 189
    1784:	fd 4f       	sbci	r31, 0xFD	; 253
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	b7 01       	movw	r22, r14
    178c:	11 d2       	rcall	.+1058   	; 0x1bb0 <__divmodhi4>
    178e:	b8 01       	movw	r22, r16
    1790:	0f d2       	rcall	.+1054   	; 0x1bb0 <__divmodhi4>
    1792:	80 e3       	ldi	r24, 0x30	; 48
    1794:	86 0f       	add	r24, r22
    1796:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    179a:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    179e:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%100/10+'0');
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ed 5b       	subi	r30, 0xBD	; 189
    17a8:	fd 4f       	sbci	r31, 0xFD	; 253
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	b8 01       	movw	r22, r16
    17b0:	ff d1       	rcall	.+1022   	; 0x1bb0 <__divmodhi4>
    17b2:	be 01       	movw	r22, r28
    17b4:	fd d1       	rcall	.+1018   	; 0x1bb0 <__divmodhi4>
    17b6:	80 e3       	ldi	r24, 0x30	; 48
    17b8:	86 0f       	add	r24, r22
    17ba:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    17be:	8e e2       	ldi	r24, 0x2E	; 46
    17c0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    17c4:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    17c8:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
					LcdPutchar('.');
    17cc:	ee 0f       	add	r30, r30
    17ce:	ff 1f       	adc	r31, r31
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%10+'0');
    17d0:	ed 5b       	subi	r30, 0xBD	; 189
    17d2:	fd 4f       	sbci	r31, 0xFD	; 253
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	be 01       	movw	r22, r28
    17da:	ea d1       	rcall	.+980    	; 0x1bb0 <__divmodhi4>
    17dc:	80 5d       	subi	r24, 0xD0	; 208
    17de:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
    17e2:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <stopwatchDisplayIndex>
    17e6:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <stopwatchDisplayIndex+0x1>
					stopwatchDisplayIndex += 1;
    17f0:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <stopwatchDisplayIndex>
    17f4:	16 c0       	rjmp	.+44     	; 0x1822 <set7SegmentStopwatch+0x5a2>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <stopwatchStopFlag+0x1>
    17fe:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <stopwatchStopFlag>
    1802:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <stopwatchDisplayIndex>
				}
			}
			else {
				stopwatchStopFlag = 1;
    1806:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <stopwatchDisplayIndex+0x1>
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <stopwatchDisplayIndex+0x1>
				stopwatchDisplayIndex-=1;	
    1810:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <stopwatchDisplayIndex>
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <set7SegmentStopwatch+0x5a2>
    1816:	c1 31       	cpi	r28, 0x11	; 17
    1818:	09 f4       	brne	.+2      	; 0x181c <set7SegmentStopwatch+0x59c>
    181a:	73 ce       	rjmp	.-794    	; 0x1502 <set7SegmentStopwatch+0x282>
    181c:	c1 32       	cpi	r28, 0x21	; 33
    181e:	09 f4       	brne	.+2      	; 0x1822 <set7SegmentStopwatch+0x5a2>
    1820:	22 cf       	rjmp	.-444    	; 0x1666 <set7SegmentStopwatch+0x3e6>
    1822:	81 e0       	ldi	r24, 0x01	; 1
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
	}
	
	switch(stopwatchKeyInput) {
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
				stopwatchDisplayIndex-=1;	
			}
			break;
	}
	return 1;
    1830:	ef 90       	pop	r14
    1832:	08 95       	ret

00001834 <setTimer>:
static int m_second = 0;

// 7세그먼트 출력용 숫자
unsigned short segmentDisplayNumber = 0;

int setTimer(int* timerInitFlag) {
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	ec 01       	movw	r28, r24
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customTimerSetInitFlag == 0){
    183a:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <customTimerSetInitFlag>
    183e:	90 91 16 0a 	lds	r25, 0x0A16	; 0x800a16 <customTimerSetInitFlag+0x1>
    1842:	89 2b       	or	r24, r25
    1844:	a1 f4       	brne	.+40     	; 0x186e <setTimer+0x3a>
		// 초기화면 세팅
		LcdMove(0,0);
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	0e 94 15 03 	call	0x62a	; 0x62a <LcdMove>
		LcdPuts("0m 00.0s     ");
    184e:	8d ed       	ldi	r24, 0xDD	; 221
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 07 03 	call	0x60e	; 0x60e <LcdPuts>
		LcdCommand(HOME);
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
		LcdCommand(CURSOR_ON);
    185c:	8e e0       	ldi	r24, 0x0E	; 14
    185e:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
		customTimerSetInitFlag = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <customTimerSetInitFlag+0x1>
    186a:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <customTimerSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
    186e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <KeyInput>
	
	while(1) {
		switch(keyInput) {
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	fc 01       	movw	r30, r24
    1876:	71 97       	sbiw	r30, 0x11	; 17
    1878:	e4 37       	cpi	r30, 0x74	; 116
    187a:	f1 05       	cpc	r31, r1
    187c:	08 f0       	brcs	.+2      	; 0x1880 <setTimer+0x4c>
    187e:	5c c1       	rjmp	.+696    	; 0x1b38 <setTimer+0x304>
    1880:	e2 5d       	subi	r30, 0xD2	; 210
    1882:	fe 4f       	sbci	r31, 0xFE	; 254
    1884:	a8 c1       	rjmp	.+848    	; 0x1bd6 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
    1886:	81 e3       	ldi	r24, 0x31	; 49
    1888:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    188c:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    1890:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    189a:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 1;
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	fc 01       	movw	r30, r24
    18a4:	e9 5e       	subi	r30, 0xE9	; 233
    18a6:	f5 4f       	sbci	r31, 0xF5	; 245
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
				break;
    18b0:	40 c1       	rjmp	.+640    	; 0x1b32 <setTimer+0x2fe>
			
			case SW1:				
				LcdPutchar('2');
    18b2:	82 e3       	ldi	r24, 0x32	; 50
    18b4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    18b8:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    18bc:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    18c6:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 2;
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	fc 01       	movw	r30, r24
    18d0:	e9 5e       	subi	r30, 0xE9	; 233
    18d2:	f5 4f       	sbci	r31, 0xF5	; 245
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
				break;
    18dc:	2a c1       	rjmp	.+596    	; 0x1b32 <setTimer+0x2fe>
			
			case SW2:
				LcdPutchar('3');
    18de:	83 e3       	ldi	r24, 0x33	; 51
    18e0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    18e4:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    18e8:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    18f2:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 3;
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	fc 01       	movw	r30, r24
    18fc:	e9 5e       	subi	r30, 0xE9	; 233
    18fe:	f5 4f       	sbci	r31, 0xF5	; 245
    1900:	83 e0       	ldi	r24, 0x03	; 3
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
				break;
    1908:	14 c1       	rjmp	.+552    	; 0x1b32 <setTimer+0x2fe>
			
			case SW4:
				LcdPutchar('4');
    190a:	84 e3       	ldi	r24, 0x34	; 52
    190c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    1910:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    1914:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    191e:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 4;
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	fc 01       	movw	r30, r24
    1928:	e9 5e       	subi	r30, 0xE9	; 233
    192a:	f5 4f       	sbci	r31, 0xF5	; 245
    192c:	84 e0       	ldi	r24, 0x04	; 4
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	80 83       	st	Z, r24
				break;
    1934:	fe c0       	rjmp	.+508    	; 0x1b32 <setTimer+0x2fe>
			
			case SW5:
				LcdPutchar('5');
    1936:	85 e3       	ldi	r24, 0x35	; 53
    1938:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    193c:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    1940:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    194a:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 5;
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	fc 01       	movw	r30, r24
    1954:	e9 5e       	subi	r30, 0xE9	; 233
    1956:	f5 4f       	sbci	r31, 0xF5	; 245
    1958:	85 e0       	ldi	r24, 0x05	; 5
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
				break;
    1960:	e8 c0       	rjmp	.+464    	; 0x1b32 <setTimer+0x2fe>
			
			case SW6:
				LcdPutchar('6');
    1962:	86 e3       	ldi	r24, 0x36	; 54
    1964:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    1968:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    196c:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    1970:	01 96       	adiw	r24, 0x01	; 1
    1972:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    1976:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 6;
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	fc 01       	movw	r30, r24
    1980:	e9 5e       	subi	r30, 0xE9	; 233
    1982:	f5 4f       	sbci	r31, 0xF5	; 245
    1984:	86 e0       	ldi	r24, 0x06	; 6
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
				break;
    198c:	d2 c0       	rjmp	.+420    	; 0x1b32 <setTimer+0x2fe>
			
			case SW8:
				LcdPutchar('7');
    198e:	87 e3       	ldi	r24, 0x37	; 55
    1990:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    1994:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    1998:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    19a2:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 7;
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	fc 01       	movw	r30, r24
    19ac:	e9 5e       	subi	r30, 0xE9	; 233
    19ae:	f5 4f       	sbci	r31, 0xF5	; 245
    19b0:	87 e0       	ldi	r24, 0x07	; 7
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
				break;
    19b8:	bc c0       	rjmp	.+376    	; 0x1b32 <setTimer+0x2fe>
			
			case SW9:
				LcdPutchar('8');
    19ba:	88 e3       	ldi	r24, 0x38	; 56
    19bc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    19c0:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    19c4:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    19ce:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 8;
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	fc 01       	movw	r30, r24
    19d8:	e9 5e       	subi	r30, 0xE9	; 233
    19da:	f5 4f       	sbci	r31, 0xF5	; 245
    19dc:	88 e0       	ldi	r24, 0x08	; 8
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
				break;
    19e4:	a6 c0       	rjmp	.+332    	; 0x1b32 <setTimer+0x2fe>
			
			case SW10:
				LcdPutchar('9');
    19e6:	89 e3       	ldi	r24, 0x39	; 57
    19e8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    19ec:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    19f0:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    19fa:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 9;
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	fc 01       	movw	r30, r24
    1a04:	e9 5e       	subi	r30, 0xE9	; 233
    1a06:	f5 4f       	sbci	r31, 0xF5	; 245
    1a08:	89 e0       	ldi	r24, 0x09	; 9
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
				break;
    1a10:	90 c0       	rjmp	.+288    	; 0x1b32 <setTimer+0x2fe>
			
			case SW13:
				LcdPutchar('0');
    1a12:	80 e3       	ldi	r24, 0x30	; 48
    1a14:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LcdPutchar>
				customTimerSettingIndex++;
    1a18:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    1a1c:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    1a26:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e9 5e       	subi	r30, 0xE9	; 233
    1a32:	f5 4f       	sbci	r31, 0xF5	; 245
    1a34:	11 82       	std	Z+1, r1	; 0x01
    1a36:	10 82       	st	Z, r1
				break;
    1a38:	7c c0       	rjmp	.+248    	; 0x1b32 <setTimer+0x2fe>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
    1a3a:	80 e1       	ldi	r24, 0x10	; 16
    1a3c:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
				customTimerSettingIndex -= 1;
    1a40:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    1a44:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    1a4e:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	fc 01       	movw	r30, r24
    1a58:	e9 5e       	subi	r30, 0xE9	; 233
    1a5a:	f5 4f       	sbci	r31, 0xF5	; 245
    1a5c:	11 82       	std	Z+1, r1	; 0x01
    1a5e:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    1a60:	6b c0       	rjmp	.+214    	; 0x1b38 <setTimer+0x304>
				
			// 아래 키 입력되는 케이스
			case SW7:
				customTimerSettingIndex += 1;
    1a62:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    1a66:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <customTimerSettingIndex+0x1>
    1a70:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <customTimerSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
    1a74:	84 e1       	ldi	r24, 0x14	; 20
    1a76:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
				customTimer[customTimerSettingIndex] = 0;
    1a7a:	e0 91 27 0a 	lds	r30, 0x0A27	; 0x800a27 <customTimerSettingIndex>
    1a7e:	f0 91 28 0a 	lds	r31, 0x0A28	; 0x800a28 <customTimerSettingIndex+0x1>
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	e9 5e       	subi	r30, 0xE9	; 233
    1a88:	f5 4f       	sbci	r31, 0xF5	; 245
    1a8a:	11 82       	std	Z+1, r1	; 0x01
    1a8c:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    1a8e:	54 c0       	rjmp	.+168    	; 0x1b38 <setTimer+0x304>
		if(returnStatus == -1) {
			returnStatus = 2;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customTimerSetInitFlag = 0;
    1a90:	10 92 16 0a 	sts	0x0A16, r1	; 0x800a16 <customTimerSetInitFlag+0x1>
    1a94:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <customTimerSetInitFlag>
			LcdMove(0,0);
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	0e 94 15 03 	call	0x62a	; 0x62a <LcdMove>
			LcdPuts("                      ");
    1aa0:	82 ea       	ldi	r24, 0xA2	; 162
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 07 03 	call	0x60e	; 0x60e <LcdPuts>
			LcdCommand(CURSOR_OFF);
    1aa8:	8c e0       	ldi	r24, 0x0C	; 12
    1aaa:	0e 94 9c 02 	call	0x538	; 0x538 <LcdCommand>
			minute = customTimer[0];
			second = customTimer[3] * 10 + customTimer[4];
			m_second = customTimer[6];
			
			// 7 세그먼트 계산
			ISeg7Init();
    1aae:	0e 94 c1 01 	call	0x382	; 0x382 <ISeg7Init>
			segmentDisplayNumber = customTimer[1]*1000 + customTimer[4]*100 + customTimer[5]*10 + customTimer[7];
    1ab2:	e7 e1       	ldi	r30, 0x17	; 23
    1ab4:	fa e0       	ldi	r31, 0x0A	; 10
    1ab6:	42 81       	ldd	r20, Z+2	; 0x02
    1ab8:	53 81       	ldd	r21, Z+3	; 0x03
    1aba:	88 ee       	ldi	r24, 0xE8	; 232
    1abc:	93 e0       	ldi	r25, 0x03	; 3
    1abe:	48 9f       	mul	r20, r24
    1ac0:	90 01       	movw	r18, r0
    1ac2:	49 9f       	mul	r20, r25
    1ac4:	30 0d       	add	r19, r0
    1ac6:	58 9f       	mul	r21, r24
    1ac8:	30 0d       	add	r19, r0
    1aca:	11 24       	eor	r1, r1
    1acc:	40 85       	ldd	r20, Z+8	; 0x08
    1ace:	51 85       	ldd	r21, Z+9	; 0x09
    1ad0:	64 e6       	ldi	r22, 0x64	; 100
    1ad2:	64 9f       	mul	r22, r20
    1ad4:	c0 01       	movw	r24, r0
    1ad6:	65 9f       	mul	r22, r21
    1ad8:	90 0d       	add	r25, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	22 85       	ldd	r18, Z+10	; 0x0a
    1ae2:	33 85       	ldd	r19, Z+11	; 0x0b
    1ae4:	b9 01       	movw	r22, r18
    1ae6:	66 0f       	add	r22, r22
    1ae8:	77 1f       	adc	r23, r23
    1aea:	a9 01       	movw	r20, r18
    1aec:	44 0f       	add	r20, r20
    1aee:	55 1f       	adc	r21, r21
    1af0:	44 0f       	add	r20, r20
    1af2:	55 1f       	adc	r21, r21
    1af4:	44 0f       	add	r20, r20
    1af6:	55 1f       	adc	r21, r21
    1af8:	9b 01       	movw	r18, r22
    1afa:	24 0f       	add	r18, r20
    1afc:	35 1f       	adc	r19, r21
    1afe:	28 0f       	add	r18, r24
    1b00:	39 1f       	adc	r19, r25
    1b02:	86 85       	ldd	r24, Z+14	; 0x0e
    1b04:	97 85       	ldd	r25, Z+15	; 0x0f
    1b06:	82 0f       	add	r24, r18
    1b08:	93 1f       	adc	r25, r19
    1b0a:	90 93 14 0a 	sts	0x0A14, r25	; 0x800a14 <segmentDisplayNumber+0x1>
    1b0e:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <segmentDisplayNumber>
			ISeg7DispNum(segmentDisplayNumber , 10);
    1b12:	6a e0       	ldi	r22, 0x0A	; 10
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <ISeg7DispNum>
				
			customTimerSettingIndex = 0;
    1b1a:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <customTimerSettingIndex+0x1>
    1b1e:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <customTimerSettingIndex>
			returnStatus = 0;
			*timerInitFlag = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	99 83       	std	Y+1, r25	; 0x01
    1b28:	88 83       	st	Y, r24
			break;
		}
		return returnStatus;
	}
}
    1b2a:	08 c0       	rjmp	.+16     	; 0x1b3c <setTimer+0x308>
				customTimer[customTimerSettingIndex] = 0;
				returnStatus = 2;
				break;
				
			case SW15:
				return -99;
    1b2c:	8d e9       	ldi	r24, 0x9D	; 157
    1b2e:	9f ef       	ldi	r25, 0xFF	; 255
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <setTimer+0x308>
				returnStatus = 2;
				break;
		}
		//////////////////////////////////////////////////////////////////////////
		if(returnStatus == -1) {
			returnStatus = 2;
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <setTimer+0x308>
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
			*timerInitFlag = 1;
			break;
		}
		return returnStatus;
	}
}
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	08 95       	ret

00001b42 <set7SegmentTimer>:

int set7SegmentTimer(int counter_m_seoncd) {	
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
	int nowDisplayNumber = segmentDisplayNumber - counter_m_seoncd;
    1b46:	c0 91 13 0a 	lds	r28, 0x0A13	; 0x800a13 <segmentDisplayNumber>
    1b4a:	d0 91 14 0a 	lds	r29, 0x0A14	; 0x800a14 <segmentDisplayNumber+0x1>
    1b4e:	c8 1b       	sub	r28, r24
    1b50:	d9 0b       	sbc	r29, r25
	//1분 00.0초
	//9분 99.9초
	if(nowDisplayNumber%1000 == 999 ){
    1b52:	ce 01       	movw	r24, r28
    1b54:	68 ee       	ldi	r22, 0xE8	; 232
    1b56:	73 e0       	ldi	r23, 0x03	; 3
    1b58:	2b d0       	rcall	.+86     	; 0x1bb0 <__divmodhi4>
    1b5a:	87 3e       	cpi	r24, 0xE7	; 231
    1b5c:	93 40       	sbci	r25, 0x03	; 3
    1b5e:	11 f4       	brne	.+4      	; 0x1b64 <set7SegmentTimer+0x22>
		nowDisplayNumber -= 400;
    1b60:	c0 59       	subi	r28, 0x90	; 144
    1b62:	d1 40       	sbci	r29, 0x01	; 1
	}
	segmentDisplayNumber = nowDisplayNumber;
    1b64:	d0 93 14 0a 	sts	0x0A14, r29	; 0x800a14 <segmentDisplayNumber+0x1>
    1b68:	c0 93 13 0a 	sts	0x0A13, r28	; 0x800a13 <segmentDisplayNumber>
	ISeg7DispNum(nowDisplayNumber , 10);
    1b6c:	6a e0       	ldi	r22, 0x0A	; 10
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	ce 01       	movw	r24, r28
    1b72:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <ISeg7DispNum>
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	cd 2b       	or	r28, r29
    1b7c:	11 f4       	brne	.+4      	; 0x1b82 <set7SegmentTimer+0x40>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
		// do something
		
		return 0;	
	}
	return 1;
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <__udivmodhi4>:
    1b88:	aa 1b       	sub	r26, r26
    1b8a:	bb 1b       	sub	r27, r27
    1b8c:	51 e1       	ldi	r21, 0x11	; 17
    1b8e:	07 c0       	rjmp	.+14     	; 0x1b9e <__udivmodhi4_ep>

00001b90 <__udivmodhi4_loop>:
    1b90:	aa 1f       	adc	r26, r26
    1b92:	bb 1f       	adc	r27, r27
    1b94:	a6 17       	cp	r26, r22
    1b96:	b7 07       	cpc	r27, r23
    1b98:	10 f0       	brcs	.+4      	; 0x1b9e <__udivmodhi4_ep>
    1b9a:	a6 1b       	sub	r26, r22
    1b9c:	b7 0b       	sbc	r27, r23

00001b9e <__udivmodhi4_ep>:
    1b9e:	88 1f       	adc	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	5a 95       	dec	r21
    1ba4:	a9 f7       	brne	.-22     	; 0x1b90 <__udivmodhi4_loop>
    1ba6:	80 95       	com	r24
    1ba8:	90 95       	com	r25
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	08 95       	ret

00001bb0 <__divmodhi4>:
    1bb0:	97 fb       	bst	r25, 7
    1bb2:	07 2e       	mov	r0, r23
    1bb4:	16 f4       	brtc	.+4      	; 0x1bba <__divmodhi4+0xa>
    1bb6:	00 94       	com	r0
    1bb8:	06 d0       	rcall	.+12     	; 0x1bc6 <__divmodhi4_neg1>
    1bba:	77 fd       	sbrc	r23, 7
    1bbc:	08 d0       	rcall	.+16     	; 0x1bce <__divmodhi4_neg2>
    1bbe:	e4 df       	rcall	.-56     	; 0x1b88 <__udivmodhi4>
    1bc0:	07 fc       	sbrc	r0, 7
    1bc2:	05 d0       	rcall	.+10     	; 0x1bce <__divmodhi4_neg2>
    1bc4:	3e f4       	brtc	.+14     	; 0x1bd4 <__divmodhi4_exit>

00001bc6 <__divmodhi4_neg1>:
    1bc6:	90 95       	com	r25
    1bc8:	81 95       	neg	r24
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	08 95       	ret

00001bce <__divmodhi4_neg2>:
    1bce:	70 95       	com	r23
    1bd0:	61 95       	neg	r22
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255

00001bd4 <__divmodhi4_exit>:
    1bd4:	08 95       	ret

00001bd6 <__tablejump2__>:
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	00 24       	eor	r0, r0
    1bdc:	00 1c       	adc	r0, r0
    1bde:	0b be       	out	0x3b, r0	; 59
    1be0:	07 90       	elpm	r0, Z+
    1be2:	f6 91       	elpm	r31, Z
    1be4:	e0 2d       	mov	r30, r0
    1be6:	09 94       	ijmp

00001be8 <malloc>:
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	10 f4       	brcc	.+4      	; 0x1bfa <malloc+0x12>
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	e0 91 2b 0a 	lds	r30, 0x0A2B	; 0x800a2b <__flp>
    1bfe:	f0 91 2c 0a 	lds	r31, 0x0A2C	; 0x800a2c <__flp+0x1>
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	19 f1       	breq	.+70     	; 0x1c54 <malloc+0x6c>
    1c0e:	40 81       	ld	r20, Z
    1c10:	51 81       	ldd	r21, Z+1	; 0x01
    1c12:	02 81       	ldd	r16, Z+2	; 0x02
    1c14:	13 81       	ldd	r17, Z+3	; 0x03
    1c16:	48 17       	cp	r20, r24
    1c18:	59 07       	cpc	r21, r25
    1c1a:	c8 f0       	brcs	.+50     	; 0x1c4e <malloc+0x66>
    1c1c:	84 17       	cp	r24, r20
    1c1e:	95 07       	cpc	r25, r21
    1c20:	69 f4       	brne	.+26     	; 0x1c3c <malloc+0x54>
    1c22:	10 97       	sbiw	r26, 0x00	; 0
    1c24:	31 f0       	breq	.+12     	; 0x1c32 <malloc+0x4a>
    1c26:	12 96       	adiw	r26, 0x02	; 2
    1c28:	0c 93       	st	X, r16
    1c2a:	12 97       	sbiw	r26, 0x02	; 2
    1c2c:	13 96       	adiw	r26, 0x03	; 3
    1c2e:	1c 93       	st	X, r17
    1c30:	27 c0       	rjmp	.+78     	; 0x1c80 <malloc+0x98>
    1c32:	00 93 2b 0a 	sts	0x0A2B, r16	; 0x800a2b <__flp>
    1c36:	10 93 2c 0a 	sts	0x0A2C, r17	; 0x800a2c <__flp+0x1>
    1c3a:	22 c0       	rjmp	.+68     	; 0x1c80 <malloc+0x98>
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	19 f0       	breq	.+6      	; 0x1c48 <malloc+0x60>
    1c42:	42 17       	cp	r20, r18
    1c44:	53 07       	cpc	r21, r19
    1c46:	18 f4       	brcc	.+6      	; 0x1c4e <malloc+0x66>
    1c48:	9a 01       	movw	r18, r20
    1c4a:	bd 01       	movw	r22, r26
    1c4c:	ef 01       	movw	r28, r30
    1c4e:	df 01       	movw	r26, r30
    1c50:	f8 01       	movw	r30, r16
    1c52:	db cf       	rjmp	.-74     	; 0x1c0a <malloc+0x22>
    1c54:	21 15       	cp	r18, r1
    1c56:	31 05       	cpc	r19, r1
    1c58:	f9 f0       	breq	.+62     	; 0x1c98 <malloc+0xb0>
    1c5a:	28 1b       	sub	r18, r24
    1c5c:	39 0b       	sbc	r19, r25
    1c5e:	24 30       	cpi	r18, 0x04	; 4
    1c60:	31 05       	cpc	r19, r1
    1c62:	80 f4       	brcc	.+32     	; 0x1c84 <malloc+0x9c>
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	9b 81       	ldd	r25, Y+3	; 0x03
    1c68:	61 15       	cp	r22, r1
    1c6a:	71 05       	cpc	r23, r1
    1c6c:	21 f0       	breq	.+8      	; 0x1c76 <malloc+0x8e>
    1c6e:	fb 01       	movw	r30, r22
    1c70:	93 83       	std	Z+3, r25	; 0x03
    1c72:	82 83       	std	Z+2, r24	; 0x02
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <malloc+0x96>
    1c76:	90 93 2c 0a 	sts	0x0A2C, r25	; 0x800a2c <__flp+0x1>
    1c7a:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__flp>
    1c7e:	fe 01       	movw	r30, r28
    1c80:	32 96       	adiw	r30, 0x02	; 2
    1c82:	44 c0       	rjmp	.+136    	; 0x1d0c <malloc+0x124>
    1c84:	fe 01       	movw	r30, r28
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	81 93       	st	Z+, r24
    1c8c:	91 93       	st	Z+, r25
    1c8e:	22 50       	subi	r18, 0x02	; 2
    1c90:	31 09       	sbc	r19, r1
    1c92:	39 83       	std	Y+1, r19	; 0x01
    1c94:	28 83       	st	Y, r18
    1c96:	3a c0       	rjmp	.+116    	; 0x1d0c <malloc+0x124>
    1c98:	20 91 29 0a 	lds	r18, 0x0A29	; 0x800a29 <__brkval>
    1c9c:	30 91 2a 0a 	lds	r19, 0x0A2A	; 0x800a2a <__brkval+0x1>
    1ca0:	23 2b       	or	r18, r19
    1ca2:	41 f4       	brne	.+16     	; 0x1cb4 <malloc+0xcc>
    1ca4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1ca8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1cac:	30 93 2a 0a 	sts	0x0A2A, r19	; 0x800a2a <__brkval+0x1>
    1cb0:	20 93 29 0a 	sts	0x0A29, r18	; 0x800a29 <__brkval>
    1cb4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1cb8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1cbc:	21 15       	cp	r18, r1
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	41 f4       	brne	.+16     	; 0x1cd2 <malloc+0xea>
    1cc2:	2d b7       	in	r18, 0x3d	; 61
    1cc4:	3e b7       	in	r19, 0x3e	; 62
    1cc6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1cca:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1cce:	24 1b       	sub	r18, r20
    1cd0:	35 0b       	sbc	r19, r21
    1cd2:	e0 91 29 0a 	lds	r30, 0x0A29	; 0x800a29 <__brkval>
    1cd6:	f0 91 2a 0a 	lds	r31, 0x0A2A	; 0x800a2a <__brkval+0x1>
    1cda:	e2 17       	cp	r30, r18
    1cdc:	f3 07       	cpc	r31, r19
    1cde:	a0 f4       	brcc	.+40     	; 0x1d08 <malloc+0x120>
    1ce0:	2e 1b       	sub	r18, r30
    1ce2:	3f 0b       	sbc	r19, r31
    1ce4:	28 17       	cp	r18, r24
    1ce6:	39 07       	cpc	r19, r25
    1ce8:	78 f0       	brcs	.+30     	; 0x1d08 <malloc+0x120>
    1cea:	ac 01       	movw	r20, r24
    1cec:	4e 5f       	subi	r20, 0xFE	; 254
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf0:	24 17       	cp	r18, r20
    1cf2:	35 07       	cpc	r19, r21
    1cf4:	48 f0       	brcs	.+18     	; 0x1d08 <malloc+0x120>
    1cf6:	4e 0f       	add	r20, r30
    1cf8:	5f 1f       	adc	r21, r31
    1cfa:	50 93 2a 0a 	sts	0x0A2A, r21	; 0x800a2a <__brkval+0x1>
    1cfe:	40 93 29 0a 	sts	0x0A29, r20	; 0x800a29 <__brkval>
    1d02:	81 93       	st	Z+, r24
    1d04:	91 93       	st	Z+, r25
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <malloc+0x124>
    1d08:	e0 e0       	ldi	r30, 0x00	; 0
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	cf 01       	movw	r24, r30
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	08 95       	ret

00001d18 <free>:
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <free+0xa>
    1d20:	81 c0       	rjmp	.+258    	; 0x1e24 <free+0x10c>
    1d22:	fc 01       	movw	r30, r24
    1d24:	32 97       	sbiw	r30, 0x02	; 2
    1d26:	13 82       	std	Z+3, r1	; 0x03
    1d28:	12 82       	std	Z+2, r1	; 0x02
    1d2a:	a0 91 2b 0a 	lds	r26, 0x0A2B	; 0x800a2b <__flp>
    1d2e:	b0 91 2c 0a 	lds	r27, 0x0A2C	; 0x800a2c <__flp+0x1>
    1d32:	10 97       	sbiw	r26, 0x00	; 0
    1d34:	81 f4       	brne	.+32     	; 0x1d56 <free+0x3e>
    1d36:	20 81       	ld	r18, Z
    1d38:	31 81       	ldd	r19, Z+1	; 0x01
    1d3a:	82 0f       	add	r24, r18
    1d3c:	93 1f       	adc	r25, r19
    1d3e:	20 91 29 0a 	lds	r18, 0x0A29	; 0x800a29 <__brkval>
    1d42:	30 91 2a 0a 	lds	r19, 0x0A2A	; 0x800a2a <__brkval+0x1>
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	51 f5       	brne	.+84     	; 0x1da0 <free+0x88>
    1d4c:	f0 93 2a 0a 	sts	0x0A2A, r31	; 0x800a2a <__brkval+0x1>
    1d50:	e0 93 29 0a 	sts	0x0A29, r30	; 0x800a29 <__brkval>
    1d54:	67 c0       	rjmp	.+206    	; 0x1e24 <free+0x10c>
    1d56:	ed 01       	movw	r28, r26
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	ce 17       	cp	r28, r30
    1d5e:	df 07       	cpc	r29, r31
    1d60:	40 f4       	brcc	.+16     	; 0x1d72 <free+0x5a>
    1d62:	4a 81       	ldd	r20, Y+2	; 0x02
    1d64:	5b 81       	ldd	r21, Y+3	; 0x03
    1d66:	9e 01       	movw	r18, r28
    1d68:	41 15       	cp	r20, r1
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	f1 f0       	breq	.+60     	; 0x1daa <free+0x92>
    1d6e:	ea 01       	movw	r28, r20
    1d70:	f5 cf       	rjmp	.-22     	; 0x1d5c <free+0x44>
    1d72:	d3 83       	std	Z+3, r29	; 0x03
    1d74:	c2 83       	std	Z+2, r28	; 0x02
    1d76:	40 81       	ld	r20, Z
    1d78:	51 81       	ldd	r21, Z+1	; 0x01
    1d7a:	84 0f       	add	r24, r20
    1d7c:	95 1f       	adc	r25, r21
    1d7e:	c8 17       	cp	r28, r24
    1d80:	d9 07       	cpc	r29, r25
    1d82:	59 f4       	brne	.+22     	; 0x1d9a <free+0x82>
    1d84:	88 81       	ld	r24, Y
    1d86:	99 81       	ldd	r25, Y+1	; 0x01
    1d88:	84 0f       	add	r24, r20
    1d8a:	95 1f       	adc	r25, r21
    1d8c:	02 96       	adiw	r24, 0x02	; 2
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	9b 81       	ldd	r25, Y+3	; 0x03
    1d96:	93 83       	std	Z+3, r25	; 0x03
    1d98:	82 83       	std	Z+2, r24	; 0x02
    1d9a:	21 15       	cp	r18, r1
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <free+0x92>
    1da0:	f0 93 2c 0a 	sts	0x0A2C, r31	; 0x800a2c <__flp+0x1>
    1da4:	e0 93 2b 0a 	sts	0x0A2B, r30	; 0x800a2b <__flp>
    1da8:	3d c0       	rjmp	.+122    	; 0x1e24 <free+0x10c>
    1daa:	e9 01       	movw	r28, r18
    1dac:	fb 83       	std	Y+3, r31	; 0x03
    1dae:	ea 83       	std	Y+2, r30	; 0x02
    1db0:	49 91       	ld	r20, Y+
    1db2:	59 91       	ld	r21, Y+
    1db4:	c4 0f       	add	r28, r20
    1db6:	d5 1f       	adc	r29, r21
    1db8:	ec 17       	cp	r30, r28
    1dba:	fd 07       	cpc	r31, r29
    1dbc:	61 f4       	brne	.+24     	; 0x1dd6 <free+0xbe>
    1dbe:	80 81       	ld	r24, Z
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	84 0f       	add	r24, r20
    1dc4:	95 1f       	adc	r25, r21
    1dc6:	02 96       	adiw	r24, 0x02	; 2
    1dc8:	e9 01       	movw	r28, r18
    1dca:	99 83       	std	Y+1, r25	; 0x01
    1dcc:	88 83       	st	Y, r24
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	9b 83       	std	Y+3, r25	; 0x03
    1dd4:	8a 83       	std	Y+2, r24	; 0x02
    1dd6:	e0 e0       	ldi	r30, 0x00	; 0
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	12 96       	adiw	r26, 0x02	; 2
    1ddc:	8d 91       	ld	r24, X+
    1dde:	9c 91       	ld	r25, X
    1de0:	13 97       	sbiw	r26, 0x03	; 3
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	19 f0       	breq	.+6      	; 0x1dec <free+0xd4>
    1de6:	fd 01       	movw	r30, r26
    1de8:	dc 01       	movw	r26, r24
    1dea:	f7 cf       	rjmp	.-18     	; 0x1dda <free+0xc2>
    1dec:	8d 91       	ld	r24, X+
    1dee:	9c 91       	ld	r25, X
    1df0:	11 97       	sbiw	r26, 0x01	; 1
    1df2:	9d 01       	movw	r18, r26
    1df4:	2e 5f       	subi	r18, 0xFE	; 254
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	82 0f       	add	r24, r18
    1dfa:	93 1f       	adc	r25, r19
    1dfc:	20 91 29 0a 	lds	r18, 0x0A29	; 0x800a29 <__brkval>
    1e00:	30 91 2a 0a 	lds	r19, 0x0A2A	; 0x800a2a <__brkval+0x1>
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	69 f4       	brne	.+26     	; 0x1e24 <free+0x10c>
    1e0a:	30 97       	sbiw	r30, 0x00	; 0
    1e0c:	29 f4       	brne	.+10     	; 0x1e18 <free+0x100>
    1e0e:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <__flp+0x1>
    1e12:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__flp>
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <free+0x104>
    1e18:	13 82       	std	Z+3, r1	; 0x03
    1e1a:	12 82       	std	Z+2, r1	; 0x02
    1e1c:	b0 93 2a 0a 	sts	0x0A2A, r27	; 0x800a2a <__brkval+0x1>
    1e20:	a0 93 29 0a 	sts	0x0A29, r26	; 0x800a29 <__brkval>
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <_exit>:
    1e2a:	f8 94       	cli

00001e2c <__stop_program>:
    1e2c:	ff cf       	rjmp	.-2      	; 0x1e2c <__stop_program>
