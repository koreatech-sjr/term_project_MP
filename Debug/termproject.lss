
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00000cac  00000d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  008001a4  008001a4  00000de4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002030  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4a  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e45  00000000  00000000  00003e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000723  00000000  00000000  00004f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d0  00000000  00000000  0000568f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c1       	rjmp	.+844    	; 0x372 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 3a       	cpi	r26, 0xA4	; 164
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 ea       	ldi	r26, 0xA4	; 164
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 3c       	cpi	r26, 0xC9	; 201
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0c d2       	rcall	.+1048   	; 0x4dc <main>
  c4:	f1 c5       	rjmp	.+3042   	; 0xca8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_15>:
//====================================================
// ISR : 인터럽트가 걸릴 때마다 index가 가리키는 세그먼트에
//       데이터를 표시하고, index는 계속 회전이동하게 된다.
//=====================================================

ISR(TIMER0_COMP_vect){	//카운터/타이머0 비교일치 인터럽트
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	static int index = 0;
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
  e0:	22 b3       	in	r18, 0x12	; 18
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	00 90 a4 01 	lds	r0, 0x01A4	; 0x8001a4 <__data_end>
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__vector_15+0x28>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <__vector_15+0x24>
  f4:	80 95       	com	r24
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	92 2f       	mov	r25, r18
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	89 2b       	or	r24, r25
  fe:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
 100:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <__data_end>
 104:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <__data_end+0x1>
 108:	ea 5f       	subi	r30, 0xFA	; 250
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	e0 81       	ld	r30, Z
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e9 58       	subi	r30, 0x89	; 137
 112:	fe 4f       	sbci	r31, 0xFE	; 254
 114:	80 81       	ld	r24, Z
 116:	80 95       	com	r24
 118:	8b bb       	out	0x1b, r24	; 27
	
	index++; //인덱스 이동
 11a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
 11e:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) { index = 0; }
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	91 05       	cpc	r25, r1
 128:	29 f0       	breq	.+10     	; 0x134 <__vector_15+0x6c>
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];
	
	index++; //인덱스 이동
 12a:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <__data_end+0x1>
 12e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__data_end>
 132:	04 c0       	rjmp	.+8      	; 0x13c <__vector_15+0x74>
	if(index == N_SEGMENT) { index = 0; }
 134:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__data_end+0x1>
 138:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__data_end>
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0b be       	out	0x3b, r0	; 59
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <key_scan>:
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
 154:	8e ef       	ldi	r24, 0xFE	; 254
 156:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
 15a:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
 15c:	80 b1       	in	r24, 0x00	; 0
 15e:	80 95       	com	r24
 160:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
 162:	69 f4       	brne	.+26     	; 0x17e <key_scan+0x2a>
 164:	23 e0       	ldi	r18, 0x03	; 3
 166:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
 168:	e2 e6       	ldi	r30, 0x62	; 98
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	89 2f       	mov	r24, r25
 16e:	80 95       	com	r24
 170:	80 83       	st	Z, r24
		asm("nop"::);
 172:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
 174:	80 b1       	in	r24, 0x00	; 0
 176:	80 95       	com	r24
 178:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
 17a:	21 f0       	breq	.+8      	; 0x184 <key_scan+0x30>
 17c:	01 c0       	rjmp	.+2      	; 0x180 <key_scan+0x2c>

static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
 17e:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);
		
		in = (~KEY_IN) & 0xF0;
		if(in)			//have key input
		{
			in += out;	//make a code
 180:	89 0f       	add	r24, r25
			break;
 182:	08 95       	ret
		}
		out <<= 1;	//change to next scan-code
 184:	99 0f       	add	r25, r25
 186:	21 50       	subi	r18, 0x01	; 1
static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
 188:	89 f7       	brne	.-30     	; 0x16c <key_scan+0x18>
		}
		out <<= 1;	//change to next scan-code
		
	}
	return in;	//return the value of scan-code
}
 18a:	08 95       	ret

0000018c <KeyInit>:
static unsigned char key_scan(void);
static unsigned char pin = NO_KEY;		//previous key value

void KeyInit()	//Initialize keypad
{
	KEY_OUT = 0xF0;		// Initialize output as 0
 18c:	80 ef       	ldi	r24, 0xF0	; 240
 18e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;		//high-ranking nibble = input, low-ranking nibble = output
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 198:	08 95       	ret

0000019a <KeyInput>:
// value of return :
//                   !=0 => value of scan code
//					  =0 => no input
//==========================================================================
unsigned char KeyInput(void)
{
 19a:	cf 93       	push	r28
	unsigned char in, in1;
	
	in = key_scan();	//read keys
 19c:	db df       	rcall	.-74     	; 0x154 <key_scan>
 19e:	c8 2f       	mov	r28, r24
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <KeyInput+0xa>
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
		if(in == in1) break;
		in = in1;
 1a2:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9c e9       	ldi	r25, 0x9C	; 156
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <KeyInput+0xe>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <KeyInput+0x14>
 1ae:	00 00       	nop
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <KeyInput+0x1a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <KeyInput+0x20>
 1ba:	00 00       	nop
 1bc:	8f e3       	ldi	r24, 0x3F	; 63
 1be:	9c e9       	ldi	r25, 0x9C	; 156
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <KeyInput+0x26>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <KeyInput+0x2c>
	
	in = key_scan();	//read keys
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
 1c6:	00 00       	nop
 1c8:	c5 df       	rcall	.-118    	; 0x154 <key_scan>
		if(in == in1) break;
 1ca:	c8 13       	cpse	r28, r24
 1cc:	ea cf       	rjmp	.-44     	; 0x1a2 <KeyInput+0x8>
 1ce:	98 2f       	mov	r25, r24
 1d0:	90 7f       	andi	r25, 0xF0	; 240
		in = in1;
	}
	
	if (!(in & 0xF0))	// No key was pushed
 1d2:	19 f4       	brne	.+6      	; 0x1da <KeyInput+0x40>
	{
		pin = 0;
 1d4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <pin>
		return 0;
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <KeyInput+0x52>
	}
	if(pin == in)
 1da:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <pin>
 1de:	89 17       	cp	r24, r25
 1e0:	21 f0       	breq	.+8      	; 0x1ea <KeyInput+0x50>
	return 0;
	
	pin = in;		//store key value
 1e2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <pin>
	return in;		//return code
 1e6:	98 2f       	mov	r25, r24
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <KeyInput+0x52>
	{
		pin = 0;
		return 0;
	}
	if(pin == in)
	return 0;
 1ea:	90 e0       	ldi	r25, 0x00	; 0
	
	pin = in;		//store key value
	return in;		//return code
}
 1ec:	89 2f       	mov	r24, r25
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <write_command>:

	LcdCommand(ch);

	for(i=0; i<8; i++)
	LcdPutchar(font[i]);
}
 1f2:	98 2f       	mov	r25, r24
 1f4:	90 7f       	andi	r25, 0xF0	; 240
 1f6:	94 60       	ori	r25, 0x04	; 4
 1f8:	95 bb       	out	0x15, r25	; 21
 1fa:	9b 7f       	andi	r25, 0xFB	; 251
 1fc:	95 bb       	out	0x15, r25	; 21
 1fe:	20 e1       	ldi	r18, 0x10	; 16
 200:	82 02       	muls	r24, r18
 202:	c0 01       	movw	r24, r0
 204:	11 24       	eor	r1, r1
 206:	84 60       	ori	r24, 0x04	; 4
 208:	85 bb       	out	0x15, r24	; 21
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	85 e0       	ldi	r24, 0x05	; 5
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <write_command+0x1e>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <LcdCommand>:
 218:	cf 93       	push	r28
 21a:	c8 2f       	mov	r28, r24
 21c:	85 e3       	ldi	r24, 0x35	; 53
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <LcdCommand+0x6>
 222:	00 00       	nop
 224:	95 e3       	ldi	r25, 0x35	; 53
 226:	9a 95       	dec	r25
 228:	f1 f7       	brne	.-4      	; 0x226 <LcdCommand+0xe>
 22a:	00 00       	nop
 22c:	85 e3       	ldi	r24, 0x35	; 53
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <LcdCommand+0x16>
 232:	00 00       	nop
 234:	95 e3       	ldi	r25, 0x35	; 53
 236:	9a 95       	dec	r25
 238:	f1 f7       	brne	.-4      	; 0x236 <LcdCommand+0x1e>
 23a:	00 00       	nop
 23c:	85 e3       	ldi	r24, 0x35	; 53
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <LcdCommand+0x26>
 242:	00 00       	nop
 244:	8c 2f       	mov	r24, r28
 246:	d5 df       	rcall	.-86     	; 0x1f2 <write_command>
 248:	c1 50       	subi	r28, 0x01	; 1
 24a:	c2 30       	cpi	r28, 0x02	; 2
 24c:	30 f4       	brcc	.+12     	; 0x25a <LcdCommand+0x42>
 24e:	8f e3       	ldi	r24, 0x3F	; 63
 250:	9f e1       	ldi	r25, 0x1F	; 31
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <LcdCommand+0x3a>
 256:	00 c0       	rjmp	.+0      	; 0x258 <LcdCommand+0x40>
 258:	00 00       	nop
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <LcdInit>:
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	84 bb       	out	0x14, r24	; 20
 262:	8f e5       	ldi	r24, 0x5F	; 95
 264:	9a ee       	ldi	r25, 0xEA	; 234
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LcdInit+0x8>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LcdInit+0xe>
 26c:	00 00       	nop
 26e:	80 e3       	ldi	r24, 0x30	; 48
 270:	c0 df       	rcall	.-128    	; 0x1f2 <write_command>
 272:	8f e1       	ldi	r24, 0x1F	; 31
 274:	9e e4       	ldi	r25, 0x4E	; 78
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LcdInit+0x18>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LcdInit+0x1e>
 27c:	00 00       	nop
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	b8 df       	rcall	.-144    	; 0x1f2 <write_command>
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	9f e0       	ldi	r25, 0x0F	; 15
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LcdInit+0x28>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LcdInit+0x2e>
 28c:	00 00       	nop
 28e:	82 e3       	ldi	r24, 0x32	; 50
 290:	b0 df       	rcall	.-160    	; 0x1f2 <write_command>
 292:	88 e2       	ldi	r24, 0x28	; 40
 294:	c1 df       	rcall	.-126    	; 0x218 <LcdCommand>
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	bf df       	rcall	.-130    	; 0x218 <LcdCommand>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	bd df       	rcall	.-134    	; 0x218 <LcdCommand>
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	bb df       	rcall	.-138    	; 0x218 <LcdCommand>
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	b9 cf       	rjmp	.-142    	; 0x218 <LcdCommand>
 2a6:	08 95       	ret

000002a8 <LcdPutchar>:
 2a8:	25 e3       	ldi	r18, 0x35	; 53
 2aa:	2a 95       	dec	r18
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LcdPutchar+0x2>
 2ae:	00 00       	nop
 2b0:	95 e3       	ldi	r25, 0x35	; 53
 2b2:	9a 95       	dec	r25
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LcdPutchar+0xa>
 2b6:	00 00       	nop
 2b8:	25 e3       	ldi	r18, 0x35	; 53
 2ba:	2a 95       	dec	r18
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LcdPutchar+0x12>
 2be:	00 00       	nop
 2c0:	95 e3       	ldi	r25, 0x35	; 53
 2c2:	9a 95       	dec	r25
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LcdPutchar+0x1a>
 2c6:	00 00       	nop
 2c8:	25 e3       	ldi	r18, 0x35	; 53
 2ca:	2a 95       	dec	r18
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LcdPutchar+0x22>
 2ce:	00 00       	nop
 2d0:	98 2f       	mov	r25, r24
 2d2:	90 7f       	andi	r25, 0xF0	; 240
 2d4:	95 60       	ori	r25, 0x05	; 5
 2d6:	95 bb       	out	0x15, r25	; 21
 2d8:	9b 7f       	andi	r25, 0xFB	; 251
 2da:	95 bb       	out	0x15, r25	; 21
 2dc:	20 e1       	ldi	r18, 0x10	; 16
 2de:	82 02       	muls	r24, r18
 2e0:	c0 01       	movw	r24, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	85 60       	ori	r24, 0x05	; 5
 2e6:	85 bb       	out	0x15, r24	; 21
 2e8:	8b 7f       	andi	r24, 0xFB	; 251
 2ea:	85 bb       	out	0x15, r24	; 21
 2ec:	08 95       	ret

000002ee <LcdPuts>:
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
 2f4:	88 81       	ld	r24, Y
 2f6:	88 23       	and	r24, r24
 2f8:	29 f0       	breq	.+10     	; 0x304 <LcdPuts+0x16>
 2fa:	21 96       	adiw	r28, 0x01	; 1
 2fc:	d5 df       	rcall	.-86     	; 0x2a8 <LcdPutchar>
 2fe:	89 91       	ld	r24, Y+
 300:	81 11       	cpse	r24, r1
 302:	fc cf       	rjmp	.-8      	; 0x2fc <LcdPuts+0xe>
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <LcdMove>:
 30a:	90 e4       	ldi	r25, 0x40	; 64
 30c:	89 9f       	mul	r24, r25
 30e:	60 0d       	add	r22, r0
 310:	11 24       	eor	r1, r1
 312:	86 2f       	mov	r24, r22
 314:	80 68       	ori	r24, 0x80	; 128
 316:	80 cf       	rjmp	.-256    	; 0x218 <LcdCommand>
 318:	08 95       	ret

0000031a <LcdNewchar>:
// 문자코드 ch에 새로운 글꼴 등록
// 입력 : ch - 문자코드
//		 font - 글꼴 데이터
//=======================================================
void LcdNewchar(char ch, char font[])
{
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	8b 01       	movw	r16, r22
	int i;
	
	ch <<= 3;		//ch = ch <<3;과 같음
 324:	28 e0       	ldi	r18, 0x08	; 8
 326:	82 02       	muls	r24, r18
 328:	c0 01       	movw	r24, r0
 32a:	11 24       	eor	r1, r1
	ch |= 0x40;		//비트6 세트 -> CGRAM 주소설정
	
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	74 df       	rcall	.-280    	; 0x218 <LcdCommand>
 330:	e8 01       	movw	r28, r16
 332:	08 5f       	subi	r16, 0xF8	; 248
 334:	1f 4f       	sbci	r17, 0xFF	; 255
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
	LcdPutchar(font[i]);
 336:	89 91       	ld	r24, Y+
 338:	b7 df       	rcall	.-146    	; 0x2a8 <LcdPutchar>
	ch |= 0x40;		//비트6 세트 -> CGRAM 주소설정
	
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
 33a:	c0 17       	cp	r28, r16
 33c:	d1 07       	cpc	r29, r17
 33e:	d9 f7       	brne	.-10     	; 0x336 <LcdNewchar+0x1c>
	LcdPutchar(font[i]);
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <msec_delay>:
}


void msec_delay(int n)
{
	for(; n>0; n--)		//1msec 시간지연 n회	반복
 34a:	18 16       	cp	r1, r24
 34c:	19 06       	cpc	r1, r25
 34e:	44 f4       	brge	.+16     	; 0x360 <msec_delay+0x16>
 350:	ef e9       	ldi	r30, 0x9F	; 159
 352:	ff e0       	ldi	r31, 0x0F	; 15
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <msec_delay+0xa>
 358:	00 c0       	rjmp	.+0      	; 0x35a <msec_delay+0x10>
 35a:	00 00       	nop
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	c1 f7       	brne	.-16     	; 0x350 <msec_delay+0x6>
 360:	08 95       	ret

00000362 <ClockCounterInit>:
// Clock Counter interrupt 으로 계산된 초
static int ClockCounter_SECOND = 0; 
static int ClockCounter_M_SECOND = 0; 

void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
 362:	85 b5       	in	r24, 0x25	; 37
 364:	88 60       	ori	r24, 0x08	; 8
 366:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
 368:	84 e6       	ldi	r24, 0x64	; 100
 36a:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
 36c:	80 e8       	ldi	r24, 0x80	; 128
 36e:	87 bf       	out	0x37, r24	; 55
 370:	08 95       	ret

00000372 <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	2f 93       	push	r18
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
	ClockCounter_CNT++;
 38c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <ClockCounter_CNT>
 390:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <ClockCounter_CNT+0x1>
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <ClockCounter_CNT+0x1>
 39a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
 39e:	80 32       	cpi	r24, 0x20	; 32
 3a0:	2e e4       	ldi	r18, 0x4E	; 78
 3a2:	92 07       	cpc	r25, r18
 3a4:	71 f4       	brne	.+28     	; 0x3c2 <__vector_9+0x50>
		ClockCounter_CNT=0;
 3a6:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <ClockCounter_CNT+0x1>
 3aa:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <ClockCounter_CNT>
		ClockCounter_SECOND++;
 3ae:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <ClockCounter_SECOND>
 3b2:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <ClockCounter_SECOND+0x1>
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <ClockCounter_SECOND+0x1>
 3bc:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <ClockCounter_SECOND>
 3c0:	0e c0       	rjmp	.+28     	; 0x3de <__vector_9+0x6c>
	}
	if(ClockCounter_CNT % 2000) {
 3c2:	60 ed       	ldi	r22, 0xD0	; 208
 3c4:	77 e0       	ldi	r23, 0x07	; 7
 3c6:	3c d3       	rcall	.+1656   	; 0xa40 <__divmodhi4>
 3c8:	89 2b       	or	r24, r25
 3ca:	49 f0       	breq	.+18     	; 0x3de <__vector_9+0x6c>
		ClockCounter_M_SECOND++;
 3cc:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <ClockCounter_M_SECOND>
 3d0:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <ClockCounter_M_SECOND+0x1>
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <ClockCounter_M_SECOND+0x1>
 3da:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <ClockCounter_M_SECOND>
	}
}
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <startTermProject>:


//============================================================================
//======박가경's Watch===flash x 3==============================================
//============================================================================
char* startTermProject() {
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	68 97       	sbiw	r28, 0x18	; 24
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
	char *initTitle = malloc(sizeof(char) * 20);
 410:	84 e1       	ldi	r24, 0x14	; 20
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	28 d3       	rcall	.+1616   	; 0xa66 <malloc>
 416:	8c 01       	movw	r16, r24
	
	char font1[8] = {0x02, 0x1A, 0x1F, 0x1E, 0x02, 0x1C, 0x04, 0x04};	// 박
 418:	88 e0       	ldi	r24, 0x08	; 8
 41a:	ef e5       	ldi	r30, 0x5F	; 95
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	de 01       	movw	r26, r28
 420:	11 96       	adiw	r26, 0x01	; 1
 422:	01 90       	ld	r0, Z+
 424:	0d 92       	st	X+, r0
 426:	8a 95       	dec	r24
 428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	char font2[8] = {0x02, 0x02, 0x1A, 0x0B, 0x0A, 0x0A, 0x02, 0x00};	// 가
 42a:	88 e0       	ldi	r24, 0x08	; 8
 42c:	e7 e6       	ldi	r30, 0x67	; 103
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	de 01       	movw	r26, r28
 432:	19 96       	adiw	r26, 0x09	; 9
 434:	01 90       	ld	r0, Z+
 436:	0d 92       	st	X+, r0
 438:	8a 95       	dec	r24
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	char font3[8] = {0x02, 0x1E, 0x0A, 0x0E, 0x08, 0x0C, 0x12, 0x0C};	// 경
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	ef e6       	ldi	r30, 0x6F	; 111
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	de 01       	movw	r26, r28
 444:	51 96       	adiw	r26, 0x11	; 17
 446:	01 90       	ld	r0, Z+
 448:	0d 92       	st	X+, r0
 44a:	8a 95       	dec	r24
 44c:	e1 f7       	brne	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	
	LcdNewchar(1, font1);
 44e:	be 01       	movw	r22, r28
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	61 df       	rcall	.-318    	; 0x31a <LcdNewchar>
	LcdNewchar(2, font2);
 458:	be 01       	movw	r22, r28
 45a:	67 5f       	subi	r22, 0xF7	; 247
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	5c df       	rcall	.-328    	; 0x31a <LcdNewchar>
	LcdNewchar(3, font3);
 462:	be 01       	movw	r22, r28
 464:	6f 5e       	subi	r22, 0xEF	; 239
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	57 df       	rcall	.-338    	; 0x31a <LcdNewchar>

	initTitle[0] = 1;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	f8 01       	movw	r30, r16
 470:	80 83       	st	Z, r24
	initTitle[1] = 2;
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	81 83       	std	Z+1, r24	; 0x01
	initTitle[2] = 3;
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	82 83       	std	Z+2, r24	; 0x02
	initTitle[3] = '\'';
 47a:	87 e2       	ldi	r24, 0x27	; 39
 47c:	83 83       	std	Z+3, r24	; 0x03
	initTitle[4] = 's';
 47e:	83 e7       	ldi	r24, 0x73	; 115
 480:	84 83       	std	Z+4, r24	; 0x04
	initTitle[5] = ' ';
 482:	80 e2       	ldi	r24, 0x20	; 32
 484:	85 83       	std	Z+5, r24	; 0x05
	initTitle[6] = 'W';
 486:	87 e5       	ldi	r24, 0x57	; 87
 488:	86 83       	std	Z+6, r24	; 0x06
	initTitle[7] = 'a';
 48a:	81 e6       	ldi	r24, 0x61	; 97
 48c:	87 83       	std	Z+7, r24	; 0x07
	initTitle[8] = 't';
 48e:	84 e7       	ldi	r24, 0x74	; 116
 490:	80 87       	std	Z+8, r24	; 0x08
	initTitle[9] = 'c';
 492:	83 e6       	ldi	r24, 0x63	; 99
 494:	81 87       	std	Z+9, r24	; 0x09
	initTitle[10] = 'h';
 496:	88 e6       	ldi	r24, 0x68	; 104
	initTitle[11] = '\0';
 498:	82 87       	std	Z+10, r24	; 0x0a
	
	LcdMove(0,0);			// cursor go to home
 49a:	13 86       	std	Z+11, r1	; 0x0b
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	80 e0       	ldi	r24, 0x00	; 0
	LcdPuts(initTitle);		// 박가경's Watch
 4a0:	34 df       	rcall	.-408    	; 0x30a <LcdMove>
 4a2:	c8 01       	movw	r24, r16
 4a4:	24 df       	rcall	.-440    	; 0x2ee <LcdPuts>
	
	for(int i=0; i<3; i++)		// flash x 3
	{
		LcdCommand(DISP_ON);		// 점
 4a6:	03 e0       	ldi	r16, 0x03	; 3
 4a8:	10 e0       	ldi	r17, 0x00	; 0
		msec_delay(500);			// 0.5s delay
 4aa:	8c e0       	ldi	r24, 0x0C	; 12
 4ac:	b5 de       	rcall	.-662    	; 0x218 <LcdCommand>
 4ae:	84 ef       	ldi	r24, 0xF4	; 244
		LcdCommand(DISP_OFF);		// 멸
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	4b df       	rcall	.-362    	; 0x34a <msec_delay>
		msec_delay(500);			// 0.5s delay
 4b4:	88 e0       	ldi	r24, 0x08	; 8
 4b6:	b0 de       	rcall	.-672    	; 0x218 <LcdCommand>
 4b8:	84 ef       	ldi	r24, 0xF4	; 244
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	46 df       	rcall	.-372    	; 0x34a <msec_delay>
 4be:	01 50       	subi	r16, 0x01	; 1
	initTitle[11] = '\0';
	
	LcdMove(0,0);			// cursor go to home
	LcdPuts(initTitle);		// 박가경's Watch
	
	for(int i=0; i<3; i++)		// flash x 3
 4c0:	11 09       	sbc	r17, r1
		LcdCommand(DISP_ON);		// 점
		msec_delay(500);			// 0.5s delay
		LcdCommand(DISP_OFF);		// 멸
		msec_delay(500);			// 0.5s delay
	}
	LcdInit();
 4c2:	99 f7       	brne	.-26     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4c4:	cc de       	rcall	.-616    	; 0x25e <LcdInit>
}
 4c6:	68 96       	adiw	r28, 0x18	; 24
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	08 95       	ret

000004dc <main>:

// 현재 메뉴 코드
static int status = 0;

int main(void) {
	LcdInit();
 4dc:	c0 de       	rcall	.-640    	; 0x25e <LcdInit>
	KeyInit();
 4de:	56 de       	rcall	.-852    	; 0x18c <KeyInit>
	ClockCounterInit();
 4e0:	40 df       	rcall	.-384    	; 0x362 <ClockCounterInit>
	
	startTermProject();
 4e2:	8a df       	rcall	.-236    	; 0x3f8 <startTermProject>
 4e4:	db d1       	rcall	.+950    	; 0x89c <initMenu>
	initMenu();
 4e6:	78 94       	sei
 4e8:	85 b5       	in	r24, 0x25	; 37
		
	// 전역 인터럽트 허용
	sei();						
 4ea:	82 60       	ori	r24, 0x02	; 2
	TCCR2 |= 1<<CS21;
 4ec:	85 bd       	out	0x25, r24	; 37
 4ee:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <ClockCounter_SECOND>
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅
		setClock(ClockCounter_SECOND);
 4f2:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <ClockCounter_SECOND+0x1>
 4f6:	2b d0       	rcall	.+86     	; 0x54e <setClock>
 4f8:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <ClockCounter_SECOND+0x1>
		ClockCounter_SECOND = 0;
 4fc:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <ClockCounter_SECOND>
 500:	4c de       	rcall	.-872    	; 0x19a <KeyInput>
		// keypad input
		keyInput = KeyInput();
 502:	d9 d1       	rcall	.+946    	; 0x8b6 <setMenu>
 504:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <status+0x1>
		
		// 뭘 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
 508:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <status>
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	49 f4       	brne	.+18     	; 0x522 <main+0x46>

		//==========================================================
		//1. SET 에 해당됨
		while(status==1){								
 510:	8b ea       	ldi	r24, 0xAB	; 171
 512:	91 e0       	ldi	r25, 0x01	; 1
			//시간에 넣어줄 배열만들고 셋팅 >> (0,0)(0,4)(0,5)
			status = setCustomClock(&ClockCounter_SECOND);	// Time setting(main.c 파일 안에 있음)	
 514:	8e d0       	rcall	.+284    	; 0x632 <setCustomClock>
 516:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <status+0x1>
 51a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <status>
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	b9 f3       	breq	.-18     	; 0x510 <main+0x34>
 522:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <status>
		
		
		
		//=========================================================
		//status =2
		while(status==2){
 526:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <status+0x1>
 52a:	02 97       	sbiw	r24, 0x02	; 2
 52c:	01 f7       	brne	.-64     	; 0x4ee <main+0x12>
			LcdCommand(HOME);
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	73 de       	rcall	.-794    	; 0x218 <LcdCommand>
 532:	88 e8       	ldi	r24, 0x88	; 136
			LcdPuts("0m 00.0s     ");
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	db de       	rcall	.-586    	; 0x2ee <LcdPuts>
 538:	8e e0       	ldi	r24, 0x0E	; 14
 53a:	6e de       	rcall	.-804    	; 0x218 <LcdCommand>

			LcdCommand(CURSOR_ON);
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	6c de       	rcall	.-808    	; 0x218 <LcdCommand>
 540:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <status>
			LcdCommand(HOME);
 544:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <status+0x1>
		
		
		
		//=========================================================
		//status =2
		while(status==2){
 548:	02 97       	sbiw	r24, 0x02	; 2
 54a:	89 f3       	breq	.-30     	; 0x52e <main+0x52>
 54c:	d0 cf       	rjmp	.-96     	; 0x4ee <main+0x12>

0000054e <setClock>:
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <second>
static int second = 0;
static int minute = 0;
static int hour = 0;

void setClock(int interruptSecond) {
	second += interruptSecond;
 556:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <second+0x1>
 55a:	82 0f       	add	r24, r18
 55c:	93 1f       	adc	r25, r19
	minute += second/60; 
 55e:	2c e3       	ldi	r18, 0x3C	; 60
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	b9 01       	movw	r22, r18
 564:	6d d2       	rcall	.+1242   	; 0xa40 <__divmodhi4>
 566:	fc 01       	movw	r30, r24
 568:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <minute>
 56c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <minute+0x1>
 570:	86 0f       	add	r24, r22
 572:	97 1f       	adc	r25, r23
	hour += minute/60;
 574:	b9 01       	movw	r22, r18
 576:	64 d2       	rcall	.+1224   	; 0xa40 <__divmodhi4>
 578:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <hour>
 57c:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <hour+0x1>
 580:	62 0f       	add	r22, r18
 582:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
 584:	f0 93 b4 01 	sts	0x01B4, r31	; 0x8001b4 <second+0x1>
 588:	e0 93 b3 01 	sts	0x01B3, r30	; 0x8001b3 <second>
	minute = minute%60;
 58c:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <minute+0x1>
 590:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <minute>
	hour = hour%24;
 594:	cb 01       	movw	r24, r22
 596:	68 e1       	ldi	r22, 0x18	; 24
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	52 d2       	rcall	.+1188   	; 0xa40 <__divmodhi4>
 59c:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <hour+0x1>
 5a0:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <hour>
	
	LcdMove(0,0);
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	b0 de       	rcall	.-672    	; 0x30a <LcdMove>
 5aa:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <hour>
	LcdPutchar((hour/10%10) + '0');
 5ae:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <hour+0x1>
 5b2:	ca e0       	ldi	r28, 0x0A	; 10
 5b4:	d0 e0       	ldi	r29, 0x00	; 0
 5b6:	be 01       	movw	r22, r28
 5b8:	43 d2       	rcall	.+1158   	; 0xa40 <__divmodhi4>
 5ba:	cb 01       	movw	r24, r22
 5bc:	be 01       	movw	r22, r28
 5be:	40 d2       	rcall	.+1152   	; 0xa40 <__divmodhi4>
 5c0:	80 5d       	subi	r24, 0xD0	; 208
 5c2:	72 de       	rcall	.-796    	; 0x2a8 <LcdPutchar>
 5c4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <hour>
	LcdPutchar(hour%10 + '0');
 5c8:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <hour+0x1>
 5cc:	be 01       	movw	r22, r28
 5ce:	38 d2       	rcall	.+1136   	; 0xa40 <__divmodhi4>
 5d0:	80 5d       	subi	r24, 0xD0	; 208
 5d2:	6a de       	rcall	.-812    	; 0x2a8 <LcdPutchar>
 5d4:	64 e0       	ldi	r22, 0x04	; 4
	
	LcdMove(0,4);
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	98 de       	rcall	.-720    	; 0x30a <LcdMove>
 5da:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <minute>
	LcdPutchar((minute/10%10) + '0');
 5de:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <minute+0x1>
 5e2:	be 01       	movw	r22, r28
 5e4:	2d d2       	rcall	.+1114   	; 0xa40 <__divmodhi4>
 5e6:	cb 01       	movw	r24, r22
 5e8:	be 01       	movw	r22, r28
 5ea:	2a d2       	rcall	.+1108   	; 0xa40 <__divmodhi4>
 5ec:	80 5d       	subi	r24, 0xD0	; 208
 5ee:	5c de       	rcall	.-840    	; 0x2a8 <LcdPutchar>
 5f0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <minute>
	LcdPutchar(minute%10 + '0');
 5f4:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <minute+0x1>
 5f8:	be 01       	movw	r22, r28
 5fa:	22 d2       	rcall	.+1092   	; 0xa40 <__divmodhi4>
 5fc:	80 5d       	subi	r24, 0xD0	; 208
 5fe:	54 de       	rcall	.-856    	; 0x2a8 <LcdPutchar>
 600:	68 e0       	ldi	r22, 0x08	; 8
	
	LcdMove(0,8);
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	82 de       	rcall	.-764    	; 0x30a <LcdMove>
 606:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <second>
	LcdPutchar((second/10%10) + '0');
 60a:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <second+0x1>
 60e:	be 01       	movw	r22, r28
 610:	17 d2       	rcall	.+1070   	; 0xa40 <__divmodhi4>
 612:	cb 01       	movw	r24, r22
 614:	be 01       	movw	r22, r28
 616:	14 d2       	rcall	.+1064   	; 0xa40 <__divmodhi4>
 618:	80 5d       	subi	r24, 0xD0	; 208
 61a:	46 de       	rcall	.-884    	; 0x2a8 <LcdPutchar>
 61c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <second>
 620:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <second+0x1>
	LcdPutchar(second%10 + '0');
 624:	be 01       	movw	r22, r28
 626:	0c d2       	rcall	.+1048   	; 0xa40 <__divmodhi4>
 628:	80 5d       	subi	r24, 0xD0	; 208
 62a:	3e de       	rcall	.-900    	; 0x2a8 <LcdPutchar>
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <setCustomClock>:
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
}
 636:	cf 93       	push	r28
 638:	8c 01       	movw	r16, r24
 63a:	af dd       	rcall	.-1186   	; 0x19a <KeyInput>
int setCustomClock(int* ClockCounter_SECOND) {
//	LcdPuts("000000");
	int returnStatus = -1;
	unsigned char keyInput = NO_KEY;	//키가 눌리지 않으면
	// 키를 입력받는 변수
	keyInput = KeyInput();
 63c:	c8 2f       	mov	r28, r24
	
	LcdMove(1,timerSettingIndex);
 63e:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <timerSettingIndex>
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	62 de       	rcall	.-828    	; 0x30a <LcdMove>
	while(1) {
		if(keyInput == NO_KEY){
 646:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
 648:	0d c0       	rjmp	.+26     	; 0x664 <setCustomClock+0x32>
 64a:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
 64c:	e5 dd       	rcall	.-1078   	; 0x218 <LcdCommand>
 64e:	84 ef       	ldi	r24, 0xF4	; 244
 650:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
 652:	7b de       	rcall	.-778    	; 0x34a <msec_delay>
 654:	8c e0       	ldi	r24, 0x0C	; 12
			msec_delay(500);
 656:	e0 dd       	rcall	.-1088   	; 0x218 <LcdCommand>
 658:	84 ef       	ldi	r24, 0xF4	; 244
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	76 de       	rcall	.-788    	; 0x34a <msec_delay>
			return 1;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	18 c1       	rjmp	.+560    	; 0x894 <setCustomClock+0x262>
		}
		
		switch(keyInput) {
 664:	c8 32       	cpi	r28, 0x28	; 40
 666:	09 f4       	brne	.+2      	; 0x66a <setCustomClock+0x38>
 668:	4f c0       	rjmp	.+158    	; 0x708 <setCustomClock+0xd6>
 66a:	78 f4       	brcc	.+30     	; 0x68a <setCustomClock+0x58>
 66c:	c8 31       	cpi	r28, 0x18	; 24
 66e:	f9 f0       	breq	.+62     	; 0x6ae <setCustomClock+0x7c>
 670:	28 f4       	brcc	.+10     	; 0x67c <setCustomClock+0x4a>
 672:	c2 31       	cpi	r28, 0x12	; 18
 674:	d1 f1       	breq	.+116    	; 0x6ea <setCustomClock+0xb8>
 676:	c4 31       	cpi	r28, 0x14	; 20
 678:	49 f1       	breq	.+82     	; 0x6cc <setCustomClock+0x9a>
 67a:	fe c0       	rjmp	.+508    	; 0x878 <setCustomClock+0x246>
 67c:	c2 32       	cpi	r28, 0x22	; 34
 67e:	09 f4       	brne	.+2      	; 0x682 <setCustomClock+0x50>
 680:	61 c0       	rjmp	.+194    	; 0x744 <setCustomClock+0x112>
 682:	c4 32       	cpi	r28, 0x24	; 36
 684:	09 f4       	brne	.+2      	; 0x688 <setCustomClock+0x56>
 686:	4f c0       	rjmp	.+158    	; 0x726 <setCustomClock+0xf4>
 688:	f7 c0       	rjmp	.+494    	; 0x878 <setCustomClock+0x246>
 68a:	c4 34       	cpi	r28, 0x44	; 68
 68c:	09 f4       	brne	.+2      	; 0x690 <setCustomClock+0x5e>
 68e:	78 c0       	rjmp	.+240    	; 0x780 <setCustomClock+0x14e>
 690:	38 f4       	brcc	.+14     	; 0x6a0 <setCustomClock+0x6e>
 692:	c1 34       	cpi	r28, 0x41	; 65
 694:	09 f4       	brne	.+2      	; 0x698 <setCustomClock+0x66>
 696:	9f c0       	rjmp	.+318    	; 0x7d6 <setCustomClock+0x1a4>
 698:	c2 34       	cpi	r28, 0x42	; 66
 69a:	09 f4       	brne	.+2      	; 0x69e <setCustomClock+0x6c>
 69c:	80 c0       	rjmp	.+256    	; 0x79e <setCustomClock+0x16c>
 69e:	ec c0       	rjmp	.+472    	; 0x878 <setCustomClock+0x246>
 6a0:	c8 34       	cpi	r28, 0x48	; 72
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <setCustomClock+0x74>
 6a4:	5e c0       	rjmp	.+188    	; 0x762 <setCustomClock+0x130>
 6a6:	c4 38       	cpi	r28, 0x84	; 132
 6a8:	09 f4       	brne	.+2      	; 0x6ac <setCustomClock+0x7a>
 6aa:	88 c0       	rjmp	.+272    	; 0x7bc <setCustomClock+0x18a>
			case SW0:
				LcdPutchar('1');
 6ac:	e5 c0       	rjmp	.+458    	; 0x878 <setCustomClock+0x246>
 6ae:	81 e3       	ldi	r24, 0x31	; 49
 6b0:	fb dd       	rcall	.-1034   	; 0x2a8 <LcdPutchar>
				customTimer[timerSettingIndex] = 1;
 6b2:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 6b6:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 6ba:	ee 0f       	add	r30, r30
 6bc:	ff 1f       	adc	r31, r31
 6be:	eb 54       	subi	r30, 0x4B	; 75
 6c0:	fe 4f       	sbci	r31, 0xFE	; 254
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	91 83       	std	Z+1, r25	; 0x01
				break;
 6c8:	80 83       	st	Z, r24
				
			case SW1:				//위와 같음
				LcdPutchar('2');
 6ca:	d9 c0       	rjmp	.+434    	; 0x87e <setCustomClock+0x24c>
 6cc:	82 e3       	ldi	r24, 0x32	; 50
 6ce:	ec dd       	rcall	.-1064   	; 0x2a8 <LcdPutchar>
				customTimer[timerSettingIndex] = 2;
 6d0:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 6d4:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	eb 54       	subi	r30, 0x4B	; 75
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	91 83       	std	Z+1, r25	; 0x01
				break;
 6e6:	80 83       	st	Z, r24
			
			case SW2:
				LcdPutchar('3');
 6e8:	ca c0       	rjmp	.+404    	; 0x87e <setCustomClock+0x24c>
 6ea:	83 e3       	ldi	r24, 0x33	; 51
 6ec:	dd dd       	rcall	.-1094   	; 0x2a8 <LcdPutchar>
				customTimer[timerSettingIndex] = 3;
 6ee:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 6f2:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	eb 54       	subi	r30, 0x4B	; 75
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	83 e0       	ldi	r24, 0x03	; 3
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	91 83       	std	Z+1, r25	; 0x01
				break;
 704:	80 83       	st	Z, r24
			
			case SW4:
				LcdPutchar('4');
 706:	bb c0       	rjmp	.+374    	; 0x87e <setCustomClock+0x24c>
 708:	84 e3       	ldi	r24, 0x34	; 52
 70a:	ce dd       	rcall	.-1124   	; 0x2a8 <LcdPutchar>
				customTimer[timerSettingIndex] = 4;
 70c:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 710:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 714:	ee 0f       	add	r30, r30
 716:	ff 1f       	adc	r31, r31
 718:	eb 54       	subi	r30, 0x4B	; 75
 71a:	fe 4f       	sbci	r31, 0xFE	; 254
 71c:	84 e0       	ldi	r24, 0x04	; 4
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	91 83       	std	Z+1, r25	; 0x01
				break;
 722:	80 83       	st	Z, r24
			
			case SW5:
				LcdPutchar('5');
 724:	ac c0       	rjmp	.+344    	; 0x87e <setCustomClock+0x24c>
 726:	85 e3       	ldi	r24, 0x35	; 53
 728:	bf dd       	rcall	.-1154   	; 0x2a8 <LcdPutchar>
				customTimer[timerSettingIndex] = 5;
 72a:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 72e:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 732:	ee 0f       	add	r30, r30
 734:	ff 1f       	adc	r31, r31
 736:	eb 54       	subi	r30, 0x4B	; 75
 738:	fe 4f       	sbci	r31, 0xFE	; 254
 73a:	85 e0       	ldi	r24, 0x05	; 5
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	91 83       	std	Z+1, r25	; 0x01
				break;
 740:	80 83       	st	Z, r24
			
			case SW6:
				LcdPutchar('6');
 742:	9d c0       	rjmp	.+314    	; 0x87e <setCustomClock+0x24c>
 744:	86 e3       	ldi	r24, 0x36	; 54
 746:	b0 dd       	rcall	.-1184   	; 0x2a8 <LcdPutchar>
				customTimer[timerSettingIndex] = 6;
 748:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 74c:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 750:	ee 0f       	add	r30, r30
 752:	ff 1f       	adc	r31, r31
 754:	eb 54       	subi	r30, 0x4B	; 75
 756:	fe 4f       	sbci	r31, 0xFE	; 254
 758:	86 e0       	ldi	r24, 0x06	; 6
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	91 83       	std	Z+1, r25	; 0x01
				break;
 75e:	80 83       	st	Z, r24
			
			case SW8:
				LcdPutchar('7');
 760:	8e c0       	rjmp	.+284    	; 0x87e <setCustomClock+0x24c>
 762:	87 e3       	ldi	r24, 0x37	; 55
 764:	a1 dd       	rcall	.-1214   	; 0x2a8 <LcdPutchar>
				customTimer[timerSettingIndex] = 7;
 766:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 76a:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	eb 54       	subi	r30, 0x4B	; 75
 774:	fe 4f       	sbci	r31, 0xFE	; 254
 776:	87 e0       	ldi	r24, 0x07	; 7
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	91 83       	std	Z+1, r25	; 0x01
				break;
 77c:	80 83       	st	Z, r24
			
			case SW9:
				LcdPutchar('8');
 77e:	7f c0       	rjmp	.+254    	; 0x87e <setCustomClock+0x24c>
 780:	88 e3       	ldi	r24, 0x38	; 56
 782:	92 dd       	rcall	.-1244   	; 0x2a8 <LcdPutchar>
				customTimer[timerSettingIndex] = 8;
 784:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 788:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	eb 54       	subi	r30, 0x4B	; 75
 792:	fe 4f       	sbci	r31, 0xFE	; 254
 794:	88 e0       	ldi	r24, 0x08	; 8
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	91 83       	std	Z+1, r25	; 0x01
				break;
 79a:	80 83       	st	Z, r24
			
			case SW10:
				LcdPutchar('9');
 79c:	70 c0       	rjmp	.+224    	; 0x87e <setCustomClock+0x24c>
 79e:	89 e3       	ldi	r24, 0x39	; 57
				customTimer[timerSettingIndex] = 9;
 7a0:	83 dd       	rcall	.-1274   	; 0x2a8 <LcdPutchar>
 7a2:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 7a6:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 7aa:	ee 0f       	add	r30, r30
 7ac:	ff 1f       	adc	r31, r31
 7ae:	eb 54       	subi	r30, 0x4B	; 75
 7b0:	fe 4f       	sbci	r31, 0xFE	; 254
 7b2:	89 e0       	ldi	r24, 0x09	; 9
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	91 83       	std	Z+1, r25	; 0x01
				break;
 7b8:	80 83       	st	Z, r24
			
			case SW13:
				LcdPutchar('0');
 7ba:	61 c0       	rjmp	.+194    	; 0x87e <setCustomClock+0x24c>
 7bc:	80 e3       	ldi	r24, 0x30	; 48
				customTimer[timerSettingIndex] = 0;
 7be:	74 dd       	rcall	.-1304   	; 0x2a8 <LcdPutchar>
 7c0:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <timerSettingIndex>
 7c4:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	eb 54       	subi	r30, 0x4B	; 75
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
				break;
 7d0:	11 82       	std	Z+1, r1	; 0x01
			
			case SW11:				
				LcdMove(1,0);
 7d2:	10 82       	st	Z, r1
 7d4:	54 c0       	rjmp	.+168    	; 0x87e <setCustomClock+0x24c>
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	81 e0       	ldi	r24, 0x01	; 1
				LcdPuts("1. SET      ");				
 7da:	97 dd       	rcall	.-1234   	; 0x30a <LcdMove>
 7dc:	86 e9       	ldi	r24, 0x96	; 150
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	86 dd       	rcall	.-1268   	; 0x2ee <LcdPuts>
			timerSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			timerSettingIndex = 0;
 7e2:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <timerSettingIndex+0x1>
 7e6:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <timerSettingIndex>
			*ClockCounter_SECOND = 0;
 7ea:	f8 01       	movw	r30, r16
 7ec:	11 82       	std	Z+1, r1	; 0x01
 7ee:	10 82       	st	Z, r1
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customTimer[0] * 10 + customTimer[1];
 7f0:	e5 eb       	ldi	r30, 0xB5	; 181
 7f2:	f1 e0       	ldi	r31, 0x01	; 1
 7f4:	80 81       	ld	r24, Z
 7f6:	91 81       	ldd	r25, Z+1	; 0x01
 7f8:	9c 01       	movw	r18, r24
 7fa:	22 0f       	add	r18, r18
 7fc:	33 1f       	adc	r19, r19
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	82 0f       	add	r24, r18
 80c:	93 1f       	adc	r25, r19
 80e:	22 81       	ldd	r18, Z+2	; 0x02
 810:	33 81       	ldd	r19, Z+3	; 0x03
 812:	82 0f       	add	r24, r18
 814:	93 1f       	adc	r25, r19
 816:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <hour+0x1>
 81a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <hour>
			minute = customTimer[2] * 10 + customTimer[3];
 81e:	84 81       	ldd	r24, Z+4	; 0x04
 820:	95 81       	ldd	r25, Z+5	; 0x05
 822:	9c 01       	movw	r18, r24
 824:	22 0f       	add	r18, r18
 826:	33 1f       	adc	r19, r19
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	82 0f       	add	r24, r18
 836:	93 1f       	adc	r25, r19
 838:	26 81       	ldd	r18, Z+6	; 0x06
 83a:	37 81       	ldd	r19, Z+7	; 0x07
 83c:	82 0f       	add	r24, r18
 83e:	93 1f       	adc	r25, r19
 840:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <minute+0x1>
 844:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <minute>
			second = customTimer[4] * 10 + customTimer[5];
 848:	80 85       	ldd	r24, Z+8	; 0x08
 84a:	91 85       	ldd	r25, Z+9	; 0x09
 84c:	9c 01       	movw	r18, r24
 84e:	22 0f       	add	r18, r18
 850:	33 1f       	adc	r19, r19
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	82 0f       	add	r24, r18
 860:	93 1f       	adc	r25, r19
 862:	22 85       	ldd	r18, Z+10	; 0x0a
 864:	33 85       	ldd	r19, Z+11	; 0x0b
 866:	82 0f       	add	r24, r18
 868:	93 1f       	adc	r25, r19
 86a:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <second+0x1>
 86e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <second>
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e c0       	rjmp	.+28     	; 0x894 <setCustomClock+0x262>
				LcdPuts("1. SET      ");				
				returnStatus = 0;
				break;
				
			default:
				returnStatus = 1;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0b c0       	rjmp	.+22     	; 0x894 <setCustomClock+0x262>
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			timerSettingIndex++;
 87e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <timerSettingIndex>
 882:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <timerSettingIndex+0x1>
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <timerSettingIndex+0x1>
 88c:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <timerSettingIndex>
			returnStatus = 1;
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
			
		}
		return returnStatus;
		
	}
}
 894:	cf 91       	pop	r28
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	08 95       	ret

0000089c <initMenu>:
static char str1[] = "00h 00m 00s";
static int nowMenuCursor = 0;
static int nowStatus = 1;

void initMenu() {
	LcdMove(0,0);
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	34 dd       	rcall	.-1432   	; 0x30a <LcdMove>
	LcdPuts(str1);
 8a2:	8e e0       	ldi	r24, 0x0E	; 14
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	23 dd       	rcall	.-1466   	; 0x2ee <LcdPuts>
	LcdMove(1,0);
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	2e dd       	rcall	.-1444   	; 0x30a <LcdMove>
	LcdPuts(Set);
 8ae:	8f e4       	ldi	r24, 0x4F	; 79
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	1d cd       	rjmp	.-1478   	; 0x2ee <LcdPuts>
 8b4:	08 95       	ret

000008b6 <setMenu>:
 8b6:	cf 93       	push	r28
}



// MENU 세팅용 함수
int setMenu(char clickedButton) {
 8b8:	df 93       	push	r29
 8ba:	c8 2f       	mov	r28, r24
	LcdMove(1,0);			// 2행으로
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	24 dd       	rcall	.-1464   	; 0x30a <LcdMove>
	switch(clickedButton) {
 8c2:	c1 32       	cpi	r28, 0x21	; 33
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <setMenu+0x12>
 8c6:	52 c0       	rjmp	.+164    	; 0x96c <setMenu+0xb6>
 8c8:	c1 34       	cpi	r28, 0x41	; 65
 8ca:	09 f4       	brne	.+2      	; 0x8ce <setMenu+0x18>
 8cc:	9a c0       	rjmp	.+308    	; 0xa02 <setMenu+0x14c>
 8ce:	c1 31       	cpi	r28, 0x11	; 17
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <setMenu+0x1e>
 8d2:	9c c0       	rjmp	.+312    	; 0xa0c <setMenu+0x156>
		// up button clicked
		case SW3:
			if ( nowMenuCursor == 1) {
 8d4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <nowMenuCursor>
 8d8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <nowMenuCursor+0x1>
 8dc:	81 30       	cpi	r24, 0x01	; 1
 8de:	91 05       	cpc	r25, r1
 8e0:	81 f4       	brne	.+32     	; 0x902 <setMenu+0x4c>
				nowMenuCursor--;
 8e2:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <nowMenuCursor+0x1>
 8e6:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <nowMenuCursor>
				LcdPuts(Set);
 8ea:	8f e4       	ldi	r24, 0x4F	; 79
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	ff dc       	rcall	.-1538   	; 0x2ee <LcdPuts>
				nowStatus = 1;
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 8f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 8fc:	c0 e0       	ldi	r28, 0x00	; 0
 8fe:	d0 e0       	ldi	r29, 0x00	; 0
 900:	87 c0       	rjmp	.+270    	; 0xa10 <setMenu+0x15a>
			if ( nowMenuCursor == 1) {
				nowMenuCursor--;
				LcdPuts(Set);
				nowStatus = 1;
			}
			else if ( nowMenuCursor == 2) {
 902:	82 30       	cpi	r24, 0x02	; 2
 904:	91 05       	cpc	r25, r1
 906:	91 f4       	brne	.+36     	; 0x92c <setMenu+0x76>
				nowMenuCursor--;
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <nowMenuCursor+0x1>
 910:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <nowMenuCursor>
				LcdPuts(Timer);
 914:	8d e3       	ldi	r24, 0x3D	; 61
 916:	91 e0       	ldi	r25, 0x01	; 1
 918:	ea dc       	rcall	.-1580   	; 0x2ee <LcdPuts>
				nowStatus = 2;
 91a:	82 e0       	ldi	r24, 0x02	; 2
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 922:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 926:	c0 e0       	ldi	r28, 0x00	; 0
 928:	d0 e0       	ldi	r29, 0x00	; 0
 92a:	72 c0       	rjmp	.+228    	; 0xa10 <setMenu+0x15a>
			else if ( nowMenuCursor == 2) {
				nowMenuCursor--;
				LcdPuts(Timer);
				nowStatus = 2;
			}
			else if ( nowMenuCursor == 3) {
 92c:	03 97       	sbiw	r24, 0x03	; 3
 92e:	91 f4       	brne	.+36     	; 0x954 <setMenu+0x9e>
				nowMenuCursor--;
 930:	82 e0       	ldi	r24, 0x02	; 2
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <nowMenuCursor+0x1>
 938:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <nowMenuCursor>
				LcdPuts(StopWatch);
 93c:	8d e2       	ldi	r24, 0x2D	; 45
 93e:	91 e0       	ldi	r25, 0x01	; 1
 940:	d6 dc       	rcall	.-1620   	; 0x2ee <LcdPuts>
				nowStatus = 3;
 942:	83 e0       	ldi	r24, 0x03	; 3
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 94a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 94e:	c0 e0       	ldi	r28, 0x00	; 0
 950:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor--;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else{
				LcdPuts(Set);
 952:	5e c0       	rjmp	.+188    	; 0xa10 <setMenu+0x15a>
 954:	8f e4       	ldi	r24, 0x4F	; 79
 956:	91 e0       	ldi	r25, 0x01	; 1
 958:	ca dc       	rcall	.-1644   	; 0x2ee <LcdPuts>
				nowStatus = 1;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 962:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			return 0;
 966:	c0 e0       	ldi	r28, 0x00	; 0
 968:	d0 e0       	ldi	r29, 0x00	; 0
 96a:	52 c0       	rjmp	.+164    	; 0xa10 <setMenu+0x15a>
			break;
		
		
		// down button clicked
		case SW7:
			if ( nowMenuCursor == 0) {
 96c:	c0 91 c3 01 	lds	r28, 0x01C3	; 0x8001c3 <nowMenuCursor>
 970:	d0 91 c4 01 	lds	r29, 0x01C4	; 0x8001c4 <nowMenuCursor+0x1>
 974:	20 97       	sbiw	r28, 0x00	; 0
 976:	81 f4       	brne	.+32     	; 0x998 <setMenu+0xe2>
				nowMenuCursor++;
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <nowMenuCursor+0x1>
 980:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <nowMenuCursor>
				LcdPuts(Timer);
 984:	8d e3       	ldi	r24, 0x3D	; 61
 986:	91 e0       	ldi	r25, 0x01	; 1
 988:	b2 dc       	rcall	.-1692   	; 0x2ee <LcdPuts>
				nowStatus = 2;
 98a:	82 e0       	ldi	r24, 0x02	; 2
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 992:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
 996:	3c c0       	rjmp	.+120    	; 0xa10 <setMenu+0x15a>
			}
			else if ( nowMenuCursor == 1) {
 998:	c1 30       	cpi	r28, 0x01	; 1
 99a:	d1 05       	cpc	r29, r1
 99c:	91 f4       	brne	.+36     	; 0x9c2 <setMenu+0x10c>
				nowMenuCursor++;
 99e:	82 e0       	ldi	r24, 0x02	; 2
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <nowMenuCursor+0x1>
 9a6:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <nowMenuCursor>
				LcdPuts(StopWatch);
 9aa:	8d e2       	ldi	r24, 0x2D	; 45
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	9f dc       	rcall	.-1730   	; 0x2ee <LcdPuts>
				nowStatus = 3;
 9b0:	83 e0       	ldi	r24, 0x03	; 3
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 9b8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
 9bc:	c0 e0       	ldi	r28, 0x00	; 0
 9be:	d0 e0       	ldi	r29, 0x00	; 0
 9c0:	27 c0       	rjmp	.+78     	; 0xa10 <setMenu+0x15a>
			else if ( nowMenuCursor == 1) {
				nowMenuCursor++;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else if ( nowMenuCursor == 2) {
 9c2:	22 97       	sbiw	r28, 0x02	; 2
 9c4:	91 f4       	brne	.+36     	; 0x9ea <setMenu+0x134>
				nowMenuCursor++;
 9c6:	83 e0       	ldi	r24, 0x03	; 3
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <nowMenuCursor+0x1>
 9ce:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <nowMenuCursor>
				LcdPuts(Alarm);
 9d2:	8a e1       	ldi	r24, 0x1A	; 26
 9d4:	91 e0       	ldi	r25, 0x01	; 1
 9d6:	8b dc       	rcall	.-1770   	; 0x2ee <LcdPuts>
				nowStatus = 4;
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 9e0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
 9e4:	c0 e0       	ldi	r28, 0x00	; 0
 9e6:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor++;
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			else{
				LcdPuts(Alarm);
 9e8:	13 c0       	rjmp	.+38     	; 0xa10 <setMenu+0x15a>
 9ea:	8a e1       	ldi	r24, 0x1A	; 26
 9ec:	91 e0       	ldi	r25, 0x01	; 1
 9ee:	7f dc       	rcall	.-1794   	; 0x2ee <LcdPuts>
				nowStatus = 4;
 9f0:	84 e0       	ldi	r24, 0x04	; 4
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 9f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			return 0;
 9fc:	c0 e0       	ldi	r28, 0x00	; 0
 9fe:	d0 e0       	ldi	r29, 0x00	; 0
 a00:	07 c0       	rjmp	.+14     	; 0xa10 <setMenu+0x15a>
			break;
		
		
		// When select button clicked, 메인파일의 각 status에 해당하는 기능을 위한 while문을 돌림
		case SW11:
			return nowStatus;
 a02:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <nowStatus>
 a06:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <nowStatus+0x1>
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <setMenu+0x15a>
			break;
		
		default:
			return 0;
 a0c:	c0 e0       	ldi	r28, 0x00	; 0
 a0e:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
 a10:	ce 01       	movw	r24, r28
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	08 95       	ret

00000a18 <__udivmodhi4>:
 a18:	aa 1b       	sub	r26, r26
 a1a:	bb 1b       	sub	r27, r27
 a1c:	51 e1       	ldi	r21, 0x11	; 17
 a1e:	07 c0       	rjmp	.+14     	; 0xa2e <__udivmodhi4_ep>

00000a20 <__udivmodhi4_loop>:
 a20:	aa 1f       	adc	r26, r26
 a22:	bb 1f       	adc	r27, r27
 a24:	a6 17       	cp	r26, r22
 a26:	b7 07       	cpc	r27, r23
 a28:	10 f0       	brcs	.+4      	; 0xa2e <__udivmodhi4_ep>
 a2a:	a6 1b       	sub	r26, r22
 a2c:	b7 0b       	sbc	r27, r23

00000a2e <__udivmodhi4_ep>:
 a2e:	88 1f       	adc	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	5a 95       	dec	r21
 a34:	a9 f7       	brne	.-22     	; 0xa20 <__udivmodhi4_loop>
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	bc 01       	movw	r22, r24
 a3c:	cd 01       	movw	r24, r26
 a3e:	08 95       	ret

00000a40 <__divmodhi4>:
 a40:	97 fb       	bst	r25, 7
 a42:	07 2e       	mov	r0, r23
 a44:	16 f4       	brtc	.+4      	; 0xa4a <__divmodhi4+0xa>
 a46:	00 94       	com	r0
 a48:	06 d0       	rcall	.+12     	; 0xa56 <__divmodhi4_neg1>
 a4a:	77 fd       	sbrc	r23, 7
 a4c:	08 d0       	rcall	.+16     	; 0xa5e <__divmodhi4_neg2>
 a4e:	e4 df       	rcall	.-56     	; 0xa18 <__udivmodhi4>
 a50:	07 fc       	sbrc	r0, 7
 a52:	05 d0       	rcall	.+10     	; 0xa5e <__divmodhi4_neg2>
 a54:	3e f4       	brtc	.+14     	; 0xa64 <__divmodhi4_exit>

00000a56 <__divmodhi4_neg1>:
 a56:	90 95       	com	r25
 a58:	81 95       	neg	r24
 a5a:	9f 4f       	sbci	r25, 0xFF	; 255
 a5c:	08 95       	ret

00000a5e <__divmodhi4_neg2>:
 a5e:	70 95       	com	r23
 a60:	61 95       	neg	r22
 a62:	7f 4f       	sbci	r23, 0xFF	; 255

00000a64 <__divmodhi4_exit>:
 a64:	08 95       	ret

00000a66 <malloc>:
 a66:	0f 93       	push	r16
 a68:	1f 93       	push	r17
 a6a:	cf 93       	push	r28
 a6c:	df 93       	push	r29
 a6e:	82 30       	cpi	r24, 0x02	; 2
 a70:	91 05       	cpc	r25, r1
 a72:	10 f4       	brcc	.+4      	; 0xa78 <malloc+0x12>
 a74:	82 e0       	ldi	r24, 0x02	; 2
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <__flp>
 a7c:	f0 91 c8 01 	lds	r31, 0x01C8	; 0x8001c8 <__flp+0x1>
 a80:	20 e0       	ldi	r18, 0x00	; 0
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	a0 e0       	ldi	r26, 0x00	; 0
 a86:	b0 e0       	ldi	r27, 0x00	; 0
 a88:	30 97       	sbiw	r30, 0x00	; 0
 a8a:	19 f1       	breq	.+70     	; 0xad2 <malloc+0x6c>
 a8c:	40 81       	ld	r20, Z
 a8e:	51 81       	ldd	r21, Z+1	; 0x01
 a90:	02 81       	ldd	r16, Z+2	; 0x02
 a92:	13 81       	ldd	r17, Z+3	; 0x03
 a94:	48 17       	cp	r20, r24
 a96:	59 07       	cpc	r21, r25
 a98:	c8 f0       	brcs	.+50     	; 0xacc <malloc+0x66>
 a9a:	84 17       	cp	r24, r20
 a9c:	95 07       	cpc	r25, r21
 a9e:	69 f4       	brne	.+26     	; 0xaba <malloc+0x54>
 aa0:	10 97       	sbiw	r26, 0x00	; 0
 aa2:	31 f0       	breq	.+12     	; 0xab0 <malloc+0x4a>
 aa4:	12 96       	adiw	r26, 0x02	; 2
 aa6:	0c 93       	st	X, r16
 aa8:	12 97       	sbiw	r26, 0x02	; 2
 aaa:	13 96       	adiw	r26, 0x03	; 3
 aac:	1c 93       	st	X, r17
 aae:	27 c0       	rjmp	.+78     	; 0xafe <malloc+0x98>
 ab0:	00 93 c7 01 	sts	0x01C7, r16	; 0x8001c7 <__flp>
 ab4:	10 93 c8 01 	sts	0x01C8, r17	; 0x8001c8 <__flp+0x1>
 ab8:	22 c0       	rjmp	.+68     	; 0xafe <malloc+0x98>
 aba:	21 15       	cp	r18, r1
 abc:	31 05       	cpc	r19, r1
 abe:	19 f0       	breq	.+6      	; 0xac6 <malloc+0x60>
 ac0:	42 17       	cp	r20, r18
 ac2:	53 07       	cpc	r21, r19
 ac4:	18 f4       	brcc	.+6      	; 0xacc <malloc+0x66>
 ac6:	9a 01       	movw	r18, r20
 ac8:	bd 01       	movw	r22, r26
 aca:	ef 01       	movw	r28, r30
 acc:	df 01       	movw	r26, r30
 ace:	f8 01       	movw	r30, r16
 ad0:	db cf       	rjmp	.-74     	; 0xa88 <malloc+0x22>
 ad2:	21 15       	cp	r18, r1
 ad4:	31 05       	cpc	r19, r1
 ad6:	f9 f0       	breq	.+62     	; 0xb16 <malloc+0xb0>
 ad8:	28 1b       	sub	r18, r24
 ada:	39 0b       	sbc	r19, r25
 adc:	24 30       	cpi	r18, 0x04	; 4
 ade:	31 05       	cpc	r19, r1
 ae0:	80 f4       	brcc	.+32     	; 0xb02 <malloc+0x9c>
 ae2:	8a 81       	ldd	r24, Y+2	; 0x02
 ae4:	9b 81       	ldd	r25, Y+3	; 0x03
 ae6:	61 15       	cp	r22, r1
 ae8:	71 05       	cpc	r23, r1
 aea:	21 f0       	breq	.+8      	; 0xaf4 <malloc+0x8e>
 aec:	fb 01       	movw	r30, r22
 aee:	93 83       	std	Z+3, r25	; 0x03
 af0:	82 83       	std	Z+2, r24	; 0x02
 af2:	04 c0       	rjmp	.+8      	; 0xafc <malloc+0x96>
 af4:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <__flp+0x1>
 af8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <__flp>
 afc:	fe 01       	movw	r30, r28
 afe:	32 96       	adiw	r30, 0x02	; 2
 b00:	44 c0       	rjmp	.+136    	; 0xb8a <malloc+0x124>
 b02:	fe 01       	movw	r30, r28
 b04:	e2 0f       	add	r30, r18
 b06:	f3 1f       	adc	r31, r19
 b08:	81 93       	st	Z+, r24
 b0a:	91 93       	st	Z+, r25
 b0c:	22 50       	subi	r18, 0x02	; 2
 b0e:	31 09       	sbc	r19, r1
 b10:	39 83       	std	Y+1, r19	; 0x01
 b12:	28 83       	st	Y, r18
 b14:	3a c0       	rjmp	.+116    	; 0xb8a <malloc+0x124>
 b16:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <__brkval>
 b1a:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <__brkval+0x1>
 b1e:	23 2b       	or	r18, r19
 b20:	41 f4       	brne	.+16     	; 0xb32 <malloc+0xcc>
 b22:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 b26:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 b2a:	30 93 c6 01 	sts	0x01C6, r19	; 0x8001c6 <__brkval+0x1>
 b2e:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <__brkval>
 b32:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b36:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 b3a:	21 15       	cp	r18, r1
 b3c:	31 05       	cpc	r19, r1
 b3e:	41 f4       	brne	.+16     	; 0xb50 <malloc+0xea>
 b40:	2d b7       	in	r18, 0x3d	; 61
 b42:	3e b7       	in	r19, 0x3e	; 62
 b44:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b48:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b4c:	24 1b       	sub	r18, r20
 b4e:	35 0b       	sbc	r19, r21
 b50:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <__brkval>
 b54:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <__brkval+0x1>
 b58:	e2 17       	cp	r30, r18
 b5a:	f3 07       	cpc	r31, r19
 b5c:	a0 f4       	brcc	.+40     	; 0xb86 <malloc+0x120>
 b5e:	2e 1b       	sub	r18, r30
 b60:	3f 0b       	sbc	r19, r31
 b62:	28 17       	cp	r18, r24
 b64:	39 07       	cpc	r19, r25
 b66:	78 f0       	brcs	.+30     	; 0xb86 <malloc+0x120>
 b68:	ac 01       	movw	r20, r24
 b6a:	4e 5f       	subi	r20, 0xFE	; 254
 b6c:	5f 4f       	sbci	r21, 0xFF	; 255
 b6e:	24 17       	cp	r18, r20
 b70:	35 07       	cpc	r19, r21
 b72:	48 f0       	brcs	.+18     	; 0xb86 <malloc+0x120>
 b74:	4e 0f       	add	r20, r30
 b76:	5f 1f       	adc	r21, r31
 b78:	50 93 c6 01 	sts	0x01C6, r21	; 0x8001c6 <__brkval+0x1>
 b7c:	40 93 c5 01 	sts	0x01C5, r20	; 0x8001c5 <__brkval>
 b80:	81 93       	st	Z+, r24
 b82:	91 93       	st	Z+, r25
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <malloc+0x124>
 b86:	e0 e0       	ldi	r30, 0x00	; 0
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	cf 01       	movw	r24, r30
 b8c:	df 91       	pop	r29
 b8e:	cf 91       	pop	r28
 b90:	1f 91       	pop	r17
 b92:	0f 91       	pop	r16
 b94:	08 95       	ret

00000b96 <free>:
 b96:	cf 93       	push	r28
 b98:	df 93       	push	r29
 b9a:	00 97       	sbiw	r24, 0x00	; 0
 b9c:	09 f4       	brne	.+2      	; 0xba0 <free+0xa>
 b9e:	81 c0       	rjmp	.+258    	; 0xca2 <free+0x10c>
 ba0:	fc 01       	movw	r30, r24
 ba2:	32 97       	sbiw	r30, 0x02	; 2
 ba4:	13 82       	std	Z+3, r1	; 0x03
 ba6:	12 82       	std	Z+2, r1	; 0x02
 ba8:	a0 91 c7 01 	lds	r26, 0x01C7	; 0x8001c7 <__flp>
 bac:	b0 91 c8 01 	lds	r27, 0x01C8	; 0x8001c8 <__flp+0x1>
 bb0:	10 97       	sbiw	r26, 0x00	; 0
 bb2:	81 f4       	brne	.+32     	; 0xbd4 <free+0x3e>
 bb4:	20 81       	ld	r18, Z
 bb6:	31 81       	ldd	r19, Z+1	; 0x01
 bb8:	82 0f       	add	r24, r18
 bba:	93 1f       	adc	r25, r19
 bbc:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <__brkval>
 bc0:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <__brkval+0x1>
 bc4:	28 17       	cp	r18, r24
 bc6:	39 07       	cpc	r19, r25
 bc8:	51 f5       	brne	.+84     	; 0xc1e <free+0x88>
 bca:	f0 93 c6 01 	sts	0x01C6, r31	; 0x8001c6 <__brkval+0x1>
 bce:	e0 93 c5 01 	sts	0x01C5, r30	; 0x8001c5 <__brkval>
 bd2:	67 c0       	rjmp	.+206    	; 0xca2 <free+0x10c>
 bd4:	ed 01       	movw	r28, r26
 bd6:	20 e0       	ldi	r18, 0x00	; 0
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	ce 17       	cp	r28, r30
 bdc:	df 07       	cpc	r29, r31
 bde:	40 f4       	brcc	.+16     	; 0xbf0 <free+0x5a>
 be0:	4a 81       	ldd	r20, Y+2	; 0x02
 be2:	5b 81       	ldd	r21, Y+3	; 0x03
 be4:	9e 01       	movw	r18, r28
 be6:	41 15       	cp	r20, r1
 be8:	51 05       	cpc	r21, r1
 bea:	f1 f0       	breq	.+60     	; 0xc28 <free+0x92>
 bec:	ea 01       	movw	r28, r20
 bee:	f5 cf       	rjmp	.-22     	; 0xbda <free+0x44>
 bf0:	d3 83       	std	Z+3, r29	; 0x03
 bf2:	c2 83       	std	Z+2, r28	; 0x02
 bf4:	40 81       	ld	r20, Z
 bf6:	51 81       	ldd	r21, Z+1	; 0x01
 bf8:	84 0f       	add	r24, r20
 bfa:	95 1f       	adc	r25, r21
 bfc:	c8 17       	cp	r28, r24
 bfe:	d9 07       	cpc	r29, r25
 c00:	59 f4       	brne	.+22     	; 0xc18 <free+0x82>
 c02:	88 81       	ld	r24, Y
 c04:	99 81       	ldd	r25, Y+1	; 0x01
 c06:	84 0f       	add	r24, r20
 c08:	95 1f       	adc	r25, r21
 c0a:	02 96       	adiw	r24, 0x02	; 2
 c0c:	91 83       	std	Z+1, r25	; 0x01
 c0e:	80 83       	st	Z, r24
 c10:	8a 81       	ldd	r24, Y+2	; 0x02
 c12:	9b 81       	ldd	r25, Y+3	; 0x03
 c14:	93 83       	std	Z+3, r25	; 0x03
 c16:	82 83       	std	Z+2, r24	; 0x02
 c18:	21 15       	cp	r18, r1
 c1a:	31 05       	cpc	r19, r1
 c1c:	29 f4       	brne	.+10     	; 0xc28 <free+0x92>
 c1e:	f0 93 c8 01 	sts	0x01C8, r31	; 0x8001c8 <__flp+0x1>
 c22:	e0 93 c7 01 	sts	0x01C7, r30	; 0x8001c7 <__flp>
 c26:	3d c0       	rjmp	.+122    	; 0xca2 <free+0x10c>
 c28:	e9 01       	movw	r28, r18
 c2a:	fb 83       	std	Y+3, r31	; 0x03
 c2c:	ea 83       	std	Y+2, r30	; 0x02
 c2e:	49 91       	ld	r20, Y+
 c30:	59 91       	ld	r21, Y+
 c32:	c4 0f       	add	r28, r20
 c34:	d5 1f       	adc	r29, r21
 c36:	ec 17       	cp	r30, r28
 c38:	fd 07       	cpc	r31, r29
 c3a:	61 f4       	brne	.+24     	; 0xc54 <free+0xbe>
 c3c:	80 81       	ld	r24, Z
 c3e:	91 81       	ldd	r25, Z+1	; 0x01
 c40:	84 0f       	add	r24, r20
 c42:	95 1f       	adc	r25, r21
 c44:	02 96       	adiw	r24, 0x02	; 2
 c46:	e9 01       	movw	r28, r18
 c48:	99 83       	std	Y+1, r25	; 0x01
 c4a:	88 83       	st	Y, r24
 c4c:	82 81       	ldd	r24, Z+2	; 0x02
 c4e:	93 81       	ldd	r25, Z+3	; 0x03
 c50:	9b 83       	std	Y+3, r25	; 0x03
 c52:	8a 83       	std	Y+2, r24	; 0x02
 c54:	e0 e0       	ldi	r30, 0x00	; 0
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	12 96       	adiw	r26, 0x02	; 2
 c5a:	8d 91       	ld	r24, X+
 c5c:	9c 91       	ld	r25, X
 c5e:	13 97       	sbiw	r26, 0x03	; 3
 c60:	00 97       	sbiw	r24, 0x00	; 0
 c62:	19 f0       	breq	.+6      	; 0xc6a <free+0xd4>
 c64:	fd 01       	movw	r30, r26
 c66:	dc 01       	movw	r26, r24
 c68:	f7 cf       	rjmp	.-18     	; 0xc58 <free+0xc2>
 c6a:	8d 91       	ld	r24, X+
 c6c:	9c 91       	ld	r25, X
 c6e:	11 97       	sbiw	r26, 0x01	; 1
 c70:	9d 01       	movw	r18, r26
 c72:	2e 5f       	subi	r18, 0xFE	; 254
 c74:	3f 4f       	sbci	r19, 0xFF	; 255
 c76:	82 0f       	add	r24, r18
 c78:	93 1f       	adc	r25, r19
 c7a:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <__brkval>
 c7e:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <__brkval+0x1>
 c82:	28 17       	cp	r18, r24
 c84:	39 07       	cpc	r19, r25
 c86:	69 f4       	brne	.+26     	; 0xca2 <free+0x10c>
 c88:	30 97       	sbiw	r30, 0x00	; 0
 c8a:	29 f4       	brne	.+10     	; 0xc96 <free+0x100>
 c8c:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <__flp+0x1>
 c90:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <__flp>
 c94:	02 c0       	rjmp	.+4      	; 0xc9a <free+0x104>
 c96:	13 82       	std	Z+3, r1	; 0x03
 c98:	12 82       	std	Z+2, r1	; 0x02
 c9a:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <__brkval+0x1>
 c9e:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <__brkval>
 ca2:	df 91       	pop	r29
 ca4:	cf 91       	pop	r28
 ca6:	08 95       	ret

00000ca8 <_exit>:
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
