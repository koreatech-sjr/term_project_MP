
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  0000102a  000010be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000102a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  008001ba  008001ba  00001178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027a3  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff1  00000000  00000000  00003b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001274  00000000  00000000  00004b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00005d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000924  00000000  00000000  00006144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018c1  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00008329  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2d c1       	rjmp	.+602    	; 0x25c <__ctors_end>
       2:	00 00       	nop
       4:	48 c1       	rjmp	.+656    	; 0x296 <__bad_interrupt>
       6:	00 00       	nop
       8:	46 c1       	rjmp	.+652    	; 0x296 <__bad_interrupt>
       a:	00 00       	nop
       c:	44 c1       	rjmp	.+648    	; 0x296 <__bad_interrupt>
       e:	00 00       	nop
      10:	42 c1       	rjmp	.+644    	; 0x296 <__bad_interrupt>
      12:	00 00       	nop
      14:	40 c1       	rjmp	.+640    	; 0x296 <__bad_interrupt>
      16:	00 00       	nop
      18:	3e c1       	rjmp	.+636    	; 0x296 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3c c1       	rjmp	.+632    	; 0x296 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3a c1       	rjmp	.+628    	; 0x296 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c2       	rjmp	.+1360   	; 0x576 <__vector_9>
      26:	00 00       	nop
      28:	36 c1       	rjmp	.+620    	; 0x296 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	34 c1       	rjmp	.+616    	; 0x296 <__bad_interrupt>
      2e:	00 00       	nop
      30:	32 c1       	rjmp	.+612    	; 0x296 <__bad_interrupt>
      32:	00 00       	nop
      34:	30 c1       	rjmp	.+608    	; 0x296 <__bad_interrupt>
      36:	00 00       	nop
      38:	2e c1       	rjmp	.+604    	; 0x296 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c1       	rjmp	.+702    	; 0x2fc <__vector_15>
      3e:	00 00       	nop
      40:	2a c1       	rjmp	.+596    	; 0x296 <__bad_interrupt>
      42:	00 00       	nop
      44:	28 c1       	rjmp	.+592    	; 0x296 <__bad_interrupt>
      46:	00 00       	nop
      48:	26 c1       	rjmp	.+588    	; 0x296 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	24 c1       	rjmp	.+584    	; 0x296 <__bad_interrupt>
      4e:	00 00       	nop
      50:	22 c1       	rjmp	.+580    	; 0x296 <__bad_interrupt>
      52:	00 00       	nop
      54:	20 c1       	rjmp	.+576    	; 0x296 <__bad_interrupt>
      56:	00 00       	nop
      58:	1e c1       	rjmp	.+572    	; 0x296 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1c c1       	rjmp	.+568    	; 0x296 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1a c1       	rjmp	.+564    	; 0x296 <__bad_interrupt>
      62:	00 00       	nop
      64:	18 c1       	rjmp	.+560    	; 0x296 <__bad_interrupt>
      66:	00 00       	nop
      68:	16 c1       	rjmp	.+556    	; 0x296 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	14 c1       	rjmp	.+552    	; 0x296 <__bad_interrupt>
      6e:	00 00       	nop
      70:	12 c1       	rjmp	.+548    	; 0x296 <__bad_interrupt>
      72:	00 00       	nop
      74:	10 c1       	rjmp	.+544    	; 0x296 <__bad_interrupt>
      76:	00 00       	nop
      78:	0e c1       	rjmp	.+540    	; 0x296 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0c c1       	rjmp	.+536    	; 0x296 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0a c1       	rjmp	.+532    	; 0x296 <__bad_interrupt>
      82:	00 00       	nop
      84:	08 c1       	rjmp	.+528    	; 0x296 <__bad_interrupt>
      86:	00 00       	nop
      88:	06 c1       	rjmp	.+524    	; 0x296 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0a 05       	cpc	r16, r10
      8e:	3f 04       	cpc	r3, r15
      90:	1b 05       	cpc	r17, r11
      92:	30 04       	cpc	r3, r0
      94:	1b 05       	cpc	r17, r11
      96:	1b 05       	cpc	r17, r11
      98:	1b 05       	cpc	r17, r11
      9a:	21 04       	cpc	r2, r1
      9c:	1b 05       	cpc	r17, r11
      9e:	1b 05       	cpc	r17, r11
      a0:	1b 05       	cpc	r17, r11
      a2:	1b 05       	cpc	r17, r11
      a4:	1b 05       	cpc	r17, r11
      a6:	1b 05       	cpc	r17, r11
      a8:	1b 05       	cpc	r17, r11
      aa:	1b 05       	cpc	r17, r11
      ac:	1b 05       	cpc	r17, r11
      ae:	6c 04       	cpc	r6, r12
      b0:	1b 05       	cpc	r17, r11
      b2:	5d 04       	cpc	r5, r13
      b4:	1b 05       	cpc	r17, r11
      b6:	1b 05       	cpc	r17, r11
      b8:	1b 05       	cpc	r17, r11
      ba:	4e 04       	cpc	r4, r14
      bc:	1b 05       	cpc	r17, r11
      be:	1b 05       	cpc	r17, r11
      c0:	1b 05       	cpc	r17, r11
      c2:	1b 05       	cpc	r17, r11
      c4:	1b 05       	cpc	r17, r11
      c6:	1b 05       	cpc	r17, r11
      c8:	1b 05       	cpc	r17, r11
      ca:	1b 05       	cpc	r17, r11
      cc:	1b 05       	cpc	r17, r11
      ce:	1b 05       	cpc	r17, r11
      d0:	1b 05       	cpc	r17, r11
      d2:	1b 05       	cpc	r17, r11
      d4:	1b 05       	cpc	r17, r11
      d6:	1b 05       	cpc	r17, r11
      d8:	1b 05       	cpc	r17, r11
      da:	1b 05       	cpc	r17, r11
      dc:	1b 05       	cpc	r17, r11
      de:	1b 05       	cpc	r17, r11
      e0:	1b 05       	cpc	r17, r11
      e2:	1b 05       	cpc	r17, r11
      e4:	1b 05       	cpc	r17, r11
      e6:	1b 05       	cpc	r17, r11
      e8:	1b 05       	cpc	r17, r11
      ea:	1b 05       	cpc	r17, r11
      ec:	b5 04       	cpc	r11, r5
      ee:	99 04       	cpc	r9, r9
      f0:	1b 05       	cpc	r17, r11
      f2:	8a 04       	cpc	r8, r10
      f4:	1b 05       	cpc	r17, r11
      f6:	1b 05       	cpc	r17, r11
      f8:	1b 05       	cpc	r17, r11
      fa:	7b 04       	cpc	r7, r11
      fc:	1b 05       	cpc	r17, r11
      fe:	1b 05       	cpc	r17, r11
     100:	1b 05       	cpc	r17, r11
     102:	1b 05       	cpc	r17, r11
     104:	1b 05       	cpc	r17, r11
     106:	1b 05       	cpc	r17, r11
     108:	1b 05       	cpc	r17, r11
     10a:	1b 05       	cpc	r17, r11
     10c:	1b 05       	cpc	r17, r11
     10e:	1b 05       	cpc	r17, r11
     110:	1b 05       	cpc	r17, r11
     112:	1b 05       	cpc	r17, r11
     114:	1b 05       	cpc	r17, r11
     116:	1b 05       	cpc	r17, r11
     118:	1b 05       	cpc	r17, r11
     11a:	1b 05       	cpc	r17, r11
     11c:	1b 05       	cpc	r17, r11
     11e:	1b 05       	cpc	r17, r11
     120:	1b 05       	cpc	r17, r11
     122:	1b 05       	cpc	r17, r11
     124:	1b 05       	cpc	r17, r11
     126:	1b 05       	cpc	r17, r11
     128:	1b 05       	cpc	r17, r11
     12a:	1b 05       	cpc	r17, r11
     12c:	1b 05       	cpc	r17, r11
     12e:	1b 05       	cpc	r17, r11
     130:	1b 05       	cpc	r17, r11
     132:	1b 05       	cpc	r17, r11
     134:	1b 05       	cpc	r17, r11
     136:	1b 05       	cpc	r17, r11
     138:	1b 05       	cpc	r17, r11
     13a:	1b 05       	cpc	r17, r11
     13c:	1b 05       	cpc	r17, r11
     13e:	1b 05       	cpc	r17, r11
     140:	1b 05       	cpc	r17, r11
     142:	1b 05       	cpc	r17, r11
     144:	1b 05       	cpc	r17, r11
     146:	1b 05       	cpc	r17, r11
     148:	1b 05       	cpc	r17, r11
     14a:	1b 05       	cpc	r17, r11
     14c:	1b 05       	cpc	r17, r11
     14e:	1b 05       	cpc	r17, r11
     150:	1b 05       	cpc	r17, r11
     152:	1b 05       	cpc	r17, r11
     154:	1b 05       	cpc	r17, r11
     156:	1b 05       	cpc	r17, r11
     158:	1b 05       	cpc	r17, r11
     15a:	1b 05       	cpc	r17, r11
     15c:	1b 05       	cpc	r17, r11
     15e:	1b 05       	cpc	r17, r11
     160:	1b 05       	cpc	r17, r11
     162:	1b 05       	cpc	r17, r11
     164:	1b 05       	cpc	r17, r11
     166:	1b 05       	cpc	r17, r11
     168:	1b 05       	cpc	r17, r11
     16a:	1b 05       	cpc	r17, r11
     16c:	1b 05       	cpc	r17, r11
     16e:	1b 05       	cpc	r17, r11
     170:	1b 05       	cpc	r17, r11
     172:	a8 04       	cpc	r10, r8
     174:	4a 07       	cpc	r20, r26
     176:	a4 06       	cpc	r10, r20
     178:	bc 07       	cpc	r27, r28
     17a:	8f 06       	cpc	r8, r31
     17c:	bc 07       	cpc	r27, r28
     17e:	bc 07       	cpc	r27, r28
     180:	bc 07       	cpc	r27, r28
     182:	7a 06       	cpc	r7, r26
     184:	bc 07       	cpc	r27, r28
     186:	bc 07       	cpc	r27, r28
     188:	bc 07       	cpc	r27, r28
     18a:	bc 07       	cpc	r27, r28
     18c:	bc 07       	cpc	r27, r28
     18e:	bc 07       	cpc	r27, r28
     190:	bc 07       	cpc	r27, r28
     192:	bc 07       	cpc	r27, r28
     194:	5d 07       	cpc	r21, r29
     196:	e3 06       	cpc	r14, r19
     198:	bc 07       	cpc	r27, r28
     19a:	ce 06       	cpc	r12, r30
     19c:	bc 07       	cpc	r27, r28
     19e:	bc 07       	cpc	r27, r28
     1a0:	bc 07       	cpc	r27, r28
     1a2:	b9 06       	cpc	r11, r25
     1a4:	bc 07       	cpc	r27, r28
     1a6:	bc 07       	cpc	r27, r28
     1a8:	bc 07       	cpc	r27, r28
     1aa:	bc 07       	cpc	r27, r28
     1ac:	bc 07       	cpc	r27, r28
     1ae:	bc 07       	cpc	r27, r28
     1b0:	bc 07       	cpc	r27, r28
     1b2:	bc 07       	cpc	r27, r28
     1b4:	bc 07       	cpc	r27, r28
     1b6:	bc 07       	cpc	r27, r28
     1b8:	bc 07       	cpc	r27, r28
     1ba:	bc 07       	cpc	r27, r28
     1bc:	bc 07       	cpc	r27, r28
     1be:	bc 07       	cpc	r27, r28
     1c0:	bc 07       	cpc	r27, r28
     1c2:	bc 07       	cpc	r27, r28
     1c4:	bc 07       	cpc	r27, r28
     1c6:	bc 07       	cpc	r27, r28
     1c8:	bc 07       	cpc	r27, r28
     1ca:	bc 07       	cpc	r27, r28
     1cc:	bc 07       	cpc	r27, r28
     1ce:	bc 07       	cpc	r27, r28
     1d0:	bc 07       	cpc	r27, r28
     1d2:	bc 07       	cpc	r27, r28
     1d4:	73 07       	cpc	r23, r19
     1d6:	22 07       	cpc	r18, r18
     1d8:	bc 07       	cpc	r27, r28
     1da:	0d 07       	cpc	r16, r29
     1dc:	bc 07       	cpc	r27, r28
     1de:	bc 07       	cpc	r27, r28
     1e0:	bc 07       	cpc	r27, r28
     1e2:	f8 06       	cpc	r15, r24
     1e4:	bc 07       	cpc	r27, r28
     1e6:	bc 07       	cpc	r27, r28
     1e8:	bc 07       	cpc	r27, r28
     1ea:	bc 07       	cpc	r27, r28
     1ec:	bc 07       	cpc	r27, r28
     1ee:	bc 07       	cpc	r27, r28
     1f0:	bc 07       	cpc	r27, r28
     1f2:	bc 07       	cpc	r27, r28
     1f4:	bc 07       	cpc	r27, r28
     1f6:	bc 07       	cpc	r27, r28
     1f8:	bc 07       	cpc	r27, r28
     1fa:	bc 07       	cpc	r27, r28
     1fc:	bc 07       	cpc	r27, r28
     1fe:	bc 07       	cpc	r27, r28
     200:	bc 07       	cpc	r27, r28
     202:	bc 07       	cpc	r27, r28
     204:	bc 07       	cpc	r27, r28
     206:	bc 07       	cpc	r27, r28
     208:	bc 07       	cpc	r27, r28
     20a:	bc 07       	cpc	r27, r28
     20c:	bc 07       	cpc	r27, r28
     20e:	bc 07       	cpc	r27, r28
     210:	bc 07       	cpc	r27, r28
     212:	bc 07       	cpc	r27, r28
     214:	bc 07       	cpc	r27, r28
     216:	bc 07       	cpc	r27, r28
     218:	bc 07       	cpc	r27, r28
     21a:	bc 07       	cpc	r27, r28
     21c:	bc 07       	cpc	r27, r28
     21e:	bc 07       	cpc	r27, r28
     220:	bc 07       	cpc	r27, r28
     222:	bc 07       	cpc	r27, r28
     224:	bc 07       	cpc	r27, r28
     226:	bc 07       	cpc	r27, r28
     228:	bc 07       	cpc	r27, r28
     22a:	bc 07       	cpc	r27, r28
     22c:	bc 07       	cpc	r27, r28
     22e:	bc 07       	cpc	r27, r28
     230:	bc 07       	cpc	r27, r28
     232:	bc 07       	cpc	r27, r28
     234:	bc 07       	cpc	r27, r28
     236:	bc 07       	cpc	r27, r28
     238:	bc 07       	cpc	r27, r28
     23a:	bc 07       	cpc	r27, r28
     23c:	bc 07       	cpc	r27, r28
     23e:	bc 07       	cpc	r27, r28
     240:	bc 07       	cpc	r27, r28
     242:	bc 07       	cpc	r27, r28
     244:	bc 07       	cpc	r27, r28
     246:	bc 07       	cpc	r27, r28
     248:	bc 07       	cpc	r27, r28
     24a:	bc 07       	cpc	r27, r28
     24c:	bc 07       	cpc	r27, r28
     24e:	bc 07       	cpc	r27, r28
     250:	bc 07       	cpc	r27, r28
     252:	bc 07       	cpc	r27, r28
     254:	bc 07       	cpc	r27, r28
     256:	bc 07       	cpc	r27, r28
     258:	bc 07       	cpc	r27, r28
     25a:	37 07       	cpc	r19, r23

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d0 e1       	ldi	r29, 0x10	; 16
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	ea e2       	ldi	r30, 0x2A	; 42
     270:	f0 e1       	ldi	r31, 0x10	; 16
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	aa 3b       	cpi	r26, 0xBA	; 186
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
     282:	21 e0       	ldi	r18, 0x01	; 1
     284:	aa eb       	ldi	r26, 0xBA	; 186
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	ae 3f       	cpi	r26, 0xFE	; 254
     28e:	b2 07       	cpc	r27, r18
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	ba d1       	rcall	.+884    	; 0x608 <main>
     294:	c8 c6       	rjmp	.+3472   	; 0x1026 <_exit>

00000296 <__bad_interrupt>:
     296:	b4 ce       	rjmp	.-664    	; 0x0 <__vectors>

00000298 <ISeg7Init>:
= {16,16,16,16,16, 16};      //초기에 모두 끈다.


void ISeg7Init(void)
{
	SSEG_CONT  |=  CONT_MASK; //모든 7-세그먼트를 끈다.
     298:	82 b3       	in	r24, 0x12	; 18
     29a:	80 6f       	ori	r24, 0xF0	; 240
     29c:	82 bb       	out	0x12, r24	; 18
	DDR_CONT   |=  CONT_MASK; //제어포트의 상위니블을
     29e:	81 b3       	in	r24, 0x11	; 17
     2a0:	80 6f       	ori	r24, 0xF0	; 240
     2a2:	81 bb       	out	0x11, r24	; 17
	//출력으로 설정
	DDR_DATA = 0xFF;     //테이터포트는 모두 출력으로 설정
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	8a bb       	out	0x1a, r24	; 26
	
	// 타이머/카운터0 비교 일치 인터럽트 설정
	// 타이머/카운터0는 CTC모드로 동작
	
	TCCR0 = (1<<WGM01);		 //CTC모드/타이머 정지, OC0핀 미사용
     2a8:	88 e0       	ldi	r24, 0x08	; 8
     2aa:	83 bf       	out	0x33, r24	; 51
	OCR0  = 78;				//5msec마다 비교일치 인터럽트 발생
     2ac:	8e e4       	ldi	r24, 0x4E	; 78
     2ae:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     2b0:	87 b7       	in	r24, 0x37	; 55
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	87 bf       	out	0x37, r24	; 55
	
	TCCR0 |= 0x07;		   //분주비 1024로 타이머 시작
     2b6:	83 b7       	in	r24, 0x33	; 51
     2b8:	87 60       	ori	r24, 0x07	; 7
     2ba:	83 bf       	out	0x33, r24	; 51
     2bc:	08 95       	ret

000002be <ISeg7DispNum>:
}


void ISeg7DispNum(unsigned short num, unsigned short radix)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	eb 01       	movw	r28, r22
	int  j;
	TIMSK &= ~(1<<OCIE0);	// 타이머0 비교일치 인터럽트 금지
     2c4:	27 b7       	in	r18, 0x37	; 55
     2c6:	2d 7f       	andi	r18, 0xFD	; 253
     2c8:	27 bf       	out	0x37, r18	; 55
	// cnumber[]에 수 0저장
	// cnumber[0] = 0
	// cnumber[1] ~ cnumber[4] = 16: 세그먼트를 끈다.
	
	
	cnumber[0] = 0;
     2ca:	e0 e0       	ldi	r30, 0x00	; 0
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	10 82       	st	Z, r1
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
     2d0:	20 e1       	ldi	r18, 0x10	; 16
     2d2:	21 83       	std	Z+1, r18	; 0x01
     2d4:	22 83       	std	Z+2, r18	; 0x02
     2d6:	23 83       	std	Z+3, r18	; 0x03
     2d8:	24 83       	std	Z+4, r18	; 0x04
     2da:	25 83       	std	Z+5, r18	; 0x05
     2dc:	25 e0       	ldi	r18, 0x05	; 5
     2de:	31 e0       	ldi	r19, 0x01	; 1
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
	{
		cnumber[j++] = num % radix;  //나머지
     2e0:	be 01       	movw	r22, r28
     2e2:	71 d6       	rcall	.+3298   	; 0xfc6 <__udivmodhi4>
     2e4:	81 93       	st	Z+, r24
		num /= radix;                 // 몫
     2e6:	86 2f       	mov	r24, r22
     2e8:	97 2f       	mov	r25, r23
	
	cnumber[0] = 0;
	for(j=1; j<N_BUF; j++) { cnumber[j] = 16; }
	
	j = 0;    		         //1자리를 가리킴
	while(j<=4)
     2ea:	e2 17       	cp	r30, r18
     2ec:	f3 07       	cpc	r31, r19
     2ee:	c1 f7       	brne	.-16     	; 0x2e0 <ISeg7DispNum+0x22>
	{
		cnumber[j++] = num % radix;  //나머지
		num /= radix;                 // 몫
	}
	TIMSK |= (1<<OCIE0);	//타이머0 비교일치 인터럽트 허용
     2f0:	87 b7       	in	r24, 0x37	; 55
     2f2:	82 60       	ori	r24, 0x02	; 2
     2f4:	87 bf       	out	0x37, r24	; 55
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <__vector_15>:
//====================================================
// ISR : 인터럽트가 걸릴 때마다 index가 가리키는 세그먼트에
//       데이터를 표시하고, index는 계속 회전이동하게 된다.
//=====================================================

ISR(TIMER0_COMP_vect){	//카운터/타이머0 비교일치 인터럽트
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	0b b6       	in	r0, 0x3b	; 59
     308:	0f 92       	push	r0
     30a:	2f 93       	push	r18
     30c:	8f 93       	push	r24
     30e:	9f 93       	push	r25
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
	static int index = 0;
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
     314:	22 b3       	in	r18, 0x12	; 18
     316:	80 e1       	ldi	r24, 0x10	; 16
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	00 90 ba 01 	lds	r0, 0x01BA	; 0x8001ba <__data_end>
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__vector_15+0x28>
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <__vector_15+0x24>
     328:	80 95       	com	r24
     32a:	80 7f       	andi	r24, 0xF0	; 240
     32c:	92 2f       	mov	r25, r18
     32e:	9f 70       	andi	r25, 0x0F	; 15
     330:	89 2b       	or	r24, r25
     332:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
     334:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <__data_end>
     338:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <__data_end+0x1>
     33c:	e0 50       	subi	r30, 0x00	; 0
     33e:	ff 4f       	sbci	r31, 0xFF	; 255
     340:	e0 81       	ld	r30, Z
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	e7 5a       	subi	r30, 0xA7	; 167
     346:	fe 4f       	sbci	r31, 0xFE	; 254
     348:	80 81       	ld	r24, Z
     34a:	80 95       	com	r24
     34c:	8b bb       	out	0x1b, r24	; 27
	
	index++; //인덱스 이동
     34e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     352:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x1>
     356:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) { index = 0; }
     358:	84 30       	cpi	r24, 0x04	; 4
     35a:	91 05       	cpc	r25, r1
     35c:	29 f0       	breq	.+10     	; 0x368 <__vector_15+0x6c>
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];
	
	index++; //인덱스 이동
     35e:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <__data_end+0x1>
     362:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     366:	04 c0       	rjmp	.+8      	; 0x370 <__vector_15+0x74>
	if(index == N_SEGMENT) { index = 0; }
     368:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <__data_end+0x1>
     36c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
}
     370:	ff 91       	pop	r31
     372:	ef 91       	pop	r30
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	2f 91       	pop	r18
     37a:	0f 90       	pop	r0
     37c:	0b be       	out	0x3b, r0	; 59
     37e:	0f 90       	pop	r0
     380:	0f be       	out	0x3f, r0	; 63
     382:	0f 90       	pop	r0
     384:	1f 90       	pop	r1
     386:	18 95       	reti

00000388 <key_scan>:
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     388:	8e ef       	ldi	r24, 0xFE	; 254
     38a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
     38e:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     390:	80 b1       	in	r24, 0x00	; 0
     392:	80 95       	com	r24
     394:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     396:	69 f4       	brne	.+26     	; 0x3b2 <key_scan+0x2a>
     398:	23 e0       	ldi	r18, 0x03	; 3
     39a:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
     39c:	e2 e6       	ldi	r30, 0x62	; 98
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	89 2f       	mov	r24, r25
     3a2:	80 95       	com	r24
     3a4:	80 83       	st	Z, r24
		asm("nop"::);
     3a6:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
     3a8:	80 b1       	in	r24, 0x00	; 0
     3aa:	80 95       	com	r24
     3ac:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <key_scan+0x30>
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <key_scan+0x2c>

static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
     3b2:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);
		
		in = (~KEY_IN) & 0xF0;
		if(in)			//have key input
		{
			in += out;	//make a code
     3b4:	89 0f       	add	r24, r25
			break;
     3b6:	08 95       	ret
		}
		out <<= 1;	//change to next scan-code
     3b8:	99 0f       	add	r25, r25
     3ba:	21 50       	subi	r18, 0x01	; 1
static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
     3bc:	89 f7       	brne	.-30     	; 0x3a0 <key_scan+0x18>
		}
		out <<= 1;	//change to next scan-code
		
	}
	return in;	//return the value of scan-code
}
     3be:	08 95       	ret

000003c0 <KeyInit>:
static unsigned char key_scan(void);
static unsigned char pin = NO_KEY;		//previous key value

void KeyInit()	//Initialize keypad
{
	KEY_OUT = 0xF0;		// Initialize output as 0
     3c0:	80 ef       	ldi	r24, 0xF0	; 240
     3c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;		//high-ranking nibble = input, low-ranking nibble = output
     3c6:	8f e0       	ldi	r24, 0x0F	; 15
     3c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3cc:	08 95       	ret

000003ce <KeyInput>:
// value of return :
//                   !=0 => value of scan code
//					  =0 => no input
//==========================================================================
unsigned char KeyInput(void)
{
     3ce:	cf 93       	push	r28
	unsigned char in, in1;
	
	in = key_scan();	//read keys
     3d0:	db df       	rcall	.-74     	; 0x388 <key_scan>
     3d2:	c8 2f       	mov	r28, r24
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <KeyInput+0xa>
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
		if(in == in1) break;
		in = in1;
     3d6:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d8:	8f e3       	ldi	r24, 0x3F	; 63
     3da:	9c e9       	ldi	r25, 0x9C	; 156
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <KeyInput+0xe>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <KeyInput+0x14>
     3e2:	00 00       	nop
     3e4:	8f e3       	ldi	r24, 0x3F	; 63
     3e6:	9c e9       	ldi	r25, 0x9C	; 156
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <KeyInput+0x1a>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <KeyInput+0x20>
     3ee:	00 00       	nop
     3f0:	8f e3       	ldi	r24, 0x3F	; 63
     3f2:	9c e9       	ldi	r25, 0x9C	; 156
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <KeyInput+0x26>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <KeyInput+0x2c>
	
	in = key_scan();	//read keys
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
     3fa:	00 00       	nop
     3fc:	c5 df       	rcall	.-118    	; 0x388 <key_scan>
		if(in == in1) break;
     3fe:	c8 13       	cpse	r28, r24
     400:	ea cf       	rjmp	.-44     	; 0x3d6 <KeyInput+0x8>
     402:	98 2f       	mov	r25, r24
     404:	90 7f       	andi	r25, 0xF0	; 240
		in = in1;
	}
	
	if (!(in & 0xF0))	// No key was pushed
     406:	19 f4       	brne	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		pin = 0;
     408:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <pin>
		return 0;
     40c:	09 c0       	rjmp	.+18     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}
	if(pin == in)
     40e:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <pin>
     412:	89 17       	cp	r24, r25
     414:	21 f0       	breq	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	return 0;
	
	pin = in;		//store key value
     416:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <pin>
	return in;		//return code
     41a:	98 2f       	mov	r25, r24
     41c:	01 c0       	rjmp	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		pin = 0;
		return 0;
	}
	if(pin == in)
	return 0;
     41e:	90 e0       	ldi	r25, 0x00	; 0
	
	pin = in;		//store key value
	return in;		//return code
}
     420:	89 2f       	mov	r24, r25
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <write_command>:
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
	LcdPutchar(font[i]);
}
     426:	98 2f       	mov	r25, r24
     428:	90 7f       	andi	r25, 0xF0	; 240
     42a:	94 60       	ori	r25, 0x04	; 4
     42c:	95 bb       	out	0x15, r25	; 21
     42e:	9b 7f       	andi	r25, 0xFB	; 251
     430:	95 bb       	out	0x15, r25	; 21
     432:	20 e1       	ldi	r18, 0x10	; 16
     434:	82 02       	muls	r24, r18
     436:	c0 01       	movw	r24, r0
     438:	11 24       	eor	r1, r1
     43a:	84 60       	ori	r24, 0x04	; 4
     43c:	85 bb       	out	0x15, r24	; 21
     43e:	8b 7f       	andi	r24, 0xFB	; 251
     440:	85 bb       	out	0x15, r24	; 21
     442:	85 e0       	ldi	r24, 0x05	; 5
     444:	8a 95       	dec	r24
     446:	f1 f7       	brne	.-4      	; 0x444 <write_command+0x1e>
     448:	00 00       	nop
     44a:	08 95       	ret

0000044c <LcdCommand>:
     44c:	cf 93       	push	r28
     44e:	c8 2f       	mov	r28, r24
     450:	85 e3       	ldi	r24, 0x35	; 53
     452:	8a 95       	dec	r24
     454:	f1 f7       	brne	.-4      	; 0x452 <LcdCommand+0x6>
     456:	00 00       	nop
     458:	95 e3       	ldi	r25, 0x35	; 53
     45a:	9a 95       	dec	r25
     45c:	f1 f7       	brne	.-4      	; 0x45a <LcdCommand+0xe>
     45e:	00 00       	nop
     460:	85 e3       	ldi	r24, 0x35	; 53
     462:	8a 95       	dec	r24
     464:	f1 f7       	brne	.-4      	; 0x462 <LcdCommand+0x16>
     466:	00 00       	nop
     468:	95 e3       	ldi	r25, 0x35	; 53
     46a:	9a 95       	dec	r25
     46c:	f1 f7       	brne	.-4      	; 0x46a <LcdCommand+0x1e>
     46e:	00 00       	nop
     470:	85 e3       	ldi	r24, 0x35	; 53
     472:	8a 95       	dec	r24
     474:	f1 f7       	brne	.-4      	; 0x472 <LcdCommand+0x26>
     476:	00 00       	nop
     478:	8c 2f       	mov	r24, r28
     47a:	d5 df       	rcall	.-86     	; 0x426 <write_command>
     47c:	c1 50       	subi	r28, 0x01	; 1
     47e:	c2 30       	cpi	r28, 0x02	; 2
     480:	30 f4       	brcc	.+12     	; 0x48e <LcdCommand+0x42>
     482:	8f e3       	ldi	r24, 0x3F	; 63
     484:	9f e1       	ldi	r25, 0x1F	; 31
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <LcdCommand+0x3a>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <LcdCommand+0x40>
     48c:	00 00       	nop
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <LcdInit>:
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	84 bb       	out	0x14, r24	; 20
     496:	8f e5       	ldi	r24, 0x5F	; 95
     498:	9a ee       	ldi	r25, 0xEA	; 234
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <LcdInit+0x8>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <LcdInit+0xe>
     4a0:	00 00       	nop
     4a2:	80 e3       	ldi	r24, 0x30	; 48
     4a4:	c0 df       	rcall	.-128    	; 0x426 <write_command>
     4a6:	8f e1       	ldi	r24, 0x1F	; 31
     4a8:	9e e4       	ldi	r25, 0x4E	; 78
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <LcdInit+0x18>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LcdInit+0x1e>
     4b0:	00 00       	nop
     4b2:	80 e3       	ldi	r24, 0x30	; 48
     4b4:	b8 df       	rcall	.-144    	; 0x426 <write_command>
     4b6:	8f e9       	ldi	r24, 0x9F	; 159
     4b8:	9f e0       	ldi	r25, 0x0F	; 15
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <LcdInit+0x28>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LcdInit+0x2e>
     4c0:	00 00       	nop
     4c2:	82 e3       	ldi	r24, 0x32	; 50
     4c4:	b0 df       	rcall	.-160    	; 0x426 <write_command>
     4c6:	88 e2       	ldi	r24, 0x28	; 40
     4c8:	c1 df       	rcall	.-126    	; 0x44c <LcdCommand>
     4ca:	88 e0       	ldi	r24, 0x08	; 8
     4cc:	bf df       	rcall	.-130    	; 0x44c <LcdCommand>
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	bd df       	rcall	.-134    	; 0x44c <LcdCommand>
     4d2:	86 e0       	ldi	r24, 0x06	; 6
     4d4:	bb df       	rcall	.-138    	; 0x44c <LcdCommand>
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	b9 cf       	rjmp	.-142    	; 0x44c <LcdCommand>
     4da:	08 95       	ret

000004dc <LcdPutchar>:
     4dc:	25 e3       	ldi	r18, 0x35	; 53
     4de:	2a 95       	dec	r18
     4e0:	f1 f7       	brne	.-4      	; 0x4de <LcdPutchar+0x2>
     4e2:	00 00       	nop
     4e4:	95 e3       	ldi	r25, 0x35	; 53
     4e6:	9a 95       	dec	r25
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LcdPutchar+0xa>
     4ea:	00 00       	nop
     4ec:	25 e3       	ldi	r18, 0x35	; 53
     4ee:	2a 95       	dec	r18
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <LcdPutchar+0x12>
     4f2:	00 00       	nop
     4f4:	95 e3       	ldi	r25, 0x35	; 53
     4f6:	9a 95       	dec	r25
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <LcdPutchar+0x1a>
     4fa:	00 00       	nop
     4fc:	25 e3       	ldi	r18, 0x35	; 53
     4fe:	2a 95       	dec	r18
     500:	f1 f7       	brne	.-4      	; 0x4fe <LcdPutchar+0x22>
     502:	00 00       	nop
     504:	98 2f       	mov	r25, r24
     506:	90 7f       	andi	r25, 0xF0	; 240
     508:	95 60       	ori	r25, 0x05	; 5
     50a:	95 bb       	out	0x15, r25	; 21
     50c:	9b 7f       	andi	r25, 0xFB	; 251
     50e:	95 bb       	out	0x15, r25	; 21
     510:	20 e1       	ldi	r18, 0x10	; 16
     512:	82 02       	muls	r24, r18
     514:	c0 01       	movw	r24, r0
     516:	11 24       	eor	r1, r1
     518:	85 60       	ori	r24, 0x05	; 5
     51a:	85 bb       	out	0x15, r24	; 21
     51c:	8b 7f       	andi	r24, 0xFB	; 251
     51e:	85 bb       	out	0x15, r24	; 21
     520:	08 95       	ret

00000522 <LcdPuts>:
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
     528:	88 81       	ld	r24, Y
     52a:	88 23       	and	r24, r24
     52c:	29 f0       	breq	.+10     	; 0x538 <LcdPuts+0x16>
     52e:	21 96       	adiw	r28, 0x01	; 1
     530:	d5 df       	rcall	.-86     	; 0x4dc <LcdPutchar>
     532:	89 91       	ld	r24, Y+
     534:	81 11       	cpse	r24, r1
     536:	fc cf       	rjmp	.-8      	; 0x530 <LcdPuts+0xe>
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <LcdMove>:
     53e:	90 e4       	ldi	r25, 0x40	; 64
     540:	89 9f       	mul	r24, r25
     542:	60 0d       	add	r22, r0
     544:	11 24       	eor	r1, r1
     546:	86 2f       	mov	r24, r22
     548:	80 68       	ori	r24, 0x80	; 128
     54a:	80 cf       	rjmp	.-256    	; 0x44c <LcdCommand>
     54c:	08 95       	ret

0000054e <msec_delay>:
}


void msec_delay(int n)
{
	for(; n>0; n--)		//1msec 시간지연 n회	반복
     54e:	18 16       	cp	r1, r24
     550:	19 06       	cpc	r1, r25
     552:	44 f4       	brge	.+16     	; 0x564 <msec_delay+0x16>
     554:	ef e9       	ldi	r30, 0x9F	; 159
     556:	ff e0       	ldi	r31, 0x0F	; 15
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <msec_delay+0xa>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <msec_delay+0x10>
     55e:	00 00       	nop
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	c1 f7       	brne	.-16     	; 0x554 <msec_delay+0x6>
     564:	08 95       	ret

00000566 <ClockCounterInit>:
static int SegmentStopwatchInitFlag = 0;



void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
     566:	85 b5       	in	r24, 0x25	; 37
     568:	88 60       	ori	r24, 0x08	; 8
     56a:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
     56c:	84 e6       	ldi	r24, 0x64	; 100
     56e:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
     570:	80 e8       	ldi	r24, 0x80	; 128
     572:	87 bf       	out	0x37, r24	; 55
     574:	08 95       	ret

00000576 <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	2f 93       	push	r18
     582:	5f 93       	push	r21
     584:	6f 93       	push	r22
     586:	7f 93       	push	r23
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
	ClockCounter_CNT++;
     590:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <ClockCounter_CNT>
     594:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <ClockCounter_CNT+0x1>
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <ClockCounter_CNT+0x1>
     59e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
     5a2:	80 32       	cpi	r24, 0x20	; 32
     5a4:	2e e4       	ldi	r18, 0x4E	; 78
     5a6:	92 07       	cpc	r25, r18
     5a8:	71 f4       	brne	.+28     	; 0x5c6 <__vector_9+0x50>
		ClockCounter_CNT=0;
     5aa:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <ClockCounter_CNT+0x1>
     5ae:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <ClockCounter_CNT>
		ClockCounter_SECOND++;
     5b2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <ClockCounter_SECOND>
     5b6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <ClockCounter_SECOND+0x1>
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <ClockCounter_SECOND+0x1>
     5c0:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <ClockCounter_SECOND>
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <__vector_9+0x5a>
	}
	if(ClockCounter_CNT % 2000 == 0) {
     5c6:	60 ed       	ldi	r22, 0xD0	; 208
     5c8:	77 e0       	ldi	r23, 0x07	; 7
     5ca:	11 d5       	rcall	.+2594   	; 0xfee <__divmodhi4>
     5cc:	89 2b       	or	r24, r25
     5ce:	79 f4       	brne	.+30     	; 0x5ee <__vector_9+0x78>
		ClockCounter_M_SECOND = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <ClockCounter_M_SECOND+0x1>
     5d8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <ClockCounter_M_SECOND>
		ClockCounter_M_SECOND_ONLY_STOPWATCH += 1;
     5dc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
     5e0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     5ea:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
	}
}
     5ee:	bf 91       	pop	r27
     5f0:	af 91       	pop	r26
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	7f 91       	pop	r23
     5f8:	6f 91       	pop	r22
     5fa:	5f 91       	pop	r21
     5fc:	2f 91       	pop	r18
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <main>:

// 현재 메뉴 코드
static int status = 0;

int main(void) {
	LcdInit();
     608:	44 df       	rcall	.-376    	; 0x492 <LcdInit>
	KeyInit();
     60a:	da de       	rcall	.-588    	; 0x3c0 <KeyInit>
	ClockCounterInit();
     60c:	ac df       	rcall	.-168    	; 0x566 <ClockCounterInit>
     60e:	25 d2       	rcall	.+1098   	; 0xa5a <initMenu>
	
	// 박가경's project 
	//startTermProject();
	initMenu();
     610:	78 94       	sei
     612:	85 b5       	in	r24, 0x25	; 37
		
	// 전역 인터럽트 허용
	sei();						
     614:	82 60       	ori	r24, 0x02	; 2
	TCCR2 |= 1<<CS21;
     616:	85 bd       	out	0x25, r24	; 37
     618:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <SegmentStopwatchInitFlag>
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅 second parameter is not display flag 
		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag);
     61c:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <SegmentStopwatchInitFlag+0x1>
     620:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <ClockCounter_SECOND>
     624:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <ClockCounter_SECOND+0x1>
     628:	5b d0       	rcall	.+182    	; 0x6e0 <setClock>
     62a:	d1 de       	rcall	.-606    	; 0x3ce <KeyInput>
		// keypad input
		keyInput = KeyInput();
     62c:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <keyInput>
     630:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <SegmentTimerInitFlag>

		if(SegmentTimerInitFlag == 1) {
     634:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <SegmentTimerInitFlag+0x1>
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	49 f4       	brne	.+18     	; 0x64e <main+0x46>
     63c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <ClockCounter_M_SECOND>
			SegmentTimerInitFlag = set7SegmentTimer(ClockCounter_M_SECOND);
     640:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <ClockCounter_M_SECOND+0x1>
     644:	9e d4       	rcall	.+2364   	; 0xf82 <set7SegmentTimer>
     646:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <SegmentTimerInitFlag+0x1>
     64a:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <SegmentTimerInitFlag>
     64e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <SegmentStopwatchInitFlag>
		}
		
		if(SegmentStopwatchInitFlag == 1) {
     652:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <SegmentStopwatchInitFlag+0x1>
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	59 f4       	brne	.+22     	; 0x670 <main+0x68>
     65a:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <keyInput>
			SegmentStopwatchInitFlag = set7SegmentStopwatch(ClockCounter_M_SECOND, keyInput);
     65e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <ClockCounter_M_SECOND>
     662:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <ClockCounter_M_SECOND+0x1>
     666:	fd d2       	rcall	.+1530   	; 0xc62 <set7SegmentStopwatch>
     668:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <SegmentStopwatchInitFlag+0x1>
     66c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <SegmentStopwatchInitFlag>
     670:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <ClockCounter_SECOND+0x1>
			//continue;
		}
		
		// 무조건 1초 혹은 0.1초로 계산되게 하기위함
		ClockCounter_SECOND = 0;
     674:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <ClockCounter_SECOND>
     678:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <ClockCounter_M_SECOND+0x1>
		ClockCounter_M_SECOND = 0;
     67c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <ClockCounter_M_SECOND>
     680:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <keyInput>
		
		// 뭘 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
     684:	f7 d1       	rcall	.+1006   	; 0xa74 <setMenu>
     686:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <status+0x1>
     68a:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <status>
     68e:	01 97       	sbiw	r24, 0x01	; 1

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     690:	39 f4       	brne	.+14     	; 0x6a0 <main+0x98>
     692:	9e d0       	rcall	.+316    	; 0x7d0 <setCustomClock>
			status = setCustomClock();	// Time setting(main.c 파일 안에 있음)	
     694:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <status+0x1>
     698:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <status>
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	c9 f3       	breq	.-14     	; 0x692 <main+0x8a>
		// 뭘 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     6a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <status>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     6a4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <status+0x1>
     6a8:	02 97       	sbiw	r24, 0x02	; 2
     6aa:	49 f4       	brne	.+18     	; 0x6be <main+0xb6>
     6ac:	81 ec       	ldi	r24, 0xC1	; 193
			status = setTimer(&SegmentTimerInitFlag);
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	fd d2       	rcall	.+1530   	; 0xcac <setTimer>
     6b2:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <status+0x1>
     6b6:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <status>
     6ba:	02 97       	sbiw	r24, 0x02	; 2
     6bc:	b9 f3       	breq	.-18     	; 0x6ac <main+0xa4>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     6be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <status>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     6c2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <status+0x1>
     6c6:	03 97       	sbiw	r24, 0x03	; 3
     6c8:	09 f0       	breq	.+2      	; 0x6cc <main+0xc4>
     6ca:	a6 cf       	rjmp	.-180    	; 0x618 <main+0x10>
     6cc:	8f eb       	ldi	r24, 0xBF	; 191
			status = setStopwatch(&SegmentStopwatchInitFlag);
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	82 d2       	rcall	.+1284   	; 0xbd6 <setStopwatch>
     6d2:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <status+0x1>
     6d6:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <status>
     6da:	03 97       	sbiw	r24, 0x03	; 3
     6dc:	b9 f3       	breq	.-18     	; 0x6cc <main+0xc4>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     6de:	9c cf       	rjmp	.-200    	; 0x618 <main+0x10>

000006e0 <setClock>:
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
static int minute = 0;
static int hour = 0;


void setClock(int interruptSecond, int segmentStopwatchInitFlag) {
	second += interruptSecond;
     6e4:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <second>
     6e8:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <second+0x1>
     6ec:	82 0f       	add	r24, r18
     6ee:	93 1f       	adc	r25, r19
	minute += second/60; 
     6f0:	2c e3       	ldi	r18, 0x3C	; 60
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	b9 01       	movw	r22, r18
     6f6:	7b d4       	rcall	.+2294   	; 0xfee <__divmodhi4>
     6f8:	fc 01       	movw	r30, r24
     6fa:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <minute>
     6fe:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <minute+0x1>
     702:	86 0f       	add	r24, r22
     704:	97 1f       	adc	r25, r23
	hour += minute/60;
     706:	b9 01       	movw	r22, r18
     708:	72 d4       	rcall	.+2276   	; 0xfee <__divmodhi4>
     70a:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <hour>
     70e:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <hour+0x1>
     712:	62 0f       	add	r22, r18
     714:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
     716:	f0 93 d1 01 	sts	0x01D1, r31	; 0x8001d1 <second+0x1>
     71a:	e0 93 d0 01 	sts	0x01D0, r30	; 0x8001d0 <second>
	minute = minute%60;
     71e:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <minute+0x1>
     722:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <minute>
	hour = hour%24;
     726:	cb 01       	movw	r24, r22
     728:	68 e1       	ldi	r22, 0x18	; 24
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	60 d4       	rcall	.+2240   	; 0xfee <__divmodhi4>
     72e:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <hour+0x1>
     732:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <hour>
	// STOPWATCH에서 LCD 사용중인 경우 미노출
	
		LcdMove(0,0);
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	01 df       	rcall	.-510    	; 0x53e <LcdMove>
     73c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <hour>
		LcdPutchar((hour/10%10) + '0');
     740:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <hour+0x1>
     744:	ca e0       	ldi	r28, 0x0A	; 10
     746:	d0 e0       	ldi	r29, 0x00	; 0
     748:	be 01       	movw	r22, r28
     74a:	51 d4       	rcall	.+2210   	; 0xfee <__divmodhi4>
     74c:	cb 01       	movw	r24, r22
     74e:	be 01       	movw	r22, r28
     750:	4e d4       	rcall	.+2204   	; 0xfee <__divmodhi4>
     752:	80 5d       	subi	r24, 0xD0	; 208
     754:	c3 de       	rcall	.-634    	; 0x4dc <LcdPutchar>
     756:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <hour>
		LcdPutchar(hour%10 + '0');
     75a:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <hour+0x1>
     75e:	be 01       	movw	r22, r28
     760:	46 d4       	rcall	.+2188   	; 0xfee <__divmodhi4>
     762:	80 5d       	subi	r24, 0xD0	; 208
     764:	bb de       	rcall	.-650    	; 0x4dc <LcdPutchar>
		LcdPutchar('h');
     766:	88 e6       	ldi	r24, 0x68	; 104
     768:	b9 de       	rcall	.-654    	; 0x4dc <LcdPutchar>
		
		LcdMove(0,4);
     76a:	64 e0       	ldi	r22, 0x04	; 4
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	e7 de       	rcall	.-562    	; 0x53e <LcdMove>
		LcdPutchar((minute/10%10) + '0');
     770:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <minute>
     774:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <minute+0x1>
     778:	be 01       	movw	r22, r28
     77a:	39 d4       	rcall	.+2162   	; 0xfee <__divmodhi4>
     77c:	cb 01       	movw	r24, r22
     77e:	be 01       	movw	r22, r28
     780:	36 d4       	rcall	.+2156   	; 0xfee <__divmodhi4>
     782:	80 5d       	subi	r24, 0xD0	; 208
     784:	ab de       	rcall	.-682    	; 0x4dc <LcdPutchar>
		LcdPutchar(minute%10 + '0');
     786:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <minute>
     78a:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <minute+0x1>
     78e:	be 01       	movw	r22, r28
     790:	2e d4       	rcall	.+2140   	; 0xfee <__divmodhi4>
     792:	80 5d       	subi	r24, 0xD0	; 208
     794:	a3 de       	rcall	.-698    	; 0x4dc <LcdPutchar>
		LcdPutchar('m');
     796:	8d e6       	ldi	r24, 0x6D	; 109
     798:	a1 de       	rcall	.-702    	; 0x4dc <LcdPutchar>
     79a:	68 e0       	ldi	r22, 0x08	; 8
		
		LcdMove(0,8);
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	cf de       	rcall	.-610    	; 0x53e <LcdMove>
     7a0:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <second>
		LcdPutchar((second/10%10) + '0');
     7a4:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <second+0x1>
     7a8:	be 01       	movw	r22, r28
     7aa:	21 d4       	rcall	.+2114   	; 0xfee <__divmodhi4>
     7ac:	cb 01       	movw	r24, r22
     7ae:	be 01       	movw	r22, r28
     7b0:	1e d4       	rcall	.+2108   	; 0xfee <__divmodhi4>
     7b2:	80 5d       	subi	r24, 0xD0	; 208
     7b4:	93 de       	rcall	.-730    	; 0x4dc <LcdPutchar>
     7b6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <second>
		LcdPutchar(second%10 + '0');
     7ba:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <second+0x1>
     7be:	be 01       	movw	r22, r28
     7c0:	16 d4       	rcall	.+2092   	; 0xfee <__divmodhi4>
     7c2:	80 5d       	subi	r24, 0xD0	; 208
     7c4:	8b de       	rcall	.-746    	; 0x4dc <LcdPutchar>
     7c6:	83 e7       	ldi	r24, 0x73	; 115
     7c8:	89 de       	rcall	.-750    	; 0x4dc <LcdPutchar>
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
		LcdPutchar('s');
     7ce:	08 95       	ret

000007d0 <setCustomClock>:
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
	
}
     7d4:	cf 93       	push	r28
     7d6:	8c 01       	movw	r16, r24
     7d8:	fa dd       	rcall	.-1036   	; 0x3ce <KeyInput>
int setCustomClock(int* ClockCounter_SECOND) {
	// -1 : 숫자가 눌린 경우(전) , 0: 선택이 눌린 경우, 1: 숫자가 눌린 경우(후), 위로 눌린 경우
	int returnStatus = -1;
	// 키를 입력받는 변수
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
     7da:	c8 2f       	mov	r28, r24
	
	LcdMove(1,customClockSettingIndex);
     7dc:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <customClockSettingIndex>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	ad de       	rcall	.-678    	; 0x53e <LcdMove>
	while(1) {
		if(customClockSetInitFlag == 0){
     7e4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <customClockSetInitFlag>
     7e8:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <customClockSetInitFlag+0x1>
     7ec:	89 2b       	or	r24, r25
     7ee:	79 f4       	brne	.+30     	; 0x80e <setCustomClock+0x3e>
			LcdMove(1,0);
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	a4 de       	rcall	.-696    	; 0x53e <LcdMove>
			LcdPuts("______");
     7f6:	8a e6       	ldi	r24, 0x6A	; 106
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	93 de       	rcall	.-730    	; 0x522 <LcdPuts>
			LcdMove(1,0);
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	9e de       	rcall	.-708    	; 0x53e <LcdMove>
     802:	81 e0       	ldi	r24, 0x01	; 1
			customClockSetInitFlag = 1;
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <customClockSetInitFlag+0x1>
     80a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <customClockSetInitFlag>
		}
		
		if(keyInput == NO_KEY){
     80e:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
     810:	0d c0       	rjmp	.+26     	; 0x82c <setCustomClock+0x5c>
     812:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
     814:	1b de       	rcall	.-970    	; 0x44c <LcdCommand>
     816:	84 ef       	ldi	r24, 0xF4	; 244
     818:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
     81a:	99 de       	rcall	.-718    	; 0x54e <msec_delay>
     81c:	8c e0       	ldi	r24, 0x0C	; 12
     81e:	16 de       	rcall	.-980    	; 0x44c <LcdCommand>
			msec_delay(500);
     820:	84 ef       	ldi	r24, 0xF4	; 244
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	94 de       	rcall	.-728    	; 0x54e <msec_delay>
     826:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	13 c1       	rjmp	.+550    	; 0xa52 <setCustomClock+0x282>
     82c:	8c 2f       	mov	r24, r28
		}
		
		switch(keyInput) {
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	fc 01       	movw	r30, r24
     832:	71 97       	sbiw	r30, 0x11	; 17
     834:	e4 37       	cpi	r30, 0x74	; 116
     836:	f1 05       	cpc	r31, r1
     838:	08 f0       	brcs	.+2      	; 0x83c <setCustomClock+0x6c>
     83a:	fd c0       	rjmp	.+506    	; 0xa36 <setCustomClock+0x266>
     83c:	ea 5b       	subi	r30, 0xBA	; 186
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	e9 c3       	rjmp	.+2002   	; 0x1014 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     842:	81 e3       	ldi	r24, 0x31	; 49
     844:	4b de       	rcall	.-874    	; 0x4dc <LcdPutchar>
     846:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 1;
     84a:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	ec 52       	subi	r30, 0x2C	; 44
     854:	fe 4f       	sbci	r31, 0xFE	; 254
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24
				break;
     85e:	ee c0       	rjmp	.+476    	; 0xa3c <setCustomClock+0x26c>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
     860:	82 e3       	ldi	r24, 0x32	; 50
     862:	3c de       	rcall	.-904    	; 0x4dc <LcdPutchar>
     864:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 2;
     868:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     86c:	ee 0f       	add	r30, r30
     86e:	ff 1f       	adc	r31, r31
     870:	ec 52       	subi	r30, 0x2C	; 44
     872:	fe 4f       	sbci	r31, 0xFE	; 254
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	91 83       	std	Z+1, r25	; 0x01
     87a:	80 83       	st	Z, r24
				break;
     87c:	df c0       	rjmp	.+446    	; 0xa3c <setCustomClock+0x26c>
			
			case SW2:
				LcdPutchar('3');
     87e:	83 e3       	ldi	r24, 0x33	; 51
     880:	2d de       	rcall	.-934    	; 0x4dc <LcdPutchar>
     882:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 3;
     886:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	ec 52       	subi	r30, 0x2C	; 44
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	91 83       	std	Z+1, r25	; 0x01
     898:	80 83       	st	Z, r24
				break;
     89a:	d0 c0       	rjmp	.+416    	; 0xa3c <setCustomClock+0x26c>
			
			case SW4:
				LcdPutchar('4');
     89c:	84 e3       	ldi	r24, 0x34	; 52
     89e:	1e de       	rcall	.-964    	; 0x4dc <LcdPutchar>
     8a0:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 4;
     8a4:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	ec 52       	subi	r30, 0x2C	; 44
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	91 83       	std	Z+1, r25	; 0x01
     8b6:	80 83       	st	Z, r24
				break;
     8b8:	c1 c0       	rjmp	.+386    	; 0xa3c <setCustomClock+0x26c>
			
			case SW5:
				LcdPutchar('5');
     8ba:	85 e3       	ldi	r24, 0x35	; 53
     8bc:	0f de       	rcall	.-994    	; 0x4dc <LcdPutchar>
				customClock[customClockSettingIndex] = 5;
     8be:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
     8c2:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	ec 52       	subi	r30, 0x2C	; 44
     8cc:	fe 4f       	sbci	r31, 0xFE	; 254
     8ce:	85 e0       	ldi	r24, 0x05	; 5
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
				break;
     8d6:	b2 c0       	rjmp	.+356    	; 0xa3c <setCustomClock+0x26c>
			
			case SW6:
				LcdPutchar('6');
     8d8:	86 e3       	ldi	r24, 0x36	; 54
     8da:	00 de       	rcall	.-1024   	; 0x4dc <LcdPutchar>
				customClock[customClockSettingIndex] = 6;
     8dc:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
     8e0:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	ec 52       	subi	r30, 0x2C	; 44
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	86 e0       	ldi	r24, 0x06	; 6
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	80 83       	st	Z, r24
				break;
     8f4:	a3 c0       	rjmp	.+326    	; 0xa3c <setCustomClock+0x26c>
			
			case SW8:
				LcdPutchar('7');
     8f6:	87 e3       	ldi	r24, 0x37	; 55
     8f8:	f1 dd       	rcall	.-1054   	; 0x4dc <LcdPutchar>
				customClock[customClockSettingIndex] = 7;
     8fa:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
     8fe:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	ec 52       	subi	r30, 0x2C	; 44
     908:	fe 4f       	sbci	r31, 0xFE	; 254
     90a:	87 e0       	ldi	r24, 0x07	; 7
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24
				break;
			
			case SW9:
				LcdPutchar('8');
     912:	94 c0       	rjmp	.+296    	; 0xa3c <setCustomClock+0x26c>
     914:	88 e3       	ldi	r24, 0x38	; 56
     916:	e2 dd       	rcall	.-1084   	; 0x4dc <LcdPutchar>
				customClock[customClockSettingIndex] = 8;
     918:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
     91c:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     920:	ee 0f       	add	r30, r30
     922:	ff 1f       	adc	r31, r31
     924:	ec 52       	subi	r30, 0x2C	; 44
     926:	fe 4f       	sbci	r31, 0xFE	; 254
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	91 83       	std	Z+1, r25	; 0x01
				break;
     92e:	80 83       	st	Z, r24
			
			case SW10:
				LcdPutchar('9');
     930:	85 c0       	rjmp	.+266    	; 0xa3c <setCustomClock+0x26c>
     932:	89 e3       	ldi	r24, 0x39	; 57
     934:	d3 dd       	rcall	.-1114   	; 0x4dc <LcdPutchar>
				customClock[customClockSettingIndex] = 9;
     936:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
     93a:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	ec 52       	subi	r30, 0x2C	; 44
     944:	fe 4f       	sbci	r31, 0xFE	; 254
     946:	89 e0       	ldi	r24, 0x09	; 9
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	91 83       	std	Z+1, r25	; 0x01
				break;
			
			case SW13:
				LcdPutchar('0');
     94c:	80 83       	st	Z, r24
     94e:	76 c0       	rjmp	.+236    	; 0xa3c <setCustomClock+0x26c>
     950:	80 e3       	ldi	r24, 0x30	; 48
				customClock[customClockSettingIndex] = 0;
     952:	c4 dd       	rcall	.-1144   	; 0x4dc <LcdPutchar>
     954:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <customClockSettingIndex>
     958:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	ec 52       	subi	r30, 0x2C	; 44
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	11 82       	std	Z+1, r1	; 0x01
				break;
     966:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
     968:	69 c0       	rjmp	.+210    	; 0xa3c <setCustomClock+0x26c>
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	e7 dd       	rcall	.-1074   	; 0x53e <LcdMove>
				LcdPuts("1. SET          ");				
     970:	81 e7       	ldi	r24, 0x71	; 113
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	d6 dd       	rcall	.-1108   	; 0x522 <LcdPuts>
     976:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <customClockSettingIndex+0x1>
			customClockSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			customClockSettingIndex = 0;
     97a:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <customClockSettingIndex>
     97e:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
     980:	11 82       	std	Z+1, r1	; 0x01
     982:	10 82       	st	Z, r1
     984:	e4 ed       	ldi	r30, 0xD4	; 212
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customClock[0] * 10 + customClock[1];
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	80 81       	ld	r24, Z
     98a:	91 81       	ldd	r25, Z+1	; 0x01
     98c:	9c 01       	movw	r18, r24
     98e:	22 0f       	add	r18, r18
     990:	33 1f       	adc	r19, r19
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	82 0f       	add	r24, r18
     9a0:	93 1f       	adc	r25, r19
     9a2:	22 81       	ldd	r18, Z+2	; 0x02
     9a4:	33 81       	ldd	r19, Z+3	; 0x03
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <hour+0x1>
     9ae:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <hour>
     9b2:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customClock[2] * 10 + customClock[3];
     9b4:	95 81       	ldd	r25, Z+5	; 0x05
     9b6:	9c 01       	movw	r18, r24
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	26 81       	ldd	r18, Z+6	; 0x06
     9ce:	37 81       	ldd	r19, Z+7	; 0x07
     9d0:	82 0f       	add	r24, r18
     9d2:	93 1f       	adc	r25, r19
     9d4:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <minute+0x1>
     9d8:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <minute>
     9dc:	80 85       	ldd	r24, Z+8	; 0x08
			second = customClock[4] * 10 + customClock[5];
     9de:	91 85       	ldd	r25, Z+9	; 0x09
     9e0:	9c 01       	movw	r18, r24
     9e2:	22 0f       	add	r18, r18
     9e4:	33 1f       	adc	r19, r19
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	82 0f       	add	r24, r18
     9f4:	93 1f       	adc	r25, r19
     9f6:	22 85       	ldd	r18, Z+10	; 0x0a
     9f8:	33 85       	ldd	r19, Z+11	; 0x0b
     9fa:	82 0f       	add	r24, r18
     9fc:	93 1f       	adc	r25, r19
     9fe:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <second+0x1>
     a02:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <second>
			customClockSetInitFlag = 0;
     a06:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <customClockSetInitFlag+0x1>
     a0a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <customClockSetInitFlag>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --customClockSettingIndex);
     a12:	1f c0       	rjmp	.+62     	; 0xa52 <setCustomClock+0x282>
     a14:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <customClockSettingIndex>
     a18:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     a1c:	61 50       	subi	r22, 0x01	; 1
     a1e:	71 09       	sbc	r23, r1
     a20:	70 93 e1 01 	sts	0x01E1, r23	; 0x8001e1 <customClockSettingIndex+0x1>
     a24:	60 93 e0 01 	sts	0x01E0, r22	; 0x8001e0 <customClockSettingIndex>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	89 dd       	rcall	.-1262   	; 0x53e <LcdMove>
				LcdPutchar('_');
     a2c:	8f e5       	ldi	r24, 0x5F	; 95
     a2e:	56 dd       	rcall	.-1364   	; 0x4dc <LcdPutchar>
     a30:	81 e0       	ldi	r24, 0x01	; 1
				returnStatus = 1;
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <setCustomClock+0x282>
     a36:	81 e0       	ldi	r24, 0x01	; 1
				break;
				
			default:
				returnStatus = 1;
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <setCustomClock+0x282>
     a3c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <customClockSettingIndex>
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			customClockSettingIndex++;
     a40:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <customClockSettingIndex+0x1>
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <customClockSettingIndex+0x1>
     a4a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <customClockSettingIndex>
     a4e:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 1;
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	cf 91       	pop	r28
			customClockSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <initMenu>:
static char str1[] = "00h 00m 00s";
static int nowMenuCursor = 0;
static int nowStatus = 1;

void initMenu() {
	LcdMove(0,0);
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	6f dd       	rcall	.-1314   	; 0x53e <LcdMove>
	LcdPuts(str1);
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	5e dd       	rcall	.-1348   	; 0x522 <LcdPuts>
	LcdMove(1,0);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	69 dd       	rcall	.-1326   	; 0x53e <LcdMove>
	LcdPuts(Set);
     a6c:	89 e4       	ldi	r24, 0x49	; 73
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	58 cd       	rjmp	.-1360   	; 0x522 <LcdPuts>
     a72:	08 95       	ret

00000a74 <setMenu>:
     a74:	cf 93       	push	r28
}



// MENU 세팅용 함수
int setMenu(char clickedButton) {
     a76:	df 93       	push	r29
     a78:	c8 2f       	mov	r28, r24
	LcdMove(1,0);			// 2행으로
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	5f dd       	rcall	.-1346   	; 0x53e <LcdMove>
	switch(clickedButton) {
     a80:	c1 32       	cpi	r28, 0x21	; 33
     a82:	09 f4       	brne	.+2      	; 0xa86 <setMenu+0x12>
     a84:	52 c0       	rjmp	.+164    	; 0xb2a <setMenu+0xb6>
     a86:	c1 34       	cpi	r28, 0x41	; 65
     a88:	09 f4       	brne	.+2      	; 0xa8c <setMenu+0x18>
     a8a:	9a c0       	rjmp	.+308    	; 0xbc0 <setMenu+0x14c>
     a8c:	c1 31       	cpi	r28, 0x11	; 17
     a8e:	09 f0       	breq	.+2      	; 0xa92 <setMenu+0x1e>
     a90:	9c c0       	rjmp	.+312    	; 0xbca <setMenu+0x156>
		// up button clicked
		case SW3:
			if ( nowMenuCursor == 1) {
     a92:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <nowMenuCursor>
     a96:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <nowMenuCursor+0x1>
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	91 05       	cpc	r25, r1
     a9e:	81 f4       	brne	.+32     	; 0xac0 <setMenu+0x4c>
				nowMenuCursor--;
     aa0:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <nowMenuCursor+0x1>
     aa4:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <nowMenuCursor>
				LcdPuts(Set);
     aa8:	89 e4       	ldi	r24, 0x49	; 73
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	3a dd       	rcall	.-1420   	; 0x522 <LcdPuts>
				nowStatus = 1;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     ab6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     aba:	c0 e0       	ldi	r28, 0x00	; 0
     abc:	d0 e0       	ldi	r29, 0x00	; 0
     abe:	87 c0       	rjmp	.+270    	; 0xbce <setMenu+0x15a>
			if ( nowMenuCursor == 1) {
				nowMenuCursor--;
				LcdPuts(Set);
				nowStatus = 1;
			}
			else if ( nowMenuCursor == 2) {
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	91 05       	cpc	r25, r1
     ac4:	91 f4       	brne	.+36     	; 0xaea <setMenu+0x76>
				nowMenuCursor--;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <nowMenuCursor+0x1>
     ace:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <nowMenuCursor>
				LcdPuts(Timer);
     ad2:	87 e3       	ldi	r24, 0x37	; 55
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	25 dd       	rcall	.-1462   	; 0x522 <LcdPuts>
				nowStatus = 2;
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     ae0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     ae4:	c0 e0       	ldi	r28, 0x00	; 0
     ae6:	d0 e0       	ldi	r29, 0x00	; 0
     ae8:	72 c0       	rjmp	.+228    	; 0xbce <setMenu+0x15a>
			else if ( nowMenuCursor == 2) {
				nowMenuCursor--;
				LcdPuts(Timer);
				nowStatus = 2;
			}
			else if ( nowMenuCursor == 3) {
     aea:	03 97       	sbiw	r24, 0x03	; 3
     aec:	91 f4       	brne	.+36     	; 0xb12 <setMenu+0x9e>
				nowMenuCursor--;
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <nowMenuCursor+0x1>
     af6:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <nowMenuCursor>
				LcdPuts(StopWatch);
     afa:	87 e2       	ldi	r24, 0x27	; 39
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	11 dd       	rcall	.-1502   	; 0x522 <LcdPuts>
				nowStatus = 3;
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b08:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor--;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else{
				LcdPuts(Set);
     b10:	5e c0       	rjmp	.+188    	; 0xbce <setMenu+0x15a>
     b12:	89 e4       	ldi	r24, 0x49	; 73
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	05 dd       	rcall	.-1526   	; 0x522 <LcdPuts>
				nowStatus = 1;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b20:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			return 0;
     b24:	c0 e0       	ldi	r28, 0x00	; 0
     b26:	d0 e0       	ldi	r29, 0x00	; 0
     b28:	52 c0       	rjmp	.+164    	; 0xbce <setMenu+0x15a>
			break;
		
		
		// down button clicked
		case SW7:
			if ( nowMenuCursor == 0) {
     b2a:	c0 91 e2 01 	lds	r28, 0x01E2	; 0x8001e2 <nowMenuCursor>
     b2e:	d0 91 e3 01 	lds	r29, 0x01E3	; 0x8001e3 <nowMenuCursor+0x1>
     b32:	20 97       	sbiw	r28, 0x00	; 0
     b34:	81 f4       	brne	.+32     	; 0xb56 <setMenu+0xe2>
				nowMenuCursor++;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <nowMenuCursor+0x1>
     b3e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <nowMenuCursor>
				LcdPuts(Timer);
     b42:	87 e3       	ldi	r24, 0x37	; 55
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	ed dc       	rcall	.-1574   	; 0x522 <LcdPuts>
				nowStatus = 2;
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b50:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
     b54:	3c c0       	rjmp	.+120    	; 0xbce <setMenu+0x15a>
			}
			else if ( nowMenuCursor == 1) {
     b56:	c1 30       	cpi	r28, 0x01	; 1
     b58:	d1 05       	cpc	r29, r1
     b5a:	91 f4       	brne	.+36     	; 0xb80 <setMenu+0x10c>
				nowMenuCursor++;
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <nowMenuCursor+0x1>
     b64:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <nowMenuCursor>
				LcdPuts(StopWatch);
     b68:	87 e2       	ldi	r24, 0x27	; 39
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	da dc       	rcall	.-1612   	; 0x522 <LcdPuts>
				nowStatus = 3;
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b76:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	27 c0       	rjmp	.+78     	; 0xbce <setMenu+0x15a>
			else if ( nowMenuCursor == 1) {
				nowMenuCursor++;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else if ( nowMenuCursor == 2) {
     b80:	22 97       	sbiw	r28, 0x02	; 2
     b82:	91 f4       	brne	.+36     	; 0xba8 <setMenu+0x134>
				nowMenuCursor++;
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <nowMenuCursor+0x1>
     b8c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <nowMenuCursor>
				LcdPuts(Alarm);
     b90:	84 e1       	ldi	r24, 0x14	; 20
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	c6 dc       	rcall	.-1652   	; 0x522 <LcdPuts>
				nowStatus = 4;
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     b9e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
     ba2:	c0 e0       	ldi	r28, 0x00	; 0
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor++;
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			else{
				LcdPuts(Alarm);
     ba6:	13 c0       	rjmp	.+38     	; 0xbce <setMenu+0x15a>
     ba8:	84 e1       	ldi	r24, 0x14	; 20
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	ba dc       	rcall	.-1676   	; 0x522 <LcdPuts>
				nowStatus = 4;
     bae:	84 e0       	ldi	r24, 0x04	; 4
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nowStatus+0x1>
     bb6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nowStatus>
			}
			return 0;
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
     bbe:	07 c0       	rjmp	.+14     	; 0xbce <setMenu+0x15a>
			break;
		
		
		// When select button clicked, 메인파일의 각 status에 해당하는 기능을 위한 while문을 돌림
		case SW11:
			return nowStatus;
     bc0:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <nowStatus>
     bc4:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <nowStatus+0x1>
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <setMenu+0x15a>
			break;
		
		default:
			return 0;
     bca:	c0 e0       	ldi	r28, 0x00	; 0
     bcc:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
     bce:	ce 01       	movw	r24, r28
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <setStopwatch>:
// stopwatch 기능 선택시 초기 화면 세팅용 플래그 ; 0이면 초기 진입
static int customStopwatchSetInitFlag = 0;

static int lcdIndx = 0;

int setStopwatch(int* stopwatchInitFlag) {
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	8c 01       	movw	r16, r24
	int returnStatus = -1;
	// 처음 진입시에만 실행
	if(customStopwatchSetInitFlag == 0) {
     bde:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <customStopwatchSetInitFlag>
     be2:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <customStopwatchSetInitFlag+0x1>
     be6:	89 2b       	or	r24, r25
     be8:	71 f4       	brne	.+28     	; 0xc06 <setStopwatch+0x30>
		ISeg7Init();
     bea:	56 db       	rcall	.-2388   	; 0x298 <ISeg7Init>
		ISeg7DispNum(segmentStopwatchDisplayNumber , 10);
     bec:	6a e0       	ldi	r22, 0x0A	; 10
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <segmentStopwatchDisplayNumber>
     bf4:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <segmentStopwatchDisplayNumber+0x1>
     bf8:	62 db       	rcall	.-2364   	; 0x2be <ISeg7DispNum>
		// 초기화면 세팅
		LcdMove(0,0);
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	9f dc       	rcall	.-1730   	; 0x53e <LcdMove>
		LcdPuts("0m 00.0s     ");
     c00:	82 e8       	ldi	r24, 0x82	; 130
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	8e dc       	rcall	.-1764   	; 0x522 <LcdPuts>
     c06:	81 e0       	ldi	r24, 0x01	; 1
	}
	customStopwatchSetInitFlag = 1;
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <customStopwatchSetInitFlag+0x1>
     c0e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <customStopwatchSetInitFlag>

	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
     c12:	dd db       	rcall	.-2118   	; 0x3ce <KeyInput>
     c14:	c8 2f       	mov	r28, r24
     c16:	6a e0       	ldi	r22, 0x0A	; 10
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <segmentStopwatchDisplayNumber>
     c1e:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <segmentStopwatchDisplayNumber+0x1>
     c22:	4d db       	rcall	.-2406   	; 0x2be <ISeg7DispNum>
     c24:	c1 34       	cpi	r28, 0x41	; 65
	while(1) {
		switch(keyInput) {
     c26:	b9 f4       	brne	.+46     	; 0xc56 <setStopwatch+0x80>
     c28:	81 e0       	ldi	r24, 0x01	; 1
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	f8 01       	movw	r30, r16
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	80 83       	st	Z, r24
				returnStatus = 0;
				LcdMove(0,0);
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	83 dc       	rcall	.-1786   	; 0x53e <LcdMove>
				LcdPuts("              ");
     c38:	8a ea       	ldi	r24, 0xAA	; 170
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	72 dc       	rcall	.-1820   	; 0x522 <LcdPuts>
				
				LcdMove(1,0);
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	7d dc       	rcall	.-1798   	; 0x53e <LcdMove>
				LcdPuts("              ");
     c44:	8a ea       	ldi	r24, 0xAA	; 170
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	6c dc       	rcall	.-1832   	; 0x522 <LcdPuts>
     c4a:	60 e0       	ldi	r22, 0x00	; 0
				
				LcdMove(0,0);
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	77 dc       	rcall	.-1810   	; 0x53e <LcdMove>
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
				returnStatus = 0;
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <setStopwatch+0x84>
     c56:	83 e0       	ldi	r24, 0x03	; 3
				
				LcdMove(1,0);
				LcdPuts("              ");
				
				LcdMove(0,0);
				break;
     c58:	90 e0       	ldi	r25, 0x00	; 0
			
			default:
				returnStatus = 3;
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
		if(returnStatus == 0) {
			
		}
		return returnStatus;
	}
}
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <set7SegmentStopwatch>:
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17

int set7SegmentStopwatch(int clock_counter, unsigned char stopwatchKeyInput) {
     c66:	cf 93       	push	r28
     c68:	8c 01       	movw	r16, r24
     c6a:	c6 2f       	mov	r28, r22
	ISeg7Init();
     c6c:	15 db       	rcall	.-2518   	; 0x298 <ISeg7Init>
	int nowStopwatchDisplayNumber = segmentStopwatchDisplayNumber + clock_counter;
     c6e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <segmentStopwatchDisplayNumber>
     c72:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <segmentStopwatchDisplayNumber+0x1>
     c76:	80 0f       	add	r24, r16
     c78:	91 1f       	adc	r25, r17
	segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
     c7a:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <segmentStopwatchDisplayNumber+0x1>
     c7e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <segmentStopwatchDisplayNumber>
	ISeg7DispNum(nowStopwatchDisplayNumber , 10);
     c82:	6a e0       	ldi	r22, 0x0A	; 10
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	1b db       	rcall	.-2506   	; 0x2be <ISeg7DispNum>
	
	
	switch(stopwatchKeyInput) {
     c88:	c1 31       	cpi	r28, 0x11	; 17
     c8a:	19 f0       	breq	.+6      	; 0xc92 <set7SegmentStopwatch+0x30>
     c8c:	c1 32       	cpi	r28, 0x21	; 33
     c8e:	29 f0       	breq	.+10     	; 0xc9a <set7SegmentStopwatch+0x38>
     c90:	07 c0       	rjmp	.+14     	; 0xca0 <set7SegmentStopwatch+0x3e>
		case SW3:
			LcdPuts("TEST UP");
     c92:	80 e9       	ldi	r24, 0x90	; 144
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	45 dc       	rcall	.-1910   	; 0x522 <LcdPuts>
			break;
			
		case SW7:
			LcdPuts("TEST DOWN");
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <set7SegmentStopwatch+0x3e>
     c9a:	88 e9       	ldi	r24, 0x98	; 152
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	41 dc       	rcall	.-1918   	; 0x522 <LcdPuts>
			break;
	}
	return 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <setTimer>:
static int m_second = 0;

// 7세그먼트 출력용 숫자
unsigned short segmentDisplayNumber = 0;

int setTimer(int* timerInitFlag) {
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	ec 01       	movw	r28, r24
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customTimerSetInitFlag == 0){
     cb2:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <customTimerSetInitFlag>
     cb6:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <customTimerSetInitFlag+0x1>
     cba:	89 2b       	or	r24, r25
     cbc:	81 f4       	brne	.+32     	; 0xcde <setTimer+0x32>
		// 초기화면 세팅
		LcdMove(0,0);
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	3d dc       	rcall	.-1926   	; 0x53e <LcdMove>
		LcdPuts("0m 00.0s     ");
     cc4:	82 e8       	ldi	r24, 0x82	; 130
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	2c dc       	rcall	.-1960   	; 0x522 <LcdPuts>
		LcdCommand(HOME);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	bf db       	rcall	.-2178   	; 0x44c <LcdCommand>
		LcdCommand(CURSOR_ON);
     cce:	8e e0       	ldi	r24, 0x0E	; 14
     cd0:	bd db       	rcall	.-2182   	; 0x44c <LcdCommand>
     cd2:	81 e0       	ldi	r24, 0x01	; 1
		customTimerSetInitFlag = 1;
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <customTimerSetInitFlag+0x1>
     cda:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <customTimerSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
     cde:	77 db       	rcall	.-2322   	; 0x3ce <KeyInput>
     ce0:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		switch(keyInput) {
     ce2:	fc 01       	movw	r30, r24
     ce4:	71 97       	sbiw	r30, 0x11	; 17
     ce6:	e4 37       	cpi	r30, 0x74	; 116
     ce8:	f1 05       	cpc	r31, r1
     cea:	08 f0       	brcs	.+2      	; 0xcee <setTimer+0x42>
     cec:	45 c1       	rjmp	.+650    	; 0xf78 <setTimer+0x2cc>
     cee:	e6 54       	subi	r30, 0x46	; 70
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	90 c1       	rjmp	.+800    	; 0x1014 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     cf4:	81 e3       	ldi	r24, 0x31	; 49
     cf6:	f2 db       	rcall	.-2076   	; 0x4dc <LcdPutchar>
     cf8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     cfc:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     d06:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
     d0a:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 1;
     d0c:	99 1f       	adc	r25, r25
     d0e:	fc 01       	movw	r30, r24
     d10:	e4 51       	subi	r30, 0x14	; 20
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24
				break;
     d1c:	2d c1       	rjmp	.+602    	; 0xf78 <setTimer+0x2cc>
			
			case SW1:				
				LcdPutchar('2');
     d1e:	82 e3       	ldi	r24, 0x32	; 50
     d20:	dd db       	rcall	.-2118   	; 0x4dc <LcdPutchar>
     d22:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     d26:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     d30:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
     d34:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 2;
     d36:	99 1f       	adc	r25, r25
     d38:	fc 01       	movw	r30, r24
     d3a:	e4 51       	subi	r30, 0x14	; 20
     d3c:	fe 4f       	sbci	r31, 0xFE	; 254
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
				break;
     d46:	18 c1       	rjmp	.+560    	; 0xf78 <setTimer+0x2cc>
			
			case SW2:
				LcdPutchar('3');
     d48:	83 e3       	ldi	r24, 0x33	; 51
     d4a:	c8 db       	rcall	.-2160   	; 0x4dc <LcdPutchar>
     d4c:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     d50:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     d5a:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
     d5e:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 3;
     d60:	99 1f       	adc	r25, r25
     d62:	fc 01       	movw	r30, r24
     d64:	e4 51       	subi	r30, 0x14	; 20
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
				break;
     d70:	03 c1       	rjmp	.+518    	; 0xf78 <setTimer+0x2cc>
			
			case SW4:
				LcdPutchar('4');
     d72:	84 e3       	ldi	r24, 0x34	; 52
     d74:	b3 db       	rcall	.-2202   	; 0x4dc <LcdPutchar>
     d76:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     d7a:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     d84:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
     d88:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 4;
     d8a:	99 1f       	adc	r25, r25
     d8c:	fc 01       	movw	r30, r24
     d8e:	e4 51       	subi	r30, 0x14	; 20
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
				break;
     d9a:	ee c0       	rjmp	.+476    	; 0xf78 <setTimer+0x2cc>
			
			case SW5:
				LcdPutchar('5');
     d9c:	85 e3       	ldi	r24, 0x35	; 53
     d9e:	9e db       	rcall	.-2244   	; 0x4dc <LcdPutchar>
     da0:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     da4:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     dae:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
     db2:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 5;
     db4:	99 1f       	adc	r25, r25
     db6:	fc 01       	movw	r30, r24
     db8:	e4 51       	subi	r30, 0x14	; 20
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	85 e0       	ldi	r24, 0x05	; 5
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
				break;
     dc4:	d9 c0       	rjmp	.+434    	; 0xf78 <setTimer+0x2cc>
			
			case SW6:
				LcdPutchar('6');
     dc6:	86 e3       	ldi	r24, 0x36	; 54
     dc8:	89 db       	rcall	.-2286   	; 0x4dc <LcdPutchar>
     dca:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     dce:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     dd8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 6;
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	fc 01       	movw	r30, r24
     de2:	e4 51       	subi	r30, 0x14	; 20
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	86 e0       	ldi	r24, 0x06	; 6
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
				break;
     dee:	c4 c0       	rjmp	.+392    	; 0xf78 <setTimer+0x2cc>
			
			case SW8:
				LcdPutchar('7');
     df0:	87 e3       	ldi	r24, 0x37	; 55
     df2:	74 db       	rcall	.-2328   	; 0x4dc <LcdPutchar>
     df4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     df8:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     e02:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 7;
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	fc 01       	movw	r30, r24
     e0c:	e4 51       	subi	r30, 0x14	; 20
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	87 e0       	ldi	r24, 0x07	; 7
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
				break;
     e18:	af c0       	rjmp	.+350    	; 0xf78 <setTimer+0x2cc>
			
			case SW9:
				LcdPutchar('8');
     e1a:	88 e3       	ldi	r24, 0x38	; 56
     e1c:	5f db       	rcall	.-2370   	; 0x4dc <LcdPutchar>
     e1e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     e22:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     e2c:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 8;
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	fc 01       	movw	r30, r24
     e36:	e4 51       	subi	r30, 0x14	; 20
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	88 e0       	ldi	r24, 0x08	; 8
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	80 83       	st	Z, r24
				break;
     e42:	9a c0       	rjmp	.+308    	; 0xf78 <setTimer+0x2cc>
			
			case SW10:
				LcdPutchar('9');
     e44:	89 e3       	ldi	r24, 0x39	; 57
     e46:	4a db       	rcall	.-2412   	; 0x4dc <LcdPutchar>
     e48:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     e4c:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     e56:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 9;
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	fc 01       	movw	r30, r24
     e60:	e4 51       	subi	r30, 0x14	; 20
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	89 e0       	ldi	r24, 0x09	; 9
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
				break;
     e6c:	85 c0       	rjmp	.+266    	; 0xf78 <setTimer+0x2cc>
			
			case SW13:
				LcdPutchar('0');
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	35 db       	rcall	.-2454   	; 0x4dc <LcdPutchar>
     e72:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex++;
     e76:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     e80:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	fc 01       	movw	r30, r24
     e8a:	e4 51       	subi	r30, 0x14	; 20
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	11 82       	std	Z+1, r1	; 0x01
     e90:	10 82       	st	Z, r1
				break;
     e92:	72 c0       	rjmp	.+228    	; 0xf78 <setTimer+0x2cc>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
     e94:	80 e1       	ldi	r24, 0x10	; 16
     e96:	da da       	rcall	.-2636   	; 0x44c <LcdCommand>
     e98:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
				customTimerSettingIndex -= 1;
     e9c:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     ea6:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
     eaa:	88 0f       	add	r24, r24
				customTimer[customTimerSettingIndex] = 0;
     eac:	99 1f       	adc	r25, r25
     eae:	fc 01       	movw	r30, r24
     eb0:	e4 51       	subi	r30, 0x14	; 20
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	11 82       	std	Z+1, r1	; 0x01
     eb6:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
     eb8:	5f c0       	rjmp	.+190    	; 0xf78 <setTimer+0x2cc>
				
			// 아래 키 입력되는 케이스
			case SW7:
				customTimerSettingIndex += 1;
     eba:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <customTimerSettingIndex>
     ebe:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <customTimerSettingIndex+0x1>
     ec8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <customTimerSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
     ecc:	84 e1       	ldi	r24, 0x14	; 20
     ece:	be da       	rcall	.-2692   	; 0x44c <LcdCommand>
				customTimer[customTimerSettingIndex] = 0;
     ed0:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <customTimerSettingIndex>
     ed4:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <customTimerSettingIndex+0x1>
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	e4 51       	subi	r30, 0x14	; 20
				returnStatus = 2;
				break;
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
		if(returnStatus == -1) {
			returnStatus = 2;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customTimerSetInitFlag = 0;
     ee0:	11 82       	std	Z+1, r1	; 0x01
     ee2:	10 82       	st	Z, r1
     ee4:	49 c0       	rjmp	.+146    	; 0xf78 <setTimer+0x2cc>
     ee6:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <customTimerSetInitFlag+0x1>
			LcdMove(0,0);
     eea:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <customTimerSetInitFlag>
     eee:	60 e0       	ldi	r22, 0x00	; 0
			LcdPuts("                      ");
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	25 db       	rcall	.-2486   	; 0x53e <LcdMove>
     ef4:	82 ea       	ldi	r24, 0xA2	; 162
     ef6:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(CURSOR_OFF);
     ef8:	14 db       	rcall	.-2520   	; 0x522 <LcdPuts>
     efa:	8c e0       	ldi	r24, 0x0C	; 12
     efc:	a7 da       	rcall	.-2738   	; 0x44c <LcdCommand>
			minute = customTimer[0];
			second = customTimer[3] * 10 + customTimer[4];
			m_second = customTimer[6];
			
			// 7 세그먼트 계산
			ISeg7Init();
     efe:	cc d9       	rcall	.-3176   	; 0x298 <ISeg7Init>
     f00:	ec ee       	ldi	r30, 0xEC	; 236
			segmentDisplayNumber = customTimer[1]*1000 + customTimer[4]*100 + customTimer[5]*10 + customTimer[7];
     f02:	f1 e0       	ldi	r31, 0x01	; 1
     f04:	42 81       	ldd	r20, Z+2	; 0x02
     f06:	53 81       	ldd	r21, Z+3	; 0x03
     f08:	88 ee       	ldi	r24, 0xE8	; 232
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	48 9f       	mul	r20, r24
     f0e:	90 01       	movw	r18, r0
     f10:	49 9f       	mul	r20, r25
     f12:	30 0d       	add	r19, r0
     f14:	58 9f       	mul	r21, r24
     f16:	30 0d       	add	r19, r0
     f18:	11 24       	eor	r1, r1
     f1a:	40 85       	ldd	r20, Z+8	; 0x08
     f1c:	51 85       	ldd	r21, Z+9	; 0x09
     f1e:	64 e6       	ldi	r22, 0x64	; 100
     f20:	64 9f       	mul	r22, r20
     f22:	c0 01       	movw	r24, r0
     f24:	65 9f       	mul	r22, r21
     f26:	90 0d       	add	r25, r0
     f28:	11 24       	eor	r1, r1
     f2a:	82 0f       	add	r24, r18
     f2c:	93 1f       	adc	r25, r19
     f2e:	22 85       	ldd	r18, Z+10	; 0x0a
     f30:	33 85       	ldd	r19, Z+11	; 0x0b
     f32:	b9 01       	movw	r22, r18
     f34:	66 0f       	add	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	a9 01       	movw	r20, r18
     f3a:	44 0f       	add	r20, r20
     f3c:	55 1f       	adc	r21, r21
     f3e:	44 0f       	add	r20, r20
     f40:	55 1f       	adc	r21, r21
     f42:	44 0f       	add	r20, r20
     f44:	55 1f       	adc	r21, r21
     f46:	9b 01       	movw	r18, r22
     f48:	24 0f       	add	r18, r20
     f4a:	35 1f       	adc	r19, r21
     f4c:	28 0f       	add	r18, r24
     f4e:	39 1f       	adc	r19, r25
     f50:	86 85       	ldd	r24, Z+14	; 0x0e
     f52:	97 85       	ldd	r25, Z+15	; 0x0f
     f54:	82 0f       	add	r24, r18
     f56:	93 1f       	adc	r25, r19
     f58:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <segmentDisplayNumber+0x1>
     f5c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <segmentDisplayNumber>
			ISeg7DispNum(segmentDisplayNumber , 10);
     f60:	6a e0       	ldi	r22, 0x0A	; 10
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	ac d9       	rcall	.-3240   	; 0x2be <ISeg7DispNum>
     f66:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <customTimerSettingIndex+0x1>
				
			customTimerSettingIndex = 0;
     f6a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <customTimerSettingIndex>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 0;
			*timerInitFlag = 1;
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	99 83       	std	Y+1, r25	; 0x01
     f74:	88 83       	st	Y, r24
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <setTimer+0x2d0>
			break;
		}
		return returnStatus;
	}
}
     f78:	82 e0       	ldi	r24, 0x02	; 2
			customTimerSettingIndex = 0;
			returnStatus = 0;
			*timerInitFlag = 1;
			break;
		}
		return returnStatus;
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	df 91       	pop	r29
	}
}
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <set7SegmentTimer>:
     f82:	cf 93       	push	r28

int set7SegmentTimer(int counter_m_seoncd) {	
     f84:	df 93       	push	r29
	int nowDisplayNumber = segmentDisplayNumber - counter_m_seoncd;
     f86:	c0 91 e8 01 	lds	r28, 0x01E8	; 0x8001e8 <segmentDisplayNumber>
     f8a:	d0 91 e9 01 	lds	r29, 0x01E9	; 0x8001e9 <segmentDisplayNumber+0x1>
     f8e:	c8 1b       	sub	r28, r24
     f90:	d9 0b       	sbc	r29, r25
	//1분 00.0초
	//9분 99.9초
	if(nowDisplayNumber%1000 == 999 ){
     f92:	ce 01       	movw	r24, r28
     f94:	68 ee       	ldi	r22, 0xE8	; 232
     f96:	73 e0       	ldi	r23, 0x03	; 3
     f98:	2a d0       	rcall	.+84     	; 0xfee <__divmodhi4>
     f9a:	87 3e       	cpi	r24, 0xE7	; 231
     f9c:	93 40       	sbci	r25, 0x03	; 3
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <set7SegmentTimer+0x22>
		nowDisplayNumber -= 400;
     fa0:	c0 59       	subi	r28, 0x90	; 144
     fa2:	d1 40       	sbci	r29, 0x01	; 1
	}
	segmentDisplayNumber = nowDisplayNumber;
     fa4:	d0 93 e9 01 	sts	0x01E9, r29	; 0x8001e9 <segmentDisplayNumber+0x1>
     fa8:	c0 93 e8 01 	sts	0x01E8, r28	; 0x8001e8 <segmentDisplayNumber>
	ISeg7DispNum(nowDisplayNumber , 10);
     fac:	6a e0       	ldi	r22, 0x0A	; 10
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	ce 01       	movw	r24, r28
     fb2:	85 d9       	rcall	.-3318   	; 0x2be <ISeg7DispNum>
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	cd 2b       	or	r28, r29
     fba:	11 f4       	brne	.+4      	; 0xfc0 <set7SegmentTimer+0x3e>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
		// do something
		
		return 0;	
	}
	return 1;
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <__udivmodhi4>:
     fc6:	aa 1b       	sub	r26, r26
     fc8:	bb 1b       	sub	r27, r27
     fca:	51 e1       	ldi	r21, 0x11	; 17
     fcc:	07 c0       	rjmp	.+14     	; 0xfdc <__udivmodhi4_ep>

00000fce <__udivmodhi4_loop>:
     fce:	aa 1f       	adc	r26, r26
     fd0:	bb 1f       	adc	r27, r27
     fd2:	a6 17       	cp	r26, r22
     fd4:	b7 07       	cpc	r27, r23
     fd6:	10 f0       	brcs	.+4      	; 0xfdc <__udivmodhi4_ep>
     fd8:	a6 1b       	sub	r26, r22
     fda:	b7 0b       	sbc	r27, r23

00000fdc <__udivmodhi4_ep>:
     fdc:	88 1f       	adc	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	5a 95       	dec	r21
     fe2:	a9 f7       	brne	.-22     	; 0xfce <__udivmodhi4_loop>
     fe4:	80 95       	com	r24
     fe6:	90 95       	com	r25
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	08 95       	ret

00000fee <__divmodhi4>:
     fee:	97 fb       	bst	r25, 7
     ff0:	07 2e       	mov	r0, r23
     ff2:	16 f4       	brtc	.+4      	; 0xff8 <__divmodhi4+0xa>
     ff4:	00 94       	com	r0
     ff6:	06 d0       	rcall	.+12     	; 0x1004 <__divmodhi4_neg1>
     ff8:	77 fd       	sbrc	r23, 7
     ffa:	08 d0       	rcall	.+16     	; 0x100c <__divmodhi4_neg2>
     ffc:	e4 df       	rcall	.-56     	; 0xfc6 <__udivmodhi4>
     ffe:	07 fc       	sbrc	r0, 7
    1000:	05 d0       	rcall	.+10     	; 0x100c <__divmodhi4_neg2>
    1002:	3e f4       	brtc	.+14     	; 0x1012 <__divmodhi4_exit>

00001004 <__divmodhi4_neg1>:
    1004:	90 95       	com	r25
    1006:	81 95       	neg	r24
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	08 95       	ret

0000100c <__divmodhi4_neg2>:
    100c:	70 95       	com	r23
    100e:	61 95       	neg	r22
    1010:	7f 4f       	sbci	r23, 0xFF	; 255

00001012 <__divmodhi4_exit>:
    1012:	08 95       	ret

00001014 <__tablejump2__>:
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	00 24       	eor	r0, r0
    101a:	00 1c       	adc	r0, r0
    101c:	0b be       	out	0x3b, r0	; 59
    101e:	07 90       	elpm	r0, Z+
    1020:	f6 91       	elpm	r31, Z
    1022:	e0 2d       	mov	r30, r0
    1024:	09 94       	ijmp

00001026 <_exit>:
    1026:	f8 94       	cli

00001028 <__stop_program>:
    1028:	ff cf       	rjmp	.-2      	; 0x1028 <__stop_program>
