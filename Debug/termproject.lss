
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001f44  00001fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000847  008001f0  008001f0  000020c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000304f  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a3  00000000  00000000  00005383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019ae  00000000  00000000  00006526  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00007ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae3  00000000  00000000  00008338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c14  00000000  00000000  00008e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000aa2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c1       	rjmp	.+842    	; 0x34c <__ctors_end>
       2:	00 00       	nop
       4:	c1 c1       	rjmp	.+898    	; 0x388 <__bad_interrupt>
       6:	00 00       	nop
       8:	bf c1       	rjmp	.+894    	; 0x388 <__bad_interrupt>
       a:	00 00       	nop
       c:	bd c1       	rjmp	.+890    	; 0x388 <__bad_interrupt>
       e:	00 00       	nop
      10:	bb c1       	rjmp	.+886    	; 0x388 <__bad_interrupt>
      12:	00 00       	nop
      14:	b9 c1       	rjmp	.+882    	; 0x388 <__bad_interrupt>
      16:	00 00       	nop
      18:	b7 c1       	rjmp	.+878    	; 0x388 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b5 c1       	rjmp	.+874    	; 0x388 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b3 c1       	rjmp	.+870    	; 0x388 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c3       	rjmp	.+1952   	; 0x7c6 <__vector_9>
      26:	00 00       	nop
      28:	af c1       	rjmp	.+862    	; 0x388 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ad c1       	rjmp	.+858    	; 0x388 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ab c1       	rjmp	.+854    	; 0x388 <__bad_interrupt>
      32:	00 00       	nop
      34:	a9 c1       	rjmp	.+850    	; 0x388 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c2       	rjmp	.+1036   	; 0x446 <__vector_14>
      3a:	00 00       	nop
      3c:	6f c2       	rjmp	.+1246   	; 0x51c <__vector_15>
      3e:	00 00       	nop
      40:	a3 c1       	rjmp	.+838    	; 0x388 <__bad_interrupt>
      42:	00 00       	nop
      44:	a1 c1       	rjmp	.+834    	; 0x388 <__bad_interrupt>
      46:	00 00       	nop
      48:	9f c1       	rjmp	.+830    	; 0x388 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9d c1       	rjmp	.+826    	; 0x388 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9b c1       	rjmp	.+822    	; 0x388 <__bad_interrupt>
      52:	00 00       	nop
      54:	99 c1       	rjmp	.+818    	; 0x388 <__bad_interrupt>
      56:	00 00       	nop
      58:	97 c1       	rjmp	.+814    	; 0x388 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	95 c1       	rjmp	.+810    	; 0x388 <__bad_interrupt>
      5e:	00 00       	nop
      60:	93 c1       	rjmp	.+806    	; 0x388 <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c1       	rjmp	.+802    	; 0x388 <__bad_interrupt>
      66:	00 00       	nop
      68:	8f c1       	rjmp	.+798    	; 0x388 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8d c1       	rjmp	.+794    	; 0x388 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8b c1       	rjmp	.+790    	; 0x388 <__bad_interrupt>
      72:	00 00       	nop
      74:	89 c1       	rjmp	.+786    	; 0x388 <__bad_interrupt>
      76:	00 00       	nop
      78:	87 c1       	rjmp	.+782    	; 0x388 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	85 c1       	rjmp	.+778    	; 0x388 <__bad_interrupt>
      7e:	00 00       	nop
      80:	83 c1       	rjmp	.+774    	; 0x388 <__bad_interrupt>
      82:	00 00       	nop
      84:	81 c1       	rjmp	.+770    	; 0x388 <__bad_interrupt>
      86:	00 00       	nop
      88:	7f c1       	rjmp	.+766    	; 0x388 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2d 06       	cpc	r2, r29
      8e:	87 05       	cpc	r24, r7
      90:	b5 06       	cpc	r11, r21
      92:	72 05       	cpc	r23, r2
      94:	b5 06       	cpc	r11, r21
      96:	b5 06       	cpc	r11, r21
      98:	b5 06       	cpc	r11, r21
      9a:	5d 05       	cpc	r21, r13
      9c:	b5 06       	cpc	r11, r21
      9e:	b5 06       	cpc	r11, r21
      a0:	b5 06       	cpc	r11, r21
      a2:	b5 06       	cpc	r11, r21
      a4:	b5 06       	cpc	r11, r21
      a6:	b5 06       	cpc	r11, r21
      a8:	b5 06       	cpc	r11, r21
      aa:	b5 06       	cpc	r11, r21
      ac:	40 06       	cpc	r4, r16
      ae:	c6 05       	cpc	r28, r6
      b0:	b5 06       	cpc	r11, r21
      b2:	b1 05       	cpc	r27, r1
      b4:	b5 06       	cpc	r11, r21
      b6:	b5 06       	cpc	r11, r21
      b8:	b5 06       	cpc	r11, r21
      ba:	9c 05       	cpc	r25, r12
      bc:	b5 06       	cpc	r11, r21
      be:	b5 06       	cpc	r11, r21
      c0:	b5 06       	cpc	r11, r21
      c2:	b5 06       	cpc	r11, r21
      c4:	b5 06       	cpc	r11, r21
      c6:	b5 06       	cpc	r11, r21
      c8:	b5 06       	cpc	r11, r21
      ca:	b5 06       	cpc	r11, r21
      cc:	b5 06       	cpc	r11, r21
      ce:	b5 06       	cpc	r11, r21
      d0:	b5 06       	cpc	r11, r21
      d2:	b5 06       	cpc	r11, r21
      d4:	b5 06       	cpc	r11, r21
      d6:	b5 06       	cpc	r11, r21
      d8:	b5 06       	cpc	r11, r21
      da:	b5 06       	cpc	r11, r21
      dc:	b5 06       	cpc	r11, r21
      de:	b5 06       	cpc	r11, r21
      e0:	b5 06       	cpc	r11, r21
      e2:	b5 06       	cpc	r11, r21
      e4:	b5 06       	cpc	r11, r21
      e6:	b5 06       	cpc	r11, r21
      e8:	b5 06       	cpc	r11, r21
      ea:	b5 06       	cpc	r11, r21
      ec:	56 06       	cpc	r5, r22
      ee:	05 06       	cpc	r0, r21
      f0:	b5 06       	cpc	r11, r21
      f2:	f0 05       	cpc	r31, r0
      f4:	b5 06       	cpc	r11, r21
      f6:	b5 06       	cpc	r11, r21
      f8:	b5 06       	cpc	r11, r21
      fa:	db 05       	cpc	r29, r11
      fc:	b5 06       	cpc	r11, r21
      fe:	b5 06       	cpc	r11, r21
     100:	b5 06       	cpc	r11, r21
     102:	b5 06       	cpc	r11, r21
     104:	b5 06       	cpc	r11, r21
     106:	b5 06       	cpc	r11, r21
     108:	b5 06       	cpc	r11, r21
     10a:	b5 06       	cpc	r11, r21
     10c:	b5 06       	cpc	r11, r21
     10e:	b5 06       	cpc	r11, r21
     110:	b5 06       	cpc	r11, r21
     112:	b5 06       	cpc	r11, r21
     114:	b5 06       	cpc	r11, r21
     116:	b5 06       	cpc	r11, r21
     118:	b5 06       	cpc	r11, r21
     11a:	b5 06       	cpc	r11, r21
     11c:	b5 06       	cpc	r11, r21
     11e:	b5 06       	cpc	r11, r21
     120:	b5 06       	cpc	r11, r21
     122:	b5 06       	cpc	r11, r21
     124:	b5 06       	cpc	r11, r21
     126:	b5 06       	cpc	r11, r21
     128:	b5 06       	cpc	r11, r21
     12a:	b5 06       	cpc	r11, r21
     12c:	b5 06       	cpc	r11, r21
     12e:	b5 06       	cpc	r11, r21
     130:	b5 06       	cpc	r11, r21
     132:	b5 06       	cpc	r11, r21
     134:	b5 06       	cpc	r11, r21
     136:	b5 06       	cpc	r11, r21
     138:	b5 06       	cpc	r11, r21
     13a:	b5 06       	cpc	r11, r21
     13c:	b5 06       	cpc	r11, r21
     13e:	b5 06       	cpc	r11, r21
     140:	b5 06       	cpc	r11, r21
     142:	b5 06       	cpc	r11, r21
     144:	b5 06       	cpc	r11, r21
     146:	b5 06       	cpc	r11, r21
     148:	b5 06       	cpc	r11, r21
     14a:	b5 06       	cpc	r11, r21
     14c:	b5 06       	cpc	r11, r21
     14e:	b5 06       	cpc	r11, r21
     150:	b5 06       	cpc	r11, r21
     152:	b5 06       	cpc	r11, r21
     154:	b5 06       	cpc	r11, r21
     156:	b5 06       	cpc	r11, r21
     158:	b5 06       	cpc	r11, r21
     15a:	b5 06       	cpc	r11, r21
     15c:	b5 06       	cpc	r11, r21
     15e:	b5 06       	cpc	r11, r21
     160:	b5 06       	cpc	r11, r21
     162:	b5 06       	cpc	r11, r21
     164:	b5 06       	cpc	r11, r21
     166:	b5 06       	cpc	r11, r21
     168:	b5 06       	cpc	r11, r21
     16a:	b5 06       	cpc	r11, r21
     16c:	af 06       	cpc	r10, r31
     16e:	b5 06       	cpc	r11, r21
     170:	b5 06       	cpc	r11, r21
     172:	1a 06       	cpc	r1, r26
     174:	7d 08       	sbc	r7, r13
     176:	b2 07       	cpc	r27, r18
     178:	91 07       	cpc	r25, r17
     17a:	a3 07       	cpc	r26, r19
     17c:	91 07       	cpc	r25, r17
     17e:	91 07       	cpc	r25, r17
     180:	91 07       	cpc	r25, r17
     182:	94 07       	cpc	r25, r20
     184:	91 07       	cpc	r25, r17
     186:	91 07       	cpc	r25, r17
     188:	91 07       	cpc	r25, r17
     18a:	91 07       	cpc	r25, r17
     18c:	91 07       	cpc	r25, r17
     18e:	91 07       	cpc	r25, r17
     190:	91 07       	cpc	r25, r17
     192:	91 07       	cpc	r25, r17
     194:	91 07       	cpc	r25, r17
     196:	df 07       	cpc	r29, r31
     198:	91 07       	cpc	r25, r17
     19a:	d0 07       	cpc	r29, r16
     19c:	91 07       	cpc	r25, r17
     19e:	91 07       	cpc	r25, r17
     1a0:	91 07       	cpc	r25, r17
     1a2:	c1 07       	cpc	r28, r17
     1a4:	91 07       	cpc	r25, r17
     1a6:	91 07       	cpc	r25, r17
     1a8:	91 07       	cpc	r25, r17
     1aa:	91 07       	cpc	r25, r17
     1ac:	91 07       	cpc	r25, r17
     1ae:	91 07       	cpc	r25, r17
     1b0:	91 07       	cpc	r25, r17
     1b2:	91 07       	cpc	r25, r17
     1b4:	91 07       	cpc	r25, r17
     1b6:	91 07       	cpc	r25, r17
     1b8:	91 07       	cpc	r25, r17
     1ba:	91 07       	cpc	r25, r17
     1bc:	91 07       	cpc	r25, r17
     1be:	91 07       	cpc	r25, r17
     1c0:	91 07       	cpc	r25, r17
     1c2:	91 07       	cpc	r25, r17
     1c4:	91 07       	cpc	r25, r17
     1c6:	91 07       	cpc	r25, r17
     1c8:	91 07       	cpc	r25, r17
     1ca:	91 07       	cpc	r25, r17
     1cc:	91 07       	cpc	r25, r17
     1ce:	91 07       	cpc	r25, r17
     1d0:	91 07       	cpc	r25, r17
     1d2:	91 07       	cpc	r25, r17
     1d4:	28 08       	sbc	r2, r8
     1d6:	0c 08       	sbc	r0, r12
     1d8:	91 07       	cpc	r25, r17
     1da:	fd 07       	cpc	r31, r29
     1dc:	91 07       	cpc	r25, r17
     1de:	91 07       	cpc	r25, r17
     1e0:	91 07       	cpc	r25, r17
     1e2:	ee 07       	cpc	r30, r30
     1e4:	91 07       	cpc	r25, r17
     1e6:	91 07       	cpc	r25, r17
     1e8:	91 07       	cpc	r25, r17
     1ea:	91 07       	cpc	r25, r17
     1ec:	91 07       	cpc	r25, r17
     1ee:	91 07       	cpc	r25, r17
     1f0:	91 07       	cpc	r25, r17
     1f2:	91 07       	cpc	r25, r17
     1f4:	91 07       	cpc	r25, r17
     1f6:	91 07       	cpc	r25, r17
     1f8:	91 07       	cpc	r25, r17
     1fa:	91 07       	cpc	r25, r17
     1fc:	91 07       	cpc	r25, r17
     1fe:	91 07       	cpc	r25, r17
     200:	91 07       	cpc	r25, r17
     202:	91 07       	cpc	r25, r17
     204:	91 07       	cpc	r25, r17
     206:	91 07       	cpc	r25, r17
     208:	91 07       	cpc	r25, r17
     20a:	91 07       	cpc	r25, r17
     20c:	91 07       	cpc	r25, r17
     20e:	91 07       	cpc	r25, r17
     210:	91 07       	cpc	r25, r17
     212:	91 07       	cpc	r25, r17
     214:	91 07       	cpc	r25, r17
     216:	91 07       	cpc	r25, r17
     218:	91 07       	cpc	r25, r17
     21a:	91 07       	cpc	r25, r17
     21c:	91 07       	cpc	r25, r17
     21e:	91 07       	cpc	r25, r17
     220:	91 07       	cpc	r25, r17
     222:	91 07       	cpc	r25, r17
     224:	91 07       	cpc	r25, r17
     226:	91 07       	cpc	r25, r17
     228:	91 07       	cpc	r25, r17
     22a:	91 07       	cpc	r25, r17
     22c:	91 07       	cpc	r25, r17
     22e:	91 07       	cpc	r25, r17
     230:	91 07       	cpc	r25, r17
     232:	91 07       	cpc	r25, r17
     234:	91 07       	cpc	r25, r17
     236:	91 07       	cpc	r25, r17
     238:	91 07       	cpc	r25, r17
     23a:	91 07       	cpc	r25, r17
     23c:	91 07       	cpc	r25, r17
     23e:	91 07       	cpc	r25, r17
     240:	91 07       	cpc	r25, r17
     242:	91 07       	cpc	r25, r17
     244:	91 07       	cpc	r25, r17
     246:	91 07       	cpc	r25, r17
     248:	91 07       	cpc	r25, r17
     24a:	91 07       	cpc	r25, r17
     24c:	91 07       	cpc	r25, r17
     24e:	91 07       	cpc	r25, r17
     250:	91 07       	cpc	r25, r17
     252:	91 07       	cpc	r25, r17
     254:	8e 08       	sbc	r8, r14
     256:	91 07       	cpc	r25, r17
     258:	91 07       	cpc	r25, r17
     25a:	1b 08       	sbc	r1, r11
     25c:	a3 0d       	add	r26, r3
     25e:	f5 0c       	add	r15, r5
     260:	22 0e       	add	r2, r18
     262:	df 0c       	add	r13, r15
     264:	22 0e       	add	r2, r18
     266:	22 0e       	add	r2, r18
     268:	22 0e       	add	r2, r18
     26a:	c9 0c       	add	r12, r9
     26c:	22 0e       	add	r2, r18
     26e:	22 0e       	add	r2, r18
     270:	22 0e       	add	r2, r18
     272:	22 0e       	add	r2, r18
     274:	22 0e       	add	r2, r18
     276:	22 0e       	add	r2, r18
     278:	22 0e       	add	r2, r18
     27a:	22 0e       	add	r2, r18
     27c:	b7 0d       	add	r27, r7
     27e:	37 0d       	add	r19, r7
     280:	22 0e       	add	r2, r18
     282:	21 0d       	add	r18, r1
     284:	22 0e       	add	r2, r18
     286:	22 0e       	add	r2, r18
     288:	22 0e       	add	r2, r18
     28a:	0b 0d       	add	r16, r11
     28c:	22 0e       	add	r2, r18
     28e:	22 0e       	add	r2, r18
     290:	22 0e       	add	r2, r18
     292:	22 0e       	add	r2, r18
     294:	22 0e       	add	r2, r18
     296:	22 0e       	add	r2, r18
     298:	22 0e       	add	r2, r18
     29a:	22 0e       	add	r2, r18
     29c:	22 0e       	add	r2, r18
     29e:	22 0e       	add	r2, r18
     2a0:	22 0e       	add	r2, r18
     2a2:	22 0e       	add	r2, r18
     2a4:	22 0e       	add	r2, r18
     2a6:	22 0e       	add	r2, r18
     2a8:	22 0e       	add	r2, r18
     2aa:	22 0e       	add	r2, r18
     2ac:	22 0e       	add	r2, r18
     2ae:	22 0e       	add	r2, r18
     2b0:	22 0e       	add	r2, r18
     2b2:	22 0e       	add	r2, r18
     2b4:	22 0e       	add	r2, r18
     2b6:	22 0e       	add	r2, r18
     2b8:	22 0e       	add	r2, r18
     2ba:	22 0e       	add	r2, r18
     2bc:	ce 0d       	add	r28, r14
     2be:	79 0d       	add	r23, r9
     2c0:	22 0e       	add	r2, r18
     2c2:	63 0d       	add	r22, r3
     2c4:	22 0e       	add	r2, r18
     2c6:	22 0e       	add	r2, r18
     2c8:	22 0e       	add	r2, r18
     2ca:	4d 0d       	add	r20, r13
     2cc:	22 0e       	add	r2, r18
     2ce:	22 0e       	add	r2, r18
     2d0:	22 0e       	add	r2, r18
     2d2:	22 0e       	add	r2, r18
     2d4:	22 0e       	add	r2, r18
     2d6:	22 0e       	add	r2, r18
     2d8:	22 0e       	add	r2, r18
     2da:	22 0e       	add	r2, r18
     2dc:	22 0e       	add	r2, r18
     2de:	22 0e       	add	r2, r18
     2e0:	22 0e       	add	r2, r18
     2e2:	22 0e       	add	r2, r18
     2e4:	22 0e       	add	r2, r18
     2e6:	22 0e       	add	r2, r18
     2e8:	22 0e       	add	r2, r18
     2ea:	22 0e       	add	r2, r18
     2ec:	22 0e       	add	r2, r18
     2ee:	22 0e       	add	r2, r18
     2f0:	22 0e       	add	r2, r18
     2f2:	22 0e       	add	r2, r18
     2f4:	22 0e       	add	r2, r18
     2f6:	22 0e       	add	r2, r18
     2f8:	22 0e       	add	r2, r18
     2fa:	22 0e       	add	r2, r18
     2fc:	22 0e       	add	r2, r18
     2fe:	22 0e       	add	r2, r18
     300:	22 0e       	add	r2, r18
     302:	22 0e       	add	r2, r18
     304:	22 0e       	add	r2, r18
     306:	22 0e       	add	r2, r18
     308:	22 0e       	add	r2, r18
     30a:	22 0e       	add	r2, r18
     30c:	22 0e       	add	r2, r18
     30e:	22 0e       	add	r2, r18
     310:	22 0e       	add	r2, r18
     312:	22 0e       	add	r2, r18
     314:	22 0e       	add	r2, r18
     316:	22 0e       	add	r2, r18
     318:	22 0e       	add	r2, r18
     31a:	22 0e       	add	r2, r18
     31c:	22 0e       	add	r2, r18
     31e:	22 0e       	add	r2, r18
     320:	22 0e       	add	r2, r18
     322:	22 0e       	add	r2, r18
     324:	22 0e       	add	r2, r18
     326:	22 0e       	add	r2, r18
     328:	22 0e       	add	r2, r18
     32a:	22 0e       	add	r2, r18
     32c:	22 0e       	add	r2, r18
     32e:	22 0e       	add	r2, r18
     330:	22 0e       	add	r2, r18
     332:	22 0e       	add	r2, r18
     334:	22 0e       	add	r2, r18
     336:	22 0e       	add	r2, r18
     338:	22 0e       	add	r2, r18
     33a:	22 0e       	add	r2, r18
     33c:	1c 0e       	add	r1, r28
     33e:	22 0e       	add	r2, r18
     340:	22 0e       	add	r2, r18
     342:	8f 0d       	add	r24, r15
     344:	22 0e       	add	r2, r18
     346:	22 0e       	add	r2, r18
     348:	22 0e       	add	r2, r18
     34a:	ce 0d       	add	r28, r14

0000034c <__ctors_end>:
     34c:	11 24       	eor	r1, r1
     34e:	1f be       	out	0x3f, r1	; 63
     350:	cf ef       	ldi	r28, 0xFF	; 255
     352:	d0 e1       	ldi	r29, 0x10	; 16
     354:	de bf       	out	0x3e, r29	; 62
     356:	cd bf       	out	0x3d, r28	; 61

00000358 <__do_copy_data>:
     358:	11 e0       	ldi	r17, 0x01	; 1
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b1 e0       	ldi	r27, 0x01	; 1
     35e:	e4 e4       	ldi	r30, 0x44	; 68
     360:	ff e1       	ldi	r31, 0x1F	; 31
     362:	00 e0       	ldi	r16, 0x00	; 0
     364:	0b bf       	out	0x3b, r16	; 59
     366:	02 c0       	rjmp	.+4      	; 0x36c <__do_copy_data+0x14>
     368:	07 90       	elpm	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	a0 3f       	cpi	r26, 0xF0	; 240
     36e:	b1 07       	cpc	r27, r17
     370:	d9 f7       	brne	.-10     	; 0x368 <__do_copy_data+0x10>

00000372 <__do_clear_bss>:
     372:	2a e0       	ldi	r18, 0x0A	; 10
     374:	a0 ef       	ldi	r26, 0xF0	; 240
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	01 c0       	rjmp	.+2      	; 0x37c <.do_clear_bss_start>

0000037a <.do_clear_bss_loop>:
     37a:	1d 92       	st	X+, r1

0000037c <.do_clear_bss_start>:
     37c:	a7 33       	cpi	r26, 0x37	; 55
     37e:	b2 07       	cpc	r27, r18
     380:	e1 f7       	brne	.-8      	; 0x37a <.do_clear_bss_loop>
     382:	de d2       	rcall	.+1468   	; 0x940 <main>
     384:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_exit>

00000388 <__bad_interrupt>:
     388:	3b ce       	rjmp	.-906    	; 0x0 <__vectors>

0000038a <timer1_init>:
static int timerDotCounterActiveFlag = 0;

 void timer1_init()
 {
	 // set up timer with prescaler = 8
	 TCCR1B |= (1 << CS11);
     38a:	8e b5       	in	r24, 0x2e	; 46
     38c:	82 60       	ori	r24, 0x02	; 2
     38e:	8e bd       	out	0x2e, r24	; 46
	 
	 // initialize counter
	 TCNT1 = 0;
     390:	1d bc       	out	0x2d, r1	; 45
     392:	1c bc       	out	0x2c, r1	; 44
	 
	 // enable overflow interrupt
	 TIMSK |= (1 << TOIE1);
     394:	87 b7       	in	r24, 0x37	; 55
     396:	84 60       	ori	r24, 0x04	; 4
     398:	87 bf       	out	0x37, r24	; 55
	 
	 // enable global interrupts
	 sei();
     39a:	78 94       	sei
	 
	 // initialize overflow counter variable
	 timerDotCounter = 0;
     39c:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <timerDotCounter+0x1>
     3a0:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <timerDotCounter>

	 timerDotCounterActiveFlag = 0;
     3a4:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <__data_end+0x1>
     3a8:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <__data_end>
     3ac:	08 95       	ret

000003ae <dotmatrixActive>:
 }

 void dotmatrixActive(){
	 DDRE = 0xFF;
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	82 b9       	out	0x02, r24	; 2
	 DDRB = 0xFF;
     3b2:	87 bb       	out	0x17, r24	; 23
	 
	 timerDotCounterActiveFlag = 1;
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	30 93 f1 01 	sts	0x01F1, r19	; 0x8001f1 <__data_end+0x1>
     3bc:	20 93 f0 01 	sts	0x01F0, r18	; 0x8001f0 <__data_end>
	 // 패턴 초기화
	 rowindex = 0;
     3c0:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <rowindex+0x1>
     3c4:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <rowindex>
	 columnindex = 0;
     3c8:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <columnindex+0x1>
     3cc:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <columnindex>
	 PORTE = dotpattern[rowindex];
     3d0:	9c ef       	ldi	r25, 0xFC	; 252
     3d2:	93 b9       	out	0x03, r25	; 3
	 PORTB = 0xFF;
     3d4:	88 bb       	out	0x18, r24	; 24

	 while(timerDotCounterActiveFlag == 1){

		 if(++columnindex == 8)	columnindex = 0;
		 PORTE = dotpattern[rowindex];	// 타이머카운터에 의해 패턴 바뀜
		 PORTB = 0x01 << columnindex;
     3d6:	a4 ef       	ldi	r26, 0xF4	; 244
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
	 rowindex = 0;
	 columnindex = 0;
	 PORTE = dotpattern[rowindex];
	 PORTB = 0xFF;

	 while(timerDotCounterActiveFlag == 1){
     3da:	2e c0       	rjmp	.+92     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

		 if(++columnindex == 8)	columnindex = 0;
     3dc:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <columnindex>
     3e0:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <columnindex+0x1>
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	88 30       	cpi	r24, 0x08	; 8
     3e8:	91 05       	cpc	r25, r1
     3ea:	29 f0       	breq	.+10     	; 0x3f6 <dotmatrixActive+0x48>
     3ec:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <columnindex+0x1>
     3f0:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <columnindex>
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <dotmatrixActive+0x50>
     3f6:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <columnindex+0x1>
     3fa:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <columnindex>
		 PORTE = dotpattern[rowindex];	// 타이머카운터에 의해 패턴 바뀜
     3fe:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <rowindex>
     402:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <rowindex+0x1>
     406:	e3 58       	subi	r30, 0x83	; 131
     408:	fe 4f       	sbci	r31, 0xFE	; 254
     40a:	80 81       	ld	r24, Z
     40c:	83 b9       	out	0x03, r24	; 3
		 PORTB = 0x01 << columnindex;
     40e:	c9 01       	movw	r24, r18
     410:	0c 90       	ld	r0, X
     412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	88 bb       	out	0x18, r24	; 24
		 
		 //second++;
		 if(rowindex == 4){
     41e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <rowindex>
     422:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <rowindex+0x1>
     426:	04 97       	sbiw	r24, 0x04	; 4
     428:	39 f4       	brne	.+14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			 PORTE = 0xFF;
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	83 b9       	out	0x03, r24	; 3
			 timerDotCounterActiveFlag = 0;
     42e:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <__data_end+0x1>
     432:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <__data_end>
			 break;
     436:	08 95       	ret
	 rowindex = 0;
	 columnindex = 0;
	 PORTE = dotpattern[rowindex];
	 PORTB = 0xFF;

	 while(timerDotCounterActiveFlag == 1){
     438:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end>
     43c:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <__data_end+0x1>
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	61 f2       	breq	.-104    	; 0x3dc <dotmatrixActive+0x2e>
     444:	08 95       	ret

00000446 <__vector_14>:
		 }
	 }
 }

 ISR(TIMER1_OVF_vect)
 {
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
	 // keep a track of number of overflows
	 timerDotCounter++;
     454:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <timerDotCounter>
     458:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <timerDotCounter+0x1>
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <timerDotCounter+0x1>
     462:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <timerDotCounter>
	 
	 // check for number of overflows here itself
	 // 30 overflows = 1 seconds delay (approx.)
	 if (timerDotCounter >= 30) // NOTE: '>=' used instead of '=='
     466:	4e 97       	sbiw	r24, 0x1e	; 30
     468:	fc f0       	brlt	.+62     	; 0x4a8 <__vector_14+0x62>
	 {
		//rowindex+=1;

		 if(rowindex++ == 5) {
     46a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <rowindex>
     46e:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <rowindex+0x1>
     472:	85 30       	cpi	r24, 0x05	; 5
     474:	91 05       	cpc	r25, r1
     476:	31 f0       	breq	.+12     	; 0x484 <__vector_14+0x3e>
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <rowindex+0x1>
     47e:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <rowindex>
     482:	04 c0       	rjmp	.+8      	; 0x48c <__vector_14+0x46>
			rowindex = 0;
     484:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <rowindex+0x1>
     488:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <rowindex>
		 }
		 if(timerDotCounterActiveFlag == 0) {
     48c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end>
     490:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <__data_end+0x1>
     494:	89 2b       	or	r24, r25
     496:	21 f4       	brne	.+8      	; 0x4a0 <__vector_14+0x5a>
		 	rowindex = 0;
     498:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <rowindex+0x1>
     49c:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <rowindex>
		 }
		 
		 timerDotCounter = 0;   // reset overflow counter
     4a0:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <timerDotCounter+0x1>
     4a4:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <timerDotCounter>
	 }
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <ISeg7Init>:
     4b6:	82 b3       	in	r24, 0x12	; 18
     4b8:	80 6f       	ori	r24, 0xF0	; 240
     4ba:	82 bb       	out	0x12, r24	; 18
     4bc:	81 b3       	in	r24, 0x11	; 17
     4be:	80 6f       	ori	r24, 0xF0	; 240
     4c0:	81 bb       	out	0x11, r24	; 17
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
     4c4:	8a bb       	out	0x1a, r24	; 26
     4c6:	88 e0       	ldi	r24, 0x08	; 8
     4c8:	83 bf       	out	0x33, r24	; 51
     4ca:	8e e4       	ldi	r24, 0x4E	; 78
     4cc:	81 bf       	out	0x31, r24	; 49
     4ce:	87 b7       	in	r24, 0x37	; 55
     4d0:	82 60       	ori	r24, 0x02	; 2
     4d2:	87 bf       	out	0x37, r24	; 55
     4d4:	83 b7       	in	r24, 0x33	; 51
     4d6:	87 60       	ori	r24, 0x07	; 7
     4d8:	83 bf       	out	0x33, r24	; 51
     4da:	08 95       	ret

000004dc <ISeg7DispNum>:
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	eb 01       	movw	r28, r22
     4e2:	27 b7       	in	r18, 0x37	; 55
     4e4:	2d 7f       	andi	r18, 0xFD	; 253
     4e6:	27 bf       	out	0x37, r18	; 55
     4e8:	e6 e0       	ldi	r30, 0x06	; 6
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	10 82       	st	Z, r1
     4ee:	20 e1       	ldi	r18, 0x10	; 16
     4f0:	21 83       	std	Z+1, r18	; 0x01
     4f2:	22 83       	std	Z+2, r18	; 0x02
     4f4:	23 83       	std	Z+3, r18	; 0x03
     4f6:	24 83       	std	Z+4, r18	; 0x04
     4f8:	25 83       	std	Z+5, r18	; 0x05
     4fa:	2b e0       	ldi	r18, 0x0B	; 11
     4fc:	31 e0       	ldi	r19, 0x01	; 1
     4fe:	be 01       	movw	r22, r28
     500:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__udivmodhi4>
     504:	81 93       	st	Z+, r24
     506:	86 2f       	mov	r24, r22
     508:	97 2f       	mov	r25, r23
     50a:	e2 17       	cp	r30, r18
     50c:	f3 07       	cpc	r31, r19
     50e:	b9 f7       	brne	.-18     	; 0x4fe <ISeg7DispNum+0x22>
     510:	87 b7       	in	r24, 0x37	; 55
     512:	82 60       	ori	r24, 0x02	; 2
     514:	87 bf       	out	0x37, r24	; 55
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <__vector_15>:
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	0b b6       	in	r0, 0x3b	; 59
     528:	0f 92       	push	r0
     52a:	2f 93       	push	r18
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
     530:	ef 93       	push	r30
     532:	ff 93       	push	r31
     534:	22 b3       	in	r18, 0x12	; 18
     536:	80 e1       	ldi	r24, 0x10	; 16
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	00 90 f8 01 	lds	r0, 0x01F8	; 0x8001f8 <index.1754>
     53e:	02 c0       	rjmp	.+4      	; 0x544 <__vector_15+0x28>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <__vector_15+0x24>
     548:	80 95       	com	r24
     54a:	80 7f       	andi	r24, 0xF0	; 240
     54c:	92 2f       	mov	r25, r18
     54e:	9f 70       	andi	r25, 0x0F	; 15
     550:	89 2b       	or	r24, r25
     552:	82 bb       	out	0x12, r24	; 18
     554:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <index.1754>
     558:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <index.1754+0x1>
     55c:	ea 5f       	subi	r30, 0xFA	; 250
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	e0 81       	ld	r30, Z
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	ef 57       	subi	r30, 0x7F	; 127
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	80 81       	ld	r24, Z
     56a:	80 95       	com	r24
     56c:	8b bb       	out	0x1b, r24	; 27
     56e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <index.1754>
     572:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <index.1754+0x1>
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	84 30       	cpi	r24, 0x04	; 4
     57a:	91 05       	cpc	r25, r1
     57c:	29 f0       	breq	.+10     	; 0x588 <__vector_15+0x6c>
     57e:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <index.1754+0x1>
     582:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <index.1754>
     586:	04 c0       	rjmp	.+8      	; 0x590 <__vector_15+0x74>
     588:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <index.1754+0x1>
     58c:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <index.1754>
     590:	ff 91       	pop	r31
     592:	ef 91       	pop	r30
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0b be       	out	0x3b, r0	; 59
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti

000005a8 <key_scan>:
     5a8:	8e ef       	ldi	r24, 0xFE	; 254
     5aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ae:	00 00       	nop
     5b0:	80 b1       	in	r24, 0x00	; 0
     5b2:	80 95       	com	r24
     5b4:	80 7f       	andi	r24, 0xF0	; 240
     5b6:	69 f4       	brne	.+26     	; 0x5d2 <key_scan+0x2a>
     5b8:	23 e0       	ldi	r18, 0x03	; 3
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	e2 e6       	ldi	r30, 0x62	; 98
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	89 2f       	mov	r24, r25
     5c2:	80 95       	com	r24
     5c4:	80 83       	st	Z, r24
     5c6:	00 00       	nop
     5c8:	80 b1       	in	r24, 0x00	; 0
     5ca:	80 95       	com	r24
     5cc:	80 7f       	andi	r24, 0xF0	; 240
     5ce:	21 f0       	breq	.+8      	; 0x5d8 <key_scan+0x30>
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <key_scan+0x2c>
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	89 0f       	add	r24, r25
     5d6:	08 95       	ret
     5d8:	99 0f       	add	r25, r25
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	89 f7       	brne	.-30     	; 0x5c0 <key_scan+0x18>
     5de:	08 95       	ret

000005e0 <KeyInit>:
     5e0:	80 ef       	ldi	r24, 0xF0	; 240
     5e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5e6:	8f e0       	ldi	r24, 0x0F	; 15
     5e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     5ec:	08 95       	ret

000005ee <KeyInput>:
     5ee:	cf 93       	push	r28
     5f0:	db df       	rcall	.-74     	; 0x5a8 <key_scan>
     5f2:	c8 2f       	mov	r28, r24
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <KeyInput+0xa>
     5f6:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f8:	8f e3       	ldi	r24, 0x3F	; 63
     5fa:	9c e9       	ldi	r25, 0x9C	; 156
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <KeyInput+0xe>
     600:	00 c0       	rjmp	.+0      	; 0x602 <KeyInput+0x14>
     602:	00 00       	nop
     604:	8f e3       	ldi	r24, 0x3F	; 63
     606:	9c e9       	ldi	r25, 0x9C	; 156
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <KeyInput+0x1a>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <KeyInput+0x20>
     60e:	00 00       	nop
     610:	8f e3       	ldi	r24, 0x3F	; 63
     612:	9c e9       	ldi	r25, 0x9C	; 156
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <KeyInput+0x26>
     618:	00 c0       	rjmp	.+0      	; 0x61a <KeyInput+0x2c>
     61a:	00 00       	nop
     61c:	c5 df       	rcall	.-118    	; 0x5a8 <key_scan>
     61e:	c8 13       	cpse	r28, r24
     620:	ea cf       	rjmp	.-44     	; 0x5f6 <KeyInput+0x8>
     622:	98 2f       	mov	r25, r24
     624:	90 7f       	andi	r25, 0xF0	; 240
     626:	19 f4       	brne	.+6      	; 0x62e <KeyInput+0x40>
     628:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <pin>
     62c:	09 c0       	rjmp	.+18     	; 0x640 <KeyInput+0x52>
     62e:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <pin>
     632:	89 17       	cp	r24, r25
     634:	21 f0       	breq	.+8      	; 0x63e <KeyInput+0x50>
     636:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <pin>
     63a:	98 2f       	mov	r25, r24
     63c:	01 c0       	rjmp	.+2      	; 0x640 <KeyInput+0x52>
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	89 2f       	mov	r24, r25
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <write_command>:
     646:	98 2f       	mov	r25, r24
     648:	90 7f       	andi	r25, 0xF0	; 240
     64a:	94 60       	ori	r25, 0x04	; 4
     64c:	95 bb       	out	0x15, r25	; 21
     64e:	9b 7f       	andi	r25, 0xFB	; 251
     650:	95 bb       	out	0x15, r25	; 21
     652:	20 e1       	ldi	r18, 0x10	; 16
     654:	82 02       	muls	r24, r18
     656:	c0 01       	movw	r24, r0
     658:	11 24       	eor	r1, r1
     65a:	84 60       	ori	r24, 0x04	; 4
     65c:	85 bb       	out	0x15, r24	; 21
     65e:	8b 7f       	andi	r24, 0xFB	; 251
     660:	85 bb       	out	0x15, r24	; 21
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	8a 95       	dec	r24
     666:	f1 f7       	brne	.-4      	; 0x664 <write_command+0x1e>
     668:	00 00       	nop
     66a:	08 95       	ret

0000066c <LcdCommand>:
     66c:	cf 93       	push	r28
     66e:	c8 2f       	mov	r28, r24
     670:	85 e3       	ldi	r24, 0x35	; 53
     672:	8a 95       	dec	r24
     674:	f1 f7       	brne	.-4      	; 0x672 <LcdCommand+0x6>
     676:	00 00       	nop
     678:	95 e3       	ldi	r25, 0x35	; 53
     67a:	9a 95       	dec	r25
     67c:	f1 f7       	brne	.-4      	; 0x67a <LcdCommand+0xe>
     67e:	00 00       	nop
     680:	85 e3       	ldi	r24, 0x35	; 53
     682:	8a 95       	dec	r24
     684:	f1 f7       	brne	.-4      	; 0x682 <LcdCommand+0x16>
     686:	00 00       	nop
     688:	95 e3       	ldi	r25, 0x35	; 53
     68a:	9a 95       	dec	r25
     68c:	f1 f7       	brne	.-4      	; 0x68a <LcdCommand+0x1e>
     68e:	00 00       	nop
     690:	85 e3       	ldi	r24, 0x35	; 53
     692:	8a 95       	dec	r24
     694:	f1 f7       	brne	.-4      	; 0x692 <LcdCommand+0x26>
     696:	00 00       	nop
     698:	8c 2f       	mov	r24, r28
     69a:	d5 df       	rcall	.-86     	; 0x646 <write_command>
     69c:	c1 50       	subi	r28, 0x01	; 1
     69e:	c2 30       	cpi	r28, 0x02	; 2
     6a0:	30 f4       	brcc	.+12     	; 0x6ae <LcdCommand+0x42>
     6a2:	8f e3       	ldi	r24, 0x3F	; 63
     6a4:	9f e1       	ldi	r25, 0x1F	; 31
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <LcdCommand+0x3a>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <LcdCommand+0x40>
     6ac:	00 00       	nop
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <LcdInit>:
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	84 bb       	out	0x14, r24	; 20
     6b6:	8f e5       	ldi	r24, 0x5F	; 95
     6b8:	9a ee       	ldi	r25, 0xEA	; 234
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <LcdInit+0x8>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <LcdInit+0xe>
     6c0:	00 00       	nop
     6c2:	80 e3       	ldi	r24, 0x30	; 48
     6c4:	c0 df       	rcall	.-128    	; 0x646 <write_command>
     6c6:	8f e1       	ldi	r24, 0x1F	; 31
     6c8:	9e e4       	ldi	r25, 0x4E	; 78
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <LcdInit+0x18>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LcdInit+0x1e>
     6d0:	00 00       	nop
     6d2:	80 e3       	ldi	r24, 0x30	; 48
     6d4:	b8 df       	rcall	.-144    	; 0x646 <write_command>
     6d6:	8f e9       	ldi	r24, 0x9F	; 159
     6d8:	9f e0       	ldi	r25, 0x0F	; 15
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <LcdInit+0x28>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <LcdInit+0x2e>
     6e0:	00 00       	nop
     6e2:	82 e3       	ldi	r24, 0x32	; 50
     6e4:	b0 df       	rcall	.-160    	; 0x646 <write_command>
     6e6:	88 e2       	ldi	r24, 0x28	; 40
     6e8:	c1 df       	rcall	.-126    	; 0x66c <LcdCommand>
     6ea:	88 e0       	ldi	r24, 0x08	; 8
     6ec:	bf df       	rcall	.-130    	; 0x66c <LcdCommand>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	bd df       	rcall	.-134    	; 0x66c <LcdCommand>
     6f2:	86 e0       	ldi	r24, 0x06	; 6
     6f4:	bb df       	rcall	.-138    	; 0x66c <LcdCommand>
     6f6:	8c e0       	ldi	r24, 0x0C	; 12
     6f8:	b9 cf       	rjmp	.-142    	; 0x66c <LcdCommand>
     6fa:	08 95       	ret

000006fc <LcdPutchar>:
     6fc:	25 e3       	ldi	r18, 0x35	; 53
     6fe:	2a 95       	dec	r18
     700:	f1 f7       	brne	.-4      	; 0x6fe <LcdPutchar+0x2>
     702:	00 00       	nop
     704:	95 e3       	ldi	r25, 0x35	; 53
     706:	9a 95       	dec	r25
     708:	f1 f7       	brne	.-4      	; 0x706 <LcdPutchar+0xa>
     70a:	00 00       	nop
     70c:	25 e3       	ldi	r18, 0x35	; 53
     70e:	2a 95       	dec	r18
     710:	f1 f7       	brne	.-4      	; 0x70e <LcdPutchar+0x12>
     712:	00 00       	nop
     714:	95 e3       	ldi	r25, 0x35	; 53
     716:	9a 95       	dec	r25
     718:	f1 f7       	brne	.-4      	; 0x716 <LcdPutchar+0x1a>
     71a:	00 00       	nop
     71c:	25 e3       	ldi	r18, 0x35	; 53
     71e:	2a 95       	dec	r18
     720:	f1 f7       	brne	.-4      	; 0x71e <LcdPutchar+0x22>
     722:	00 00       	nop
     724:	98 2f       	mov	r25, r24
     726:	90 7f       	andi	r25, 0xF0	; 240
     728:	95 60       	ori	r25, 0x05	; 5
     72a:	95 bb       	out	0x15, r25	; 21
     72c:	9b 7f       	andi	r25, 0xFB	; 251
     72e:	95 bb       	out	0x15, r25	; 21
     730:	20 e1       	ldi	r18, 0x10	; 16
     732:	82 02       	muls	r24, r18
     734:	c0 01       	movw	r24, r0
     736:	11 24       	eor	r1, r1
     738:	85 60       	ori	r24, 0x05	; 5
     73a:	85 bb       	out	0x15, r24	; 21
     73c:	8b 7f       	andi	r24, 0xFB	; 251
     73e:	85 bb       	out	0x15, r24	; 21
     740:	08 95       	ret

00000742 <LcdPuts>:
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	ec 01       	movw	r28, r24
     748:	88 81       	ld	r24, Y
     74a:	88 23       	and	r24, r24
     74c:	29 f0       	breq	.+10     	; 0x758 <LcdPuts+0x16>
     74e:	21 96       	adiw	r28, 0x01	; 1
     750:	d5 df       	rcall	.-86     	; 0x6fc <LcdPutchar>
     752:	89 91       	ld	r24, Y+
     754:	81 11       	cpse	r24, r1
     756:	fc cf       	rjmp	.-8      	; 0x750 <LcdPuts+0xe>
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <LcdMove>:
     75e:	90 e4       	ldi	r25, 0x40	; 64
     760:	89 9f       	mul	r24, r25
     762:	60 0d       	add	r22, r0
     764:	11 24       	eor	r1, r1
     766:	86 2f       	mov	r24, r22
     768:	80 68       	ori	r24, 0x80	; 128
     76a:	80 cf       	rjmp	.-256    	; 0x66c <LcdCommand>
     76c:	08 95       	ret

0000076e <LcdNewchar>:
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	8b 01       	movw	r16, r22
     778:	28 e0       	ldi	r18, 0x08	; 8
     77a:	82 02       	muls	r24, r18
     77c:	c0 01       	movw	r24, r0
     77e:	11 24       	eor	r1, r1
     780:	80 64       	ori	r24, 0x40	; 64
     782:	74 df       	rcall	.-280    	; 0x66c <LcdCommand>
     784:	e8 01       	movw	r28, r16
     786:	08 5f       	subi	r16, 0xF8	; 248
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	89 91       	ld	r24, Y+
     78c:	b7 df       	rcall	.-146    	; 0x6fc <LcdPutchar>
     78e:	c0 17       	cp	r28, r16
     790:	d1 07       	cpc	r29, r17
     792:	d9 f7       	brne	.-10     	; 0x78a <LcdNewchar+0x1c>
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <msec_delay>:
     79e:	18 16       	cp	r1, r24
     7a0:	19 06       	cpc	r1, r25
     7a2:	44 f4       	brge	.+16     	; 0x7b4 <msec_delay+0x16>
     7a4:	ef e9       	ldi	r30, 0x9F	; 159
     7a6:	ff e0       	ldi	r31, 0x0F	; 15
     7a8:	31 97       	sbiw	r30, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <msec_delay+0xa>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <msec_delay+0x10>
     7ae:	00 00       	nop
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	c1 f7       	brne	.-16     	; 0x7a4 <msec_delay+0x6>
     7b4:	08 95       	ret

000007b6 <ClockCounterInit>:

static int* AlarmTimeStore[3] = {-1,};


void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
     7b6:	85 b5       	in	r24, 0x25	; 37
     7b8:	88 60       	ori	r24, 0x08	; 8
     7ba:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
     7bc:	84 e6       	ldi	r24, 0x64	; 100
     7be:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
     7c0:	80 e8       	ldi	r24, 0x80	; 128
     7c2:	87 bf       	out	0x37, r24	; 55
     7c4:	08 95       	ret

000007c6 <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	2f 93       	push	r18
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
	ClockCounter_CNT++;
     7e0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ClockCounter_CNT>
     7e4:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <ClockCounter_CNT+0x1>
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <ClockCounter_CNT+0x1>
     7ee:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
     7f2:	80 32       	cpi	r24, 0x20	; 32
     7f4:	2e e4       	ldi	r18, 0x4E	; 78
     7f6:	92 07       	cpc	r25, r18
     7f8:	71 f4       	brne	.+28     	; 0x816 <__vector_9+0x50>
		ClockCounter_CNT=0;
     7fa:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ClockCounter_CNT+0x1>
     7fe:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <ClockCounter_CNT>
		ClockCounter_SECOND++;
     802:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <ClockCounter_SECOND>
     806:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <ClockCounter_SECOND+0x1>
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <ClockCounter_SECOND+0x1>
     810:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <ClockCounter_SECOND>
     814:	06 c0       	rjmp	.+12     	; 0x822 <__vector_9+0x5c>
	}
	if(ClockCounter_CNT % 2000 == 0) {
     816:	60 ed       	ldi	r22, 0xD0	; 208
     818:	77 e0       	ldi	r23, 0x07	; 7
     81a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__divmodhi4>
     81e:	89 2b       	or	r24, r25
     820:	79 f4       	brne	.+30     	; 0x840 <__vector_9+0x7a>
		ClockCounter_M_SECOND = 1;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ClockCounter_M_SECOND+0x1>
     82a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ClockCounter_M_SECOND>
		ClockCounter_M_SECOND_ONLY_STOPWATCH += 1;
     82e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
     832:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     83c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
	}
}
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	2f 91       	pop	r18
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <startTermProject>:


//============================================================================
//======박가경's Watch===flash x 3==============================================
//============================================================================
char* startTermProject() {
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	68 97       	sbiw	r28, 0x18	; 24
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
	char *initTitle = malloc(sizeof(char) * 20);
     872:	84 e1       	ldi	r24, 0x14	; 20
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <malloc>
     87a:	8c 01       	movw	r16, r24
	
	char font1[8] = {0x02, 0x1A, 0x1F, 0x1E, 0x02, 0x1C, 0x04, 0x04};	// 박
     87c:	88 e0       	ldi	r24, 0x08	; 8
     87e:	e5 e6       	ldi	r30, 0x65	; 101
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	de 01       	movw	r26, r28
     884:	11 96       	adiw	r26, 0x01	; 1
     886:	01 90       	ld	r0, Z+
     888:	0d 92       	st	X+, r0
     88a:	8a 95       	dec	r24
     88c:	e1 f7       	brne	.-8      	; 0x886 <startTermProject+0x2c>
	char font2[8] = {0x02, 0x02, 0x1A, 0x0B, 0x0A, 0x0A, 0x02, 0x00};	// 가
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	ed e6       	ldi	r30, 0x6D	; 109
     892:	f1 e0       	ldi	r31, 0x01	; 1
     894:	de 01       	movw	r26, r28
     896:	19 96       	adiw	r26, 0x09	; 9
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	8a 95       	dec	r24
     89e:	e1 f7       	brne	.-8      	; 0x898 <startTermProject+0x3e>
	char font3[8] = {0x02, 0x1E, 0x0A, 0x0E, 0x08, 0x0C, 0x12, 0x0C};	// 경
     8a0:	88 e0       	ldi	r24, 0x08	; 8
     8a2:	e5 e7       	ldi	r30, 0x75	; 117
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	de 01       	movw	r26, r28
     8a8:	51 96       	adiw	r26, 0x11	; 17
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	8a 95       	dec	r24
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <startTermProject+0x50>
	
	LcdNewchar(1, font1);
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	59 df       	rcall	.-334    	; 0x76e <LcdNewchar>
	LcdNewchar(2, font2);
     8bc:	be 01       	movw	r22, r28
     8be:	67 5f       	subi	r22, 0xF7	; 247
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	54 df       	rcall	.-344    	; 0x76e <LcdNewchar>
	LcdNewchar(3, font3);
     8c6:	be 01       	movw	r22, r28
     8c8:	6f 5e       	subi	r22, 0xEF	; 239
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	4f df       	rcall	.-354    	; 0x76e <LcdNewchar>

	initTitle[0] = 1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	f8 01       	movw	r30, r16
     8d4:	80 83       	st	Z, r24
	initTitle[1] = 2;
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	81 83       	std	Z+1, r24	; 0x01
	initTitle[2] = 3;
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	82 83       	std	Z+2, r24	; 0x02
	initTitle[3] = '\'';
     8de:	87 e2       	ldi	r24, 0x27	; 39
     8e0:	83 83       	std	Z+3, r24	; 0x03
	initTitle[4] = 's';
     8e2:	83 e7       	ldi	r24, 0x73	; 115
     8e4:	84 83       	std	Z+4, r24	; 0x04
	initTitle[5] = ' ';
     8e6:	80 e2       	ldi	r24, 0x20	; 32
     8e8:	85 83       	std	Z+5, r24	; 0x05
	initTitle[6] = 'W';
     8ea:	87 e5       	ldi	r24, 0x57	; 87
     8ec:	86 83       	std	Z+6, r24	; 0x06
	initTitle[7] = 'a';
     8ee:	81 e6       	ldi	r24, 0x61	; 97
     8f0:	87 83       	std	Z+7, r24	; 0x07
	initTitle[8] = 't';
     8f2:	84 e7       	ldi	r24, 0x74	; 116
     8f4:	80 87       	std	Z+8, r24	; 0x08
	initTitle[9] = 'c';
     8f6:	83 e6       	ldi	r24, 0x63	; 99
     8f8:	81 87       	std	Z+9, r24	; 0x09
	initTitle[10] = 'h';
     8fa:	88 e6       	ldi	r24, 0x68	; 104
     8fc:	82 87       	std	Z+10, r24	; 0x0a
	initTitle[11] = '\0';
	
	LcdMove(0,0);			// cursor go to home
     8fe:	13 86       	std	Z+11, r1	; 0x0b
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
	LcdPuts(initTitle);		// 박가경's Watch
     904:	2c df       	rcall	.-424    	; 0x75e <LcdMove>
     906:	c8 01       	movw	r24, r16
     908:	1c df       	rcall	.-456    	; 0x742 <LcdPuts>
     90a:	03 e0       	ldi	r16, 0x03	; 3
	
	for(int i=0; i<3; i++)		// flash x 3
	{
		LcdCommand(DISP_ON);		// 점
     90c:	10 e0       	ldi	r17, 0x00	; 0
     90e:	8c e0       	ldi	r24, 0x0C	; 12
		msec_delay(500);			// 0.5s delay
     910:	ad de       	rcall	.-678    	; 0x66c <LcdCommand>
     912:	84 ef       	ldi	r24, 0xF4	; 244
     914:	91 e0       	ldi	r25, 0x01	; 1
		LcdCommand(DISP_OFF);		// 멸
     916:	43 df       	rcall	.-378    	; 0x79e <msec_delay>
     918:	88 e0       	ldi	r24, 0x08	; 8
		msec_delay(500);			// 0.5s delay
     91a:	a8 de       	rcall	.-688    	; 0x66c <LcdCommand>
     91c:	84 ef       	ldi	r24, 0xF4	; 244
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	3e df       	rcall	.-388    	; 0x79e <msec_delay>
     922:	01 50       	subi	r16, 0x01	; 1
     924:	11 09       	sbc	r17, r1
	initTitle[11] = '\0';
	
	LcdMove(0,0);			// cursor go to home
	LcdPuts(initTitle);		// 박가경's Watch
	
	for(int i=0; i<3; i++)		// flash x 3
     926:	99 f7       	brne	.-26     	; 0x90e <startTermProject+0xb4>
		LcdCommand(DISP_ON);		// 점
		msec_delay(500);			// 0.5s delay
		LcdCommand(DISP_OFF);		// 멸
		msec_delay(500);			// 0.5s delay
	}
	LcdInit();
     928:	c4 de       	rcall	.-632    	; 0x6b2 <LcdInit>
     92a:	68 96       	adiw	r28, 0x18	; 24
}
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	08 95       	ret

00000940 <main>:
     940:	cc e0       	ldi	r28, 0x0C	; 12
		
	
	while(1){
		// 계속해서 클락 세팅 sec parameter는 디스플레이 플레그 아님 

		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag, AlarmTimeStore);
     942:	d1 e0       	ldi	r29, 0x01	; 1
		//status = 4
		while(status==4){
			status = setAlarm();
			int* tmp = getAlarmTime();
			
			AlarmTimeStore[0] = tmp[0];
     944:	0c 2f       	mov	r16, r28
     946:	1d 2f       	mov	r17, r29
// 현재 메뉴를 알려주는 변수
static int status = 0;

int main(void) {
back:
	LcdInit();
     948:	b4 de       	rcall	.-664    	; 0x6b2 <LcdInit>
	KeyInit();
     94a:	4a de       	rcall	.-876    	; 0x5e0 <KeyInit>
	ClockCounterInit();
     94c:	34 df       	rcall	.-408    	; 0x7b6 <ClockCounterInit>

	// 박가경's project <깜박 x 3>
	startTermProject();
     94e:	85 df       	rcall	.-246    	; 0x85a <startTermProject>
     950:	f7 d3       	rcall	.+2030   	; 0x1140 <initMenu>
	initMenu();
     952:	78 94       	sei
     954:	85 b5       	in	r24, 0x25	; 37
		
	// 전역 인터럽트 허용
	sei();						
     956:	82 60       	ori	r24, 0x02	; 2
	TCCR2 |= 1<<CS21;
     958:	85 bd       	out	0x25, r24	; 37
     95a:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <SegmentStopwatchInitFlag>
		
	
	while(1){
		// 계속해서 클락 세팅 sec parameter는 디스플레이 플레그 아님 

		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag, AlarmTimeStore);
     95e:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <SegmentStopwatchInitFlag+0x1>
     962:	40 2f       	mov	r20, r16
     964:	51 2f       	mov	r21, r17
     966:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <ClockCounter_SECOND>
     96a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <ClockCounter_SECOND+0x1>
     96e:	10 d2       	rcall	.+1056   	; 0xd90 <setClock>
     970:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SegmentTimerInitFlag>

		if(SegmentTimerInitFlag == 1) {
     974:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <SegmentTimerInitFlag+0x1>
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	51 f4       	brne	.+20     	; 0x990 <main+0x50>
     97c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ClockCounter_M_SECOND>
			SegmentTimerInitFlag = set7SegmentTimer(ClockCounter_M_SECOND);
     980:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ClockCounter_M_SECOND+0x1>
     984:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <set7SegmentTimer>
     988:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <SegmentTimerInitFlag+0x1>
     98c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SegmentTimerInitFlag>
     990:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <SegmentStopwatchInitFlag>
		}
		
		if(SegmentStopwatchInitFlag == 1) {
     994:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <SegmentStopwatchInitFlag+0x1>
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	81 f4       	brne	.+32     	; 0x9bc <main+0x7c>
     99c:	28 de       	rcall	.-944    	; 0x5ee <KeyInput>
			SegmentStopwatchInitFlag = set7SegmentStopwatch(ClockCounter_M_SECOND, KeyInput());
     99e:	68 2f       	mov	r22, r24
     9a0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ClockCounter_M_SECOND>
     9a4:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ClockCounter_M_SECOND+0x1>
     9a8:	d4 d4       	rcall	.+2472   	; 0x1352 <set7SegmentStopwatch>
     9aa:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <SegmentStopwatchInitFlag+0x1>
     9ae:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <SegmentStopwatchInitFlag>
     9b2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <ClockCounter_M_SECOND+0x1>
			ClockCounter_M_SECOND = 0;
     9b6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <ClockCounter_M_SECOND>
     9ba:	cf cf       	rjmp	.-98     	; 0x95a <main+0x1a>
     9bc:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <ClockCounter_SECOND+0x1>
			continue;
		}
		
		// 무조건 1초 혹은 0.1초로 계산되게 하기위함
		ClockCounter_SECOND = 0;
     9c0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <ClockCounter_SECOND>
		ClockCounter_M_SECOND = 0;		
     9c4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <ClockCounter_M_SECOND+0x1>
     9c8:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <ClockCounter_M_SECOND>
		// keypad input
		keyInput = KeyInput();
     9cc:	10 de       	rcall	.-992    	; 0x5ee <KeyInput>
     9ce:	c5 d3       	rcall	.+1930   	; 0x115a <setMenu>
		
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
     9d0:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <status+0x1>
     9d4:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <status>
     9d8:	01 97       	sbiw	r24, 0x01	; 1

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     9da:	49 f4       	brne	.+18     	; 0x9ee <main+0xae>
     9dc:	85 e0       	ldi	r24, 0x05	; 5
			status = setCustomClock(&ClockCounter_SECOND);	// Time setting(main.c 파일 안에 있음)	
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	77 d2       	rcall	.+1262   	; 0xed0 <setCustomClock>
     9e2:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <status+0x1>
     9e6:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <status>
     9ea:	01 97       	sbiw	r24, 0x01	; 1
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     9ec:	b9 f3       	breq	.-18     	; 0x9dc <main+0x9c>
     9ee:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <status>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     9f2:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <status+0x1>
     9f6:	02 97       	sbiw	r24, 0x02	; 2
     9f8:	49 f4       	brne	.+18     	; 0xa0c <main+0xcc>
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
			status = setTimer(&SegmentTimerInitFlag);
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	a0 d7       	rcall	.+3904   	; 0x1940 <setTimer>
     a00:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <status+0x1>
     a04:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <status>
     a08:	02 97       	sbiw	r24, 0x02	; 2
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     a0a:	b9 f3       	breq	.-18     	; 0x9fa <main+0xba>
     a0c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <status>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     a10:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <status+0x1>
     a14:	03 97       	sbiw	r24, 0x03	; 3
     a16:	49 f4       	brne	.+18     	; 0xa2a <main+0xea>
     a18:	8d ef       	ldi	r24, 0xFD	; 253
			status = setStopwatch(&SegmentStopwatchInitFlag);
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	4f d4       	rcall	.+2206   	; 0x12bc <setStopwatch>
     a1e:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <status+0x1>
     a22:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <status>
     a26:	03 97       	sbiw	r24, 0x03	; 3
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     a28:	b9 f3       	breq	.-18     	; 0xa18 <main+0xd8>
     a2a:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <status>
		}
	
		
		//=========================================================
		//status = 4
		while(status==4){
     a2e:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <status+0x1>
     a32:	84 30       	cpi	r24, 0x04	; 4
     a34:	91 05       	cpc	r25, r1
     a36:	d1 f4       	brne	.+52     	; 0xa6c <main+0x12c>
			status = setAlarm();
     a38:	1e d0       	rcall	.+60     	; 0xa76 <setAlarm>
     a3a:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <status+0x1>
     a3e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <status>
     a42:	96 d1       	rcall	.+812    	; 0xd70 <getAlarmTime>
			int* tmp = getAlarmTime();
     a44:	fc 01       	movw	r30, r24
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
			
			AlarmTimeStore[0] = tmp[0];
     a4a:	99 83       	std	Y+1, r25	; 0x01
     a4c:	88 83       	st	Y, r24
     a4e:	82 81       	ldd	r24, Z+2	; 0x02
     a50:	93 81       	ldd	r25, Z+3	; 0x03
			AlarmTimeStore[1] = tmp[1];
     a52:	9b 83       	std	Y+3, r25	; 0x03
     a54:	8a 83       	std	Y+2, r24	; 0x02
     a56:	84 81       	ldd	r24, Z+4	; 0x04
     a58:	95 81       	ldd	r25, Z+5	; 0x05
			AlarmTimeStore[2] = tmp[2];
     a5a:	9d 83       	std	Y+5, r25	; 0x05
     a5c:	8c 83       	std	Y+4, r24	; 0x04
     a5e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <status>
		}
	
		
		//=========================================================
		//status = 4
		while(status==4){
     a62:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <status+0x1>
     a66:	84 30       	cpi	r24, 0x04	; 4
     a68:	91 05       	cpc	r25, r1
     a6a:	31 f3       	breq	.-52     	; 0xa38 <main+0xf8>
     a6c:	8d 39       	cpi	r24, 0x9D	; 157
     a6e:	9f 4f       	sbci	r25, 0xFF	; 255
			AlarmTimeStore[1] = tmp[1];
			AlarmTimeStore[2] = tmp[2];
		}
		
		// 이전 버튼
		if(status == -99) {
     a70:	09 f0       	breq	.+2      	; 0xa74 <main+0x134>
     a72:	73 cf       	rjmp	.-282    	; 0x95a <main+0x1a>
     a74:	69 cf       	rjmp	.-302    	; 0x948 <main+0x8>

00000a76 <setAlarm>:
     a76:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <customAlarmSetInitFlag>
	
int setAlarm() {
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customAlarmSetInitFlag == 0){
     a7a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <customAlarmSetInitFlag+0x1>
     a7e:	89 2b       	or	r24, r25
     a80:	81 f4       	brne	.+32     	; 0xaa2 <setAlarm+0x2c>
		// 초기화면 세팅
		LcdMove(0,0);
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	6b de       	rcall	.-810    	; 0x75e <LcdMove>
		LcdPuts("00h 00m 00s        ");
     a88:	82 e9       	ldi	r24, 0x92	; 146
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	5a de       	rcall	.-844    	; 0x742 <LcdPuts>
		LcdCommand(HOME);
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	ed dd       	rcall	.-1062   	; 0x66c <LcdCommand>
		LcdCommand(CURSOR_ON);
     a92:	8e e0       	ldi	r24, 0x0E	; 14
     a94:	eb dd       	rcall	.-1066   	; 0x66c <LcdCommand>
     a96:	81 e0       	ldi	r24, 0x01	; 1
		customAlarmSetInitFlag = 1;
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <customAlarmSetInitFlag+0x1>
     a9e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <customAlarmSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
     aa2:	a5 dd       	rcall	.-1206   	; 0x5ee <KeyInput>
     aa4:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		switch(keyInput) {
     aa6:	fc 01       	movw	r30, r24
     aa8:	71 97       	sbiw	r30, 0x11	; 17
     aaa:	e4 37       	cpi	r30, 0x74	; 116
     aac:	f1 05       	cpc	r31, r1
     aae:	08 f0       	brcs	.+2      	; 0xab2 <setAlarm+0x3c>
     ab0:	5c c1       	rjmp	.+696    	; 0xd6a <setAlarm+0x2f4>
     ab2:	ea 5b       	subi	r30, 0xBA	; 186
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     aba:	81 e3       	ldi	r24, 0x31	; 49
     abc:	1f de       	rcall	.-962    	; 0x6fc <LcdPutchar>
     abe:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     ac2:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     acc:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
     ad0:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 1;
     ad2:	99 1f       	adc	r25, r25
     ad4:	fc 01       	movw	r30, r24
     ad6:	ed 5e       	subi	r30, 0xED	; 237
     ad8:	fd 4f       	sbci	r31, 0xFD	; 253
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24
				break;
     ae2:	40 c1       	rjmp	.+640    	; 0xd64 <setAlarm+0x2ee>
			
			case SW1:
				LcdPutchar('2');
     ae4:	82 e3       	ldi	r24, 0x32	; 50
     ae6:	0a de       	rcall	.-1004   	; 0x6fc <LcdPutchar>
     ae8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     aec:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     af6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
     afa:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 2;
     afc:	99 1f       	adc	r25, r25
     afe:	fc 01       	movw	r30, r24
     b00:	ed 5e       	subi	r30, 0xED	; 237
     b02:	fd 4f       	sbci	r31, 0xFD	; 253
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	91 83       	std	Z+1, r25	; 0x01
     b0a:	80 83       	st	Z, r24
				break;
     b0c:	2b c1       	rjmp	.+598    	; 0xd64 <setAlarm+0x2ee>
			
			case SW2:
				LcdPutchar('3');
     b0e:	83 e3       	ldi	r24, 0x33	; 51
     b10:	f5 dd       	rcall	.-1046   	; 0x6fc <LcdPutchar>
     b12:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     b16:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     b20:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
     b24:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 3;
     b26:	99 1f       	adc	r25, r25
     b28:	fc 01       	movw	r30, r24
     b2a:	ed 5e       	subi	r30, 0xED	; 237
     b2c:	fd 4f       	sbci	r31, 0xFD	; 253
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	91 83       	std	Z+1, r25	; 0x01
     b34:	80 83       	st	Z, r24
				break;
     b36:	16 c1       	rjmp	.+556    	; 0xd64 <setAlarm+0x2ee>
			
			case SW4:
				LcdPutchar('4');
     b38:	84 e3       	ldi	r24, 0x34	; 52
     b3a:	e0 dd       	rcall	.-1088   	; 0x6fc <LcdPutchar>
     b3c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     b40:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     b4a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
     b4e:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 4;
     b50:	99 1f       	adc	r25, r25
     b52:	fc 01       	movw	r30, r24
     b54:	ed 5e       	subi	r30, 0xED	; 237
     b56:	fd 4f       	sbci	r31, 0xFD	; 253
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	91 83       	std	Z+1, r25	; 0x01
     b5e:	80 83       	st	Z, r24
				break;
     b60:	01 c1       	rjmp	.+514    	; 0xd64 <setAlarm+0x2ee>
			
			case SW5:
				LcdPutchar('5');
     b62:	85 e3       	ldi	r24, 0x35	; 53
     b64:	cb dd       	rcall	.-1130   	; 0x6fc <LcdPutchar>
     b66:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     b6a:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     b74:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
     b78:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 5;
     b7a:	99 1f       	adc	r25, r25
     b7c:	fc 01       	movw	r30, r24
     b7e:	ed 5e       	subi	r30, 0xED	; 237
     b80:	fd 4f       	sbci	r31, 0xFD	; 253
     b82:	85 e0       	ldi	r24, 0x05	; 5
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	91 83       	std	Z+1, r25	; 0x01
     b88:	80 83       	st	Z, r24
				break;
     b8a:	ec c0       	rjmp	.+472    	; 0xd64 <setAlarm+0x2ee>
			
			case SW6:
				LcdPutchar('6');
     b8c:	86 e3       	ldi	r24, 0x36	; 54
     b8e:	b6 dd       	rcall	.-1172   	; 0x6fc <LcdPutchar>
     b90:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     b94:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     b9e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
     ba2:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 6;
     ba4:	99 1f       	adc	r25, r25
     ba6:	fc 01       	movw	r30, r24
     ba8:	ed 5e       	subi	r30, 0xED	; 237
     baa:	fd 4f       	sbci	r31, 0xFD	; 253
     bac:	86 e0       	ldi	r24, 0x06	; 6
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	80 83       	st	Z, r24
				break;
     bb4:	d7 c0       	rjmp	.+430    	; 0xd64 <setAlarm+0x2ee>
			
			case SW8:
				LcdPutchar('7');
     bb6:	87 e3       	ldi	r24, 0x37	; 55
     bb8:	a1 dd       	rcall	.-1214   	; 0x6fc <LcdPutchar>
     bba:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     bbe:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     bc8:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 7;
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	fc 01       	movw	r30, r24
     bd2:	ed 5e       	subi	r30, 0xED	; 237
     bd4:	fd 4f       	sbci	r31, 0xFD	; 253
     bd6:	87 e0       	ldi	r24, 0x07	; 7
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	80 83       	st	Z, r24
				break;
     bde:	c2 c0       	rjmp	.+388    	; 0xd64 <setAlarm+0x2ee>
			
			case SW9:
				LcdPutchar('8');
     be0:	88 e3       	ldi	r24, 0x38	; 56
     be2:	8c dd       	rcall	.-1256   	; 0x6fc <LcdPutchar>
     be4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     be8:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     bf2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 8;
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	fc 01       	movw	r30, r24
     bfc:	ed 5e       	subi	r30, 0xED	; 237
     bfe:	fd 4f       	sbci	r31, 0xFD	; 253
     c00:	88 e0       	ldi	r24, 0x08	; 8
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	80 83       	st	Z, r24
				break;
     c08:	ad c0       	rjmp	.+346    	; 0xd64 <setAlarm+0x2ee>
			
			case SW10:
				LcdPutchar('9');
     c0a:	89 e3       	ldi	r24, 0x39	; 57
     c0c:	77 dd       	rcall	.-1298   	; 0x6fc <LcdPutchar>
     c0e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     c12:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     c1c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 9;
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	fc 01       	movw	r30, r24
     c26:	ed 5e       	subi	r30, 0xED	; 237
     c28:	fd 4f       	sbci	r31, 0xFD	; 253
     c2a:	89 e0       	ldi	r24, 0x09	; 9
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	80 83       	st	Z, r24
				break;
     c32:	98 c0       	rjmp	.+304    	; 0xd64 <setAlarm+0x2ee>
			
			case SW13:
				LcdPutchar('0');
     c34:	80 e3       	ldi	r24, 0x30	; 48
     c36:	62 dd       	rcall	.-1340   	; 0x6fc <LcdPutchar>
     c38:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     c3c:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     c46:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 0;
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	fc 01       	movw	r30, r24
     c50:	ed 5e       	subi	r30, 0xED	; 237
     c52:	fd 4f       	sbci	r31, 0xFD	; 253
     c54:	11 82       	std	Z+1, r1	; 0x01
     c56:	10 82       	st	Z, r1
				break;
     c58:	85 c0       	rjmp	.+266    	; 0xd64 <setAlarm+0x2ee>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
     c5a:	80 e1       	ldi	r24, 0x10	; 16
     c5c:	07 dd       	rcall	.-1522   	; 0x66c <LcdCommand>
     c5e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarmSettingIndex -= 1;
     c62:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     c6c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
     c70:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 0;
     c72:	99 1f       	adc	r25, r25
     c74:	fc 01       	movw	r30, r24
     c76:	ed 5e       	subi	r30, 0xED	; 237
     c78:	fd 4f       	sbci	r31, 0xFD	; 253
     c7a:	11 82       	std	Z+1, r1	; 0x01
     c7c:	10 82       	st	Z, r1
				returnStatus = 4;
				break;
     c7e:	75 c0       	rjmp	.+234    	; 0xd6a <setAlarm+0x2f4>
			
			// 아래 키 입력되는 케이스
			case SW7:
				customAlarmSettingIndex += 1;
     c80:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <customAlarmSettingIndex>
     c84:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <customAlarmSettingIndex+0x1>
     c8e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <customAlarmSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
     c92:	84 e1       	ldi	r24, 0x14	; 20
     c94:	eb dc       	rcall	.-1578   	; 0x66c <LcdCommand>
     c96:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 0;
     c9a:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <customAlarmSettingIndex+0x1>
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	ed 5e       	subi	r30, 0xED	; 237
     ca4:	fd 4f       	sbci	r31, 0xFD	; 253
				returnStatus = 4;
				break;
     ca6:	11 82       	std	Z+1, r1	; 0x01
		if(returnStatus == -1) {
			returnStatus = 4;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customAlarmSetInitFlag = 0;
     ca8:	10 82       	st	Z, r1
     caa:	5f c0       	rjmp	.+190    	; 0xd6a <setAlarm+0x2f4>
     cac:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <customAlarmSetInitFlag+0x1>
			LcdMove(0,0);
     cb0:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <customAlarmSetInitFlag>
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
			LcdPuts("                      ");
     cb8:	52 dd       	rcall	.-1372   	; 0x75e <LcdMove>
     cba:	86 ea       	ldi	r24, 0xA6	; 166
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	41 dd       	rcall	.-1406   	; 0x742 <LcdPuts>
			LcdCommand(CURSOR_OFF);
     cc0:	8c e0       	ldi	r24, 0x0C	; 12
     cc2:	d4 dc       	rcall	.-1624   	; 0x66c <LcdCommand>
     cc4:	e3 e1       	ldi	r30, 0x13	; 19
			
			// 시간 계산
			alarmHour = customAlarm[1]*10 + customAlarm[2];
			alarmMinute = customAlarm[5]*10 + customAlarm[6];
     cc6:	f2 e0       	ldi	r31, 0x02	; 2
     cc8:	82 85       	ldd	r24, Z+10	; 0x0a
     cca:	93 85       	ldd	r25, Z+11	; 0x0b
     ccc:	9c 01       	movw	r18, r24
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	44 85       	ldd	r20, Z+12	; 0x0c
     ce4:	55 85       	ldd	r21, Z+13	; 0x0d
     ce6:	48 0f       	add	r20, r24
     ce8:	59 1f       	adc	r21, r25
     cea:	82 89       	ldd	r24, Z+18	; 0x12
			alarmSecond = customAlarm[9]*10 + customAlarm[10];
     cec:	93 89       	ldd	r25, Z+19	; 0x13
     cee:	9c 01       	movw	r18, r24
     cf0:	22 0f       	add	r18, r18
     cf2:	33 1f       	adc	r19, r19
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	82 0f       	add	r24, r18
     d02:	93 1f       	adc	r25, r19
     d04:	24 89       	ldd	r18, Z+20	; 0x14
     d06:	35 89       	ldd	r19, Z+21	; 0x15
     d08:	28 0f       	add	r18, r24
     d0a:	39 1f       	adc	r19, r25
     d0c:	a9 e0       	ldi	r26, 0x09	; 9
			
			alarmTimeArray[0] = alarmHour;
     d0e:	b2 e0       	ldi	r27, 0x02	; 2
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	bc 01       	movw	r22, r24
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	86 0f       	add	r24, r22
     d28:	97 1f       	adc	r25, r23
     d2a:	64 81       	ldd	r22, Z+4	; 0x04
     d2c:	75 81       	ldd	r23, Z+5	; 0x05
     d2e:	86 0f       	add	r24, r22
     d30:	97 1f       	adc	r25, r23
     d32:	11 96       	adiw	r26, 0x01	; 1
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	13 96       	adiw	r26, 0x03	; 3
			alarmTimeArray[1] = alarmMinute;
     d3a:	5c 93       	st	X, r21
     d3c:	4e 93       	st	-X, r20
     d3e:	12 97       	sbiw	r26, 0x02	; 2
     d40:	15 96       	adiw	r26, 0x05	; 5
			alarmTimeArray[2] = alarmSecond;
     d42:	3c 93       	st	X, r19
     d44:	2e 93       	st	-X, r18
     d46:	14 97       	sbiw	r26, 0x04	; 4
     d48:	81 e0       	ldi	r24, 0x01	; 1
			customAlarmSetDoneFlag = 1;
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <customAlarmSetDoneFlag+0x1>
     d50:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <customAlarmSetDoneFlag>
     d54:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <customAlarmSettingIndex+0x1>
			customAlarmSettingIndex = 0;
     d58:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <customAlarmSettingIndex>
     d5c:	08 95       	ret
			returnStatus = 0;
			break;
		}
		return returnStatus;
	}
}
     d5e:	8d e9       	ldi	r24, 0x9D	; 157
				customAlarm[customAlarmSettingIndex] = 0;
				returnStatus = 4;
				break;
				
			case SW15:
				return -99;
     d60:	9f ef       	ldi	r25, 0xFF	; 255
     d62:	08 95       	ret
     d64:	84 e0       	ldi	r24, 0x04	; 4
				returnStatus = 4;
				break;
		}
		//////////////////////////////////////////////////////////////////////////
		if(returnStatus == -1) {
			returnStatus = 4;
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	08 95       	ret
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	08 95       	ret

00000d70 <getAlarmTime>:
			returnStatus = 0;
			break;
		}
		return returnStatus;
	}
}
     d70:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <customAlarmSetDoneFlag>

int* getAlarmTime() {
	if(customAlarmSetDoneFlag == 1){
     d74:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <customAlarmSetDoneFlag+0x1>
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	39 f4       	brne	.+14     	; 0xd8a <getAlarmTime+0x1a>
		customAlarmSetDoneFlag = 0;
     d7c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <customAlarmSetDoneFlag+0x1>
     d80:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <customAlarmSetDoneFlag>
		return alarmTimeArray;
     d84:	89 e0       	ldi	r24, 0x09	; 9
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	08 95       	ret
	}
	else {
		int *tmp[3] = {-1,};
		return tmp;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
	}
     d8e:	08 95       	ret

00000d90 <setClock>:





void setClock(int interruptSecond, int segmentStopwatchInitFlag, int* alarmStore) {
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	eb 01       	movw	r28, r22
     d9c:	fa 01       	movw	r30, r20
	second += interruptSecond;
     d9e:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <second>
     da2:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <second+0x1>
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
	minute += second/60; 
     daa:	2c e3       	ldi	r18, 0x3C	; 60
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	b9 01       	movw	r22, r18
     db0:	8a d7       	rcall	.+3860   	; 0x1cc6 <__divmodhi4>
     db2:	f8 2e       	mov	r15, r24
     db4:	49 2f       	mov	r20, r25
     db6:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minute>
     dba:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <minute+0x1>
     dbe:	86 0f       	add	r24, r22
     dc0:	97 1f       	adc	r25, r23
	hour += minute/60;
     dc2:	b9 01       	movw	r22, r18
     dc4:	80 d7       	rcall	.+3840   	; 0x1cc6 <__divmodhi4>
     dc6:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <hour>
     dca:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <hour+0x1>
     dce:	62 0f       	add	r22, r18
     dd0:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
     dd2:	0f 2d       	mov	r16, r15
     dd4:	14 2f       	mov	r17, r20
     dd6:	f0 92 31 02 	sts	0x0231, r15	; 0x800231 <second>
     dda:	40 93 32 02 	sts	0x0232, r20	; 0x800232 <second+0x1>
	minute = minute%60;
     dde:	28 2f       	mov	r18, r24
     de0:	39 2f       	mov	r19, r25
     de2:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <minute>
     de6:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <minute+0x1>
	hour = hour%24;
     dea:	cb 01       	movw	r24, r22
     dec:	68 e1       	ldi	r22, 0x18	; 24
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	6a d7       	rcall	.+3796   	; 0x1cc6 <__divmodhi4>
     df2:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <hour+0x1>
     df6:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <hour>
	
	if(alarmStore[0] == hour && alarmStore[1] == minute && alarmStore[2] == second ){		
     dfa:	40 81       	ld	r20, Z
     dfc:	51 81       	ldd	r21, Z+1	; 0x01
     dfe:	84 17       	cp	r24, r20
     e00:	95 07       	cpc	r25, r21
     e02:	99 f4       	brne	.+38     	; 0xe2a <setClock+0x9a>
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	28 17       	cp	r18, r24
     e0a:	39 07       	cpc	r19, r25
     e0c:	71 f4       	brne	.+28     	; 0xe2a <setClock+0x9a>
     e0e:	84 81       	ldd	r24, Z+4	; 0x04
     e10:	95 81       	ldd	r25, Z+5	; 0x05
     e12:	08 17       	cp	r16, r24
     e14:	19 07       	cpc	r17, r25
     e16:	49 f4       	brne	.+18     	; 0xe2a <setClock+0x9a>
		LcdMove(1,0);
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	a0 dc       	rcall	.-1728   	; 0x75e <LcdMove>
		LcdPuts("Alarm Alert");
     e1e:	8d eb       	ldi	r24, 0xBD	; 189
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	8f dc       	rcall	.-1762   	; 0x742 <LcdPuts>
		//도트 매트리스로 알람
		//timer1_init();
		//dotmatrixActive();	
		TCCR1B |= (1 << CS11);
     e24:	8e b5       	in	r24, 0x2e	; 46
     e26:	82 60       	ori	r24, 0x02	; 2
     e28:	8e bd       	out	0x2e, r24	; 46
	}

	// STOPWATCH에서 LCD 사용중인 경우 미노출
	if(segmentStopwatchInitFlag == 0) {
     e2a:	cd 2b       	or	r28, r29
     e2c:	09 f0       	breq	.+2      	; 0xe30 <setClock+0xa0>
     e2e:	4a c0       	rjmp	.+148    	; 0xec4 <setClock+0x134>
		LcdMove(0,0);
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	94 dc       	rcall	.-1752   	; 0x75e <LcdMove>
		LcdPutchar((hour/10%10) + '0');
     e36:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <hour>
     e3a:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <hour+0x1>
     e3e:	ca e0       	ldi	r28, 0x0A	; 10
     e40:	d0 e0       	ldi	r29, 0x00	; 0
     e42:	be 01       	movw	r22, r28
     e44:	40 d7       	rcall	.+3712   	; 0x1cc6 <__divmodhi4>
     e46:	cb 01       	movw	r24, r22
     e48:	be 01       	movw	r22, r28
     e4a:	3d d7       	rcall	.+3706   	; 0x1cc6 <__divmodhi4>
     e4c:	80 5d       	subi	r24, 0xD0	; 208
     e4e:	56 dc       	rcall	.-1876   	; 0x6fc <LcdPutchar>
		LcdPutchar(hour%10 + '0');
     e50:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <hour>
     e54:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <hour+0x1>
     e58:	be 01       	movw	r22, r28
     e5a:	35 d7       	rcall	.+3690   	; 0x1cc6 <__divmodhi4>
     e5c:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar('h');
     e5e:	4e dc       	rcall	.-1892   	; 0x6fc <LcdPutchar>
     e60:	88 e6       	ldi	r24, 0x68	; 104
		
		LcdMove(0,4);
     e62:	4c dc       	rcall	.-1896   	; 0x6fc <LcdPutchar>
     e64:	64 e0       	ldi	r22, 0x04	; 4
     e66:	80 e0       	ldi	r24, 0x00	; 0
		LcdPutchar((minute/10%10) + '0');
     e68:	7a dc       	rcall	.-1804   	; 0x75e <LcdMove>
     e6a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minute>
     e6e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <minute+0x1>
     e72:	be 01       	movw	r22, r28
     e74:	28 d7       	rcall	.+3664   	; 0x1cc6 <__divmodhi4>
     e76:	cb 01       	movw	r24, r22
     e78:	be 01       	movw	r22, r28
     e7a:	25 d7       	rcall	.+3658   	; 0x1cc6 <__divmodhi4>
		LcdPutchar(minute%10 + '0');
     e7c:	80 5d       	subi	r24, 0xD0	; 208
     e7e:	3e dc       	rcall	.-1924   	; 0x6fc <LcdPutchar>
     e80:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minute>
     e84:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <minute+0x1>
     e88:	be 01       	movw	r22, r28
     e8a:	1d d7       	rcall	.+3642   	; 0x1cc6 <__divmodhi4>
		LcdPutchar('m');
     e8c:	80 5d       	subi	r24, 0xD0	; 208
     e8e:	36 dc       	rcall	.-1940   	; 0x6fc <LcdPutchar>
		
		LcdMove(0,8);
     e90:	8d e6       	ldi	r24, 0x6D	; 109
     e92:	34 dc       	rcall	.-1944   	; 0x6fc <LcdPutchar>
     e94:	68 e0       	ldi	r22, 0x08	; 8
		LcdPutchar((second/10%10) + '0');
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	62 dc       	rcall	.-1852   	; 0x75e <LcdMove>
     e9a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <second>
     e9e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <second+0x1>
     ea2:	be 01       	movw	r22, r28
     ea4:	10 d7       	rcall	.+3616   	; 0x1cc6 <__divmodhi4>
     ea6:	cb 01       	movw	r24, r22
     ea8:	be 01       	movw	r22, r28
     eaa:	0d d7       	rcall	.+3610   	; 0x1cc6 <__divmodhi4>
     eac:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar(second%10 + '0');
     eae:	26 dc       	rcall	.-1972   	; 0x6fc <LcdPutchar>
     eb0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <second>
     eb4:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <second+0x1>
     eb8:	be 01       	movw	r22, r28
     eba:	05 d7       	rcall	.+3594   	; 0x1cc6 <__divmodhi4>
     ebc:	80 5d       	subi	r24, 0xD0	; 208
     ebe:	1e dc       	rcall	.-1988   	; 0x6fc <LcdPutchar>
     ec0:	83 e7       	ldi	r24, 0x73	; 115
		LcdPutchar('s');
     ec2:	1c dc       	rcall	.-1992   	; 0x6fc <LcdPutchar>
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
	}
}
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	08 95       	ret

00000ed0 <setCustomClock>:
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17

// 사용자에게 입력 받아 시계 세팅
int setCustomClock(int* ClockCounter_SECOND) {
     ed4:	cf 93       	push	r28
     ed6:	8c 01       	movw	r16, r24
	// -1 : 숫자가 눌린 경우(전) , 0: 선택이 눌린 경우, 1: 숫자가 눌린 경우(후), 위로 눌린 경우
	int returnStatus = -1;
	// 키를 입력받는 변수
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
     ed8:	8a db       	rcall	.-2284   	; 0x5ee <KeyInput>
     eda:	c8 2f       	mov	r28, r24
	
	LcdMove(1,customClockSettingIndex);
     edc:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <customClockSettingIndex>
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	3d dc       	rcall	.-1926   	; 0x75e <LcdMove>
	while(1) {
		if(customClockSetInitFlag == 0){
     ee4:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <customClockSetInitFlag>
     ee8:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <customClockSetInitFlag+0x1>
     eec:	89 2b       	or	r24, r25
     eee:	79 f4       	brne	.+30     	; 0xf0e <setCustomClock+0x3e>
			LcdMove(1,0);
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	34 dc       	rcall	.-1944   	; 0x75e <LcdMove>
			LcdPuts("______");
     ef6:	89 ec       	ldi	r24, 0xC9	; 201
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	23 dc       	rcall	.-1978   	; 0x742 <LcdPuts>
			LcdMove(1,0);
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	2e dc       	rcall	.-1956   	; 0x75e <LcdMove>
     f02:	81 e0       	ldi	r24, 0x01	; 1
			customClockSetInitFlag = 1;
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <customClockSetInitFlag+0x1>
     f0a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <customClockSetInitFlag>
     f0e:	8c 2f       	mov	r24, r28
			LcdCommand(DISP_ON);
			msec_delay(500);
			return 1;
		}
		*/
		switch(keyInput) {
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fc 01       	movw	r30, r24
     f14:	71 97       	sbiw	r30, 0x11	; 17
     f16:	e4 37       	cpi	r30, 0x74	; 116
     f18:	f1 05       	cpc	r31, r1
     f1a:	18 f4       	brcc	.+6      	; 0xf22 <setCustomClock+0x52>
     f1c:	e6 54       	subi	r30, 0x46	; 70
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	e5 c6       	rjmp	.+3530   	; 0x1cec <__tablejump2__>
			case SW15:
				return -99;
				break;
				
			default:
				returnStatus = 1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	08 c1       	rjmp	.+528    	; 0x1138 <__stack+0x39>
			return 1;
		}
		*/
		switch(keyInput) {
			case SW0:
				LcdPutchar('1');
     f28:	81 e3       	ldi	r24, 0x31	; 49
     f2a:	e8 db       	rcall	.-2096   	; 0x6fc <LcdPutchar>
     f2c:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 1;
     f30:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	eb 5c       	subi	r30, 0xCB	; 203
     f3a:	fd 4f       	sbci	r31, 0xFD	; 253
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
				break;
     f44:	ee c0       	rjmp	.+476    	; 0x1122 <__stack+0x23>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
     f46:	82 e3       	ldi	r24, 0x32	; 50
     f48:	d9 db       	rcall	.-2126   	; 0x6fc <LcdPutchar>
     f4a:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 2;
     f4e:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	eb 5c       	subi	r30, 0xCB	; 203
     f58:	fd 4f       	sbci	r31, 0xFD	; 253
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
				break;
     f62:	df c0       	rjmp	.+446    	; 0x1122 <__stack+0x23>
			
			case SW2:
				LcdPutchar('3');
     f64:	83 e3       	ldi	r24, 0x33	; 51
     f66:	ca db       	rcall	.-2156   	; 0x6fc <LcdPutchar>
     f68:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 3;
     f6c:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	eb 5c       	subi	r30, 0xCB	; 203
     f76:	fd 4f       	sbci	r31, 0xFD	; 253
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
				break;
     f80:	d0 c0       	rjmp	.+416    	; 0x1122 <__stack+0x23>
			
			case SW4:
				LcdPutchar('4');
     f82:	84 e3       	ldi	r24, 0x34	; 52
     f84:	bb db       	rcall	.-2186   	; 0x6fc <LcdPutchar>
     f86:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 4;
     f8a:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	eb 5c       	subi	r30, 0xCB	; 203
     f94:	fd 4f       	sbci	r31, 0xFD	; 253
     f96:	84 e0       	ldi	r24, 0x04	; 4
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
				break;
     f9e:	c1 c0       	rjmp	.+386    	; 0x1122 <__stack+0x23>
			
			case SW5:
				LcdPutchar('5');
     fa0:	85 e3       	ldi	r24, 0x35	; 53
     fa2:	ac db       	rcall	.-2216   	; 0x6fc <LcdPutchar>
     fa4:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 5;
     fa8:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
     fac:	ee 0f       	add	r30, r30
     fae:	ff 1f       	adc	r31, r31
     fb0:	eb 5c       	subi	r30, 0xCB	; 203
     fb2:	fd 4f       	sbci	r31, 0xFD	; 253
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
				break;
     fbc:	b2 c0       	rjmp	.+356    	; 0x1122 <__stack+0x23>
			
			case SW6:
				LcdPutchar('6');
     fbe:	86 e3       	ldi	r24, 0x36	; 54
     fc0:	9d db       	rcall	.-2246   	; 0x6fc <LcdPutchar>
     fc2:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 6;
     fc6:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	eb 5c       	subi	r30, 0xCB	; 203
     fd0:	fd 4f       	sbci	r31, 0xFD	; 253
     fd2:	86 e0       	ldi	r24, 0x06	; 6
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
				break;
     fda:	a3 c0       	rjmp	.+326    	; 0x1122 <__stack+0x23>
			
			case SW8:
				LcdPutchar('7');
     fdc:	87 e3       	ldi	r24, 0x37	; 55
     fde:	8e db       	rcall	.-2276   	; 0x6fc <LcdPutchar>
     fe0:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 7;
     fe4:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	eb 5c       	subi	r30, 0xCB	; 203
     fee:	fd 4f       	sbci	r31, 0xFD	; 253
     ff0:	87 e0       	ldi	r24, 0x07	; 7
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	80 83       	st	Z, r24
				break;
     ff8:	94 c0       	rjmp	.+296    	; 0x1122 <__stack+0x23>
			
			case SW9:
				LcdPutchar('8');
     ffa:	88 e3       	ldi	r24, 0x38	; 56
     ffc:	7f db       	rcall	.-2306   	; 0x6fc <LcdPutchar>
     ffe:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
				customClock[customClockSettingIndex] = 8;
    1002:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	eb 5c       	subi	r30, 0xCB	; 203
    100c:	fd 4f       	sbci	r31, 0xFD	; 253
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
				break;
    1016:	85 c0       	rjmp	.+266    	; 0x1122 <__stack+0x23>
			
			case SW10:
				LcdPutchar('9');
    1018:	89 e3       	ldi	r24, 0x39	; 57
    101a:	70 db       	rcall	.-2336   	; 0x6fc <LcdPutchar>
				customClock[customClockSettingIndex] = 9;
    101c:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
    1020:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	eb 5c       	subi	r30, 0xCB	; 203
    102a:	fd 4f       	sbci	r31, 0xFD	; 253
    102c:	89 e0       	ldi	r24, 0x09	; 9
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
				break;
    1034:	76 c0       	rjmp	.+236    	; 0x1122 <__stack+0x23>
			
			case SW13:
				LcdPutchar('0');
    1036:	80 e3       	ldi	r24, 0x30	; 48
    1038:	61 db       	rcall	.-2366   	; 0x6fc <LcdPutchar>
				customClock[customClockSettingIndex] = 0;
    103a:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <customClockSettingIndex>
    103e:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	eb 5c       	subi	r30, 0xCB	; 203
    1048:	fd 4f       	sbci	r31, 0xFD	; 253
    104a:	11 82       	std	Z+1, r1	; 0x01
				break;
    104c:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
    104e:	69 c0       	rjmp	.+210    	; 0x1122 <__stack+0x23>
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	84 db       	rcall	.-2296   	; 0x75e <LcdMove>
				LcdPuts("1. SET          ");				
    1056:	80 ed       	ldi	r24, 0xD0	; 208
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	73 db       	rcall	.-2330   	; 0x742 <LcdPuts>
    105c:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <customClockSettingIndex+0x1>
			customClockSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			customClockSettingIndex = 0;
    1060:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <customClockSettingIndex>
    1064:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
    1066:	11 82       	std	Z+1, r1	; 0x01
    1068:	10 82       	st	Z, r1
    106a:	e5 e3       	ldi	r30, 0x35	; 53
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customClock[0] * 10 + customClock[1];
    106c:	f2 e0       	ldi	r31, 0x02	; 2
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	9c 01       	movw	r18, r24
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	22 81       	ldd	r18, Z+2	; 0x02
    108a:	33 81       	ldd	r19, Z+3	; 0x03
    108c:	82 0f       	add	r24, r18
    108e:	93 1f       	adc	r25, r19
    1090:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <hour+0x1>
    1094:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <hour>
    1098:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customClock[2] * 10 + customClock[3];
    109a:	95 81       	ldd	r25, Z+5	; 0x05
    109c:	9c 01       	movw	r18, r24
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	82 0f       	add	r24, r18
    10b0:	93 1f       	adc	r25, r19
    10b2:	26 81       	ldd	r18, Z+6	; 0x06
    10b4:	37 81       	ldd	r19, Z+7	; 0x07
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <minute+0x1>
    10be:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <minute>
    10c2:	80 85       	ldd	r24, Z+8	; 0x08
			second = customClock[4] * 10 + customClock[5];
    10c4:	91 85       	ldd	r25, Z+9	; 0x09
    10c6:	9c 01       	movw	r18, r24
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	82 0f       	add	r24, r18
    10da:	93 1f       	adc	r25, r19
    10dc:	22 85       	ldd	r18, Z+10	; 0x0a
    10de:	33 85       	ldd	r19, Z+11	; 0x0b
    10e0:	82 0f       	add	r24, r18
    10e2:	93 1f       	adc	r25, r19
    10e4:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <second+0x1>
    10e8:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <second>
    10ec:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <customClockSetInitFlag+0x1>
			customClockSetInitFlag = 0;
    10f0:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <customClockSetInitFlag>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --customClockSettingIndex);
    10f8:	1f c0       	rjmp	.+62     	; 0x1138 <__stack+0x39>
    10fa:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <customClockSettingIndex>
    10fe:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
    1102:	61 50       	subi	r22, 0x01	; 1
    1104:	71 09       	sbc	r23, r1
    1106:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <customClockSettingIndex+0x1>
    110a:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <customClockSettingIndex>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	26 db       	rcall	.-2484   	; 0x75e <LcdMove>
				LcdPutchar('_');
    1112:	8f e5       	ldi	r24, 0x5F	; 95
    1114:	f3 da       	rcall	.-2586   	; 0x6fc <LcdPutchar>
    1116:	81 e0       	ldi	r24, 0x01	; 1
				returnStatus = 1;
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e c0       	rjmp	.+28     	; 0x1138 <__stack+0x39>
    111c:	8d e9       	ldi	r24, 0x9D	; 157
				break;
				
			case SW15:
				return -99;
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	0b c0       	rjmp	.+22     	; 0x1138 <__stack+0x39>
    1122:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <customClockSettingIndex>
				returnStatus = 1;
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			customClockSettingIndex++;
    1126:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <customClockSettingIndex+0x1>
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <customClockSettingIndex+0x1>
    1130:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <customClockSettingIndex>
    1134:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 1;
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	cf 91       	pop	r28
			customClockSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <initMenu>:
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	0c db       	rcall	.-2536   	; 0x75e <LcdMove>
    1146:	84 e1       	ldi	r24, 0x14	; 20
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	fb da       	rcall	.-2570   	; 0x742 <LcdPuts>
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	06 db       	rcall	.-2548   	; 0x75e <LcdMove>
    1152:	85 e5       	ldi	r24, 0x55	; 85
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	f5 ca       	rjmp	.-2582   	; 0x742 <LcdPuts>
    1158:	08 95       	ret

0000115a <setMenu>:
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	c8 2f       	mov	r28, r24
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	fc da       	rcall	.-2568   	; 0x75e <LcdMove>
    1166:	c1 32       	cpi	r28, 0x21	; 33
    1168:	09 f4       	brne	.+2      	; 0x116c <setMenu+0x12>
    116a:	52 c0       	rjmp	.+164    	; 0x1210 <setMenu+0xb6>
    116c:	c1 34       	cpi	r28, 0x41	; 65
    116e:	09 f4       	brne	.+2      	; 0x1172 <setMenu+0x18>
    1170:	9a c0       	rjmp	.+308    	; 0x12a6 <setMenu+0x14c>
    1172:	c1 31       	cpi	r28, 0x11	; 17
    1174:	09 f0       	breq	.+2      	; 0x1178 <setMenu+0x1e>
    1176:	9c c0       	rjmp	.+312    	; 0x12b0 <setMenu+0x156>
    1178:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <nowMenuCursor>
    117c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <nowMenuCursor+0x1>
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	81 f4       	brne	.+32     	; 0x11a6 <setMenu+0x4c>
    1186:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <nowMenuCursor+0x1>
    118a:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <nowMenuCursor>
    118e:	85 e5       	ldi	r24, 0x55	; 85
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	d7 da       	rcall	.-2642   	; 0x742 <LcdPuts>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    119c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    11a0:	c0 e0       	ldi	r28, 0x00	; 0
    11a2:	d0 e0       	ldi	r29, 0x00	; 0
    11a4:	87 c0       	rjmp	.+270    	; 0x12b4 <setMenu+0x15a>
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	91 05       	cpc	r25, r1
    11aa:	91 f4       	brne	.+36     	; 0x11d0 <setMenu+0x76>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <nowMenuCursor+0x1>
    11b4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <nowMenuCursor>
    11b8:	83 e4       	ldi	r24, 0x43	; 67
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	c2 da       	rcall	.-2684   	; 0x742 <LcdPuts>
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    11c6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    11ca:	c0 e0       	ldi	r28, 0x00	; 0
    11cc:	d0 e0       	ldi	r29, 0x00	; 0
    11ce:	72 c0       	rjmp	.+228    	; 0x12b4 <setMenu+0x15a>
    11d0:	03 97       	sbiw	r24, 0x03	; 3
    11d2:	91 f4       	brne	.+36     	; 0x11f8 <setMenu+0x9e>
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <nowMenuCursor+0x1>
    11dc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <nowMenuCursor>
    11e0:	83 e3       	ldi	r24, 0x33	; 51
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	ae da       	rcall	.-2724   	; 0x742 <LcdPuts>
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    11ee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    11f2:	c0 e0       	ldi	r28, 0x00	; 0
    11f4:	d0 e0       	ldi	r29, 0x00	; 0
    11f6:	5e c0       	rjmp	.+188    	; 0x12b4 <setMenu+0x15a>
    11f8:	85 e5       	ldi	r24, 0x55	; 85
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	a2 da       	rcall	.-2748   	; 0x742 <LcdPuts>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    1206:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    120a:	c0 e0       	ldi	r28, 0x00	; 0
    120c:	d0 e0       	ldi	r29, 0x00	; 0
    120e:	52 c0       	rjmp	.+164    	; 0x12b4 <setMenu+0x15a>
    1210:	c0 91 43 02 	lds	r28, 0x0243	; 0x800243 <nowMenuCursor>
    1214:	d0 91 44 02 	lds	r29, 0x0244	; 0x800244 <nowMenuCursor+0x1>
    1218:	20 97       	sbiw	r28, 0x00	; 0
    121a:	81 f4       	brne	.+32     	; 0x123c <setMenu+0xe2>
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <nowMenuCursor+0x1>
    1224:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <nowMenuCursor>
    1228:	83 e4       	ldi	r24, 0x43	; 67
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	8a da       	rcall	.-2796   	; 0x742 <LcdPuts>
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    1236:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    123a:	3c c0       	rjmp	.+120    	; 0x12b4 <setMenu+0x15a>
    123c:	c1 30       	cpi	r28, 0x01	; 1
    123e:	d1 05       	cpc	r29, r1
    1240:	91 f4       	brne	.+36     	; 0x1266 <setMenu+0x10c>
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <nowMenuCursor+0x1>
    124a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <nowMenuCursor>
    124e:	83 e3       	ldi	r24, 0x33	; 51
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	77 da       	rcall	.-2834   	; 0x742 <LcdPuts>
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    125c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    1260:	c0 e0       	ldi	r28, 0x00	; 0
    1262:	d0 e0       	ldi	r29, 0x00	; 0
    1264:	27 c0       	rjmp	.+78     	; 0x12b4 <setMenu+0x15a>
    1266:	22 97       	sbiw	r28, 0x02	; 2
    1268:	91 f4       	brne	.+36     	; 0x128e <setMenu+0x134>
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <nowMenuCursor+0x1>
    1272:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <nowMenuCursor>
    1276:	80 e2       	ldi	r24, 0x20	; 32
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	63 da       	rcall	.-2874   	; 0x742 <LcdPuts>
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    1284:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    1288:	c0 e0       	ldi	r28, 0x00	; 0
    128a:	d0 e0       	ldi	r29, 0x00	; 0
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <setMenu+0x15a>
    128e:	80 e2       	ldi	r24, 0x20	; 32
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	57 da       	rcall	.-2898   	; 0x742 <LcdPuts>
    1294:	84 e0       	ldi	r24, 0x04	; 4
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    129c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    12a0:	c0 e0       	ldi	r28, 0x00	; 0
    12a2:	d0 e0       	ldi	r29, 0x00	; 0
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <setMenu+0x15a>
    12a6:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <nowStatus>
    12aa:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <nowStatus+0x1>
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <setMenu+0x15a>
    12b0:	c0 e0       	ldi	r28, 0x00	; 0
    12b2:	d0 e0       	ldi	r29, 0x00	; 0
    12b4:	ce 01       	movw	r24, r28
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <setStopwatch>:
// stopwatch stop flag
static int stopwatchStopFlag = 0;

static int stopwatchDisplayIndex = 0;

int setStopwatch(int* stopwatchInitFlag) {
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	8c 01       	movw	r16, r24
	int returnStatus = -1;
	// 처음 진입시에만 실행
	if(customStopwatchSetInitFlag == 0) {
    12c4:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <customStopwatchSetInitFlag>
    12c8:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <customStopwatchSetInitFlag+0x1>
    12cc:	89 2b       	or	r24, r25
    12ce:	71 f4       	brne	.+28     	; 0x12ec <setStopwatch+0x30>
		ISeg7Init();
    12d0:	f2 d8       	rcall	.-3612   	; 0x4b6 <ISeg7Init>
		ISeg7DispNum(segmentStopwatchDisplayNumber , 10);
    12d2:	6a e0       	ldi	r22, 0x0A	; 10
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <segmentStopwatchDisplayNumber>
    12da:	90 91 1c 0a 	lds	r25, 0x0A1C	; 0x800a1c <segmentStopwatchDisplayNumber+0x1>
    12de:	fe d8       	rcall	.-3588   	; 0x4dc <ISeg7DispNum>
		// 초기화면 세팅
		LcdMove(0,0);
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	3c da       	rcall	.-2952   	; 0x75e <LcdMove>
		LcdPuts("0m 00.0s     ");
    12e6:	81 ee       	ldi	r24, 0xE1	; 225
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	2b da       	rcall	.-2986   	; 0x742 <LcdPuts>
    12ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	customStopwatchSetInitFlag = 1;
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <customStopwatchSetInitFlag+0x1>
    12f4:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <customStopwatchSetInitFlag>

	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
    12f8:	7a d9       	rcall	.-3340   	; 0x5ee <KeyInput>
    12fa:	c8 2f       	mov	r28, r24
    12fc:	6a e0       	ldi	r22, 0x0A	; 10
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <segmentStopwatchDisplayNumber>
    1304:	90 91 1c 0a 	lds	r25, 0x0A1C	; 0x800a1c <segmentStopwatchDisplayNumber+0x1>
    1308:	e9 d8       	rcall	.-3630   	; 0x4dc <ISeg7DispNum>
    130a:	c1 34       	cpi	r28, 0x41	; 65
	while(1) {
		switch(keyInput) {
    130c:	29 f0       	breq	.+10     	; 0x1318 <setStopwatch+0x5c>
    130e:	c1 38       	cpi	r28, 0x81	; 129
    1310:	d1 f0       	breq	.+52     	; 0x1346 <setStopwatch+0x8a>
    1312:	83 e0       	ldi	r24, 0x03	; 3
				break;
			case SW15:
				return -99;
				break;
			default:
				returnStatus = 3;
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	19 c0       	rjmp	.+50     	; 0x134a <setStopwatch+0x8e>
    1318:	81 e0       	ldi	r24, 0x01	; 1
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	f8 01       	movw	r30, r16
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24
				returnStatus = 0;
				LcdMove(0,0);
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	1b da       	rcall	.-3018   	; 0x75e <LcdMove>
				LcdPuts("              ");
    1328:	8e ea       	ldi	r24, 0xAE	; 174
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	0a da       	rcall	.-3052   	; 0x742 <LcdPuts>
				
				LcdMove(1,0);
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	15 da       	rcall	.-3030   	; 0x75e <LcdMove>
				LcdPuts("              ");
    1334:	8e ea       	ldi	r24, 0xAE	; 174
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	04 da       	rcall	.-3064   	; 0x742 <LcdPuts>
    133a:	60 e0       	ldi	r22, 0x00	; 0
				
				LcdMove(0,0);
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	0f da       	rcall	.-3042   	; 0x75e <LcdMove>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
				returnStatus = 0;
    1344:	02 c0       	rjmp	.+4      	; 0x134a <setStopwatch+0x8e>
    1346:	8d e9       	ldi	r24, 0x9D	; 157
				
				LcdMove(1,0);
				LcdPuts("              ");
				
				LcdMove(0,0);
				break;
    1348:	9f ef       	ldi	r25, 0xFF	; 255
			case SW15:
				return -99;
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
		if(returnStatus == 0) {
			
		}
		return returnStatus;
	}
}
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <set7SegmentStopwatch>:
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13

// 스톱워치 시간증가 시작 및 버튼 별 기능 구현
int set7SegmentStopwatch(int clock_counter, unsigned char stopwatchKeyInput) {
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	8c 01       	movw	r16, r24
    1364:	c6 2f       	mov	r28, r22
	ISeg7Init();
    1366:	a7 d8       	rcall	.-3762   	; 0x4b6 <ISeg7Init>
	if(stopwatchStopFlag == 0 ) {	
    1368:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <stopwatchStopFlag>
    136c:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <stopwatchStopFlag+0x1>
    1370:	89 2b       	or	r24, r25
    1372:	09 f0       	breq	.+2      	; 0x1376 <set7SegmentStopwatch+0x24>
    1374:	d2 c2       	rjmp	.+1444   	; 0x191a <set7SegmentStopwatch+0x5c8>
		int nowStopwatchDisplayNumber = segmentStopwatchDisplayNumber + clock_counter;
    1376:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <segmentStopwatchDisplayNumber>
    137a:	90 91 1c 0a 	lds	r25, 0x0A1C	; 0x800a1c <segmentStopwatchDisplayNumber+0x1>
    137e:	80 0f       	add	r24, r16
    1380:	91 1f       	adc	r25, r17
		if(nowStopwatchDisplayNumber == 600) {	
    1382:	88 35       	cpi	r24, 0x58	; 88
    1384:	22 e0       	ldi	r18, 0x02	; 2
    1386:	92 07       	cpc	r25, r18
    1388:	11 f4       	brne	.+4      	; 0x138e <set7SegmentStopwatch+0x3c>
			nowStopwatchDisplayNumber += 400;	// 60초가 되면 1분으로 갱신
    138a:	88 ee       	ldi	r24, 0xE8	; 232
    138c:	93 e0       	ldi	r25, 0x03	; 3
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
    138e:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <segmentStopwatchDisplayNumber+0x1>
    1392:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <segmentStopwatchDisplayNumber>
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
    1396:	6a e0       	ldi	r22, 0x0A	; 10
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	a0 d8       	rcall	.-3776   	; 0x4dc <ISeg7DispNum>
	}
	
	switch(stopwatchKeyInput) {
    139c:	c1 32       	cpi	r28, 0x21	; 33
    139e:	09 f4       	brne	.+2      	; 0x13a2 <set7SegmentStopwatch+0x50>
    13a0:	d5 c1       	rjmp	.+938    	; 0x174c <set7SegmentStopwatch+0x3fa>
    13a2:	c1 38       	cpi	r28, 0x81	; 129
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <set7SegmentStopwatch+0x56>
    13a6:	b0 c2       	rjmp	.+1376   	; 0x1908 <set7SegmentStopwatch+0x5b6>
    13a8:	c1 31       	cpi	r28, 0x11	; 17
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <set7SegmentStopwatch+0x60>
			break;
		case SW15:
			return -99;
			break;
	}
	return 1;
    13ac:	c1 e0       	ldi	r28, 0x01	; 1
    13ae:	d0 e0       	ldi	r29, 0x00	; 0
    13b0:	bd c2       	rjmp	.+1402   	; 0x192c <set7SegmentStopwatch+0x5da>
	}
	
	switch(stopwatchKeyInput) {
		case SW3:
			// 스톱워치 진행중 시간기록
			if(stopwatchStopFlag == 0){
    13b2:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <stopwatchStopFlag>
    13b6:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <stopwatchStopFlag+0x1>
    13ba:	89 2b       	or	r24, r25
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <set7SegmentStopwatch+0x6e>
    13be:	16 c1       	rjmp	.+556    	; 0x15ec <set7SegmentStopwatch+0x29a>
			
				// 시간이 기록됨을 알리는 모터구동**************
				
				DDRG = 0xFF;
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
				PORTG = 0x0F;
    13c6:	c5 e6       	ldi	r28, 0x65	; 101
    13c8:	d0 e0       	ldi	r29, 0x00	; 0
    13ca:	8f e0       	ldi	r24, 0x0F	; 15
    13cc:	88 83       	st	Y, r24
				msec_delay(100);   //0.1초 동안 구동
    13ce:	84 e6       	ldi	r24, 0x64	; 100
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	e5 d9       	rcall	.-3126   	; 0x79e <msec_delay>
				PORTG = 0x00;
    13d4:	18 82       	st	Y, r1
				//************************************************


				
				// 첫 or 두번째 입력
				if(stopwatchDisplayIndex<=1) {
    13d6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    13da:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	91 05       	cpc	r25, r1
    13e2:	0c f0       	brlt	.+2      	; 0x13e6 <set7SegmentStopwatch+0x94>
					LcdMove(stopwatchDisplayIndex, 0);
    13e4:	52 c0       	rjmp	.+164    	; 0x148a <set7SegmentStopwatch+0x138>
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	ba d9       	rcall	.-3212   	; 0x75e <LcdMove>
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
    13ea:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <segmentStopwatchDisplayNumber>
    13ee:	90 91 1c 0a 	lds	r25, 0x0A1C	; 0x800a1c <segmentStopwatchDisplayNumber+0x1>
    13f2:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    13f6:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	e5 5b       	subi	r30, 0xB5	; 181
    1400:	fd 4f       	sbci	r31, 0xFD	; 253
    1402:	91 83       	std	Z+1, r25	; 0x01
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');	//1000으로 나누면 몫은 '분'에 해당하는 숫자만 남음.
    1404:	80 83       	st	Z, r24
    1406:	c8 ee       	ldi	r28, 0xE8	; 232
    1408:	d3 e0       	ldi	r29, 0x03	; 3
    140a:	be 01       	movw	r22, r28
    140c:	5c d4       	rcall	.+2232   	; 0x1cc6 <__divmodhi4>
    140e:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('m');
    1410:	86 0f       	add	r24, r22
    1412:	74 d9       	rcall	.-3352   	; 0x6fc <LcdPutchar>
    1414:	8d e6       	ldi	r24, 0x6D	; 109
					LcdPutchar(' ');
    1416:	72 d9       	rcall	.-3356   	; 0x6fc <LcdPutchar>
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	70 d9       	rcall	.-3360   	; 0x6fc <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');	//1000으로 나눈 나머지를 100으로 나누면 초의 십의자리에 해당하는 숫자만 남음
    141c:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1420:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	e5 5b       	subi	r30, 0xB5	; 181
    142a:	fd 4f       	sbci	r31, 0xFD	; 253
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	be 01       	movw	r22, r28
    1432:	49 d4       	rcall	.+2194   	; 0x1cc6 <__divmodhi4>
    1434:	c4 e6       	ldi	r28, 0x64	; 100
    1436:	d0 e0       	ldi	r29, 0x00	; 0
    1438:	be 01       	movw	r22, r28
    143a:	45 d4       	rcall	.+2186   	; 0x1cc6 <__divmodhi4>
    143c:	80 e3       	ldi	r24, 0x30	; 48
    143e:	86 0f       	add	r24, r22
    1440:	5d d9       	rcall	.-3398   	; 0x6fc <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0'); //위와 비슷한 논리
    1442:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1446:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	e5 5b       	subi	r30, 0xB5	; 181
    1450:	fd 4f       	sbci	r31, 0xFD	; 253
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	be 01       	movw	r22, r28
    1458:	36 d4       	rcall	.+2156   	; 0x1cc6 <__divmodhi4>
    145a:	ca e0       	ldi	r28, 0x0A	; 10
    145c:	d0 e0       	ldi	r29, 0x00	; 0
    145e:	be 01       	movw	r22, r28
    1460:	32 d4       	rcall	.+2148   	; 0x1cc6 <__divmodhi4>
    1462:	80 e3       	ldi	r24, 0x30	; 48
    1464:	86 0f       	add	r24, r22
					LcdPutchar('.');
    1466:	4a d9       	rcall	.-3436   	; 0x6fc <LcdPutchar>
    1468:	8e e2       	ldi	r24, 0x2E	; 46
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0'); //위와 비슷한 논리
    146a:	48 d9       	rcall	.-3440   	; 0x6fc <LcdPutchar>
    146c:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1470:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	e5 5b       	subi	r30, 0xB5	; 181
    147a:	fd 4f       	sbci	r31, 0xFD	; 253
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	be 01       	movw	r22, r28
    1482:	21 d4       	rcall	.+2114   	; 0x1cc6 <__divmodhi4>
    1484:	80 5d       	subi	r24, 0xD0	; 208
    1486:	3a d9       	rcall	.-3468   	; 0x6fc <LcdPutchar>
    1488:	a5 c0       	rjmp	.+330    	; 0x15d4 <set7SegmentStopwatch+0x282>
				}
				// 세번째 이상 입력
				else {
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	fc 01       	movw	r30, r24
    1490:	e5 5b       	subi	r30, 0xB5	; 181
    1492:	fd 4f       	sbci	r31, 0xFD	; 253
    1494:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <segmentStopwatchDisplayNumber>
    1498:	90 91 1c 0a 	lds	r25, 0x0A1C	; 0x800a1c <segmentStopwatchDisplayNumber+0x1>
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
					// 0번째 행 변경
					LcdMove(0,0);
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	5c d9       	rcall	.-3400   	; 0x75e <LcdMove>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
    14a6:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    14aa:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	e7 5b       	subi	r30, 0xB7	; 183
    14b4:	fd 4f       	sbci	r31, 0xFD	; 253
    14b6:	80 81       	ld	r24, Z
    14b8:	91 81       	ldd	r25, Z+1	; 0x01
    14ba:	0f 2e       	mov	r0, r31
    14bc:	f8 ee       	ldi	r31, 0xE8	; 232
    14be:	ef 2e       	mov	r14, r31
    14c0:	f3 e0       	ldi	r31, 0x03	; 3
    14c2:	ff 2e       	mov	r15, r31
    14c4:	f0 2d       	mov	r31, r0
    14c6:	b7 01       	movw	r22, r14
    14c8:	fe d3       	rcall	.+2044   	; 0x1cc6 <__divmodhi4>
    14ca:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('m');
    14cc:	86 0f       	add	r24, r22
    14ce:	16 d9       	rcall	.-3540   	; 0x6fc <LcdPutchar>
					LcdPutchar(' ');
    14d0:	8d e6       	ldi	r24, 0x6D	; 109
    14d2:	14 d9       	rcall	.-3544   	; 0x6fc <LcdPutchar>
    14d4:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    14d6:	12 d9       	rcall	.-3548   	; 0x6fc <LcdPutchar>
    14d8:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    14dc:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	e7 5b       	subi	r30, 0xB7	; 183
    14e6:	fd 4f       	sbci	r31, 0xFD	; 253
    14e8:	80 81       	ld	r24, Z
    14ea:	91 81       	ldd	r25, Z+1	; 0x01
    14ec:	b7 01       	movw	r22, r14
    14ee:	eb d3       	rcall	.+2006   	; 0x1cc6 <__divmodhi4>
    14f0:	04 e6       	ldi	r16, 0x64	; 100
    14f2:	10 e0       	ldi	r17, 0x00	; 0
    14f4:	b8 01       	movw	r22, r16
    14f6:	e7 d3       	rcall	.+1998   	; 0x1cc6 <__divmodhi4>
    14f8:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    14fa:	86 0f       	add	r24, r22
    14fc:	ff d8       	rcall	.-3586   	; 0x6fc <LcdPutchar>
    14fe:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1502:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	e7 5b       	subi	r30, 0xB7	; 183
    150c:	fd 4f       	sbci	r31, 0xFD	; 253
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	b8 01       	movw	r22, r16
    1514:	d8 d3       	rcall	.+1968   	; 0x1cc6 <__divmodhi4>
    1516:	ca e0       	ldi	r28, 0x0A	; 10
    1518:	d0 e0       	ldi	r29, 0x00	; 0
    151a:	be 01       	movw	r22, r28
    151c:	d4 d3       	rcall	.+1960   	; 0x1cc6 <__divmodhi4>
    151e:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('.');
    1520:	86 0f       	add	r24, r22
    1522:	ec d8       	rcall	.-3624   	; 0x6fc <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');
    1524:	8e e2       	ldi	r24, 0x2E	; 46
    1526:	ea d8       	rcall	.-3628   	; 0x6fc <LcdPutchar>
    1528:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    152c:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	e7 5b       	subi	r30, 0xB7	; 183
    1536:	fd 4f       	sbci	r31, 0xFD	; 253
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	be 01       	movw	r22, r28
					
					// 1번째 행 변경
					LcdMove(1,0);
    153e:	c3 d3       	rcall	.+1926   	; 0x1cc6 <__divmodhi4>
    1540:	80 5d       	subi	r24, 0xD0	; 208
    1542:	dc d8       	rcall	.-3656   	; 0x6fc <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	0a d9       	rcall	.-3564   	; 0x75e <LcdMove>
    154a:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    154e:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	e5 5b       	subi	r30, 0xB5	; 181
    1558:	fd 4f       	sbci	r31, 0xFD	; 253
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	b7 01       	movw	r22, r14
    1560:	b2 d3       	rcall	.+1892   	; 0x1cc6 <__divmodhi4>
					LcdPutchar('m');
    1562:	80 e3       	ldi	r24, 0x30	; 48
    1564:	86 0f       	add	r24, r22
					LcdPutchar(' ');
    1566:	ca d8       	rcall	.-3692   	; 0x6fc <LcdPutchar>
    1568:	8d e6       	ldi	r24, 0x6D	; 109
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    156a:	c8 d8       	rcall	.-3696   	; 0x6fc <LcdPutchar>
    156c:	80 e2       	ldi	r24, 0x20	; 32
    156e:	c6 d8       	rcall	.-3700   	; 0x6fc <LcdPutchar>
    1570:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1574:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	e5 5b       	subi	r30, 0xB5	; 181
    157e:	fd 4f       	sbci	r31, 0xFD	; 253
    1580:	80 81       	ld	r24, Z
    1582:	91 81       	ldd	r25, Z+1	; 0x01
    1584:	b7 01       	movw	r22, r14
    1586:	9f d3       	rcall	.+1854   	; 0x1cc6 <__divmodhi4>
    1588:	b8 01       	movw	r22, r16
    158a:	9d d3       	rcall	.+1850   	; 0x1cc6 <__divmodhi4>
    158c:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    158e:	86 0f       	add	r24, r22
    1590:	b5 d8       	rcall	.-3734   	; 0x6fc <LcdPutchar>
    1592:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1596:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    159a:	ee 0f       	add	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	e5 5b       	subi	r30, 0xB5	; 181
    15a0:	fd 4f       	sbci	r31, 0xFD	; 253
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	b8 01       	movw	r22, r16
    15a8:	8e d3       	rcall	.+1820   	; 0x1cc6 <__divmodhi4>
    15aa:	be 01       	movw	r22, r28
    15ac:	8c d3       	rcall	.+1816   	; 0x1cc6 <__divmodhi4>
    15ae:	80 e3       	ldi	r24, 0x30	; 48
    15b0:	86 0f       	add	r24, r22
    15b2:	a4 d8       	rcall	.-3768   	; 0x6fc <LcdPutchar>
					LcdPutchar('.');
    15b4:	8e e2       	ldi	r24, 0x2E	; 46
    15b6:	a2 d8       	rcall	.-3772   	; 0x6fc <LcdPutchar>
    15b8:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    15bc:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	e5 5b       	subi	r30, 0xB5	; 181
    15c6:	fd 4f       	sbci	r31, 0xFD	; 253
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	be 01       	movw	r22, r28
    15ce:	7b d3       	rcall	.+1782   	; 0x1cc6 <__divmodhi4>
    15d0:	80 5d       	subi	r24, 0xD0	; 208
    15d2:	94 d8       	rcall	.-3800   	; 0x6fc <LcdPutchar>
    15d4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <stopwatchDisplayIndex>
				}
				stopwatchDisplayIndex += 1;
    15d8:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <stopwatchDisplayIndex+0x1>
    15e2:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <stopwatchDisplayIndex>
			break;
		case SW15:
			return -99;
			break;
	}
	return 1;
    15e6:	c1 e0       	ldi	r28, 0x01	; 1
    15e8:	d0 e0       	ldi	r29, 0x00	; 0
    15ea:	a0 c1       	rjmp	.+832    	; 0x192c <set7SegmentStopwatch+0x5da>
				stopwatchDisplayIndex += 1;
			}
			// 아래키 눌러서 stopwatchStopFlag = 1이 된 경우 즉, 스톱워치가 멈춘 경우
			else {
				// 기록된 시간이 3개 이상인 경우에만
				if(stopwatchDisplayIndex >= 2){				
    15ec:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    15f0:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    15f4:	02 97       	sbiw	r24, 0x02	; 2
    15f6:	0c f4       	brge	.+2      	; 0x15fa <set7SegmentStopwatch+0x2a8>
					LcdMove(0,0);
    15f8:	8a c1       	rjmp	.+788    	; 0x190e <set7SegmentStopwatch+0x5bc>
    15fa:	60 e0       	ldi	r22, 0x00	; 0
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]/1000+'0');
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	af d8       	rcall	.-3746   	; 0x75e <LcdMove>
    1600:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1604:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1608:	ee 0f       	add	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	e9 5b       	subi	r30, 0xB9	; 185
    160e:	fd 4f       	sbci	r31, 0xFD	; 253
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	0f 2e       	mov	r0, r31
    1616:	f8 ee       	ldi	r31, 0xE8	; 232
    1618:	ef 2e       	mov	r14, r31
    161a:	f3 e0       	ldi	r31, 0x03	; 3
    161c:	ff 2e       	mov	r15, r31
    161e:	f0 2d       	mov	r31, r0
    1620:	b7 01       	movw	r22, r14
					LcdPutchar('m');
    1622:	51 d3       	rcall	.+1698   	; 0x1cc6 <__divmodhi4>
    1624:	80 e3       	ldi	r24, 0x30	; 48
    1626:	86 0f       	add	r24, r22
					LcdPutchar(' ');
    1628:	69 d8       	rcall	.-3886   	; 0x6fc <LcdPutchar>
    162a:	8d e6       	ldi	r24, 0x6D	; 109
    162c:	67 d8       	rcall	.-3890   	; 0x6fc <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%1000/100+'0');
    162e:	80 e2       	ldi	r24, 0x20	; 32
    1630:	65 d8       	rcall	.-3894   	; 0x6fc <LcdPutchar>
    1632:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1636:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	e9 5b       	subi	r30, 0xB9	; 185
    1640:	fd 4f       	sbci	r31, 0xFD	; 253
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	b7 01       	movw	r22, r14
    1648:	3e d3       	rcall	.+1660   	; 0x1cc6 <__divmodhi4>
    164a:	04 e6       	ldi	r16, 0x64	; 100
    164c:	10 e0       	ldi	r17, 0x00	; 0
    164e:	b8 01       	movw	r22, r16
    1650:	3a d3       	rcall	.+1652   	; 0x1cc6 <__divmodhi4>
    1652:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%100/10+'0');
    1654:	86 0f       	add	r24, r22
    1656:	52 d8       	rcall	.-3932   	; 0x6fc <LcdPutchar>
    1658:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    165c:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	e9 5b       	subi	r30, 0xB9	; 185
    1666:	fd 4f       	sbci	r31, 0xFD	; 253
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	b8 01       	movw	r22, r16
    166e:	2b d3       	rcall	.+1622   	; 0x1cc6 <__divmodhi4>
    1670:	ca e0       	ldi	r28, 0x0A	; 10
    1672:	d0 e0       	ldi	r29, 0x00	; 0
    1674:	be 01       	movw	r22, r28
    1676:	27 d3       	rcall	.+1614   	; 0x1cc6 <__divmodhi4>
    1678:	80 e3       	ldi	r24, 0x30	; 48
					LcdPutchar('.');
    167a:	86 0f       	add	r24, r22
    167c:	3f d8       	rcall	.-3970   	; 0x6fc <LcdPutchar>
    167e:	8e e2       	ldi	r24, 0x2E	; 46
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%10+'0');
    1680:	3d d8       	rcall	.-3974   	; 0x6fc <LcdPutchar>
    1682:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1686:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	e9 5b       	subi	r30, 0xB9	; 185
    1690:	fd 4f       	sbci	r31, 0xFD	; 253
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	be 01       	movw	r22, r28
    1698:	16 d3       	rcall	.+1580   	; 0x1cc6 <__divmodhi4>
    169a:	80 5d       	subi	r24, 0xD0	; 208
					
					// 1번째 행 변경
					LcdMove(1,0);
    169c:	2f d8       	rcall	.-4002   	; 0x6fc <LcdPutchar>
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
    16a2:	5d d8       	rcall	.-3910   	; 0x75e <LcdMove>
    16a4:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    16a8:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	e7 5b       	subi	r30, 0xB7	; 183
    16b2:	fd 4f       	sbci	r31, 0xFD	; 253
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	b7 01       	movw	r22, r14
    16ba:	05 d3       	rcall	.+1546   	; 0x1cc6 <__divmodhi4>
    16bc:	80 e3       	ldi	r24, 0x30	; 48
    16be:	86 0f       	add	r24, r22
    16c0:	1d d8       	rcall	.-4038   	; 0x6fc <LcdPutchar>
					LcdPutchar('m');
    16c2:	8d e6       	ldi	r24, 0x6D	; 109
    16c4:	1b d8       	rcall	.-4042   	; 0x6fc <LcdPutchar>
    16c6:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(' ');
    16c8:	19 d8       	rcall	.-4046   	; 0x6fc <LcdPutchar>
    16ca:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    16ce:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	e7 5b       	subi	r30, 0xB7	; 183
    16d8:	fd 4f       	sbci	r31, 0xFD	; 253
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	b7 01       	movw	r22, r14
    16e0:	f2 d2       	rcall	.+1508   	; 0x1cc6 <__divmodhi4>
    16e2:	b8 01       	movw	r22, r16
    16e4:	f0 d2       	rcall	.+1504   	; 0x1cc6 <__divmodhi4>
    16e6:	80 e3       	ldi	r24, 0x30	; 48
    16e8:	86 0f       	add	r24, r22
    16ea:	08 d8       	rcall	.-4080   	; 0x6fc <LcdPutchar>
    16ec:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    16f0:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	e7 5b       	subi	r30, 0xB7	; 183
    16fa:	fd 4f       	sbci	r31, 0xFD	; 253
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	b8 01       	movw	r22, r16
    1702:	e1 d2       	rcall	.+1474   	; 0x1cc6 <__divmodhi4>
    1704:	be 01       	movw	r22, r28
    1706:	df d2       	rcall	.+1470   	; 0x1cc6 <__divmodhi4>
    1708:	80 e3       	ldi	r24, 0x30	; 48
    170a:	86 0f       	add	r24, r22
    170c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    1710:	8e e2       	ldi	r24, 0x2E	; 46
    1712:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    1716:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    171a:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
					LcdPutchar('.');
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');	
    1722:	e7 5b       	subi	r30, 0xB7	; 183
    1724:	fd 4f       	sbci	r31, 0xFD	; 253
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	be 01       	movw	r22, r28
    172c:	cc d2       	rcall	.+1432   	; 0x1cc6 <__divmodhi4>
    172e:	80 5d       	subi	r24, 0xD0	; 208
    1730:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    1734:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1738:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <stopwatchDisplayIndex+0x1>
					stopwatchDisplayIndex -= 1;
    1742:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <stopwatchDisplayIndex>
    1746:	c1 e0       	ldi	r28, 0x01	; 1
    1748:	d0 e0       	ldi	r29, 0x00	; 0
    174a:	f0 c0       	rjmp	.+480    	; 0x192c <set7SegmentStopwatch+0x5da>
    174c:	c0 91 47 02 	lds	r28, 0x0247	; 0x800247 <stopwatchStopFlag>
    1750:	d0 91 48 02 	lds	r29, 0x0248	; 0x800248 <stopwatchStopFlag+0x1>
			break;
		case SW15:
			return -99;
			break;
	}
	return 1;
    1754:	c1 30       	cpi	r28, 0x01	; 1
    1756:	d1 05       	cpc	r29, r1
				}
			}
			break;
			
		case SW7:
			if(stopwatchStopFlag == 1) {	//스톱워치가 멈춘 경우		
    1758:	09 f0       	breq	.+2      	; 0x175c <set7SegmentStopwatch+0x40a>
    175a:	c4 c0       	rjmp	.+392    	; 0x18e4 <set7SegmentStopwatch+0x592>
    175c:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1760:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1764:	ee 0f       	add	r30, r30
				if(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1] != 0){
    1766:	ff 1f       	adc	r31, r31
    1768:	e3 5b       	subi	r30, 0xB3	; 179
    176a:	fd 4f       	sbci	r31, 0xFD	; 253
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	89 2b       	or	r24, r25
    1772:	09 f4       	brne	.+2      	; 0x1776 <set7SegmentStopwatch+0x424>
    1774:	db c0       	rjmp	.+438    	; 0x192c <set7SegmentStopwatch+0x5da>
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	0e 94 af 03 	call	0x75e	; 0x75e <LcdMove>
					LcdMove(0,0);
    177e:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1782:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	e5 5b       	subi	r30, 0xB5	; 181
    178c:	fd 4f       	sbci	r31, 0xFD	; 253
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	0f 2e       	mov	r0, r31
    1794:	f8 ee       	ldi	r31, 0xE8	; 232
    1796:	cf 2e       	mov	r12, r31
    1798:	f3 e0       	ldi	r31, 0x03	; 3
    179a:	df 2e       	mov	r13, r31
    179c:	f0 2d       	mov	r31, r0
    179e:	b6 01       	movw	r22, r12
    17a0:	92 d2       	rcall	.+1316   	; 0x1cc6 <__divmodhi4>
    17a2:	80 e3       	ldi	r24, 0x30	; 48
    17a4:	86 0f       	add	r24, r22
    17a6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    17aa:	8d e6       	ldi	r24, 0x6D	; 109
    17ac:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
					LcdPutchar('m');
    17b0:	80 e2       	ldi	r24, 0x20	; 32
    17b2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
					LcdPutchar(' ');
    17b6:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    17ba:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	e5 5b       	subi	r30, 0xB5	; 181
    17c4:	fd 4f       	sbci	r31, 0xFD	; 253
    17c6:	80 81       	ld	r24, Z
    17c8:	91 81       	ldd	r25, Z+1	; 0x01
    17ca:	b6 01       	movw	r22, r12
    17cc:	7c d2       	rcall	.+1272   	; 0x1cc6 <__divmodhi4>
    17ce:	0f 2e       	mov	r0, r31
    17d0:	f4 e6       	ldi	r31, 0x64	; 100
    17d2:	ef 2e       	mov	r14, r31
    17d4:	f1 2c       	mov	r15, r1
    17d6:	f0 2d       	mov	r31, r0
    17d8:	b7 01       	movw	r22, r14
    17da:	75 d2       	rcall	.+1258   	; 0x1cc6 <__divmodhi4>
    17dc:	80 e3       	ldi	r24, 0x30	; 48
    17de:	86 0f       	add	r24, r22
    17e0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    17e4:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    17e8:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    17ec:	ee 0f       	add	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	e5 5b       	subi	r30, 0xB5	; 181
    17f2:	fd 4f       	sbci	r31, 0xFD	; 253
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	b7 01       	movw	r22, r14
    17fa:	65 d2       	rcall	.+1226   	; 0x1cc6 <__divmodhi4>
    17fc:	0a e0       	ldi	r16, 0x0A	; 10
    17fe:	10 e0       	ldi	r17, 0x00	; 0
    1800:	b8 01       	movw	r22, r16
    1802:	61 d2       	rcall	.+1218   	; 0x1cc6 <__divmodhi4>
    1804:	80 e3       	ldi	r24, 0x30	; 48
    1806:	86 0f       	add	r24, r22
    1808:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    180c:	8e e2       	ldi	r24, 0x2E	; 46
    180e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
					LcdPutchar('.');
    1812:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    1816:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	e5 5b       	subi	r30, 0xB5	; 181
    1820:	fd 4f       	sbci	r31, 0xFD	; 253
    1822:	80 81       	ld	r24, Z
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	b8 01       	movw	r22, r16
    1828:	4e d2       	rcall	.+1180   	; 0x1cc6 <__divmodhi4>
    182a:	80 5d       	subi	r24, 0xD0	; 208
    182c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
					
					// 1번째 행 변경
					LcdMove(1,0);
    1834:	0e 94 af 03 	call	0x75e	; 0x75e <LcdMove>
    1838:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]/1000+'0');
    183c:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	e3 5b       	subi	r30, 0xB3	; 179
    1846:	fd 4f       	sbci	r31, 0xFD	; 253
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	b6 01       	movw	r22, r12
    184e:	3b d2       	rcall	.+1142   	; 0x1cc6 <__divmodhi4>
    1850:	80 e3       	ldi	r24, 0x30	; 48
    1852:	86 0f       	add	r24, r22
    1854:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    1858:	8d e6       	ldi	r24, 0x6D	; 109
    185a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
					LcdPutchar('m');
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
					LcdPutchar(' ');
    1864:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%1000/100+'0');
    1868:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    186c:	ee 0f       	add	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	e3 5b       	subi	r30, 0xB3	; 179
    1872:	fd 4f       	sbci	r31, 0xFD	; 253
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	b6 01       	movw	r22, r12
    187a:	25 d2       	rcall	.+1098   	; 0x1cc6 <__divmodhi4>
    187c:	b7 01       	movw	r22, r14
    187e:	23 d2       	rcall	.+1094   	; 0x1cc6 <__divmodhi4>
    1880:	80 e3       	ldi	r24, 0x30	; 48
    1882:	86 0f       	add	r24, r22
    1884:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    1888:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    188c:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%100/10+'0');
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	e3 5b       	subi	r30, 0xB3	; 179
    1896:	fd 4f       	sbci	r31, 0xFD	; 253
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	b7 01       	movw	r22, r14
    189e:	13 d2       	rcall	.+1062   	; 0x1cc6 <__divmodhi4>
    18a0:	b8 01       	movw	r22, r16
    18a2:	11 d2       	rcall	.+1058   	; 0x1cc6 <__divmodhi4>
    18a4:	80 e3       	ldi	r24, 0x30	; 48
    18a6:	86 0f       	add	r24, r22
    18a8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    18ac:	8e e2       	ldi	r24, 0x2E	; 46
    18ae:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    18b2:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    18b6:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
					LcdPutchar('.');
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%10+'0');
    18be:	e3 5b       	subi	r30, 0xB3	; 179
    18c0:	fd 4f       	sbci	r31, 0xFD	; 253
    18c2:	80 81       	ld	r24, Z
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	b8 01       	movw	r22, r16
    18c8:	fe d1       	rcall	.+1020   	; 0x1cc6 <__divmodhi4>
    18ca:	80 5d       	subi	r24, 0xD0	; 208
    18cc:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
    18d0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <stopwatchDisplayIndex>
    18d4:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <stopwatchDisplayIndex+0x1>
					stopwatchDisplayIndex += 1;
    18de:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <stopwatchDisplayIndex>
    18e2:	24 c0       	rjmp	.+72     	; 0x192c <set7SegmentStopwatch+0x5da>
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <stopwatchStopFlag+0x1>
    18ec:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <stopwatchStopFlag>
    18f0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <stopwatchDisplayIndex>
				}
			}
			else {
				stopwatchStopFlag = 1;
    18f4:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <stopwatchDisplayIndex+0x1>
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <stopwatchDisplayIndex+0x1>
				stopwatchDisplayIndex-=1;	
    18fe:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <stopwatchDisplayIndex>
    1902:	c1 e0       	ldi	r28, 0x01	; 1
    1904:	d0 e0       	ldi	r29, 0x00	; 0
    1906:	12 c0       	rjmp	.+36     	; 0x192c <set7SegmentStopwatch+0x5da>
    1908:	cd e9       	ldi	r28, 0x9D	; 157
    190a:	df ef       	ldi	r29, 0xFF	; 255
    190c:	0f c0       	rjmp	.+30     	; 0x192c <set7SegmentStopwatch+0x5da>
    190e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
		case SW15:
			return -99;
			break;
	}
	return 1;
    1910:	d0 e0       	ldi	r29, 0x00	; 0
    1912:	0c c0       	rjmp	.+24     	; 0x192c <set7SegmentStopwatch+0x5da>
    1914:	cd e9       	ldi	r28, 0x9D	; 157
				stopwatchStopFlag = 1;
				stopwatchDisplayIndex-=1;	
			}
			break;
		case SW15:
			return -99;
    1916:	df ef       	ldi	r29, 0xFF	; 255
    1918:	09 c0       	rjmp	.+18     	; 0x192c <set7SegmentStopwatch+0x5da>
    191a:	c1 32       	cpi	r28, 0x21	; 33
			break;
	}
	return 1;
    191c:	09 f4       	brne	.+2      	; 0x1920 <set7SegmentStopwatch+0x5ce>
    191e:	16 cf       	rjmp	.-468    	; 0x174c <set7SegmentStopwatch+0x3fa>
    1920:	c1 38       	cpi	r28, 0x81	; 129
				stopwatchStopFlag = 1;
				stopwatchDisplayIndex-=1;	
			}
			break;
		case SW15:
			return -99;
    1922:	c1 f3       	breq	.-16     	; 0x1914 <set7SegmentStopwatch+0x5c2>
    1924:	c1 31       	cpi	r28, 0x11	; 17
    1926:	09 f0       	breq	.+2      	; 0x192a <set7SegmentStopwatch+0x5d8>
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
	}
	
	switch(stopwatchKeyInput) {
    1928:	41 cd       	rjmp	.-1406   	; 0x13ac <set7SegmentStopwatch+0x5a>
    192a:	60 ce       	rjmp	.-832    	; 0x15ec <set7SegmentStopwatch+0x29a>
    192c:	ce 01       	movw	r24, r28
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
		case SW15:
			return -99;
			break;
	}
	return 1;
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	08 95       	ret

00001940 <setTimer>:

// 7세그먼트 출력용 숫자
unsigned short segmentDisplayNumber = 0;


int setTimer(int* timerInitFlag) {
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	ec 01       	movw	r28, r24
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customTimerSetInitFlag == 0){
    1946:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <customTimerSetInitFlag>
    194a:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <customTimerSetInitFlag+0x1>
    194e:	89 2b       	or	r24, r25
    1950:	a1 f4       	brne	.+40     	; 0x197a <setTimer+0x3a>
		// 초기화면 세팅
		LcdMove(0,0);
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	0e 94 af 03 	call	0x75e	; 0x75e <LcdMove>
		LcdPuts("0m 00.0s     ");
    195a:	81 ee       	ldi	r24, 0xE1	; 225
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	0e 94 a1 03 	call	0x742	; 0x742 <LcdPuts>
		LcdCommand(HOME);
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	0e 94 36 03 	call	0x66c	; 0x66c <LcdCommand>
		LcdCommand(CURSOR_ON);
    1968:	8e e0       	ldi	r24, 0x0E	; 14
    196a:	0e 94 36 03 	call	0x66c	; 0x66c <LcdCommand>
		customTimerSetInitFlag = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	90 93 20 0a 	sts	0x0A20, r25	; 0x800a20 <customTimerSetInitFlag+0x1>
    1976:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <customTimerSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
    197a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <KeyInput>
	
	while(1) {
		switch(keyInput) {
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	fc 01       	movw	r30, r24
    1982:	71 97       	sbiw	r30, 0x11	; 17
    1984:	e8 37       	cpi	r30, 0x78	; 120
    1986:	f1 05       	cpc	r31, r1
    1988:	08 f0       	brcs	.+2      	; 0x198c <setTimer+0x4c>
    198a:	5c c1       	rjmp	.+696    	; 0x1c44 <setTimer+0x304>
    198c:	e2 5d       	subi	r30, 0xD2	; 210
    198e:	fe 4f       	sbci	r31, 0xFE	; 254
    1990:	ad c1       	rjmp	.+858    	; 0x1cec <__tablejump2__>
			case SW0:
				LcdPutchar('1');
    1992:	81 e3       	ldi	r24, 0x31	; 49
    1994:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    1998:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    199c:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    19a6:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 1;
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	fc 01       	movw	r30, r24
    19b0:	ef 5d       	subi	r30, 0xDF	; 223
    19b2:	f5 4f       	sbci	r31, 0xF5	; 245
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
				break;
    19bc:	40 c1       	rjmp	.+640    	; 0x1c3e <setTimer+0x2fe>
			
			case SW1:				
				LcdPutchar('2');
    19be:	82 e3       	ldi	r24, 0x32	; 50
    19c0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    19c4:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    19c8:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    19d2:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 2;
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	fc 01       	movw	r30, r24
    19dc:	ef 5d       	subi	r30, 0xDF	; 223
    19de:	f5 4f       	sbci	r31, 0xF5	; 245
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
				break;
    19e8:	2a c1       	rjmp	.+596    	; 0x1c3e <setTimer+0x2fe>
			
			case SW2:
				LcdPutchar('3');
    19ea:	83 e3       	ldi	r24, 0x33	; 51
    19ec:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    19f0:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    19f4:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    19fe:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 3;
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	fc 01       	movw	r30, r24
    1a08:	ef 5d       	subi	r30, 0xDF	; 223
    1a0a:	f5 4f       	sbci	r31, 0xF5	; 245
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
				break;
    1a14:	14 c1       	rjmp	.+552    	; 0x1c3e <setTimer+0x2fe>
			
			case SW4:
				LcdPutchar('4');
    1a16:	84 e3       	ldi	r24, 0x34	; 52
    1a18:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    1a1c:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1a20:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1a2a:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 4;
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	fc 01       	movw	r30, r24
    1a34:	ef 5d       	subi	r30, 0xDF	; 223
    1a36:	f5 4f       	sbci	r31, 0xF5	; 245
    1a38:	84 e0       	ldi	r24, 0x04	; 4
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
				break;
    1a40:	fe c0       	rjmp	.+508    	; 0x1c3e <setTimer+0x2fe>
			
			case SW5:
				LcdPutchar('5');
    1a42:	85 e3       	ldi	r24, 0x35	; 53
    1a44:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    1a48:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1a4c:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1a56:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 5;
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	fc 01       	movw	r30, r24
    1a60:	ef 5d       	subi	r30, 0xDF	; 223
    1a62:	f5 4f       	sbci	r31, 0xF5	; 245
    1a64:	85 e0       	ldi	r24, 0x05	; 5
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
				break;
    1a6c:	e8 c0       	rjmp	.+464    	; 0x1c3e <setTimer+0x2fe>
			
			case SW6:
				LcdPutchar('6');
    1a6e:	86 e3       	ldi	r24, 0x36	; 54
    1a70:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    1a74:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1a78:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1a82:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 6;
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	ef 5d       	subi	r30, 0xDF	; 223
    1a8e:	f5 4f       	sbci	r31, 0xF5	; 245
    1a90:	86 e0       	ldi	r24, 0x06	; 6
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
				break;
    1a98:	d2 c0       	rjmp	.+420    	; 0x1c3e <setTimer+0x2fe>
			
			case SW8:
				LcdPutchar('7');
    1a9a:	87 e3       	ldi	r24, 0x37	; 55
    1a9c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    1aa0:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1aa4:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1aae:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 7;
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	ef 5d       	subi	r30, 0xDF	; 223
    1aba:	f5 4f       	sbci	r31, 0xF5	; 245
    1abc:	87 e0       	ldi	r24, 0x07	; 7
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
				break;
    1ac4:	bc c0       	rjmp	.+376    	; 0x1c3e <setTimer+0x2fe>
			
			case SW9:
				LcdPutchar('8');
    1ac6:	88 e3       	ldi	r24, 0x38	; 56
    1ac8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    1acc:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1ad0:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1ada:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 8;
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	ef 5d       	subi	r30, 0xDF	; 223
    1ae6:	f5 4f       	sbci	r31, 0xF5	; 245
    1ae8:	88 e0       	ldi	r24, 0x08	; 8
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
				break;
    1af0:	a6 c0       	rjmp	.+332    	; 0x1c3e <setTimer+0x2fe>
			
			case SW10:
				LcdPutchar('9');
    1af2:	89 e3       	ldi	r24, 0x39	; 57
    1af4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    1af8:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1afc:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1b06:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 9;
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	fc 01       	movw	r30, r24
    1b10:	ef 5d       	subi	r30, 0xDF	; 223
    1b12:	f5 4f       	sbci	r31, 0xF5	; 245
    1b14:	89 e0       	ldi	r24, 0x09	; 9
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
				break;
    1b1c:	90 c0       	rjmp	.+288    	; 0x1c3e <setTimer+0x2fe>
			
			case SW13:
				LcdPutchar('0');
    1b1e:	80 e3       	ldi	r24, 0x30	; 48
    1b20:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LcdPutchar>
				customTimerSettingIndex++;
    1b24:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1b28:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1b32:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	ef 5d       	subi	r30, 0xDF	; 223
    1b3e:	f5 4f       	sbci	r31, 0xF5	; 245
    1b40:	11 82       	std	Z+1, r1	; 0x01
    1b42:	10 82       	st	Z, r1
				break;
    1b44:	7c c0       	rjmp	.+248    	; 0x1c3e <setTimer+0x2fe>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
    1b46:	80 e1       	ldi	r24, 0x10	; 16
    1b48:	0e 94 36 03 	call	0x66c	; 0x66c <LcdCommand>
				customTimerSettingIndex -= 1;
    1b4c:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1b50:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1b5a:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	fc 01       	movw	r30, r24
    1b64:	ef 5d       	subi	r30, 0xDF	; 223
    1b66:	f5 4f       	sbci	r31, 0xF5	; 245
    1b68:	11 82       	std	Z+1, r1	; 0x01
    1b6a:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    1b6c:	6b c0       	rjmp	.+214    	; 0x1c44 <setTimer+0x304>
				
			// 아래 키 입력되는 케이스
			case SW7:
				customTimerSettingIndex += 1;
    1b6e:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1b72:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <customTimerSettingIndex+0x1>
    1b7c:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <customTimerSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
    1b80:	84 e1       	ldi	r24, 0x14	; 20
    1b82:	0e 94 36 03 	call	0x66c	; 0x66c <LcdCommand>
				customTimer[customTimerSettingIndex] = 0;
    1b86:	e0 91 31 0a 	lds	r30, 0x0A31	; 0x800a31 <customTimerSettingIndex>
    1b8a:	f0 91 32 0a 	lds	r31, 0x0A32	; 0x800a32 <customTimerSettingIndex+0x1>
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	ef 5d       	subi	r30, 0xDF	; 223
    1b94:	f5 4f       	sbci	r31, 0xF5	; 245
    1b96:	11 82       	std	Z+1, r1	; 0x01
    1b98:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    1b9a:	54 c0       	rjmp	.+168    	; 0x1c44 <setTimer+0x304>
		if(returnStatus == -1) {
			returnStatus = 2;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customTimerSetInitFlag = 0;
    1b9c:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <customTimerSetInitFlag+0x1>
    1ba0:	10 92 1f 0a 	sts	0x0A1F, r1	; 0x800a1f <customTimerSetInitFlag>
			LcdMove(0,0);
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	0e 94 af 03 	call	0x75e	; 0x75e <LcdMove>
			LcdPuts("                      ");
    1bac:	86 ea       	ldi	r24, 0xA6	; 166
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	0e 94 a1 03 	call	0x742	; 0x742 <LcdPuts>
			LcdCommand(CURSOR_OFF);
    1bb4:	8c e0       	ldi	r24, 0x0C	; 12
    1bb6:	0e 94 36 03 	call	0x66c	; 0x66c <LcdCommand>
			minute = customTimer[0];
			second = customTimer[3] * 10 + customTimer[4];
			m_second = customTimer[6];
			
			// 7 세그먼트 계산
			ISeg7Init();
    1bba:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ISeg7Init>
			segmentDisplayNumber = customTimer[1]*1000 + customTimer[4]*100 + customTimer[5]*10 + customTimer[7];
    1bbe:	e1 e2       	ldi	r30, 0x21	; 33
    1bc0:	fa e0       	ldi	r31, 0x0A	; 10
    1bc2:	42 81       	ldd	r20, Z+2	; 0x02
    1bc4:	53 81       	ldd	r21, Z+3	; 0x03
    1bc6:	88 ee       	ldi	r24, 0xE8	; 232
    1bc8:	93 e0       	ldi	r25, 0x03	; 3
    1bca:	48 9f       	mul	r20, r24
    1bcc:	90 01       	movw	r18, r0
    1bce:	49 9f       	mul	r20, r25
    1bd0:	30 0d       	add	r19, r0
    1bd2:	58 9f       	mul	r21, r24
    1bd4:	30 0d       	add	r19, r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	40 85       	ldd	r20, Z+8	; 0x08
    1bda:	51 85       	ldd	r21, Z+9	; 0x09
    1bdc:	64 e6       	ldi	r22, 0x64	; 100
    1bde:	64 9f       	mul	r22, r20
    1be0:	c0 01       	movw	r24, r0
    1be2:	65 9f       	mul	r22, r21
    1be4:	90 0d       	add	r25, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	82 0f       	add	r24, r18
    1bea:	93 1f       	adc	r25, r19
    1bec:	22 85       	ldd	r18, Z+10	; 0x0a
    1bee:	33 85       	ldd	r19, Z+11	; 0x0b
    1bf0:	b9 01       	movw	r22, r18
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	a9 01       	movw	r20, r18
    1bf8:	44 0f       	add	r20, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	44 0f       	add	r20, r20
    1bfe:	55 1f       	adc	r21, r21
    1c00:	44 0f       	add	r20, r20
    1c02:	55 1f       	adc	r21, r21
    1c04:	9b 01       	movw	r18, r22
    1c06:	24 0f       	add	r18, r20
    1c08:	35 1f       	adc	r19, r21
    1c0a:	28 0f       	add	r18, r24
    1c0c:	39 1f       	adc	r19, r25
    1c0e:	86 85       	ldd	r24, Z+14	; 0x0e
    1c10:	97 85       	ldd	r25, Z+15	; 0x0f
    1c12:	82 0f       	add	r24, r18
    1c14:	93 1f       	adc	r25, r19
    1c16:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <segmentDisplayNumber+0x1>
    1c1a:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <segmentDisplayNumber>
			ISeg7DispNum(segmentDisplayNumber , 10);
    1c1e:	6a e0       	ldi	r22, 0x0A	; 10
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	0e 94 6e 02 	call	0x4dc	; 0x4dc <ISeg7DispNum>
				
			customTimerSettingIndex = 0;
    1c26:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <customTimerSettingIndex+0x1>
    1c2a:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <customTimerSettingIndex>
			returnStatus = 0;
			*timerInitFlag = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	99 83       	std	Y+1, r25	; 0x01
    1c34:	88 83       	st	Y, r24
			break;
		}
		return returnStatus;
	}
}
    1c36:	08 c0       	rjmp	.+16     	; 0x1c48 <setTimer+0x308>
			case SW12:
				returnStatus = 0;
				break;
				
			case SW15:
				return -99;
    1c38:	8d e9       	ldi	r24, 0x9D	; 157
    1c3a:	9f ef       	ldi	r25, 0xFF	; 255
    1c3c:	05 c0       	rjmp	.+10     	; 0x1c48 <setTimer+0x308>
				returnStatus = 2;
				break;
		}
		//////////////////////////////////////////////////////////////////////////
		if(returnStatus == -1) {
			returnStatus = 2;
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <setTimer+0x308>
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	90 e0       	ldi	r25, 0x00	; 0
			*timerInitFlag = 1;
			break;
		}
		return returnStatus;
	}
}
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <set7SegmentTimer>:

int set7SegmentTimer(int counter_m_seoncd) {	
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
	int nowDisplayNumber = segmentDisplayNumber - counter_m_seoncd;
    1c52:	c0 91 1d 0a 	lds	r28, 0x0A1D	; 0x800a1d <segmentDisplayNumber>
    1c56:	d0 91 1e 0a 	lds	r29, 0x0A1E	; 0x800a1e <segmentDisplayNumber+0x1>
    1c5a:	c8 1b       	sub	r28, r24
    1c5c:	d9 0b       	sbc	r29, r25
	//1분 00.0초
	//9분 99.9초
	if(nowDisplayNumber%1000 == 999 ){
    1c5e:	ce 01       	movw	r24, r28
    1c60:	68 ee       	ldi	r22, 0xE8	; 232
    1c62:	73 e0       	ldi	r23, 0x03	; 3
    1c64:	30 d0       	rcall	.+96     	; 0x1cc6 <__divmodhi4>
    1c66:	87 3e       	cpi	r24, 0xE7	; 231
    1c68:	93 40       	sbci	r25, 0x03	; 3
    1c6a:	11 f4       	brne	.+4      	; 0x1c70 <set7SegmentTimer+0x22>
		nowDisplayNumber -= 400;
    1c6c:	c0 59       	subi	r28, 0x90	; 144
    1c6e:	d1 40       	sbci	r29, 0x01	; 1
	}
	segmentDisplayNumber = nowDisplayNumber;
    1c70:	d0 93 1e 0a 	sts	0x0A1E, r29	; 0x800a1e <segmentDisplayNumber+0x1>
    1c74:	c0 93 1d 0a 	sts	0x0A1D, r28	; 0x800a1d <segmentDisplayNumber>
	ISeg7DispNum(nowDisplayNumber , 10);
    1c78:	6a e0       	ldi	r22, 0x0A	; 10
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <ISeg7DispNum>
	// 타이머 다됨
	if(nowDisplayNumber == 0) {
    1c82:	cd 2b       	or	r28, r29
    1c84:	39 f4       	brne	.+14     	; 0x1c94 <set7SegmentTimer+0x46>
		// 도트 매트릭스 구동
		timer1_init();	
    1c86:	0e 94 c5 01 	call	0x38a	; 0x38a <timer1_init>
		dotmatrixActive();	// 여기서 계속 홀딩되는거임 이게 계속 돌아야하는데
    1c8a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <dotmatrixActive>
		return 0;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <set7SegmentTimer+0x4a>
	}
	return 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	08 95       	ret

00001c9e <__udivmodhi4>:
    1c9e:	aa 1b       	sub	r26, r26
    1ca0:	bb 1b       	sub	r27, r27
    1ca2:	51 e1       	ldi	r21, 0x11	; 17
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <__udivmodhi4_ep>

00001ca6 <__udivmodhi4_loop>:
    1ca6:	aa 1f       	adc	r26, r26
    1ca8:	bb 1f       	adc	r27, r27
    1caa:	a6 17       	cp	r26, r22
    1cac:	b7 07       	cpc	r27, r23
    1cae:	10 f0       	brcs	.+4      	; 0x1cb4 <__udivmodhi4_ep>
    1cb0:	a6 1b       	sub	r26, r22
    1cb2:	b7 0b       	sbc	r27, r23

00001cb4 <__udivmodhi4_ep>:
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	5a 95       	dec	r21
    1cba:	a9 f7       	brne	.-22     	; 0x1ca6 <__udivmodhi4_loop>
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	08 95       	ret

00001cc6 <__divmodhi4>:
    1cc6:	97 fb       	bst	r25, 7
    1cc8:	07 2e       	mov	r0, r23
    1cca:	16 f4       	brtc	.+4      	; 0x1cd0 <__divmodhi4+0xa>
    1ccc:	00 94       	com	r0
    1cce:	06 d0       	rcall	.+12     	; 0x1cdc <__divmodhi4_neg1>
    1cd0:	77 fd       	sbrc	r23, 7
    1cd2:	08 d0       	rcall	.+16     	; 0x1ce4 <__divmodhi4_neg2>
    1cd4:	e4 df       	rcall	.-56     	; 0x1c9e <__udivmodhi4>
    1cd6:	07 fc       	sbrc	r0, 7
    1cd8:	05 d0       	rcall	.+10     	; 0x1ce4 <__divmodhi4_neg2>
    1cda:	3e f4       	brtc	.+14     	; 0x1cea <__divmodhi4_exit>

00001cdc <__divmodhi4_neg1>:
    1cdc:	90 95       	com	r25
    1cde:	81 95       	neg	r24
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	08 95       	ret

00001ce4 <__divmodhi4_neg2>:
    1ce4:	70 95       	com	r23
    1ce6:	61 95       	neg	r22
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255

00001cea <__divmodhi4_exit>:
    1cea:	08 95       	ret

00001cec <__tablejump2__>:
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	00 24       	eor	r0, r0
    1cf2:	00 1c       	adc	r0, r0
    1cf4:	0b be       	out	0x3b, r0	; 59
    1cf6:	07 90       	elpm	r0, Z+
    1cf8:	f6 91       	elpm	r31, Z
    1cfa:	e0 2d       	mov	r30, r0
    1cfc:	09 94       	ijmp

00001cfe <malloc>:
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	82 30       	cpi	r24, 0x02	; 2
    1d08:	91 05       	cpc	r25, r1
    1d0a:	10 f4       	brcc	.+4      	; 0x1d10 <malloc+0x12>
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	e0 91 35 0a 	lds	r30, 0x0A35	; 0x800a35 <__flp>
    1d14:	f0 91 36 0a 	lds	r31, 0x0A36	; 0x800a36 <__flp+0x1>
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	30 97       	sbiw	r30, 0x00	; 0
    1d22:	19 f1       	breq	.+70     	; 0x1d6a <malloc+0x6c>
    1d24:	40 81       	ld	r20, Z
    1d26:	51 81       	ldd	r21, Z+1	; 0x01
    1d28:	02 81       	ldd	r16, Z+2	; 0x02
    1d2a:	13 81       	ldd	r17, Z+3	; 0x03
    1d2c:	48 17       	cp	r20, r24
    1d2e:	59 07       	cpc	r21, r25
    1d30:	c8 f0       	brcs	.+50     	; 0x1d64 <malloc+0x66>
    1d32:	84 17       	cp	r24, r20
    1d34:	95 07       	cpc	r25, r21
    1d36:	69 f4       	brne	.+26     	; 0x1d52 <malloc+0x54>
    1d38:	10 97       	sbiw	r26, 0x00	; 0
    1d3a:	31 f0       	breq	.+12     	; 0x1d48 <malloc+0x4a>
    1d3c:	12 96       	adiw	r26, 0x02	; 2
    1d3e:	0c 93       	st	X, r16
    1d40:	12 97       	sbiw	r26, 0x02	; 2
    1d42:	13 96       	adiw	r26, 0x03	; 3
    1d44:	1c 93       	st	X, r17
    1d46:	27 c0       	rjmp	.+78     	; 0x1d96 <malloc+0x98>
    1d48:	00 93 35 0a 	sts	0x0A35, r16	; 0x800a35 <__flp>
    1d4c:	10 93 36 0a 	sts	0x0A36, r17	; 0x800a36 <__flp+0x1>
    1d50:	22 c0       	rjmp	.+68     	; 0x1d96 <malloc+0x98>
    1d52:	21 15       	cp	r18, r1
    1d54:	31 05       	cpc	r19, r1
    1d56:	19 f0       	breq	.+6      	; 0x1d5e <malloc+0x60>
    1d58:	42 17       	cp	r20, r18
    1d5a:	53 07       	cpc	r21, r19
    1d5c:	18 f4       	brcc	.+6      	; 0x1d64 <malloc+0x66>
    1d5e:	9a 01       	movw	r18, r20
    1d60:	bd 01       	movw	r22, r26
    1d62:	ef 01       	movw	r28, r30
    1d64:	df 01       	movw	r26, r30
    1d66:	f8 01       	movw	r30, r16
    1d68:	db cf       	rjmp	.-74     	; 0x1d20 <malloc+0x22>
    1d6a:	21 15       	cp	r18, r1
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	f9 f0       	breq	.+62     	; 0x1dae <malloc+0xb0>
    1d70:	28 1b       	sub	r18, r24
    1d72:	39 0b       	sbc	r19, r25
    1d74:	24 30       	cpi	r18, 0x04	; 4
    1d76:	31 05       	cpc	r19, r1
    1d78:	80 f4       	brcc	.+32     	; 0x1d9a <malloc+0x9c>
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7e:	61 15       	cp	r22, r1
    1d80:	71 05       	cpc	r23, r1
    1d82:	21 f0       	breq	.+8      	; 0x1d8c <malloc+0x8e>
    1d84:	fb 01       	movw	r30, r22
    1d86:	93 83       	std	Z+3, r25	; 0x03
    1d88:	82 83       	std	Z+2, r24	; 0x02
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <malloc+0x96>
    1d8c:	90 93 36 0a 	sts	0x0A36, r25	; 0x800a36 <__flp+0x1>
    1d90:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <__flp>
    1d94:	fe 01       	movw	r30, r28
    1d96:	32 96       	adiw	r30, 0x02	; 2
    1d98:	44 c0       	rjmp	.+136    	; 0x1e22 <malloc+0x124>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e2 0f       	add	r30, r18
    1d9e:	f3 1f       	adc	r31, r19
    1da0:	81 93       	st	Z+, r24
    1da2:	91 93       	st	Z+, r25
    1da4:	22 50       	subi	r18, 0x02	; 2
    1da6:	31 09       	sbc	r19, r1
    1da8:	39 83       	std	Y+1, r19	; 0x01
    1daa:	28 83       	st	Y, r18
    1dac:	3a c0       	rjmp	.+116    	; 0x1e22 <malloc+0x124>
    1dae:	20 91 33 0a 	lds	r18, 0x0A33	; 0x800a33 <__brkval>
    1db2:	30 91 34 0a 	lds	r19, 0x0A34	; 0x800a34 <__brkval+0x1>
    1db6:	23 2b       	or	r18, r19
    1db8:	41 f4       	brne	.+16     	; 0x1dca <malloc+0xcc>
    1dba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1dbe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1dc2:	30 93 34 0a 	sts	0x0A34, r19	; 0x800a34 <__brkval+0x1>
    1dc6:	20 93 33 0a 	sts	0x0A33, r18	; 0x800a33 <__brkval>
    1dca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1dce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1dd2:	21 15       	cp	r18, r1
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	41 f4       	brne	.+16     	; 0x1de8 <malloc+0xea>
    1dd8:	2d b7       	in	r18, 0x3d	; 61
    1dda:	3e b7       	in	r19, 0x3e	; 62
    1ddc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1de0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1de4:	24 1b       	sub	r18, r20
    1de6:	35 0b       	sbc	r19, r21
    1de8:	e0 91 33 0a 	lds	r30, 0x0A33	; 0x800a33 <__brkval>
    1dec:	f0 91 34 0a 	lds	r31, 0x0A34	; 0x800a34 <__brkval+0x1>
    1df0:	e2 17       	cp	r30, r18
    1df2:	f3 07       	cpc	r31, r19
    1df4:	a0 f4       	brcc	.+40     	; 0x1e1e <malloc+0x120>
    1df6:	2e 1b       	sub	r18, r30
    1df8:	3f 0b       	sbc	r19, r31
    1dfa:	28 17       	cp	r18, r24
    1dfc:	39 07       	cpc	r19, r25
    1dfe:	78 f0       	brcs	.+30     	; 0x1e1e <malloc+0x120>
    1e00:	ac 01       	movw	r20, r24
    1e02:	4e 5f       	subi	r20, 0xFE	; 254
    1e04:	5f 4f       	sbci	r21, 0xFF	; 255
    1e06:	24 17       	cp	r18, r20
    1e08:	35 07       	cpc	r19, r21
    1e0a:	48 f0       	brcs	.+18     	; 0x1e1e <malloc+0x120>
    1e0c:	4e 0f       	add	r20, r30
    1e0e:	5f 1f       	adc	r21, r31
    1e10:	50 93 34 0a 	sts	0x0A34, r21	; 0x800a34 <__brkval+0x1>
    1e14:	40 93 33 0a 	sts	0x0A33, r20	; 0x800a33 <__brkval>
    1e18:	81 93       	st	Z+, r24
    1e1a:	91 93       	st	Z+, r25
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <malloc+0x124>
    1e1e:	e0 e0       	ldi	r30, 0x00	; 0
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	cf 01       	movw	r24, r30
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	08 95       	ret

00001e2e <free>:
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <free+0xa>
    1e36:	81 c0       	rjmp	.+258    	; 0x1f3a <free+0x10c>
    1e38:	fc 01       	movw	r30, r24
    1e3a:	32 97       	sbiw	r30, 0x02	; 2
    1e3c:	13 82       	std	Z+3, r1	; 0x03
    1e3e:	12 82       	std	Z+2, r1	; 0x02
    1e40:	a0 91 35 0a 	lds	r26, 0x0A35	; 0x800a35 <__flp>
    1e44:	b0 91 36 0a 	lds	r27, 0x0A36	; 0x800a36 <__flp+0x1>
    1e48:	10 97       	sbiw	r26, 0x00	; 0
    1e4a:	81 f4       	brne	.+32     	; 0x1e6c <free+0x3e>
    1e4c:	20 81       	ld	r18, Z
    1e4e:	31 81       	ldd	r19, Z+1	; 0x01
    1e50:	82 0f       	add	r24, r18
    1e52:	93 1f       	adc	r25, r19
    1e54:	20 91 33 0a 	lds	r18, 0x0A33	; 0x800a33 <__brkval>
    1e58:	30 91 34 0a 	lds	r19, 0x0A34	; 0x800a34 <__brkval+0x1>
    1e5c:	28 17       	cp	r18, r24
    1e5e:	39 07       	cpc	r19, r25
    1e60:	51 f5       	brne	.+84     	; 0x1eb6 <free+0x88>
    1e62:	f0 93 34 0a 	sts	0x0A34, r31	; 0x800a34 <__brkval+0x1>
    1e66:	e0 93 33 0a 	sts	0x0A33, r30	; 0x800a33 <__brkval>
    1e6a:	67 c0       	rjmp	.+206    	; 0x1f3a <free+0x10c>
    1e6c:	ed 01       	movw	r28, r26
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	ce 17       	cp	r28, r30
    1e74:	df 07       	cpc	r29, r31
    1e76:	40 f4       	brcc	.+16     	; 0x1e88 <free+0x5a>
    1e78:	4a 81       	ldd	r20, Y+2	; 0x02
    1e7a:	5b 81       	ldd	r21, Y+3	; 0x03
    1e7c:	9e 01       	movw	r18, r28
    1e7e:	41 15       	cp	r20, r1
    1e80:	51 05       	cpc	r21, r1
    1e82:	f1 f0       	breq	.+60     	; 0x1ec0 <free+0x92>
    1e84:	ea 01       	movw	r28, r20
    1e86:	f5 cf       	rjmp	.-22     	; 0x1e72 <free+0x44>
    1e88:	d3 83       	std	Z+3, r29	; 0x03
    1e8a:	c2 83       	std	Z+2, r28	; 0x02
    1e8c:	40 81       	ld	r20, Z
    1e8e:	51 81       	ldd	r21, Z+1	; 0x01
    1e90:	84 0f       	add	r24, r20
    1e92:	95 1f       	adc	r25, r21
    1e94:	c8 17       	cp	r28, r24
    1e96:	d9 07       	cpc	r29, r25
    1e98:	59 f4       	brne	.+22     	; 0x1eb0 <free+0x82>
    1e9a:	88 81       	ld	r24, Y
    1e9c:	99 81       	ldd	r25, Y+1	; 0x01
    1e9e:	84 0f       	add	r24, r20
    1ea0:	95 1f       	adc	r25, r21
    1ea2:	02 96       	adiw	r24, 0x02	; 2
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1eac:	93 83       	std	Z+3, r25	; 0x03
    1eae:	82 83       	std	Z+2, r24	; 0x02
    1eb0:	21 15       	cp	r18, r1
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	29 f4       	brne	.+10     	; 0x1ec0 <free+0x92>
    1eb6:	f0 93 36 0a 	sts	0x0A36, r31	; 0x800a36 <__flp+0x1>
    1eba:	e0 93 35 0a 	sts	0x0A35, r30	; 0x800a35 <__flp>
    1ebe:	3d c0       	rjmp	.+122    	; 0x1f3a <free+0x10c>
    1ec0:	e9 01       	movw	r28, r18
    1ec2:	fb 83       	std	Y+3, r31	; 0x03
    1ec4:	ea 83       	std	Y+2, r30	; 0x02
    1ec6:	49 91       	ld	r20, Y+
    1ec8:	59 91       	ld	r21, Y+
    1eca:	c4 0f       	add	r28, r20
    1ecc:	d5 1f       	adc	r29, r21
    1ece:	ec 17       	cp	r30, r28
    1ed0:	fd 07       	cpc	r31, r29
    1ed2:	61 f4       	brne	.+24     	; 0x1eec <free+0xbe>
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	84 0f       	add	r24, r20
    1eda:	95 1f       	adc	r25, r21
    1edc:	02 96       	adiw	r24, 0x02	; 2
    1ede:	e9 01       	movw	r28, r18
    1ee0:	99 83       	std	Y+1, r25	; 0x01
    1ee2:	88 83       	st	Y, r24
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	9b 83       	std	Y+3, r25	; 0x03
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    1eec:	e0 e0       	ldi	r30, 0x00	; 0
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	12 96       	adiw	r26, 0x02	; 2
    1ef2:	8d 91       	ld	r24, X+
    1ef4:	9c 91       	ld	r25, X
    1ef6:	13 97       	sbiw	r26, 0x03	; 3
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	19 f0       	breq	.+6      	; 0x1f02 <free+0xd4>
    1efc:	fd 01       	movw	r30, r26
    1efe:	dc 01       	movw	r26, r24
    1f00:	f7 cf       	rjmp	.-18     	; 0x1ef0 <free+0xc2>
    1f02:	8d 91       	ld	r24, X+
    1f04:	9c 91       	ld	r25, X
    1f06:	11 97       	sbiw	r26, 0x01	; 1
    1f08:	9d 01       	movw	r18, r26
    1f0a:	2e 5f       	subi	r18, 0xFE	; 254
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	82 0f       	add	r24, r18
    1f10:	93 1f       	adc	r25, r19
    1f12:	20 91 33 0a 	lds	r18, 0x0A33	; 0x800a33 <__brkval>
    1f16:	30 91 34 0a 	lds	r19, 0x0A34	; 0x800a34 <__brkval+0x1>
    1f1a:	28 17       	cp	r18, r24
    1f1c:	39 07       	cpc	r19, r25
    1f1e:	69 f4       	brne	.+26     	; 0x1f3a <free+0x10c>
    1f20:	30 97       	sbiw	r30, 0x00	; 0
    1f22:	29 f4       	brne	.+10     	; 0x1f2e <free+0x100>
    1f24:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <__flp+0x1>
    1f28:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <__flp>
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <free+0x104>
    1f2e:	13 82       	std	Z+3, r1	; 0x03
    1f30:	12 82       	std	Z+2, r1	; 0x02
    1f32:	b0 93 34 0a 	sts	0x0A34, r27	; 0x800a34 <__brkval+0x1>
    1f36:	a0 93 33 0a 	sts	0x0A33, r26	; 0x800a33 <__brkval>
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <_exit>:
    1f40:	f8 94       	cli

00001f42 <__stop_program>:
    1f42:	ff cf       	rjmp	.-2      	; 0x1f42 <__stop_program>
