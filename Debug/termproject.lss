
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001f6e  00002002  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000845  008001f0  008001f0  000020f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000305a  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116c  00000000  00000000  000053a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001960  00000000  00000000  0000650e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00007e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab6  00000000  00000000  000082c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c14  00000000  00000000  00008d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000a98a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c1       	rjmp	.+842    	; 0x34c <__ctors_end>
       2:	00 00       	nop
       4:	c1 c1       	rjmp	.+898    	; 0x388 <__bad_interrupt>
       6:	00 00       	nop
       8:	bf c1       	rjmp	.+894    	; 0x388 <__bad_interrupt>
       a:	00 00       	nop
       c:	bd c1       	rjmp	.+890    	; 0x388 <__bad_interrupt>
       e:	00 00       	nop
      10:	bb c1       	rjmp	.+886    	; 0x388 <__bad_interrupt>
      12:	00 00       	nop
      14:	b9 c1       	rjmp	.+882    	; 0x388 <__bad_interrupt>
      16:	00 00       	nop
      18:	b7 c1       	rjmp	.+878    	; 0x388 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b5 c1       	rjmp	.+874    	; 0x388 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b3 c1       	rjmp	.+870    	; 0x388 <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c3       	rjmp	.+1652   	; 0x69a <__vector_9>
      26:	00 00       	nop
      28:	af c1       	rjmp	.+862    	; 0x388 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ad c1       	rjmp	.+858    	; 0x388 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ab c1       	rjmp	.+854    	; 0x388 <__bad_interrupt>
      32:	00 00       	nop
      34:	a9 c1       	rjmp	.+850    	; 0x388 <__bad_interrupt>
      36:	00 00       	nop
      38:	14 c6       	rjmp	.+3112   	; 0xc62 <__vector_14>
      3a:	00 00       	nop
      3c:	d9 c1       	rjmp	.+946    	; 0x3f0 <__vector_15>
      3e:	00 00       	nop
      40:	a3 c1       	rjmp	.+838    	; 0x388 <__bad_interrupt>
      42:	00 00       	nop
      44:	a1 c1       	rjmp	.+834    	; 0x388 <__bad_interrupt>
      46:	00 00       	nop
      48:	9f c1       	rjmp	.+830    	; 0x388 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9d c1       	rjmp	.+826    	; 0x388 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9b c1       	rjmp	.+822    	; 0x388 <__bad_interrupt>
      52:	00 00       	nop
      54:	99 c1       	rjmp	.+818    	; 0x388 <__bad_interrupt>
      56:	00 00       	nop
      58:	97 c1       	rjmp	.+814    	; 0x388 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	95 c1       	rjmp	.+810    	; 0x388 <__bad_interrupt>
      5e:	00 00       	nop
      60:	93 c1       	rjmp	.+806    	; 0x388 <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c1       	rjmp	.+802    	; 0x388 <__bad_interrupt>
      66:	00 00       	nop
      68:	8f c1       	rjmp	.+798    	; 0x388 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8d c1       	rjmp	.+794    	; 0x388 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8b c1       	rjmp	.+790    	; 0x388 <__bad_interrupt>
      72:	00 00       	nop
      74:	89 c1       	rjmp	.+786    	; 0x388 <__bad_interrupt>
      76:	00 00       	nop
      78:	87 c1       	rjmp	.+782    	; 0x388 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	85 c1       	rjmp	.+778    	; 0x388 <__bad_interrupt>
      7e:	00 00       	nop
      80:	83 c1       	rjmp	.+774    	; 0x388 <__bad_interrupt>
      82:	00 00       	nop
      84:	81 c1       	rjmp	.+770    	; 0x388 <__bad_interrupt>
      86:	00 00       	nop
      88:	7f c1       	rjmp	.+766    	; 0x388 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	96 05       	cpc	r25, r6
      8e:	f0 04       	cpc	r15, r0
      90:	1e 06       	cpc	r1, r30
      92:	db 04       	cpc	r13, r11
      94:	1e 06       	cpc	r1, r30
      96:	1e 06       	cpc	r1, r30
      98:	1e 06       	cpc	r1, r30
      9a:	c6 04       	cpc	r12, r6
      9c:	1e 06       	cpc	r1, r30
      9e:	1e 06       	cpc	r1, r30
      a0:	1e 06       	cpc	r1, r30
      a2:	1e 06       	cpc	r1, r30
      a4:	1e 06       	cpc	r1, r30
      a6:	1e 06       	cpc	r1, r30
      a8:	1e 06       	cpc	r1, r30
      aa:	1e 06       	cpc	r1, r30
      ac:	a9 05       	cpc	r26, r9
      ae:	2f 05       	cpc	r18, r15
      b0:	1e 06       	cpc	r1, r30
      b2:	1a 05       	cpc	r17, r10
      b4:	1e 06       	cpc	r1, r30
      b6:	1e 06       	cpc	r1, r30
      b8:	1e 06       	cpc	r1, r30
      ba:	05 05       	cpc	r16, r5
      bc:	1e 06       	cpc	r1, r30
      be:	1e 06       	cpc	r1, r30
      c0:	1e 06       	cpc	r1, r30
      c2:	1e 06       	cpc	r1, r30
      c4:	1e 06       	cpc	r1, r30
      c6:	1e 06       	cpc	r1, r30
      c8:	1e 06       	cpc	r1, r30
      ca:	1e 06       	cpc	r1, r30
      cc:	1e 06       	cpc	r1, r30
      ce:	1e 06       	cpc	r1, r30
      d0:	1e 06       	cpc	r1, r30
      d2:	1e 06       	cpc	r1, r30
      d4:	1e 06       	cpc	r1, r30
      d6:	1e 06       	cpc	r1, r30
      d8:	1e 06       	cpc	r1, r30
      da:	1e 06       	cpc	r1, r30
      dc:	1e 06       	cpc	r1, r30
      de:	1e 06       	cpc	r1, r30
      e0:	1e 06       	cpc	r1, r30
      e2:	1e 06       	cpc	r1, r30
      e4:	1e 06       	cpc	r1, r30
      e6:	1e 06       	cpc	r1, r30
      e8:	1e 06       	cpc	r1, r30
      ea:	1e 06       	cpc	r1, r30
      ec:	bf 05       	cpc	r27, r15
      ee:	6e 05       	cpc	r22, r14
      f0:	1e 06       	cpc	r1, r30
      f2:	59 05       	cpc	r21, r9
      f4:	1e 06       	cpc	r1, r30
      f6:	1e 06       	cpc	r1, r30
      f8:	1e 06       	cpc	r1, r30
      fa:	44 05       	cpc	r20, r4
      fc:	1e 06       	cpc	r1, r30
      fe:	1e 06       	cpc	r1, r30
     100:	1e 06       	cpc	r1, r30
     102:	1e 06       	cpc	r1, r30
     104:	1e 06       	cpc	r1, r30
     106:	1e 06       	cpc	r1, r30
     108:	1e 06       	cpc	r1, r30
     10a:	1e 06       	cpc	r1, r30
     10c:	1e 06       	cpc	r1, r30
     10e:	1e 06       	cpc	r1, r30
     110:	1e 06       	cpc	r1, r30
     112:	1e 06       	cpc	r1, r30
     114:	1e 06       	cpc	r1, r30
     116:	1e 06       	cpc	r1, r30
     118:	1e 06       	cpc	r1, r30
     11a:	1e 06       	cpc	r1, r30
     11c:	1e 06       	cpc	r1, r30
     11e:	1e 06       	cpc	r1, r30
     120:	1e 06       	cpc	r1, r30
     122:	1e 06       	cpc	r1, r30
     124:	1e 06       	cpc	r1, r30
     126:	1e 06       	cpc	r1, r30
     128:	1e 06       	cpc	r1, r30
     12a:	1e 06       	cpc	r1, r30
     12c:	1e 06       	cpc	r1, r30
     12e:	1e 06       	cpc	r1, r30
     130:	1e 06       	cpc	r1, r30
     132:	1e 06       	cpc	r1, r30
     134:	1e 06       	cpc	r1, r30
     136:	1e 06       	cpc	r1, r30
     138:	1e 06       	cpc	r1, r30
     13a:	1e 06       	cpc	r1, r30
     13c:	1e 06       	cpc	r1, r30
     13e:	1e 06       	cpc	r1, r30
     140:	1e 06       	cpc	r1, r30
     142:	1e 06       	cpc	r1, r30
     144:	1e 06       	cpc	r1, r30
     146:	1e 06       	cpc	r1, r30
     148:	1e 06       	cpc	r1, r30
     14a:	1e 06       	cpc	r1, r30
     14c:	1e 06       	cpc	r1, r30
     14e:	1e 06       	cpc	r1, r30
     150:	1e 06       	cpc	r1, r30
     152:	1e 06       	cpc	r1, r30
     154:	1e 06       	cpc	r1, r30
     156:	1e 06       	cpc	r1, r30
     158:	1e 06       	cpc	r1, r30
     15a:	1e 06       	cpc	r1, r30
     15c:	1e 06       	cpc	r1, r30
     15e:	1e 06       	cpc	r1, r30
     160:	1e 06       	cpc	r1, r30
     162:	1e 06       	cpc	r1, r30
     164:	1e 06       	cpc	r1, r30
     166:	1e 06       	cpc	r1, r30
     168:	1e 06       	cpc	r1, r30
     16a:	1e 06       	cpc	r1, r30
     16c:	18 06       	cpc	r1, r24
     16e:	1e 06       	cpc	r1, r30
     170:	1e 06       	cpc	r1, r30
     172:	83 05       	cpc	r24, r3
     174:	83 07       	cpc	r24, r19
     176:	b8 06       	cpc	r11, r24
     178:	97 06       	cpc	r9, r23
     17a:	a9 06       	cpc	r10, r25
     17c:	97 06       	cpc	r9, r23
     17e:	97 06       	cpc	r9, r23
     180:	97 06       	cpc	r9, r23
     182:	9a 06       	cpc	r9, r26
     184:	97 06       	cpc	r9, r23
     186:	97 06       	cpc	r9, r23
     188:	97 06       	cpc	r9, r23
     18a:	97 06       	cpc	r9, r23
     18c:	97 06       	cpc	r9, r23
     18e:	97 06       	cpc	r9, r23
     190:	97 06       	cpc	r9, r23
     192:	97 06       	cpc	r9, r23
     194:	97 06       	cpc	r9, r23
     196:	e5 06       	cpc	r14, r21
     198:	97 06       	cpc	r9, r23
     19a:	d6 06       	cpc	r13, r22
     19c:	97 06       	cpc	r9, r23
     19e:	97 06       	cpc	r9, r23
     1a0:	97 06       	cpc	r9, r23
     1a2:	c7 06       	cpc	r12, r23
     1a4:	97 06       	cpc	r9, r23
     1a6:	97 06       	cpc	r9, r23
     1a8:	97 06       	cpc	r9, r23
     1aa:	97 06       	cpc	r9, r23
     1ac:	97 06       	cpc	r9, r23
     1ae:	97 06       	cpc	r9, r23
     1b0:	97 06       	cpc	r9, r23
     1b2:	97 06       	cpc	r9, r23
     1b4:	97 06       	cpc	r9, r23
     1b6:	97 06       	cpc	r9, r23
     1b8:	97 06       	cpc	r9, r23
     1ba:	97 06       	cpc	r9, r23
     1bc:	97 06       	cpc	r9, r23
     1be:	97 06       	cpc	r9, r23
     1c0:	97 06       	cpc	r9, r23
     1c2:	97 06       	cpc	r9, r23
     1c4:	97 06       	cpc	r9, r23
     1c6:	97 06       	cpc	r9, r23
     1c8:	97 06       	cpc	r9, r23
     1ca:	97 06       	cpc	r9, r23
     1cc:	97 06       	cpc	r9, r23
     1ce:	97 06       	cpc	r9, r23
     1d0:	97 06       	cpc	r9, r23
     1d2:	97 06       	cpc	r9, r23
     1d4:	2e 07       	cpc	r18, r30
     1d6:	12 07       	cpc	r17, r18
     1d8:	97 06       	cpc	r9, r23
     1da:	03 07       	cpc	r16, r19
     1dc:	97 06       	cpc	r9, r23
     1de:	97 06       	cpc	r9, r23
     1e0:	97 06       	cpc	r9, r23
     1e2:	f4 06       	cpc	r15, r20
     1e4:	97 06       	cpc	r9, r23
     1e6:	97 06       	cpc	r9, r23
     1e8:	97 06       	cpc	r9, r23
     1ea:	97 06       	cpc	r9, r23
     1ec:	97 06       	cpc	r9, r23
     1ee:	97 06       	cpc	r9, r23
     1f0:	97 06       	cpc	r9, r23
     1f2:	97 06       	cpc	r9, r23
     1f4:	97 06       	cpc	r9, r23
     1f6:	97 06       	cpc	r9, r23
     1f8:	97 06       	cpc	r9, r23
     1fa:	97 06       	cpc	r9, r23
     1fc:	97 06       	cpc	r9, r23
     1fe:	97 06       	cpc	r9, r23
     200:	97 06       	cpc	r9, r23
     202:	97 06       	cpc	r9, r23
     204:	97 06       	cpc	r9, r23
     206:	97 06       	cpc	r9, r23
     208:	97 06       	cpc	r9, r23
     20a:	97 06       	cpc	r9, r23
     20c:	97 06       	cpc	r9, r23
     20e:	97 06       	cpc	r9, r23
     210:	97 06       	cpc	r9, r23
     212:	97 06       	cpc	r9, r23
     214:	97 06       	cpc	r9, r23
     216:	97 06       	cpc	r9, r23
     218:	97 06       	cpc	r9, r23
     21a:	97 06       	cpc	r9, r23
     21c:	97 06       	cpc	r9, r23
     21e:	97 06       	cpc	r9, r23
     220:	97 06       	cpc	r9, r23
     222:	97 06       	cpc	r9, r23
     224:	97 06       	cpc	r9, r23
     226:	97 06       	cpc	r9, r23
     228:	97 06       	cpc	r9, r23
     22a:	97 06       	cpc	r9, r23
     22c:	97 06       	cpc	r9, r23
     22e:	97 06       	cpc	r9, r23
     230:	97 06       	cpc	r9, r23
     232:	97 06       	cpc	r9, r23
     234:	97 06       	cpc	r9, r23
     236:	97 06       	cpc	r9, r23
     238:	97 06       	cpc	r9, r23
     23a:	97 06       	cpc	r9, r23
     23c:	97 06       	cpc	r9, r23
     23e:	97 06       	cpc	r9, r23
     240:	97 06       	cpc	r9, r23
     242:	97 06       	cpc	r9, r23
     244:	97 06       	cpc	r9, r23
     246:	97 06       	cpc	r9, r23
     248:	97 06       	cpc	r9, r23
     24a:	97 06       	cpc	r9, r23
     24c:	97 06       	cpc	r9, r23
     24e:	97 06       	cpc	r9, r23
     250:	97 06       	cpc	r9, r23
     252:	97 06       	cpc	r9, r23
     254:	94 07       	cpc	r25, r20
     256:	97 06       	cpc	r9, r23
     258:	97 06       	cpc	r9, r23
     25a:	21 07       	cpc	r18, r17
     25c:	ba 0d       	add	r27, r10
     25e:	0c 0d       	add	r16, r12
     260:	39 0e       	add	r3, r25
     262:	f6 0c       	add	r15, r6
     264:	39 0e       	add	r3, r25
     266:	39 0e       	add	r3, r25
     268:	39 0e       	add	r3, r25
     26a:	e0 0c       	add	r14, r0
     26c:	39 0e       	add	r3, r25
     26e:	39 0e       	add	r3, r25
     270:	39 0e       	add	r3, r25
     272:	39 0e       	add	r3, r25
     274:	39 0e       	add	r3, r25
     276:	39 0e       	add	r3, r25
     278:	39 0e       	add	r3, r25
     27a:	39 0e       	add	r3, r25
     27c:	ce 0d       	add	r28, r14
     27e:	4e 0d       	add	r20, r14
     280:	39 0e       	add	r3, r25
     282:	38 0d       	add	r19, r8
     284:	39 0e       	add	r3, r25
     286:	39 0e       	add	r3, r25
     288:	39 0e       	add	r3, r25
     28a:	22 0d       	add	r18, r2
     28c:	39 0e       	add	r3, r25
     28e:	39 0e       	add	r3, r25
     290:	39 0e       	add	r3, r25
     292:	39 0e       	add	r3, r25
     294:	39 0e       	add	r3, r25
     296:	39 0e       	add	r3, r25
     298:	39 0e       	add	r3, r25
     29a:	39 0e       	add	r3, r25
     29c:	39 0e       	add	r3, r25
     29e:	39 0e       	add	r3, r25
     2a0:	39 0e       	add	r3, r25
     2a2:	39 0e       	add	r3, r25
     2a4:	39 0e       	add	r3, r25
     2a6:	39 0e       	add	r3, r25
     2a8:	39 0e       	add	r3, r25
     2aa:	39 0e       	add	r3, r25
     2ac:	39 0e       	add	r3, r25
     2ae:	39 0e       	add	r3, r25
     2b0:	39 0e       	add	r3, r25
     2b2:	39 0e       	add	r3, r25
     2b4:	39 0e       	add	r3, r25
     2b6:	39 0e       	add	r3, r25
     2b8:	39 0e       	add	r3, r25
     2ba:	39 0e       	add	r3, r25
     2bc:	e5 0d       	add	r30, r5
     2be:	90 0d       	add	r25, r0
     2c0:	39 0e       	add	r3, r25
     2c2:	7a 0d       	add	r23, r10
     2c4:	39 0e       	add	r3, r25
     2c6:	39 0e       	add	r3, r25
     2c8:	39 0e       	add	r3, r25
     2ca:	64 0d       	add	r22, r4
     2cc:	39 0e       	add	r3, r25
     2ce:	39 0e       	add	r3, r25
     2d0:	39 0e       	add	r3, r25
     2d2:	39 0e       	add	r3, r25
     2d4:	39 0e       	add	r3, r25
     2d6:	39 0e       	add	r3, r25
     2d8:	39 0e       	add	r3, r25
     2da:	39 0e       	add	r3, r25
     2dc:	39 0e       	add	r3, r25
     2de:	39 0e       	add	r3, r25
     2e0:	39 0e       	add	r3, r25
     2e2:	39 0e       	add	r3, r25
     2e4:	39 0e       	add	r3, r25
     2e6:	39 0e       	add	r3, r25
     2e8:	39 0e       	add	r3, r25
     2ea:	39 0e       	add	r3, r25
     2ec:	39 0e       	add	r3, r25
     2ee:	39 0e       	add	r3, r25
     2f0:	39 0e       	add	r3, r25
     2f2:	39 0e       	add	r3, r25
     2f4:	39 0e       	add	r3, r25
     2f6:	39 0e       	add	r3, r25
     2f8:	39 0e       	add	r3, r25
     2fa:	39 0e       	add	r3, r25
     2fc:	39 0e       	add	r3, r25
     2fe:	39 0e       	add	r3, r25
     300:	39 0e       	add	r3, r25
     302:	39 0e       	add	r3, r25
     304:	39 0e       	add	r3, r25
     306:	39 0e       	add	r3, r25
     308:	39 0e       	add	r3, r25
     30a:	39 0e       	add	r3, r25
     30c:	39 0e       	add	r3, r25
     30e:	39 0e       	add	r3, r25
     310:	39 0e       	add	r3, r25
     312:	39 0e       	add	r3, r25
     314:	39 0e       	add	r3, r25
     316:	39 0e       	add	r3, r25
     318:	39 0e       	add	r3, r25
     31a:	39 0e       	add	r3, r25
     31c:	39 0e       	add	r3, r25
     31e:	39 0e       	add	r3, r25
     320:	39 0e       	add	r3, r25
     322:	39 0e       	add	r3, r25
     324:	39 0e       	add	r3, r25
     326:	39 0e       	add	r3, r25
     328:	39 0e       	add	r3, r25
     32a:	39 0e       	add	r3, r25
     32c:	39 0e       	add	r3, r25
     32e:	39 0e       	add	r3, r25
     330:	39 0e       	add	r3, r25
     332:	39 0e       	add	r3, r25
     334:	39 0e       	add	r3, r25
     336:	39 0e       	add	r3, r25
     338:	39 0e       	add	r3, r25
     33a:	39 0e       	add	r3, r25
     33c:	33 0e       	add	r3, r19
     33e:	39 0e       	add	r3, r25
     340:	39 0e       	add	r3, r25
     342:	a6 0d       	add	r26, r6
     344:	39 0e       	add	r3, r25
     346:	39 0e       	add	r3, r25
     348:	39 0e       	add	r3, r25
     34a:	e5 0d       	add	r30, r5

0000034c <__ctors_end>:
     34c:	11 24       	eor	r1, r1
     34e:	1f be       	out	0x3f, r1	; 63
     350:	cf ef       	ldi	r28, 0xFF	; 255
     352:	d0 e1       	ldi	r29, 0x10	; 16
     354:	de bf       	out	0x3e, r29	; 62
     356:	cd bf       	out	0x3d, r28	; 61

00000358 <__do_copy_data>:
     358:	11 e0       	ldi	r17, 0x01	; 1
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b1 e0       	ldi	r27, 0x01	; 1
     35e:	ee e6       	ldi	r30, 0x6E	; 110
     360:	ff e1       	ldi	r31, 0x1F	; 31
     362:	00 e0       	ldi	r16, 0x00	; 0
     364:	0b bf       	out	0x3b, r16	; 59
     366:	02 c0       	rjmp	.+4      	; 0x36c <__do_copy_data+0x14>
     368:	07 90       	elpm	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	a0 3f       	cpi	r26, 0xF0	; 240
     36e:	b1 07       	cpc	r27, r17
     370:	d9 f7       	brne	.-10     	; 0x368 <__do_copy_data+0x10>

00000372 <__do_clear_bss>:
     372:	2a e0       	ldi	r18, 0x0A	; 10
     374:	a0 ef       	ldi	r26, 0xF0	; 240
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	01 c0       	rjmp	.+2      	; 0x37c <.do_clear_bss_start>

0000037a <.do_clear_bss_loop>:
     37a:	1d 92       	st	X+, r1

0000037c <.do_clear_bss_start>:
     37c:	a5 33       	cpi	r26, 0x35	; 53
     37e:	b2 07       	cpc	r27, r18
     380:	e1 f7       	brne	.-8      	; 0x37a <.do_clear_bss_loop>
     382:	48 d2       	rcall	.+1168   	; 0x814 <main>
     384:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <_exit>

00000388 <__bad_interrupt>:
     388:	3b ce       	rjmp	.-906    	; 0x0 <__vectors>

0000038a <ISeg7Init>:
     38a:	82 b3       	in	r24, 0x12	; 18
     38c:	80 6f       	ori	r24, 0xF0	; 240
     38e:	82 bb       	out	0x12, r24	; 18
     390:	81 b3       	in	r24, 0x11	; 17
     392:	80 6f       	ori	r24, 0xF0	; 240
     394:	81 bb       	out	0x11, r24	; 17
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	8a bb       	out	0x1a, r24	; 26
     39a:	88 e0       	ldi	r24, 0x08	; 8
     39c:	83 bf       	out	0x33, r24	; 51
     39e:	8e e4       	ldi	r24, 0x4E	; 78
     3a0:	81 bf       	out	0x31, r24	; 49
     3a2:	87 b7       	in	r24, 0x37	; 55
     3a4:	82 60       	ori	r24, 0x02	; 2
     3a6:	87 bf       	out	0x37, r24	; 55
     3a8:	83 b7       	in	r24, 0x33	; 51
     3aa:	87 60       	ori	r24, 0x07	; 7
     3ac:	83 bf       	out	0x33, r24	; 51
     3ae:	08 95       	ret

000003b0 <ISeg7DispNum>:
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	eb 01       	movw	r28, r22
     3b6:	27 b7       	in	r18, 0x37	; 55
     3b8:	2d 7f       	andi	r18, 0xFD	; 253
     3ba:	27 bf       	out	0x37, r18	; 55
     3bc:	e6 e0       	ldi	r30, 0x06	; 6
     3be:	f1 e0       	ldi	r31, 0x01	; 1
     3c0:	10 82       	st	Z, r1
     3c2:	20 e1       	ldi	r18, 0x10	; 16
     3c4:	21 83       	std	Z+1, r18	; 0x01
     3c6:	22 83       	std	Z+2, r18	; 0x02
     3c8:	23 83       	std	Z+3, r18	; 0x03
     3ca:	24 83       	std	Z+4, r18	; 0x04
     3cc:	25 83       	std	Z+5, r18	; 0x05
     3ce:	2b e0       	ldi	r18, 0x0B	; 11
     3d0:	31 e0       	ldi	r19, 0x01	; 1
     3d2:	be 01       	movw	r22, r28
     3d4:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__udivmodhi4>
     3d8:	81 93       	st	Z+, r24
     3da:	86 2f       	mov	r24, r22
     3dc:	97 2f       	mov	r25, r23
     3de:	e2 17       	cp	r30, r18
     3e0:	f3 07       	cpc	r31, r19
     3e2:	b9 f7       	brne	.-18     	; 0x3d2 <ISeg7DispNum+0x22>
     3e4:	87 b7       	in	r24, 0x37	; 55
     3e6:	82 60       	ori	r24, 0x02	; 2
     3e8:	87 bf       	out	0x37, r24	; 55
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <__vector_15>:
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	0b b6       	in	r0, 0x3b	; 59
     3fc:	0f 92       	push	r0
     3fe:	2f 93       	push	r18
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
     404:	ef 93       	push	r30
     406:	ff 93       	push	r31
     408:	22 b3       	in	r18, 0x12	; 18
     40a:	80 e1       	ldi	r24, 0x10	; 16
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	00 90 f0 01 	lds	r0, 0x01F0	; 0x8001f0 <__data_end>
     412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	80 95       	com	r24
     41e:	80 7f       	andi	r24, 0xF0	; 240
     420:	92 2f       	mov	r25, r18
     422:	9f 70       	andi	r25, 0x0F	; 15
     424:	89 2b       	or	r24, r25
     426:	82 bb       	out	0x12, r24	; 18
     428:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <__data_end>
     42c:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <__data_end+0x1>
     430:	ea 5f       	subi	r30, 0xFA	; 250
     432:	fe 4f       	sbci	r31, 0xFE	; 254
     434:	e0 81       	ld	r30, Z
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	e3 58       	subi	r30, 0x83	; 131
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	80 81       	ld	r24, Z
     43e:	80 95       	com	r24
     440:	8b bb       	out	0x1b, r24	; 27
     442:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end>
     446:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <__data_end+0x1>
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	84 30       	cpi	r24, 0x04	; 4
     44e:	91 05       	cpc	r25, r1
     450:	29 f0       	breq	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     452:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <__data_end+0x1>
     456:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <__data_end>
     45a:	04 c0       	rjmp	.+8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     45c:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <__data_end+0x1>
     460:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <__data_end>
     464:	ff 91       	pop	r31
     466:	ef 91       	pop	r30
     468:	9f 91       	pop	r25
     46a:	8f 91       	pop	r24
     46c:	2f 91       	pop	r18
     46e:	0f 90       	pop	r0
     470:	0b be       	out	0x3b, r0	; 59
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <key_scan>:
     47c:	8e ef       	ldi	r24, 0xFE	; 254
     47e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     482:	00 00       	nop
     484:	80 b1       	in	r24, 0x00	; 0
     486:	80 95       	com	r24
     488:	80 7f       	andi	r24, 0xF0	; 240
     48a:	69 f4       	brne	.+26     	; 0x4a6 <key_scan+0x2a>
     48c:	23 e0       	ldi	r18, 0x03	; 3
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	e2 e6       	ldi	r30, 0x62	; 98
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	89 2f       	mov	r24, r25
     496:	80 95       	com	r24
     498:	80 83       	st	Z, r24
     49a:	00 00       	nop
     49c:	80 b1       	in	r24, 0x00	; 0
     49e:	80 95       	com	r24
     4a0:	80 7f       	andi	r24, 0xF0	; 240
     4a2:	21 f0       	breq	.+8      	; 0x4ac <key_scan+0x30>
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <key_scan+0x2c>
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	89 0f       	add	r24, r25
     4aa:	08 95       	ret
     4ac:	99 0f       	add	r25, r25
     4ae:	21 50       	subi	r18, 0x01	; 1
     4b0:	89 f7       	brne	.-30     	; 0x494 <key_scan+0x18>
     4b2:	08 95       	ret

000004b4 <KeyInit>:
     4b4:	80 ef       	ldi	r24, 0xF0	; 240
     4b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4ba:	8f e0       	ldi	r24, 0x0F	; 15
     4bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4c0:	08 95       	ret

000004c2 <KeyInput>:
     4c2:	cf 93       	push	r28
     4c4:	db df       	rcall	.-74     	; 0x47c <key_scan>
     4c6:	c8 2f       	mov	r28, r24
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <KeyInput+0xa>
     4ca:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4cc:	8f e3       	ldi	r24, 0x3F	; 63
     4ce:	9c e9       	ldi	r25, 0x9C	; 156
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <KeyInput+0xe>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <KeyInput+0x14>
     4d6:	00 00       	nop
     4d8:	8f e3       	ldi	r24, 0x3F	; 63
     4da:	9c e9       	ldi	r25, 0x9C	; 156
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <KeyInput+0x1a>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <KeyInput+0x20>
     4e2:	00 00       	nop
     4e4:	8f e3       	ldi	r24, 0x3F	; 63
     4e6:	9c e9       	ldi	r25, 0x9C	; 156
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <KeyInput+0x26>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <KeyInput+0x2c>
     4ee:	00 00       	nop
     4f0:	c5 df       	rcall	.-118    	; 0x47c <key_scan>
     4f2:	c8 13       	cpse	r28, r24
     4f4:	ea cf       	rjmp	.-44     	; 0x4ca <KeyInput+0x8>
     4f6:	98 2f       	mov	r25, r24
     4f8:	90 7f       	andi	r25, 0xF0	; 240
     4fa:	19 f4       	brne	.+6      	; 0x502 <KeyInput+0x40>
     4fc:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <pin>
     500:	09 c0       	rjmp	.+18     	; 0x514 <KeyInput+0x52>
     502:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <pin>
     506:	89 17       	cp	r24, r25
     508:	21 f0       	breq	.+8      	; 0x512 <KeyInput+0x50>
     50a:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <pin>
     50e:	98 2f       	mov	r25, r24
     510:	01 c0       	rjmp	.+2      	; 0x514 <KeyInput+0x52>
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	89 2f       	mov	r24, r25
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <write_command>:
     51a:	98 2f       	mov	r25, r24
     51c:	90 7f       	andi	r25, 0xF0	; 240
     51e:	94 60       	ori	r25, 0x04	; 4
     520:	95 bb       	out	0x15, r25	; 21
     522:	9b 7f       	andi	r25, 0xFB	; 251
     524:	95 bb       	out	0x15, r25	; 21
     526:	20 e1       	ldi	r18, 0x10	; 16
     528:	82 02       	muls	r24, r18
     52a:	c0 01       	movw	r24, r0
     52c:	11 24       	eor	r1, r1
     52e:	84 60       	ori	r24, 0x04	; 4
     530:	85 bb       	out	0x15, r24	; 21
     532:	8b 7f       	andi	r24, 0xFB	; 251
     534:	85 bb       	out	0x15, r24	; 21
     536:	85 e0       	ldi	r24, 0x05	; 5
     538:	8a 95       	dec	r24
     53a:	f1 f7       	brne	.-4      	; 0x538 <write_command+0x1e>
     53c:	00 00       	nop
     53e:	08 95       	ret

00000540 <LcdCommand>:
     540:	cf 93       	push	r28
     542:	c8 2f       	mov	r28, r24
     544:	85 e3       	ldi	r24, 0x35	; 53
     546:	8a 95       	dec	r24
     548:	f1 f7       	brne	.-4      	; 0x546 <LcdCommand+0x6>
     54a:	00 00       	nop
     54c:	95 e3       	ldi	r25, 0x35	; 53
     54e:	9a 95       	dec	r25
     550:	f1 f7       	brne	.-4      	; 0x54e <LcdCommand+0xe>
     552:	00 00       	nop
     554:	85 e3       	ldi	r24, 0x35	; 53
     556:	8a 95       	dec	r24
     558:	f1 f7       	brne	.-4      	; 0x556 <LcdCommand+0x16>
     55a:	00 00       	nop
     55c:	95 e3       	ldi	r25, 0x35	; 53
     55e:	9a 95       	dec	r25
     560:	f1 f7       	brne	.-4      	; 0x55e <LcdCommand+0x1e>
     562:	00 00       	nop
     564:	85 e3       	ldi	r24, 0x35	; 53
     566:	8a 95       	dec	r24
     568:	f1 f7       	brne	.-4      	; 0x566 <LcdCommand+0x26>
     56a:	00 00       	nop
     56c:	8c 2f       	mov	r24, r28
     56e:	d5 df       	rcall	.-86     	; 0x51a <write_command>
     570:	c1 50       	subi	r28, 0x01	; 1
     572:	c2 30       	cpi	r28, 0x02	; 2
     574:	30 f4       	brcc	.+12     	; 0x582 <LcdCommand+0x42>
     576:	8f e3       	ldi	r24, 0x3F	; 63
     578:	9f e1       	ldi	r25, 0x1F	; 31
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <LcdCommand+0x3a>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <LcdCommand+0x40>
     580:	00 00       	nop
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <LcdInit>:
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	84 bb       	out	0x14, r24	; 20
     58a:	8f e5       	ldi	r24, 0x5F	; 95
     58c:	9a ee       	ldi	r25, 0xEA	; 234
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <LcdInit+0x8>
     592:	00 c0       	rjmp	.+0      	; 0x594 <LcdInit+0xe>
     594:	00 00       	nop
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	c0 df       	rcall	.-128    	; 0x51a <write_command>
     59a:	8f e1       	ldi	r24, 0x1F	; 31
     59c:	9e e4       	ldi	r25, 0x4E	; 78
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <LcdInit+0x18>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <LcdInit+0x1e>
     5a4:	00 00       	nop
     5a6:	80 e3       	ldi	r24, 0x30	; 48
     5a8:	b8 df       	rcall	.-144    	; 0x51a <write_command>
     5aa:	8f e9       	ldi	r24, 0x9F	; 159
     5ac:	9f e0       	ldi	r25, 0x0F	; 15
     5ae:	01 97       	sbiw	r24, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <LcdInit+0x28>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <LcdInit+0x2e>
     5b4:	00 00       	nop
     5b6:	82 e3       	ldi	r24, 0x32	; 50
     5b8:	b0 df       	rcall	.-160    	; 0x51a <write_command>
     5ba:	88 e2       	ldi	r24, 0x28	; 40
     5bc:	c1 df       	rcall	.-126    	; 0x540 <LcdCommand>
     5be:	88 e0       	ldi	r24, 0x08	; 8
     5c0:	bf df       	rcall	.-130    	; 0x540 <LcdCommand>
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	bd df       	rcall	.-134    	; 0x540 <LcdCommand>
     5c6:	86 e0       	ldi	r24, 0x06	; 6
     5c8:	bb df       	rcall	.-138    	; 0x540 <LcdCommand>
     5ca:	8c e0       	ldi	r24, 0x0C	; 12
     5cc:	b9 cf       	rjmp	.-142    	; 0x540 <LcdCommand>
     5ce:	08 95       	ret

000005d0 <LcdPutchar>:
     5d0:	25 e3       	ldi	r18, 0x35	; 53
     5d2:	2a 95       	dec	r18
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LcdPutchar+0x2>
     5d6:	00 00       	nop
     5d8:	95 e3       	ldi	r25, 0x35	; 53
     5da:	9a 95       	dec	r25
     5dc:	f1 f7       	brne	.-4      	; 0x5da <LcdPutchar+0xa>
     5de:	00 00       	nop
     5e0:	25 e3       	ldi	r18, 0x35	; 53
     5e2:	2a 95       	dec	r18
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LcdPutchar+0x12>
     5e6:	00 00       	nop
     5e8:	95 e3       	ldi	r25, 0x35	; 53
     5ea:	9a 95       	dec	r25
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <LcdPutchar+0x1a>
     5ee:	00 00       	nop
     5f0:	25 e3       	ldi	r18, 0x35	; 53
     5f2:	2a 95       	dec	r18
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <LcdPutchar+0x22>
     5f6:	00 00       	nop
     5f8:	98 2f       	mov	r25, r24
     5fa:	90 7f       	andi	r25, 0xF0	; 240
     5fc:	95 60       	ori	r25, 0x05	; 5
     5fe:	95 bb       	out	0x15, r25	; 21
     600:	9b 7f       	andi	r25, 0xFB	; 251
     602:	95 bb       	out	0x15, r25	; 21
     604:	20 e1       	ldi	r18, 0x10	; 16
     606:	82 02       	muls	r24, r18
     608:	c0 01       	movw	r24, r0
     60a:	11 24       	eor	r1, r1
     60c:	85 60       	ori	r24, 0x05	; 5
     60e:	85 bb       	out	0x15, r24	; 21
     610:	8b 7f       	andi	r24, 0xFB	; 251
     612:	85 bb       	out	0x15, r24	; 21
     614:	08 95       	ret

00000616 <LcdPuts>:
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	ec 01       	movw	r28, r24
     61c:	88 81       	ld	r24, Y
     61e:	88 23       	and	r24, r24
     620:	29 f0       	breq	.+10     	; 0x62c <LcdPuts+0x16>
     622:	21 96       	adiw	r28, 0x01	; 1
     624:	d5 df       	rcall	.-86     	; 0x5d0 <LcdPutchar>
     626:	89 91       	ld	r24, Y+
     628:	81 11       	cpse	r24, r1
     62a:	fc cf       	rjmp	.-8      	; 0x624 <LcdPuts+0xe>
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <LcdMove>:
     632:	90 e4       	ldi	r25, 0x40	; 64
     634:	89 9f       	mul	r24, r25
     636:	60 0d       	add	r22, r0
     638:	11 24       	eor	r1, r1
     63a:	86 2f       	mov	r24, r22
     63c:	80 68       	ori	r24, 0x80	; 128
     63e:	80 cf       	rjmp	.-256    	; 0x540 <LcdCommand>
     640:	08 95       	ret

00000642 <LcdNewchar>:
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	8b 01       	movw	r16, r22
     64c:	28 e0       	ldi	r18, 0x08	; 8
     64e:	82 02       	muls	r24, r18
     650:	c0 01       	movw	r24, r0
     652:	11 24       	eor	r1, r1
     654:	80 64       	ori	r24, 0x40	; 64
     656:	74 df       	rcall	.-280    	; 0x540 <LcdCommand>
     658:	e8 01       	movw	r28, r16
     65a:	08 5f       	subi	r16, 0xF8	; 248
     65c:	1f 4f       	sbci	r17, 0xFF	; 255
     65e:	89 91       	ld	r24, Y+
     660:	b7 df       	rcall	.-146    	; 0x5d0 <LcdPutchar>
     662:	c0 17       	cp	r28, r16
     664:	d1 07       	cpc	r29, r17
     666:	d9 f7       	brne	.-10     	; 0x65e <LcdNewchar+0x1c>
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <msec_delay>:
     672:	18 16       	cp	r1, r24
     674:	19 06       	cpc	r1, r25
     676:	44 f4       	brge	.+16     	; 0x688 <msec_delay+0x16>
     678:	ef e9       	ldi	r30, 0x9F	; 159
     67a:	ff e0       	ldi	r31, 0x0F	; 15
     67c:	31 97       	sbiw	r30, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <msec_delay+0xa>
     680:	00 c0       	rjmp	.+0      	; 0x682 <msec_delay+0x10>
     682:	00 00       	nop
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	c1 f7       	brne	.-16     	; 0x678 <msec_delay+0x6>
     688:	08 95       	ret

0000068a <ClockCounterInit>:

static int* AlarmTimeStore[3] = {-1,};


void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
     68a:	85 b5       	in	r24, 0x25	; 37
     68c:	88 60       	ori	r24, 0x08	; 8
     68e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
     690:	84 e6       	ldi	r24, 0x64	; 100
     692:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
     694:	80 e8       	ldi	r24, 0x80	; 128
     696:	87 bf       	out	0x37, r24	; 55
     698:	08 95       	ret

0000069a <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	2f 93       	push	r18
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
	ClockCounter_CNT++;
     6b4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <ClockCounter_CNT>
     6b8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <ClockCounter_CNT+0x1>
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <ClockCounter_CNT+0x1>
     6c2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
     6c6:	80 32       	cpi	r24, 0x20	; 32
     6c8:	2e e4       	ldi	r18, 0x4E	; 78
     6ca:	92 07       	cpc	r25, r18
     6cc:	71 f4       	brne	.+28     	; 0x6ea <__vector_9+0x50>
		ClockCounter_CNT=0;
     6ce:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <ClockCounter_CNT+0x1>
     6d2:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <ClockCounter_CNT>
		ClockCounter_SECOND++;
     6d6:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ClockCounter_SECOND>
     6da:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <ClockCounter_SECOND+0x1>
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <ClockCounter_SECOND+0x1>
     6e4:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ClockCounter_SECOND>
     6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <__vector_9+0x5c>
	}
	if(ClockCounter_CNT % 2000 == 0) {
     6ea:	60 ed       	ldi	r22, 0xD0	; 208
     6ec:	77 e0       	ldi	r23, 0x07	; 7
     6ee:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__divmodhi4>
     6f2:	89 2b       	or	r24, r25
     6f4:	79 f4       	brne	.+30     	; 0x714 <__vector_9+0x7a>
		ClockCounter_M_SECOND = 1;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <ClockCounter_M_SECOND+0x1>
     6fe:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <ClockCounter_M_SECOND>
		ClockCounter_M_SECOND_ONLY_STOPWATCH += 1;
     702:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
     706:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <ClockCounter_M_SECOND_ONLY_STOPWATCH+0x1>
     710:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <ClockCounter_M_SECOND_ONLY_STOPWATCH>
	}
}
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	7f 91       	pop	r23
     71e:	6f 91       	pop	r22
     720:	5f 91       	pop	r21
     722:	2f 91       	pop	r18
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <startTermProject>:


//============================================================================
//======박가경's Watch===flash x 3==============================================
//============================================================================
char* startTermProject() {
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	68 97       	sbiw	r28, 0x18	; 24
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
	char *initTitle = malloc(sizeof(char) * 20);
     746:	84 e1       	ldi	r24, 0x14	; 20
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <malloc>
     74e:	8c 01       	movw	r16, r24
	
	char font1[8] = {0x02, 0x1A, 0x1F, 0x1E, 0x02, 0x1C, 0x04, 0x04};	// 박
     750:	88 e0       	ldi	r24, 0x08	; 8
     752:	e5 e6       	ldi	r30, 0x65	; 101
     754:	f1 e0       	ldi	r31, 0x01	; 1
     756:	de 01       	movw	r26, r28
     758:	11 96       	adiw	r26, 0x01	; 1
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	8a 95       	dec	r24
     760:	e1 f7       	brne	.-8      	; 0x75a <startTermProject+0x2c>
	char font2[8] = {0x02, 0x02, 0x1A, 0x0B, 0x0A, 0x0A, 0x02, 0x00};	// 가
     762:	88 e0       	ldi	r24, 0x08	; 8
     764:	ed e6       	ldi	r30, 0x6D	; 109
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	de 01       	movw	r26, r28
     76a:	19 96       	adiw	r26, 0x09	; 9
     76c:	01 90       	ld	r0, Z+
     76e:	0d 92       	st	X+, r0
     770:	8a 95       	dec	r24
     772:	e1 f7       	brne	.-8      	; 0x76c <startTermProject+0x3e>
	char font3[8] = {0x02, 0x1E, 0x0A, 0x0E, 0x08, 0x0C, 0x12, 0x0C};	// 경
     774:	88 e0       	ldi	r24, 0x08	; 8
     776:	e5 e7       	ldi	r30, 0x75	; 117
     778:	f1 e0       	ldi	r31, 0x01	; 1
     77a:	de 01       	movw	r26, r28
     77c:	51 96       	adiw	r26, 0x11	; 17
     77e:	01 90       	ld	r0, Z+
     780:	0d 92       	st	X+, r0
     782:	8a 95       	dec	r24
     784:	e1 f7       	brne	.-8      	; 0x77e <startTermProject+0x50>
	
	LcdNewchar(1, font1);
     786:	be 01       	movw	r22, r28
     788:	6f 5f       	subi	r22, 0xFF	; 255
     78a:	7f 4f       	sbci	r23, 0xFF	; 255
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	59 df       	rcall	.-334    	; 0x642 <LcdNewchar>
	LcdNewchar(2, font2);
     790:	be 01       	movw	r22, r28
     792:	67 5f       	subi	r22, 0xF7	; 247
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	54 df       	rcall	.-344    	; 0x642 <LcdNewchar>
	LcdNewchar(3, font3);
     79a:	be 01       	movw	r22, r28
     79c:	6f 5e       	subi	r22, 0xEF	; 239
     79e:	7f 4f       	sbci	r23, 0xFF	; 255
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	4f df       	rcall	.-354    	; 0x642 <LcdNewchar>

	initTitle[0] = 1;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	f8 01       	movw	r30, r16
     7a8:	80 83       	st	Z, r24
	initTitle[1] = 2;
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	81 83       	std	Z+1, r24	; 0x01
	initTitle[2] = 3;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	82 83       	std	Z+2, r24	; 0x02
	initTitle[3] = '\'';
     7b2:	87 e2       	ldi	r24, 0x27	; 39
     7b4:	83 83       	std	Z+3, r24	; 0x03
	initTitle[4] = 's';
     7b6:	83 e7       	ldi	r24, 0x73	; 115
     7b8:	84 83       	std	Z+4, r24	; 0x04
	initTitle[5] = ' ';
     7ba:	80 e2       	ldi	r24, 0x20	; 32
     7bc:	85 83       	std	Z+5, r24	; 0x05
	initTitle[6] = 'W';
     7be:	87 e5       	ldi	r24, 0x57	; 87
     7c0:	86 83       	std	Z+6, r24	; 0x06
	initTitle[7] = 'a';
     7c2:	81 e6       	ldi	r24, 0x61	; 97
     7c4:	87 83       	std	Z+7, r24	; 0x07
	initTitle[8] = 't';
     7c6:	84 e7       	ldi	r24, 0x74	; 116
     7c8:	80 87       	std	Z+8, r24	; 0x08
	initTitle[9] = 'c';
     7ca:	83 e6       	ldi	r24, 0x63	; 99
     7cc:	81 87       	std	Z+9, r24	; 0x09
	initTitle[10] = 'h';
     7ce:	88 e6       	ldi	r24, 0x68	; 104
     7d0:	82 87       	std	Z+10, r24	; 0x0a
	initTitle[11] = '\0';
	
	LcdMove(0,0);			// cursor go to home
     7d2:	13 86       	std	Z+11, r1	; 0x0b
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
	LcdPuts(initTitle);		// 박가경's Watch
     7d8:	2c df       	rcall	.-424    	; 0x632 <LcdMove>
     7da:	c8 01       	movw	r24, r16
     7dc:	1c df       	rcall	.-456    	; 0x616 <LcdPuts>
     7de:	03 e0       	ldi	r16, 0x03	; 3
	
	for(int i=0; i<3; i++)		// flash x 3
	{
		LcdCommand(DISP_ON);		// 점
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	8c e0       	ldi	r24, 0x0C	; 12
		msec_delay(500);			// 0.5s delay
     7e4:	ad de       	rcall	.-678    	; 0x540 <LcdCommand>
     7e6:	84 ef       	ldi	r24, 0xF4	; 244
     7e8:	91 e0       	ldi	r25, 0x01	; 1
		LcdCommand(DISP_OFF);		// 멸
     7ea:	43 df       	rcall	.-378    	; 0x672 <msec_delay>
     7ec:	88 e0       	ldi	r24, 0x08	; 8
		msec_delay(500);			// 0.5s delay
     7ee:	a8 de       	rcall	.-688    	; 0x540 <LcdCommand>
     7f0:	84 ef       	ldi	r24, 0xF4	; 244
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	3e df       	rcall	.-388    	; 0x672 <msec_delay>
     7f6:	01 50       	subi	r16, 0x01	; 1
     7f8:	11 09       	sbc	r17, r1
	initTitle[11] = '\0';
	
	LcdMove(0,0);			// cursor go to home
	LcdPuts(initTitle);		// 박가경's Watch
	
	for(int i=0; i<3; i++)		// flash x 3
     7fa:	99 f7       	brne	.-26     	; 0x7e2 <startTermProject+0xb4>
		LcdCommand(DISP_ON);		// 점
		msec_delay(500);			// 0.5s delay
		LcdCommand(DISP_OFF);		// 멸
		msec_delay(500);			// 0.5s delay
	}
	LcdInit();
     7fc:	c4 de       	rcall	.-632    	; 0x586 <LcdInit>
     7fe:	68 96       	adiw	r28, 0x18	; 24
}
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	08 95       	ret

00000814 <main>:
     814:	cc e0       	ldi	r28, 0x0C	; 12
		
	
	while(1){
		// 계속해서 클락 세팅 sec parameter는 디스플레이 플레그 아님 

		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag, AlarmTimeStore);
     816:	d1 e0       	ldi	r29, 0x01	; 1
		//status = 4
		while(status==4){
			status = setAlarm();
			int* tmp = getAlarmTime();
			
			AlarmTimeStore[0] = tmp[0];
     818:	0c 2f       	mov	r16, r28
     81a:	1d 2f       	mov	r17, r29
// 현재 메뉴를 알려주는 변수
static int status = 0;

int main(void) {
back:
	LcdInit();
     81c:	b4 de       	rcall	.-664    	; 0x586 <LcdInit>
	KeyInit();
     81e:	4a de       	rcall	.-876    	; 0x4b4 <KeyInit>
	ClockCounterInit();
     820:	34 df       	rcall	.-408    	; 0x68a <ClockCounterInit>

	// 박가경's project <깜박 x 3>
	startTermProject();
     822:	85 df       	rcall	.-246    	; 0x72e <startTermProject>
     824:	97 d4       	rcall	.+2350   	; 0x1154 <initMenu>
	initMenu();
     826:	78 94       	sei
     828:	85 b5       	in	r24, 0x25	; 37
		
	// 전역 인터럽트 허용
	sei();						
     82a:	82 60       	ori	r24, 0x02	; 2
	TCCR2 |= 1<<CS21;
     82c:	85 bd       	out	0x25, r24	; 37
     82e:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <SegmentStopwatchInitFlag>
		
	
	while(1){
		// 계속해서 클락 세팅 sec parameter는 디스플레이 플레그 아님 

		setClock(ClockCounter_SECOND, SegmentStopwatchInitFlag, AlarmTimeStore);
     832:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <SegmentStopwatchInitFlag+0x1>
     836:	40 2f       	mov	r20, r16
     838:	51 2f       	mov	r21, r17
     83a:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ClockCounter_SECOND>
     83e:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <ClockCounter_SECOND+0x1>
     842:	e6 d3       	rcall	.+1996   	; 0x1010 <setClock>
     844:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SegmentTimerInitFlag>

		if(SegmentTimerInitFlag == 1) {
     848:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <SegmentTimerInitFlag+0x1>
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	51 f4       	brne	.+20     	; 0x864 <main+0x50>
     850:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <ClockCounter_M_SECOND>
			SegmentTimerInitFlag = set7SegmentTimer(ClockCounter_M_SECOND);
     854:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <ClockCounter_M_SECOND+0x1>
     858:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <set7SegmentTimer>
     85c:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <SegmentTimerInitFlag+0x1>
     860:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SegmentTimerInitFlag>
     864:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SegmentStopwatchInitFlag>
		}
		
		if(SegmentStopwatchInitFlag == 1) {
     868:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <SegmentStopwatchInitFlag+0x1>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	81 f4       	brne	.+32     	; 0x890 <main+0x7c>
     870:	28 de       	rcall	.-944    	; 0x4c2 <KeyInput>
			SegmentStopwatchInitFlag = set7SegmentStopwatch(ClockCounter_M_SECOND, KeyInput());
     872:	68 2f       	mov	r22, r24
     874:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <ClockCounter_M_SECOND>
     878:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <ClockCounter_M_SECOND+0x1>
     87c:	74 d5       	rcall	.+2792   	; 0x1366 <set7SegmentStopwatch>
     87e:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <SegmentStopwatchInitFlag+0x1>
     882:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SegmentStopwatchInitFlag>
     886:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <ClockCounter_M_SECOND+0x1>
			ClockCounter_M_SECOND = 0;
     88a:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <ClockCounter_M_SECOND>
     88e:	cf cf       	rjmp	.-98     	; 0x82e <main+0x1a>
     890:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <ClockCounter_SECOND+0x1>
			continue;
		}
		
		// 무조건 1초 혹은 0.1초로 계산되게 하기위함
		ClockCounter_SECOND = 0;
     894:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <ClockCounter_SECOND>
		ClockCounter_M_SECOND = 0;		
     898:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <ClockCounter_M_SECOND+0x1>
     89c:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <ClockCounter_M_SECOND>
		// keypad input
		keyInput = KeyInput();
     8a0:	10 de       	rcall	.-992    	; 0x4c2 <KeyInput>
		
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
     8a2:	65 d4       	rcall	.+2250   	; 0x116e <setMenu>
     8a4:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <status+0x1>
     8a8:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <status>
     8ac:	01 97       	sbiw	r24, 0x01	; 1

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     8ae:	39 f4       	brne	.+14     	; 0x8be <main+0xaa>
     8b0:	06 d2       	rcall	.+1036   	; 0xcbe <setCustomClock>
			status = setCustomClock();	// Time setting(main.c 파일 안에 있음)	
     8b2:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <status+0x1>
     8b6:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <status>
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	c9 f3       	breq	.-14     	; 0x8b0 <main+0x9c>
		// 어떤 상태에서 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
     8be:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <status>
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     8c2:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <status+0x1>
     8c6:	02 97       	sbiw	r24, 0x02	; 2
     8c8:	51 f4       	brne	.+20     	; 0x8de <main+0xca>
     8ca:	87 ef       	ldi	r24, 0xF7	; 247
     8cc:	91 e0       	ldi	r25, 0x01	; 1
			status = setTimer(&SegmentTimerInitFlag);
     8ce:	0e 94 b7 0c 	call	0x196e	; 0x196e <setTimer>
     8d2:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <status+0x1>
     8d6:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <status>
     8da:	02 97       	sbiw	r24, 0x02	; 2
		}
		
	
		//=========================================================
		//status = 2
		while(status==2){
     8dc:	b1 f3       	breq	.-20     	; 0x8ca <main+0xb6>
     8de:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <status>
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     8e2:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <status+0x1>
     8e6:	03 97       	sbiw	r24, 0x03	; 3
     8e8:	49 f4       	brne	.+18     	; 0x8fc <main+0xe8>
     8ea:	85 ef       	ldi	r24, 0xF5	; 245
			status = setStopwatch(&SegmentStopwatchInitFlag);
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	f0 d4       	rcall	.+2528   	; 0x12d0 <setStopwatch>
     8f0:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <status+0x1>
     8f4:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <status>
     8f8:	03 97       	sbiw	r24, 0x03	; 3
		}
		
		
		//=========================================================
		//status = 3
		while(status==3){
     8fa:	b9 f3       	breq	.-18     	; 0x8ea <main+0xd6>
     8fc:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <status>
		}
	
		
		//=========================================================
		//status = 4
		while(status==4){
     900:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <status+0x1>
     904:	84 30       	cpi	r24, 0x04	; 4
     906:	91 05       	cpc	r25, r1
     908:	d1 f4       	brne	.+52     	; 0x93e <main+0x12a>
			status = setAlarm();
     90a:	1e d0       	rcall	.+60     	; 0x948 <setAlarm>
     90c:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <status+0x1>
     910:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <status>
     914:	96 d1       	rcall	.+812    	; 0xc42 <getAlarmTime>
			int* tmp = getAlarmTime();
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
			
			AlarmTimeStore[0] = tmp[0];
     91c:	99 83       	std	Y+1, r25	; 0x01
     91e:	88 83       	st	Y, r24
     920:	82 81       	ldd	r24, Z+2	; 0x02
     922:	93 81       	ldd	r25, Z+3	; 0x03
			AlarmTimeStore[1] = tmp[1];
     924:	9b 83       	std	Y+3, r25	; 0x03
     926:	8a 83       	std	Y+2, r24	; 0x02
     928:	84 81       	ldd	r24, Z+4	; 0x04
     92a:	95 81       	ldd	r25, Z+5	; 0x05
			AlarmTimeStore[2] = tmp[2];
     92c:	9d 83       	std	Y+5, r25	; 0x05
     92e:	8c 83       	std	Y+4, r24	; 0x04
     930:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <status>
		}
	
		
		//=========================================================
		//status = 4
		while(status==4){
     934:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <status+0x1>
     938:	84 30       	cpi	r24, 0x04	; 4
     93a:	91 05       	cpc	r25, r1
     93c:	31 f3       	breq	.-52     	; 0x90a <main+0xf6>
     93e:	8d 39       	cpi	r24, 0x9D	; 157
     940:	9f 4f       	sbci	r25, 0xFF	; 255
			AlarmTimeStore[1] = tmp[1];
			AlarmTimeStore[2] = tmp[2];
		}
		
		// 이전 버튼
		if(status == -99) {
     942:	09 f0       	breq	.+2      	; 0x946 <main+0x132>
     944:	74 cf       	rjmp	.-280    	; 0x82e <main+0x1a>
     946:	6a cf       	rjmp	.-300    	; 0x81c <main+0x8>

00000948 <setAlarm>:
     948:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <customAlarmSetInitFlag>
	
int setAlarm() {
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customAlarmSetInitFlag == 0){
     94c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <customAlarmSetInitFlag+0x1>
     950:	89 2b       	or	r24, r25
     952:	81 f4       	brne	.+32     	; 0x974 <setAlarm+0x2c>
		// 초기화면 세팅
		LcdMove(0,0);
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	6c de       	rcall	.-808    	; 0x632 <LcdMove>
		LcdPuts("00h 00m 00s        ");
     95a:	8e e8       	ldi	r24, 0x8E	; 142
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	5b de       	rcall	.-842    	; 0x616 <LcdPuts>
		LcdCommand(HOME);
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	ee dd       	rcall	.-1060   	; 0x540 <LcdCommand>
		LcdCommand(CURSOR_ON);
     964:	8e e0       	ldi	r24, 0x0E	; 14
     966:	ec dd       	rcall	.-1064   	; 0x540 <LcdCommand>
     968:	81 e0       	ldi	r24, 0x01	; 1
		customAlarmSetInitFlag = 1;
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <customAlarmSetInitFlag+0x1>
     970:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <customAlarmSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
     974:	a6 dd       	rcall	.-1204   	; 0x4c2 <KeyInput>
     976:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		switch(keyInput) {
     978:	fc 01       	movw	r30, r24
     97a:	71 97       	sbiw	r30, 0x11	; 17
     97c:	e4 37       	cpi	r30, 0x74	; 116
     97e:	f1 05       	cpc	r31, r1
     980:	08 f0       	brcs	.+2      	; 0x984 <setAlarm+0x3c>
     982:	5c c1       	rjmp	.+696    	; 0xc3c <setAlarm+0x2f4>
     984:	ea 5b       	subi	r30, 0xBA	; 186
     986:	ff 4f       	sbci	r31, 0xFF	; 255
     988:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
     98c:	81 e3       	ldi	r24, 0x31	; 49
     98e:	20 de       	rcall	.-960    	; 0x5d0 <LcdPutchar>
     990:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     994:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     99e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
     9a2:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 1;
     9a4:	99 1f       	adc	r25, r25
     9a6:	fc 01       	movw	r30, r24
     9a8:	e5 5f       	subi	r30, 0xF5	; 245
     9aa:	fd 4f       	sbci	r31, 0xFD	; 253
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
				break;
     9b4:	40 c1       	rjmp	.+640    	; 0xc36 <setAlarm+0x2ee>
			
			case SW1:
				LcdPutchar('2');
     9b6:	82 e3       	ldi	r24, 0x32	; 50
     9b8:	0b de       	rcall	.-1002   	; 0x5d0 <LcdPutchar>
     9ba:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     9be:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     9c8:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
     9cc:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 2;
     9ce:	99 1f       	adc	r25, r25
     9d0:	fc 01       	movw	r30, r24
     9d2:	e5 5f       	subi	r30, 0xF5	; 245
     9d4:	fd 4f       	sbci	r31, 0xFD	; 253
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	91 83       	std	Z+1, r25	; 0x01
     9dc:	80 83       	st	Z, r24
				break;
     9de:	2b c1       	rjmp	.+598    	; 0xc36 <setAlarm+0x2ee>
			
			case SW2:
				LcdPutchar('3');
     9e0:	83 e3       	ldi	r24, 0x33	; 51
     9e2:	f6 dd       	rcall	.-1044   	; 0x5d0 <LcdPutchar>
     9e4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     9e8:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     9f2:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
     9f6:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 3;
     9f8:	99 1f       	adc	r25, r25
     9fa:	fc 01       	movw	r30, r24
     9fc:	e5 5f       	subi	r30, 0xF5	; 245
     9fe:	fd 4f       	sbci	r31, 0xFD	; 253
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	80 83       	st	Z, r24
				break;
     a08:	16 c1       	rjmp	.+556    	; 0xc36 <setAlarm+0x2ee>
			
			case SW4:
				LcdPutchar('4');
     a0a:	84 e3       	ldi	r24, 0x34	; 52
     a0c:	e1 dd       	rcall	.-1086   	; 0x5d0 <LcdPutchar>
     a0e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     a12:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     a1c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
     a20:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 4;
     a22:	99 1f       	adc	r25, r25
     a24:	fc 01       	movw	r30, r24
     a26:	e5 5f       	subi	r30, 0xF5	; 245
     a28:	fd 4f       	sbci	r31, 0xFD	; 253
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
				break;
     a32:	01 c1       	rjmp	.+514    	; 0xc36 <setAlarm+0x2ee>
			
			case SW5:
				LcdPutchar('5');
     a34:	85 e3       	ldi	r24, 0x35	; 53
     a36:	cc dd       	rcall	.-1128   	; 0x5d0 <LcdPutchar>
     a38:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     a3c:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     a46:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
     a4a:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 5;
     a4c:	99 1f       	adc	r25, r25
     a4e:	fc 01       	movw	r30, r24
     a50:	e5 5f       	subi	r30, 0xF5	; 245
     a52:	fd 4f       	sbci	r31, 0xFD	; 253
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	80 83       	st	Z, r24
				break;
     a5c:	ec c0       	rjmp	.+472    	; 0xc36 <setAlarm+0x2ee>
			
			case SW6:
				LcdPutchar('6');
     a5e:	86 e3       	ldi	r24, 0x36	; 54
     a60:	b7 dd       	rcall	.-1170   	; 0x5d0 <LcdPutchar>
     a62:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     a66:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     a70:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
     a74:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 6;
     a76:	99 1f       	adc	r25, r25
     a78:	fc 01       	movw	r30, r24
     a7a:	e5 5f       	subi	r30, 0xF5	; 245
     a7c:	fd 4f       	sbci	r31, 0xFD	; 253
     a7e:	86 e0       	ldi	r24, 0x06	; 6
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	80 83       	st	Z, r24
				break;
     a86:	d7 c0       	rjmp	.+430    	; 0xc36 <setAlarm+0x2ee>
			
			case SW8:
				LcdPutchar('7');
     a88:	87 e3       	ldi	r24, 0x37	; 55
     a8a:	a2 dd       	rcall	.-1212   	; 0x5d0 <LcdPutchar>
     a8c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     a90:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     a9a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 7;
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	fc 01       	movw	r30, r24
     aa4:	e5 5f       	subi	r30, 0xF5	; 245
     aa6:	fd 4f       	sbci	r31, 0xFD	; 253
     aa8:	87 e0       	ldi	r24, 0x07	; 7
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	91 83       	std	Z+1, r25	; 0x01
     aae:	80 83       	st	Z, r24
				break;
     ab0:	c2 c0       	rjmp	.+388    	; 0xc36 <setAlarm+0x2ee>
			
			case SW9:
				LcdPutchar('8');
     ab2:	88 e3       	ldi	r24, 0x38	; 56
     ab4:	8d dd       	rcall	.-1254   	; 0x5d0 <LcdPutchar>
     ab6:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     aba:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     ac4:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 8;
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	fc 01       	movw	r30, r24
     ace:	e5 5f       	subi	r30, 0xF5	; 245
     ad0:	fd 4f       	sbci	r31, 0xFD	; 253
     ad2:	88 e0       	ldi	r24, 0x08	; 8
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
				break;
     ada:	ad c0       	rjmp	.+346    	; 0xc36 <setAlarm+0x2ee>
			
			case SW10:
				LcdPutchar('9');
     adc:	89 e3       	ldi	r24, 0x39	; 57
     ade:	78 dd       	rcall	.-1296   	; 0x5d0 <LcdPutchar>
     ae0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     ae4:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     aee:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 9;
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	fc 01       	movw	r30, r24
     af8:	e5 5f       	subi	r30, 0xF5	; 245
     afa:	fd 4f       	sbci	r31, 0xFD	; 253
     afc:	89 e0       	ldi	r24, 0x09	; 9
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
				break;
     b04:	98 c0       	rjmp	.+304    	; 0xc36 <setAlarm+0x2ee>
			
			case SW13:
				LcdPutchar('0');
     b06:	80 e3       	ldi	r24, 0x30	; 48
     b08:	63 dd       	rcall	.-1338   	; 0x5d0 <LcdPutchar>
     b0a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex++;
     b0e:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     b18:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 0;
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	fc 01       	movw	r30, r24
     b22:	e5 5f       	subi	r30, 0xF5	; 245
     b24:	fd 4f       	sbci	r31, 0xFD	; 253
     b26:	11 82       	std	Z+1, r1	; 0x01
     b28:	10 82       	st	Z, r1
				break;
     b2a:	85 c0       	rjmp	.+266    	; 0xc36 <setAlarm+0x2ee>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
     b2c:	80 e1       	ldi	r24, 0x10	; 16
     b2e:	08 dd       	rcall	.-1520   	; 0x540 <LcdCommand>
     b30:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarmSettingIndex -= 1;
     b34:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     b3e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
     b42:	88 0f       	add	r24, r24
				customAlarm[customAlarmSettingIndex] = 0;
     b44:	99 1f       	adc	r25, r25
     b46:	fc 01       	movw	r30, r24
     b48:	e5 5f       	subi	r30, 0xF5	; 245
     b4a:	fd 4f       	sbci	r31, 0xFD	; 253
     b4c:	11 82       	std	Z+1, r1	; 0x01
     b4e:	10 82       	st	Z, r1
				returnStatus = 4;
				break;
     b50:	75 c0       	rjmp	.+234    	; 0xc3c <setAlarm+0x2f4>
			
			// 아래 키 입력되는 케이스
			case SW7:
				customAlarmSettingIndex += 1;
     b52:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <customAlarmSettingIndex>
     b56:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <customAlarmSettingIndex+0x1>
     b60:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <customAlarmSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
     b64:	84 e1       	ldi	r24, 0x14	; 20
     b66:	ec dc       	rcall	.-1576   	; 0x540 <LcdCommand>
     b68:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <customAlarmSettingIndex>
				customAlarm[customAlarmSettingIndex] = 0;
     b6c:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <customAlarmSettingIndex+0x1>
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	e5 5f       	subi	r30, 0xF5	; 245
     b76:	fd 4f       	sbci	r31, 0xFD	; 253
				returnStatus = 4;
				break;
     b78:	11 82       	std	Z+1, r1	; 0x01
		if(returnStatus == -1) {
			returnStatus = 4;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customAlarmSetInitFlag = 0;
     b7a:	10 82       	st	Z, r1
     b7c:	5f c0       	rjmp	.+190    	; 0xc3c <setAlarm+0x2f4>
     b7e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <customAlarmSetInitFlag+0x1>
			LcdMove(0,0);
     b82:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <customAlarmSetInitFlag>
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
			LcdPuts("                      ");
     b8a:	53 dd       	rcall	.-1370   	; 0x632 <LcdMove>
     b8c:	82 ea       	ldi	r24, 0xA2	; 162
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	42 dd       	rcall	.-1404   	; 0x616 <LcdPuts>
			LcdCommand(CURSOR_OFF);
     b92:	8c e0       	ldi	r24, 0x0C	; 12
     b94:	d5 dc       	rcall	.-1622   	; 0x540 <LcdCommand>
     b96:	eb e0       	ldi	r30, 0x0B	; 11
			
			// 시간 계산
			alarmHour = customAlarm[1]*10 + customAlarm[2];
			alarmMinute = customAlarm[5]*10 + customAlarm[6];
     b98:	f2 e0       	ldi	r31, 0x02	; 2
     b9a:	82 85       	ldd	r24, Z+10	; 0x0a
     b9c:	93 85       	ldd	r25, Z+11	; 0x0b
     b9e:	9c 01       	movw	r18, r24
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	44 85       	ldd	r20, Z+12	; 0x0c
     bb6:	55 85       	ldd	r21, Z+13	; 0x0d
     bb8:	48 0f       	add	r20, r24
     bba:	59 1f       	adc	r21, r25
     bbc:	82 89       	ldd	r24, Z+18	; 0x12
			alarmSecond = customAlarm[9]*10 + customAlarm[10];
     bbe:	93 89       	ldd	r25, Z+19	; 0x13
     bc0:	9c 01       	movw	r18, r24
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	82 0f       	add	r24, r18
     bd4:	93 1f       	adc	r25, r19
     bd6:	24 89       	ldd	r18, Z+20	; 0x14
     bd8:	35 89       	ldd	r19, Z+21	; 0x15
     bda:	28 0f       	add	r18, r24
     bdc:	39 1f       	adc	r19, r25
     bde:	a1 e0       	ldi	r26, 0x01	; 1
			
			alarmTimeArray[0] = alarmHour;
     be0:	b2 e0       	ldi	r27, 0x02	; 2
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	bc 01       	movw	r22, r24
     be8:	66 0f       	add	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	86 0f       	add	r24, r22
     bfa:	97 1f       	adc	r25, r23
     bfc:	64 81       	ldd	r22, Z+4	; 0x04
     bfe:	75 81       	ldd	r23, Z+5	; 0x05
     c00:	86 0f       	add	r24, r22
     c02:	97 1f       	adc	r25, r23
     c04:	11 96       	adiw	r26, 0x01	; 1
     c06:	9c 93       	st	X, r25
     c08:	8e 93       	st	-X, r24
     c0a:	13 96       	adiw	r26, 0x03	; 3
			alarmTimeArray[1] = alarmMinute;
     c0c:	5c 93       	st	X, r21
     c0e:	4e 93       	st	-X, r20
     c10:	12 97       	sbiw	r26, 0x02	; 2
     c12:	15 96       	adiw	r26, 0x05	; 5
			alarmTimeArray[2] = alarmSecond;
     c14:	3c 93       	st	X, r19
     c16:	2e 93       	st	-X, r18
     c18:	14 97       	sbiw	r26, 0x04	; 4
     c1a:	81 e0       	ldi	r24, 0x01	; 1
			customAlarmSetDoneFlag = 1;
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <customAlarmSetDoneFlag+0x1>
     c22:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <customAlarmSetDoneFlag>
     c26:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <customAlarmSettingIndex+0x1>
			customAlarmSettingIndex = 0;
     c2a:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <customAlarmSettingIndex>
     c2e:	08 95       	ret
			returnStatus = 0;
			break;
		}
		return returnStatus;
	}
}
     c30:	8d e9       	ldi	r24, 0x9D	; 157
				customAlarm[customAlarmSettingIndex] = 0;
				returnStatus = 4;
				break;
				
			case SW15:
				return -99;
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	08 95       	ret
     c36:	84 e0       	ldi	r24, 0x04	; 4
				returnStatus = 4;
				break;
		}
		//////////////////////////////////////////////////////////////////////////
		if(returnStatus == -1) {
			returnStatus = 4;
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	08 95       	ret
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	08 95       	ret

00000c42 <getAlarmTime>:
			returnStatus = 0;
			break;
		}
		return returnStatus;
	}
}
     c42:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <customAlarmSetDoneFlag>

int* getAlarmTime() {
	if(customAlarmSetDoneFlag == 1){
     c46:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <customAlarmSetDoneFlag+0x1>
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	39 f4       	brne	.+14     	; 0xc5c <getAlarmTime+0x1a>
		customAlarmSetDoneFlag = 0;
     c4e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <customAlarmSetDoneFlag+0x1>
     c52:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <customAlarmSetDoneFlag>
		return alarmTimeArray;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	08 95       	ret
	}
	else {
		int *tmp[3] = {-1,};
		return tmp;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
	}
     c60:	08 95       	ret

00000c62 <__vector_14>:
static unsigned char dotpattern[4] = {0xFC, 0xF3, 0xCF, 0x3F};
// 도트매트릭스 패턴 변화용 타이머/카운터1 진입 횟수 변수
static int timerDotCounter = 0;

ISR(TIMER1_OVF_vect)
{	
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
	// keep a track of number of overflows
	timerDotCounter++;
     c70:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <timerDotCounter>
     c74:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <timerDotCounter+0x1>
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <timerDotCounter+0x1>
     c7e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <timerDotCounter>
	
	// check for number of overflows here itself
	// 30 overflows = 1 seconds delay (approx.)
	if (timerDotCounter >= 30) // NOTE: '>=' used instead of '=='
     c82:	4e 97       	sbiw	r24, 0x1e	; 30
     c84:	ac f0       	brlt	.+42     	; 0xcb0 <__vector_14+0x4e>
	{
		if(rowindex++ == 4) rowindex = 0;
     c86:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <rowindex>
     c8a:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <rowindex+0x1>
     c8e:	84 30       	cpi	r24, 0x04	; 4
     c90:	91 05       	cpc	r25, r1
     c92:	31 f0       	breq	.+12     	; 0xca0 <__vector_14+0x3e>
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <rowindex+0x1>
     c9a:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <rowindex>
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <__vector_14+0x46>
     ca0:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <rowindex+0x1>
     ca4:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <rowindex>
		timerDotCounter = 0;   // reset overflow counter
     ca8:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <timerDotCounter+0x1>
     cac:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <timerDotCounter>
	}
}
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	0f 90       	pop	r0
     cba:	1f 90       	pop	r1
     cbc:	18 95       	reti

00000cbe <setCustomClock>:
		LcdPutchar('s');
	}
}

// 사용자에게 입력 받아 시계 세팅
int setCustomClock(int* ClockCounter_SECOND) {
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	8c 01       	movw	r16, r24
	// -1 : 숫자가 눌린 경우(전) , 0: 선택이 눌린 경우, 1: 숫자가 눌린 경우(후), 위로 눌린 경우
	int returnStatus = -1;
	// 키를 입력받는 변수
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
     cc6:	fd db       	rcall	.-2054   	; 0x4c2 <KeyInput>
     cc8:	c8 2f       	mov	r28, r24
	
	LcdMove(1,customClockSettingIndex);
     cca:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <customClockSettingIndex>
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	b0 dc       	rcall	.-1696   	; 0x632 <LcdMove>
	while(1) {
		if(customClockSetInitFlag == 0){
     cd2:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <customClockSetInitFlag>
     cd6:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <customClockSetInitFlag+0x1>
     cda:	89 2b       	or	r24, r25
     cdc:	79 f4       	brne	.+30     	; 0xcfc <setCustomClock+0x3e>
			LcdMove(1,0);
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	a7 dc       	rcall	.-1714   	; 0x632 <LcdMove>
			LcdPuts("______");
     ce4:	89 eb       	ldi	r24, 0xB9	; 185
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	96 dc       	rcall	.-1748   	; 0x616 <LcdPuts>
			LcdMove(1,0);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	a1 dc       	rcall	.-1726   	; 0x632 <LcdMove>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
			customClockSetInitFlag = 1;
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <customClockSetInitFlag+0x1>
     cf8:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <customClockSetInitFlag>
		}
		
		if(keyInput == NO_KEY){
     cfc:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
     cfe:	0d c0       	rjmp	.+26     	; 0xd1a <setCustomClock+0x5c>
     d00:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
     d02:	1e dc       	rcall	.-1988   	; 0x540 <LcdCommand>
     d04:	84 ef       	ldi	r24, 0xF4	; 244
     d06:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
     d08:	b4 dc       	rcall	.-1688   	; 0x672 <msec_delay>
     d0a:	8c e0       	ldi	r24, 0x0C	; 12
     d0c:	19 dc       	rcall	.-1998   	; 0x540 <LcdCommand>
			msec_delay(500);
     d0e:	84 ef       	ldi	r24, 0xF4	; 244
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	af dc       	rcall	.-1698   	; 0x672 <msec_delay>
     d14:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	15 c1       	rjmp	.+554    	; 0xf44 <setCustomClock+0x286>
     d1a:	8c 2f       	mov	r24, r28
		}
		
		switch(keyInput) {
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	fc 01       	movw	r30, r24
     d20:	71 97       	sbiw	r30, 0x11	; 17
     d22:	e4 37       	cpi	r30, 0x74	; 116
     d24:	f1 05       	cpc	r31, r1
     d26:	18 f4       	brcc	.+6      	; 0xd2e <setCustomClock+0x70>
     d28:	e6 54       	subi	r30, 0x46	; 70
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	f4 c7       	rjmp	.+4072   	; 0x1d16 <__tablejump2__>
			case SW15:
				return -99;
				break;
				
			default:
				returnStatus = 1;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	08 c1       	rjmp	.+528    	; 0xf44 <setCustomClock+0x286>
			return 1;
		}
		
		switch(keyInput) {
			case SW0:
				LcdPutchar('1');
     d34:	81 e3       	ldi	r24, 0x31	; 49
     d36:	4c dc       	rcall	.-1896   	; 0x5d0 <LcdPutchar>
     d38:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
				customClock[customClockSettingIndex] = 1;
     d3c:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	ed 5c       	subi	r30, 0xCD	; 205
     d46:	fd 4f       	sbci	r31, 0xFD	; 253
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	80 83       	st	Z, r24
				break;
     d50:	ee c0       	rjmp	.+476    	; 0xf2e <setCustomClock+0x270>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
     d52:	82 e3       	ldi	r24, 0x32	; 50
     d54:	3d dc       	rcall	.-1926   	; 0x5d0 <LcdPutchar>
     d56:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
				customClock[customClockSettingIndex] = 2;
     d5a:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	ed 5c       	subi	r30, 0xCD	; 205
     d64:	fd 4f       	sbci	r31, 0xFD	; 253
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24
				break;
     d6e:	df c0       	rjmp	.+446    	; 0xf2e <setCustomClock+0x270>
			
			case SW2:
				LcdPutchar('3');
     d70:	83 e3       	ldi	r24, 0x33	; 51
     d72:	2e dc       	rcall	.-1956   	; 0x5d0 <LcdPutchar>
     d74:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
				customClock[customClockSettingIndex] = 3;
     d78:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	ed 5c       	subi	r30, 0xCD	; 205
     d82:	fd 4f       	sbci	r31, 0xFD	; 253
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	80 83       	st	Z, r24
				break;
     d8c:	d0 c0       	rjmp	.+416    	; 0xf2e <setCustomClock+0x270>
			
			case SW4:
				LcdPutchar('4');
     d8e:	84 e3       	ldi	r24, 0x34	; 52
     d90:	1f dc       	rcall	.-1986   	; 0x5d0 <LcdPutchar>
     d92:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
				customClock[customClockSettingIndex] = 4;
     d96:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	ed 5c       	subi	r30, 0xCD	; 205
     da0:	fd 4f       	sbci	r31, 0xFD	; 253
     da2:	84 e0       	ldi	r24, 0x04	; 4
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
				break;
     daa:	c1 c0       	rjmp	.+386    	; 0xf2e <setCustomClock+0x270>
			
			case SW5:
				LcdPutchar('5');
     dac:	85 e3       	ldi	r24, 0x35	; 53
     dae:	10 dc       	rcall	.-2016   	; 0x5d0 <LcdPutchar>
     db0:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
				customClock[customClockSettingIndex] = 5;
     db4:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	ed 5c       	subi	r30, 0xCD	; 205
     dbe:	fd 4f       	sbci	r31, 0xFD	; 253
     dc0:	85 e0       	ldi	r24, 0x05	; 5
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	80 83       	st	Z, r24
				break;
     dc8:	b2 c0       	rjmp	.+356    	; 0xf2e <setCustomClock+0x270>
			
			case SW6:
				LcdPutchar('6');
     dca:	86 e3       	ldi	r24, 0x36	; 54
     dcc:	01 dc       	rcall	.-2046   	; 0x5d0 <LcdPutchar>
				customClock[customClockSettingIndex] = 6;
     dce:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
     dd2:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     dd6:	ee 0f       	add	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	ed 5c       	subi	r30, 0xCD	; 205
     ddc:	fd 4f       	sbci	r31, 0xFD	; 253
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	80 83       	st	Z, r24
				break;
     de6:	a3 c0       	rjmp	.+326    	; 0xf2e <setCustomClock+0x270>
			
			case SW8:
				LcdPutchar('7');
     de8:	87 e3       	ldi	r24, 0x37	; 55
     dea:	f2 db       	rcall	.-2076   	; 0x5d0 <LcdPutchar>
				customClock[customClockSettingIndex] = 7;
     dec:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
     df0:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ed 5c       	subi	r30, 0xCD	; 205
     dfa:	fd 4f       	sbci	r31, 0xFD	; 253
     dfc:	87 e0       	ldi	r24, 0x07	; 7
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
				break;
     e04:	94 c0       	rjmp	.+296    	; 0xf2e <setCustomClock+0x270>
			
			case SW9:
				LcdPutchar('8');
     e06:	88 e3       	ldi	r24, 0x38	; 56
     e08:	e3 db       	rcall	.-2106   	; 0x5d0 <LcdPutchar>
				customClock[customClockSettingIndex] = 8;
     e0a:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
     e0e:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	ed 5c       	subi	r30, 0xCD	; 205
     e18:	fd 4f       	sbci	r31, 0xFD	; 253
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
				break;
			
			case SW10:
				LcdPutchar('9');
     e22:	85 c0       	rjmp	.+266    	; 0xf2e <setCustomClock+0x270>
     e24:	89 e3       	ldi	r24, 0x39	; 57
     e26:	d4 db       	rcall	.-2136   	; 0x5d0 <LcdPutchar>
				customClock[customClockSettingIndex] = 9;
     e28:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
     e2c:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	ed 5c       	subi	r30, 0xCD	; 205
     e36:	fd 4f       	sbci	r31, 0xFD	; 253
     e38:	89 e0       	ldi	r24, 0x09	; 9
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	91 83       	std	Z+1, r25	; 0x01
				break;
     e3e:	80 83       	st	Z, r24
			
			case SW13:
				LcdPutchar('0');
     e40:	76 c0       	rjmp	.+236    	; 0xf2e <setCustomClock+0x270>
     e42:	80 e3       	ldi	r24, 0x30	; 48
				customClock[customClockSettingIndex] = 0;
     e44:	c5 db       	rcall	.-2166   	; 0x5d0 <LcdPutchar>
     e46:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <customClockSettingIndex>
     e4a:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	ed 5c       	subi	r30, 0xCD	; 205
     e54:	fd 4f       	sbci	r31, 0xFD	; 253
     e56:	11 82       	std	Z+1, r1	; 0x01
				break;
     e58:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
     e5a:	69 c0       	rjmp	.+210    	; 0xf2e <setCustomClock+0x270>
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	e8 db       	rcall	.-2096   	; 0x632 <LcdMove>
				LcdPuts("1. SET          ");				
     e62:	80 ec       	ldi	r24, 0xC0	; 192
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	d7 db       	rcall	.-2130   	; 0x616 <LcdPuts>
     e68:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <customClockSettingIndex+0x1>
			customClockSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			customClockSettingIndex = 0;
     e6c:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <customClockSettingIndex>
     e70:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
     e72:	11 82       	std	Z+1, r1	; 0x01
     e74:	10 82       	st	Z, r1
     e76:	e3 e3       	ldi	r30, 0x33	; 51
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customClock[0] * 10 + customClock[1];
     e78:	f2 e0       	ldi	r31, 0x02	; 2
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	9c 01       	movw	r18, r24
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	22 81       	ldd	r18, Z+2	; 0x02
     e96:	33 81       	ldd	r19, Z+3	; 0x03
     e98:	82 0f       	add	r24, r18
     e9a:	93 1f       	adc	r25, r19
     e9c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <hour+0x1>
     ea0:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <hour>
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customClock[2] * 10 + customClock[3];
     ea6:	95 81       	ldd	r25, Z+5	; 0x05
     ea8:	9c 01       	movw	r18, r24
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	82 0f       	add	r24, r18
     ebc:	93 1f       	adc	r25, r19
     ebe:	26 81       	ldd	r18, Z+6	; 0x06
     ec0:	37 81       	ldd	r19, Z+7	; 0x07
     ec2:	82 0f       	add	r24, r18
     ec4:	93 1f       	adc	r25, r19
     ec6:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <minute+0x1>
     eca:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <minute>
     ece:	80 85       	ldd	r24, Z+8	; 0x08
			second = customClock[4] * 10 + customClock[5];
     ed0:	91 85       	ldd	r25, Z+9	; 0x09
     ed2:	9c 01       	movw	r18, r24
     ed4:	22 0f       	add	r18, r18
     ed6:	33 1f       	adc	r19, r19
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	82 0f       	add	r24, r18
     ee6:	93 1f       	adc	r25, r19
     ee8:	22 85       	ldd	r18, Z+10	; 0x0a
     eea:	33 85       	ldd	r19, Z+11	; 0x0b
     eec:	82 0f       	add	r24, r18
     eee:	93 1f       	adc	r25, r19
     ef0:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <second+0x1>
     ef4:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <second>
			customClockSetInitFlag = 0;
     ef8:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <customClockSetInitFlag+0x1>
     efc:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <customClockSetInitFlag>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	1f c0       	rjmp	.+62     	; 0xf44 <setCustomClock+0x286>
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --customClockSettingIndex);
     f06:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <customClockSettingIndex>
     f0a:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     f0e:	61 50       	subi	r22, 0x01	; 1
     f10:	71 09       	sbc	r23, r1
     f12:	70 93 40 02 	sts	0x0240, r23	; 0x800240 <customClockSettingIndex+0x1>
     f16:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <customClockSettingIndex>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	8a db       	rcall	.-2284   	; 0x632 <LcdMove>
     f1e:	8f e5       	ldi	r24, 0x5F	; 95
				LcdPutchar('_');
     f20:	57 db       	rcall	.-2386   	; 0x5d0 <LcdPutchar>
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 1;
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <setCustomClock+0x286>
     f28:	8d e9       	ldi	r24, 0x9D	; 157
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
				break;
				
			case SW15:
				return -99;
     f2c:	0b c0       	rjmp	.+22     	; 0xf44 <setCustomClock+0x286>
     f2e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <customClockSettingIndex>
				returnStatus = 1;
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			customClockSettingIndex++;
     f32:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <customClockSettingIndex+0x1>
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <customClockSettingIndex+0x1>
     f3c:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <customClockSettingIndex>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
			returnStatus = 1;
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
			customClockSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret

00000f4c <timer1_init>:
     f4c:	8e b5       	in	r24, 0x2e	; 46
     f4e:	82 60       	ori	r24, 0x02	; 2


void timer1_init()
{
	// set up timer with prescaler = 8
	TCCR1B |= (1 << CS11);
     f50:	8e bd       	out	0x2e, r24	; 46
	
	// initialize counter
	TCNT1 = 0;
     f52:	1d bc       	out	0x2d, r1	; 45
     f54:	1c bc       	out	0x2c, r1	; 44
	
	// enable overflow interrupt
	TIMSK |= (1 << TOIE1);
     f56:	87 b7       	in	r24, 0x37	; 55
     f58:	84 60       	ori	r24, 0x04	; 4
     f5a:	87 bf       	out	0x37, r24	; 55
	
	// enable global interrupts
	sei();
     f5c:	78 94       	sei
	
	// initialize overflow counter variable
	timerDotCounter = 0;
     f5e:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <timerDotCounter+0x1>
     f62:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <timerDotCounter>
     f66:	08 95       	ret

00000f68 <dotmatrixActive>:
}

void dotmatrixActive(){
	DDRE = 0xFF;
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF;
     f6c:	87 bb       	out	0x17, r24	; 23

	// 패턴 초기화
	rowindex = 0;
     f6e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <rowindex+0x1>
     f72:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <rowindex>
	columnindex = 0;
     f76:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <columnindex+0x1>
     f7a:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <columnindex>
	PORTE = dotpattern[rowindex];
     f7e:	9c ef       	ldi	r25, 0xFC	; 252
     f80:	93 b9       	out	0x03, r25	; 3
	PORTB = 0xFF;
     f82:	88 bb       	out	0x18, r24	; 24

	while(rowindex <= 4){
		if(++columnindex == 8)	columnindex = 0;
		PORTE = dotpattern[rowindex];	// 타이머카운터에 의해 패턴 바뀜
		PORTB = 0x01 << columnindex;
     f84:	e7 e2       	ldi	r30, 0x27	; 39
     f86:	f2 e0       	ldi	r31, 0x02	; 2
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	50 e0       	ldi	r21, 0x00	; 0
		second++;
		if(rowindex == 4){
			PORTE = 0xFF;
     f8c:	6f ef       	ldi	r22, 0xFF	; 255
	rowindex = 0;
	columnindex = 0;
	PORTE = dotpattern[rowindex];
	PORTB = 0xFF;

	while(rowindex <= 4){
     f8e:	38 c0       	rjmp	.+112    	; 0x1000 <dotmatrixActive+0x98>
		if(++columnindex == 8)	columnindex = 0;
     f90:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <columnindex>
     f94:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <columnindex+0x1>
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	28 30       	cpi	r18, 0x08	; 8
     f9e:	31 05       	cpc	r19, r1
     fa0:	29 f0       	breq	.+10     	; 0xfac <dotmatrixActive+0x44>
     fa2:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <columnindex+0x1>
     fa6:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <columnindex>
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <dotmatrixActive+0x4c>
     fac:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <columnindex+0x1>
     fb0:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <columnindex>
		PORTE = dotpattern[rowindex];	// 타이머카운터에 의해 패턴 바뀜
     fb4:	dc 01       	movw	r26, r24
     fb6:	a3 52       	subi	r26, 0x23	; 35
     fb8:	be 4f       	sbci	r27, 0xFE	; 254
     fba:	8c 91       	ld	r24, X
     fbc:	83 b9       	out	0x03, r24	; 3
		PORTB = 0x01 << columnindex;
     fbe:	ca 01       	movw	r24, r20
     fc0:	00 80       	ld	r0, Z
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <dotmatrixActive+0x60>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <dotmatrixActive+0x5c>
     fcc:	88 bb       	out	0x18, r24	; 24
		second++;
     fce:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <second>
     fd2:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <second+0x1>
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <second+0x1>
     fdc:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <second>
		if(rowindex == 4){
     fe0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <rowindex>
     fe4:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <rowindex+0x1>
     fe8:	04 97       	sbiw	r24, 0x04	; 4
     fea:	51 f4       	brne	.+20     	; 0x1000 <dotmatrixActive+0x98>
			PORTE = 0xFF;
     fec:	63 b9       	out	0x03, r22	; 3
			rowindex++;
     fee:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <rowindex>
     ff2:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <rowindex+0x1>
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <rowindex+0x1>
     ffc:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <rowindex>
	rowindex = 0;
	columnindex = 0;
	PORTE = dotpattern[rowindex];
	PORTB = 0xFF;

	while(rowindex <= 4){
    1000:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <rowindex>
    1004:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <rowindex+0x1>
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	91 05       	cpc	r25, r1
    100c:	0c f2       	brlt	.-126    	; 0xf90 <dotmatrixActive+0x28>
		if(rowindex == 4){
			PORTE = 0xFF;
			rowindex++;
		}
	}
    100e:	08 95       	ret

00001010 <setClock>:
		if(rowindex++ == 4) rowindex = 0;
		timerDotCounter = 0;   // reset overflow counter
	}
}

void setClock(int interruptSecond, int segmentStopwatchInitFlag, int* alarmStore) {
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	eb 01       	movw	r28, r22
    101c:	fa 01       	movw	r30, r20
	second += interruptSecond;
    101e:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <second>
    1022:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <second+0x1>
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
	minute += second/60; 
    102a:	2c e3       	ldi	r18, 0x3C	; 60
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	b9 01       	movw	r22, r18
    1030:	5f d6       	rcall	.+3262   	; 0x1cf0 <__divmodhi4>
    1032:	f8 2e       	mov	r15, r24
    1034:	49 2f       	mov	r20, r25
    1036:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <minute>
    103a:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <minute+0x1>
    103e:	86 0f       	add	r24, r22
    1040:	97 1f       	adc	r25, r23
	hour += minute/60;
    1042:	b9 01       	movw	r22, r18
    1044:	55 d6       	rcall	.+3242   	; 0x1cf0 <__divmodhi4>
    1046:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <hour>
    104a:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <hour+0x1>
    104e:	62 0f       	add	r22, r18
    1050:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
    1052:	0f 2d       	mov	r16, r15
    1054:	14 2f       	mov	r17, r20
    1056:	f0 92 2f 02 	sts	0x022F, r15	; 0x80022f <second>
    105a:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <second+0x1>
	minute = minute%60;
    105e:	28 2f       	mov	r18, r24
    1060:	39 2f       	mov	r19, r25
    1062:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <minute>
    1066:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <minute+0x1>
	hour = hour%24;
    106a:	cb 01       	movw	r24, r22
    106c:	68 e1       	ldi	r22, 0x18	; 24
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	3f d6       	rcall	.+3198   	; 0x1cf0 <__divmodhi4>
    1072:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <hour+0x1>
    1076:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <hour>
	
	if(alarmStore[0] == hour && alarmStore[1] == minute && alarmStore[2] == second ){		
    107a:	40 81       	ld	r20, Z
    107c:	51 81       	ldd	r21, Z+1	; 0x01
    107e:	84 17       	cp	r24, r20
    1080:	95 07       	cpc	r25, r21
    1082:	a9 f4       	brne	.+42     	; 0x10ae <setClock+0x9e>
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	93 81       	ldd	r25, Z+3	; 0x03
    1088:	28 17       	cp	r18, r24
    108a:	39 07       	cpc	r19, r25
    108c:	81 f4       	brne	.+32     	; 0x10ae <setClock+0x9e>
    108e:	84 81       	ldd	r24, Z+4	; 0x04
    1090:	95 81       	ldd	r25, Z+5	; 0x05
    1092:	08 17       	cp	r16, r24
    1094:	19 07       	cpc	r17, r25
		LcdMove(1,0);
    1096:	59 f4       	brne	.+22     	; 0x10ae <setClock+0x9e>
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
		LcdPuts("Alarm Alert");
    109c:	ca da       	rcall	.-2668   	; 0x632 <LcdMove>
    109e:	81 ed       	ldi	r24, 0xD1	; 209
    10a0:	91 e0       	ldi	r25, 0x01	; 1
		//도트 매트리스로 알람
		timer1_init();
    10a2:	b9 da       	rcall	.-2702   	; 0x616 <LcdPuts>
    10a4:	53 df       	rcall	.-346    	; 0xf4c <timer1_init>
		dotmatrixActive();	
    10a6:	60 df       	rcall	.-320    	; 0xf68 <dotmatrixActive>
    10a8:	8e b5       	in	r24, 0x2e	; 46
		TCCR1B |= (1 << CS11);
    10aa:	82 60       	ori	r24, 0x02	; 2
    10ac:	8e bd       	out	0x2e, r24	; 46
	}

	// STOPWATCH에서 LCD 사용중인 경우 미노출
	if(segmentStopwatchInitFlag == 0) {
    10ae:	cd 2b       	or	r28, r29
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <setClock+0xa4>
    10b2:	4a c0       	rjmp	.+148    	; 0x1148 <__stack+0x49>
		LcdMove(0,0);
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	bc da       	rcall	.-2696   	; 0x632 <LcdMove>
		LcdPutchar((hour/10%10) + '0');
    10ba:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <hour>
    10be:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <hour+0x1>
    10c2:	ca e0       	ldi	r28, 0x0A	; 10
    10c4:	d0 e0       	ldi	r29, 0x00	; 0
    10c6:	be 01       	movw	r22, r28
    10c8:	13 d6       	rcall	.+3110   	; 0x1cf0 <__divmodhi4>
    10ca:	cb 01       	movw	r24, r22
    10cc:	be 01       	movw	r22, r28
    10ce:	10 d6       	rcall	.+3104   	; 0x1cf0 <__divmodhi4>
    10d0:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar(hour%10 + '0');
    10d2:	7e da       	rcall	.-2820   	; 0x5d0 <LcdPutchar>
    10d4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <hour>
    10d8:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <hour+0x1>
    10dc:	be 01       	movw	r22, r28
    10de:	08 d6       	rcall	.+3088   	; 0x1cf0 <__divmodhi4>
    10e0:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar('h');
    10e2:	76 da       	rcall	.-2836   	; 0x5d0 <LcdPutchar>
    10e4:	88 e6       	ldi	r24, 0x68	; 104
		
		LcdMove(0,4);
    10e6:	74 da       	rcall	.-2840   	; 0x5d0 <LcdPutchar>
    10e8:	64 e0       	ldi	r22, 0x04	; 4
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	a2 da       	rcall	.-2748   	; 0x632 <LcdMove>
		LcdPutchar((minute/10%10) + '0');
    10ee:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <minute>
    10f2:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <minute+0x1>
    10f6:	be 01       	movw	r22, r28
    10f8:	fb d5       	rcall	.+3062   	; 0x1cf0 <__divmodhi4>
    10fa:	cb 01       	movw	r24, r22
    10fc:	be 01       	movw	r22, r28
    10fe:	f8 d5       	rcall	.+3056   	; 0x1cf0 <__divmodhi4>
    1100:	80 5d       	subi	r24, 0xD0	; 208
		LcdPutchar(minute%10 + '0');
    1102:	66 da       	rcall	.-2868   	; 0x5d0 <LcdPutchar>
    1104:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <minute>
    1108:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <minute+0x1>
    110c:	be 01       	movw	r22, r28
    110e:	f0 d5       	rcall	.+3040   	; 0x1cf0 <__divmodhi4>
		LcdPutchar('m');
    1110:	80 5d       	subi	r24, 0xD0	; 208
    1112:	5e da       	rcall	.-2884   	; 0x5d0 <LcdPutchar>
		
		LcdMove(0,8);
    1114:	8d e6       	ldi	r24, 0x6D	; 109
    1116:	5c da       	rcall	.-2888   	; 0x5d0 <LcdPutchar>
		LcdPutchar((second/10%10) + '0');
    1118:	68 e0       	ldi	r22, 0x08	; 8
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	8a da       	rcall	.-2796   	; 0x632 <LcdMove>
    111e:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <second>
    1122:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <second+0x1>
    1126:	be 01       	movw	r22, r28
    1128:	e3 d5       	rcall	.+3014   	; 0x1cf0 <__divmodhi4>
    112a:	cb 01       	movw	r24, r22
    112c:	be 01       	movw	r22, r28
    112e:	e0 d5       	rcall	.+3008   	; 0x1cf0 <__divmodhi4>
    1130:	80 5d       	subi	r24, 0xD0	; 208
    1132:	4e da       	rcall	.-2916   	; 0x5d0 <LcdPutchar>
		LcdPutchar(second%10 + '0');
    1134:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <second>
    1138:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <second+0x1>
    113c:	be 01       	movw	r22, r28
    113e:	d8 d5       	rcall	.+2992   	; 0x1cf0 <__divmodhi4>
    1140:	80 5d       	subi	r24, 0xD0	; 208
    1142:	46 da       	rcall	.-2932   	; 0x5d0 <LcdPutchar>
    1144:	83 e7       	ldi	r24, 0x73	; 115
    1146:	44 da       	rcall	.-2936   	; 0x5d0 <LcdPutchar>
		LcdPutchar('s');
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
	}
}
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	08 95       	ret

00001154 <initMenu>:
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	6c da       	rcall	.-2856   	; 0x632 <LcdMove>
    115a:	84 e1       	ldi	r24, 0x14	; 20
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	5b da       	rcall	.-2890   	; 0x616 <LcdPuts>
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	66 da       	rcall	.-2868   	; 0x632 <LcdMove>
    1166:	85 e5       	ldi	r24, 0x55	; 85
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	55 ca       	rjmp	.-2902   	; 0x616 <LcdPuts>
    116c:	08 95       	ret

0000116e <setMenu>:
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	c8 2f       	mov	r28, r24
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	5c da       	rcall	.-2888   	; 0x632 <LcdMove>
    117a:	c1 32       	cpi	r28, 0x21	; 33
    117c:	09 f4       	brne	.+2      	; 0x1180 <setMenu+0x12>
    117e:	52 c0       	rjmp	.+164    	; 0x1224 <setMenu+0xb6>
    1180:	c1 34       	cpi	r28, 0x41	; 65
    1182:	09 f4       	brne	.+2      	; 0x1186 <setMenu+0x18>
    1184:	9a c0       	rjmp	.+308    	; 0x12ba <setMenu+0x14c>
    1186:	c1 31       	cpi	r28, 0x11	; 17
    1188:	09 f0       	breq	.+2      	; 0x118c <setMenu+0x1e>
    118a:	9c c0       	rjmp	.+312    	; 0x12c4 <setMenu+0x156>
    118c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <nowMenuCursor>
    1190:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <nowMenuCursor+0x1>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	91 05       	cpc	r25, r1
    1198:	81 f4       	brne	.+32     	; 0x11ba <setMenu+0x4c>
    119a:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <nowMenuCursor+0x1>
    119e:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <nowMenuCursor>
    11a2:	85 e5       	ldi	r24, 0x55	; 85
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	37 da       	rcall	.-2962   	; 0x616 <LcdPuts>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    11b0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    11b4:	c0 e0       	ldi	r28, 0x00	; 0
    11b6:	d0 e0       	ldi	r29, 0x00	; 0
    11b8:	87 c0       	rjmp	.+270    	; 0x12c8 <setMenu+0x15a>
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	91 05       	cpc	r25, r1
    11be:	91 f4       	brne	.+36     	; 0x11e4 <setMenu+0x76>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <nowMenuCursor+0x1>
    11c8:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <nowMenuCursor>
    11cc:	83 e4       	ldi	r24, 0x43	; 67
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	22 da       	rcall	.-3004   	; 0x616 <LcdPuts>
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    11da:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    11de:	c0 e0       	ldi	r28, 0x00	; 0
    11e0:	d0 e0       	ldi	r29, 0x00	; 0
    11e2:	72 c0       	rjmp	.+228    	; 0x12c8 <setMenu+0x15a>
    11e4:	03 97       	sbiw	r24, 0x03	; 3
    11e6:	91 f4       	brne	.+36     	; 0x120c <setMenu+0x9e>
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <nowMenuCursor+0x1>
    11f0:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <nowMenuCursor>
    11f4:	83 e3       	ldi	r24, 0x33	; 51
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e da       	rcall	.-3044   	; 0x616 <LcdPuts>
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    1202:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    1206:	c0 e0       	ldi	r28, 0x00	; 0
    1208:	d0 e0       	ldi	r29, 0x00	; 0
    120a:	5e c0       	rjmp	.+188    	; 0x12c8 <setMenu+0x15a>
    120c:	85 e5       	ldi	r24, 0x55	; 85
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	02 da       	rcall	.-3068   	; 0x616 <LcdPuts>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    121a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    121e:	c0 e0       	ldi	r28, 0x00	; 0
    1220:	d0 e0       	ldi	r29, 0x00	; 0
    1222:	52 c0       	rjmp	.+164    	; 0x12c8 <setMenu+0x15a>
    1224:	c0 91 41 02 	lds	r28, 0x0241	; 0x800241 <nowMenuCursor>
    1228:	d0 91 42 02 	lds	r29, 0x0242	; 0x800242 <nowMenuCursor+0x1>
    122c:	20 97       	sbiw	r28, 0x00	; 0
    122e:	81 f4       	brne	.+32     	; 0x1250 <setMenu+0xe2>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <nowMenuCursor+0x1>
    1238:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <nowMenuCursor>
    123c:	83 e4       	ldi	r24, 0x43	; 67
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	ea d9       	rcall	.-3116   	; 0x616 <LcdPuts>
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    124a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    124e:	3c c0       	rjmp	.+120    	; 0x12c8 <setMenu+0x15a>
    1250:	c1 30       	cpi	r28, 0x01	; 1
    1252:	d1 05       	cpc	r29, r1
    1254:	91 f4       	brne	.+36     	; 0x127a <setMenu+0x10c>
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <nowMenuCursor+0x1>
    125e:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <nowMenuCursor>
    1262:	83 e3       	ldi	r24, 0x33	; 51
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	d7 d9       	rcall	.-3154   	; 0x616 <LcdPuts>
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    1270:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    1274:	c0 e0       	ldi	r28, 0x00	; 0
    1276:	d0 e0       	ldi	r29, 0x00	; 0
    1278:	27 c0       	rjmp	.+78     	; 0x12c8 <setMenu+0x15a>
    127a:	22 97       	sbiw	r28, 0x02	; 2
    127c:	91 f4       	brne	.+36     	; 0x12a2 <setMenu+0x134>
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <nowMenuCursor+0x1>
    1286:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <nowMenuCursor>
    128a:	80 e2       	ldi	r24, 0x20	; 32
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	c3 d9       	rcall	.-3194   	; 0x616 <LcdPuts>
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    1298:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    129c:	c0 e0       	ldi	r28, 0x00	; 0
    129e:	d0 e0       	ldi	r29, 0x00	; 0
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <setMenu+0x15a>
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	b7 d9       	rcall	.-3218   	; 0x616 <LcdPuts>
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <nowStatus+0x1>
    12b0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nowStatus>
    12b4:	c0 e0       	ldi	r28, 0x00	; 0
    12b6:	d0 e0       	ldi	r29, 0x00	; 0
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <setMenu+0x15a>
    12ba:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <nowStatus>
    12be:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <nowStatus+0x1>
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <setMenu+0x15a>
    12c4:	c0 e0       	ldi	r28, 0x00	; 0
    12c6:	d0 e0       	ldi	r29, 0x00	; 0
    12c8:	ce 01       	movw	r24, r28
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <setStopwatch>:
// stopwatch stop flag
static int stopwatchStopFlag = 0;

static int stopwatchDisplayIndex = 0;

int setStopwatch(int* stopwatchInitFlag) {
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	8c 01       	movw	r16, r24
	int returnStatus = -1;
	// 처음 진입시에만 실행
	if(customStopwatchSetInitFlag == 0) {
    12d8:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <customStopwatchSetInitFlag>
    12dc:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <customStopwatchSetInitFlag+0x1>
    12e0:	89 2b       	or	r24, r25
    12e2:	71 f4       	brne	.+28     	; 0x1300 <setStopwatch+0x30>
		ISeg7Init();
    12e4:	52 d8       	rcall	.-3932   	; 0x38a <ISeg7Init>
		ISeg7DispNum(segmentStopwatchDisplayNumber , 10);
    12e6:	6a e0       	ldi	r22, 0x0A	; 10
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <segmentStopwatchDisplayNumber>
    12ee:	90 91 1a 0a 	lds	r25, 0x0A1A	; 0x800a1a <segmentStopwatchDisplayNumber+0x1>
    12f2:	5e d8       	rcall	.-3908   	; 0x3b0 <ISeg7DispNum>
		// 초기화면 세팅
		LcdMove(0,0);
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	9c d9       	rcall	.-3272   	; 0x632 <LcdMove>
		LcdPuts("0m 00.0s     ");
    12fa:	81 ee       	ldi	r24, 0xE1	; 225
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	8b d9       	rcall	.-3306   	; 0x616 <LcdPuts>
	}
	customStopwatchSetInitFlag = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <customStopwatchSetInitFlag+0x1>
    1308:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <customStopwatchSetInitFlag>

	unsigned char keyInput = NO_KEY;
	keyInput = KeyInput();
    130c:	da d8       	rcall	.-3660   	; 0x4c2 <KeyInput>
    130e:	c8 2f       	mov	r28, r24
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
    1310:	6a e0       	ldi	r22, 0x0A	; 10
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <segmentStopwatchDisplayNumber>
    1318:	90 91 1a 0a 	lds	r25, 0x0A1A	; 0x800a1a <segmentStopwatchDisplayNumber+0x1>
    131c:	49 d8       	rcall	.-3950   	; 0x3b0 <ISeg7DispNum>
	while(1) {
		switch(keyInput) {
    131e:	c1 34       	cpi	r28, 0x41	; 65
    1320:	29 f0       	breq	.+10     	; 0x132c <setStopwatch+0x5c>
    1322:	c1 38       	cpi	r28, 0x81	; 129
    1324:	d1 f0       	breq	.+52     	; 0x135a <setStopwatch+0x8a>
				break;
			case SW15:
				return -99;
				break;
			default:
				returnStatus = 3;
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	19 c0       	rjmp	.+50     	; 0x135e <setStopwatch+0x8e>
	ISeg7DispNum(segmentStopwatchDisplayNumber, 10);
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	f8 01       	movw	r30, r16
    1332:	91 83       	std	Z+1, r25	; 0x01
				returnStatus = 0;
				LcdMove(0,0);
    1334:	80 83       	st	Z, r24
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
				LcdPuts("              ");
    133a:	7b d9       	rcall	.-3338   	; 0x632 <LcdMove>
    133c:	8a ea       	ldi	r24, 0xAA	; 170
    133e:	91 e0       	ldi	r25, 0x01	; 1
				
				LcdMove(1,0);
    1340:	6a d9       	rcall	.-3372   	; 0x616 <LcdPuts>
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
				LcdPuts("              ");
    1346:	75 d9       	rcall	.-3350   	; 0x632 <LcdMove>
    1348:	8a ea       	ldi	r24, 0xAA	; 170
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	64 d9       	rcall	.-3384   	; 0x616 <LcdPuts>
				
				LcdMove(0,0);
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	6f d9       	rcall	.-3362   	; 0x632 <LcdMove>
    1354:	80 e0       	ldi	r24, 0x00	; 0
	while(1) {
		switch(keyInput) {
			// 확인 키 누름
			case SW11:
				*stopwatchInitFlag = 1;
				returnStatus = 0;
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <setStopwatch+0x8e>
				
				LcdMove(1,0);
				LcdPuts("              ");
				
				LcdMove(0,0);
				break;
    135a:	8d e9       	ldi	r24, 0x9D	; 157
			case SW15:
				return -99;
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	cf 91       	pop	r28
		if(returnStatus == 0) {
			
		}
		return returnStatus;
	}
}
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <set7SegmentStopwatch>:
    1366:	cf 92       	push	r12

// 스톱워치 시간증가 시작 및 버튼 별 기능 구현
int set7SegmentStopwatch(int clock_counter, unsigned char stopwatchKeyInput) {
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	8c 01       	movw	r16, r24
    1378:	c6 2f       	mov	r28, r22
	ISeg7Init();
    137a:	07 d8       	rcall	.-4082   	; 0x38a <ISeg7Init>
	if(stopwatchStopFlag == 0 ) {	
    137c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <stopwatchStopFlag>
    1380:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <stopwatchStopFlag+0x1>
    1384:	89 2b       	or	r24, r25
    1386:	09 f0       	breq	.+2      	; 0x138a <set7SegmentStopwatch+0x24>
    1388:	df c2       	rjmp	.+1470   	; 0x1948 <set7SegmentStopwatch+0x5e2>
		int nowStopwatchDisplayNumber = segmentStopwatchDisplayNumber + clock_counter;
    138a:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <segmentStopwatchDisplayNumber>
    138e:	90 91 1a 0a 	lds	r25, 0x0A1A	; 0x800a1a <segmentStopwatchDisplayNumber+0x1>
    1392:	80 0f       	add	r24, r16
    1394:	91 1f       	adc	r25, r17
		if(nowStopwatchDisplayNumber == 600) {	
    1396:	88 35       	cpi	r24, 0x58	; 88
    1398:	22 e0       	ldi	r18, 0x02	; 2
    139a:	92 07       	cpc	r25, r18
    139c:	11 f4       	brne	.+4      	; 0x13a2 <set7SegmentStopwatch+0x3c>
			nowStopwatchDisplayNumber += 400;	// 60초가 되면 1분으로 갱신
    139e:	88 ee       	ldi	r24, 0xE8	; 232
    13a0:	93 e0       	ldi	r25, 0x03	; 3
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
    13a2:	90 93 1a 0a 	sts	0x0A1A, r25	; 0x800a1a <segmentStopwatchDisplayNumber+0x1>
    13a6:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <segmentStopwatchDisplayNumber>
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
    13aa:	6a e0       	ldi	r22, 0x0A	; 10
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	00 d8       	rcall	.-4096   	; 0x3b0 <ISeg7DispNum>
	}
	
	switch(stopwatchKeyInput) {
    13b0:	c1 32       	cpi	r28, 0x21	; 33
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <set7SegmentStopwatch+0x50>
    13b4:	e2 c1       	rjmp	.+964    	; 0x177a <set7SegmentStopwatch+0x414>
    13b6:	c1 38       	cpi	r28, 0x81	; 129
    13b8:	09 f4       	brne	.+2      	; 0x13bc <set7SegmentStopwatch+0x56>
    13ba:	bd c2       	rjmp	.+1402   	; 0x1936 <set7SegmentStopwatch+0x5d0>
    13bc:	c1 31       	cpi	r28, 0x11	; 17
    13be:	19 f0       	breq	.+6      	; 0x13c6 <set7SegmentStopwatch+0x60>
			break;
		case SW15:
			return -99;
			break;
	}
	return 1;
    13c0:	c1 e0       	ldi	r28, 0x01	; 1
    13c2:	d0 e0       	ldi	r29, 0x00	; 0
    13c4:	ca c2       	rjmp	.+1428   	; 0x195a <set7SegmentStopwatch+0x5f4>
	}
	
	switch(stopwatchKeyInput) {
		case SW3:
			// 스톱워치 진행중 시간기록
			if(stopwatchStopFlag == 0){
    13c6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <stopwatchStopFlag>
    13ca:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <stopwatchStopFlag+0x1>
    13ce:	89 2b       	or	r24, r25
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <set7SegmentStopwatch+0x6e>
    13d2:	17 c1       	rjmp	.+558    	; 0x1602 <set7SegmentStopwatch+0x29c>
			
				// 시간이 기록됨을 알리는 모터구동**************
				
				DDRG = 0xFF;
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
				PORTG = 0x0F;
    13da:	c5 e6       	ldi	r28, 0x65	; 101
    13dc:	d0 e0       	ldi	r29, 0x00	; 0
    13de:	8f e0       	ldi	r24, 0x0F	; 15
    13e0:	88 83       	st	Y, r24
				msec_delay(100);   //0.1초 동안 구동
    13e2:	84 e6       	ldi	r24, 0x64	; 100
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	45 d9       	rcall	.-3446   	; 0x672 <msec_delay>
				PORTG = 0x00;
    13e8:	18 82       	st	Y, r1
				//************************************************


				
				// 첫 or 두번째 입력
				if(stopwatchDisplayIndex<=1) {
    13ea:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    13ee:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	91 05       	cpc	r25, r1
    13f6:	0c f0       	brlt	.+2      	; 0x13fa <set7SegmentStopwatch+0x94>
    13f8:	52 c0       	rjmp	.+164    	; 0x149e <set7SegmentStopwatch+0x138>
					LcdMove(stopwatchDisplayIndex, 0);
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	1a d9       	rcall	.-3532   	; 0x632 <LcdMove>
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
    13fe:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <segmentStopwatchDisplayNumber>
    1402:	90 91 1a 0a 	lds	r25, 0x0A1A	; 0x800a1a <segmentStopwatchDisplayNumber+0x1>
    1406:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    140a:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	e7 5b       	subi	r30, 0xB7	; 183
    1414:	fd 4f       	sbci	r31, 0xFD	; 253
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');	//1000으로 나누면 몫은 '분'에 해당하는 숫자만 남음.
    141a:	c8 ee       	ldi	r28, 0xE8	; 232
    141c:	d3 e0       	ldi	r29, 0x03	; 3
    141e:	be 01       	movw	r22, r28
    1420:	67 d4       	rcall	.+2254   	; 0x1cf0 <__divmodhi4>
    1422:	80 e3       	ldi	r24, 0x30	; 48
    1424:	86 0f       	add	r24, r22
					LcdPutchar('m');
    1426:	d4 d8       	rcall	.-3672   	; 0x5d0 <LcdPutchar>
    1428:	8d e6       	ldi	r24, 0x6D	; 109
    142a:	d2 d8       	rcall	.-3676   	; 0x5d0 <LcdPutchar>
					LcdPutchar(' ');
    142c:	80 e2       	ldi	r24, 0x20	; 32
    142e:	d0 d8       	rcall	.-3680   	; 0x5d0 <LcdPutchar>
    1430:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');	//1000으로 나눈 나머지를 100으로 나누면 초의 십의자리에 해당하는 숫자만 남음
    1434:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	e7 5b       	subi	r30, 0xB7	; 183
    143e:	fd 4f       	sbci	r31, 0xFD	; 253
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	be 01       	movw	r22, r28
    1446:	54 d4       	rcall	.+2216   	; 0x1cf0 <__divmodhi4>
    1448:	c4 e6       	ldi	r28, 0x64	; 100
    144a:	d0 e0       	ldi	r29, 0x00	; 0
    144c:	be 01       	movw	r22, r28
    144e:	50 d4       	rcall	.+2208   	; 0x1cf0 <__divmodhi4>
    1450:	80 e3       	ldi	r24, 0x30	; 48
    1452:	86 0f       	add	r24, r22
    1454:	bd d8       	rcall	.-3718   	; 0x5d0 <LcdPutchar>
    1456:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0'); //위와 비슷한 논리
    145a:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	e7 5b       	subi	r30, 0xB7	; 183
    1464:	fd 4f       	sbci	r31, 0xFD	; 253
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	be 01       	movw	r22, r28
    146c:	41 d4       	rcall	.+2178   	; 0x1cf0 <__divmodhi4>
    146e:	ca e0       	ldi	r28, 0x0A	; 10
    1470:	d0 e0       	ldi	r29, 0x00	; 0
    1472:	be 01       	movw	r22, r28
    1474:	3d d4       	rcall	.+2170   	; 0x1cf0 <__divmodhi4>
    1476:	80 e3       	ldi	r24, 0x30	; 48
    1478:	86 0f       	add	r24, r22
    147a:	aa d8       	rcall	.-3756   	; 0x5d0 <LcdPutchar>
					LcdPutchar('.');
    147c:	8e e2       	ldi	r24, 0x2E	; 46
    147e:	a8 d8       	rcall	.-3760   	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0'); //위와 비슷한 논리
    1480:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1484:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	e7 5b       	subi	r30, 0xB7	; 183
    148e:	fd 4f       	sbci	r31, 0xFD	; 253
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	be 01       	movw	r22, r28
    1496:	2c d4       	rcall	.+2136   	; 0x1cf0 <__divmodhi4>
    1498:	80 5d       	subi	r24, 0xD0	; 208
    149a:	9a d8       	rcall	.-3788   	; 0x5d0 <LcdPutchar>
    149c:	a6 c0       	rjmp	.+332    	; 0x15ea <set7SegmentStopwatch+0x284>
				}
				// 세번째 이상 입력
				else {
					segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex] = segmentStopwatchDisplayNumber;
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	fc 01       	movw	r30, r24
    14a4:	e7 5b       	subi	r30, 0xB7	; 183
    14a6:	fd 4f       	sbci	r31, 0xFD	; 253
    14a8:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <segmentStopwatchDisplayNumber>
    14ac:	90 91 1a 0a 	lds	r25, 0x0A1A	; 0x800a1a <segmentStopwatchDisplayNumber+0x1>
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
					// 0번째 행 변경
					LcdMove(0,0);
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	bc d8       	rcall	.-3720   	; 0x632 <LcdMove>
    14ba:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
    14be:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	e9 5b       	subi	r30, 0xB9	; 185
    14c8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	0f 2e       	mov	r0, r31
    14d0:	f8 ee       	ldi	r31, 0xE8	; 232
    14d2:	ef 2e       	mov	r14, r31
    14d4:	f3 e0       	ldi	r31, 0x03	; 3
    14d6:	ff 2e       	mov	r15, r31
    14d8:	f0 2d       	mov	r31, r0
    14da:	b7 01       	movw	r22, r14
    14dc:	09 d4       	rcall	.+2066   	; 0x1cf0 <__divmodhi4>
    14de:	80 e3       	ldi	r24, 0x30	; 48
    14e0:	86 0f       	add	r24, r22
					LcdPutchar('m');
    14e2:	76 d8       	rcall	.-3860   	; 0x5d0 <LcdPutchar>
    14e4:	8d e6       	ldi	r24, 0x6D	; 109
					LcdPutchar(' ');
    14e6:	74 d8       	rcall	.-3864   	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    14e8:	80 e2       	ldi	r24, 0x20	; 32
    14ea:	72 d8       	rcall	.-3868   	; 0x5d0 <LcdPutchar>
    14ec:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    14f0:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	e9 5b       	subi	r30, 0xB9	; 185
    14fa:	fd 4f       	sbci	r31, 0xFD	; 253
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	b7 01       	movw	r22, r14
    1502:	f6 d3       	rcall	.+2028   	; 0x1cf0 <__divmodhi4>
    1504:	04 e6       	ldi	r16, 0x64	; 100
    1506:	10 e0       	ldi	r17, 0x00	; 0
    1508:	b8 01       	movw	r22, r16
    150a:	f2 d3       	rcall	.+2020   	; 0x1cf0 <__divmodhi4>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    150c:	80 e3       	ldi	r24, 0x30	; 48
    150e:	86 0f       	add	r24, r22
    1510:	5f d8       	rcall	.-3906   	; 0x5d0 <LcdPutchar>
    1512:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1516:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	e9 5b       	subi	r30, 0xB9	; 185
    1520:	fd 4f       	sbci	r31, 0xFD	; 253
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	b8 01       	movw	r22, r16
    1528:	e3 d3       	rcall	.+1990   	; 0x1cf0 <__divmodhi4>
    152a:	ca e0       	ldi	r28, 0x0A	; 10
    152c:	d0 e0       	ldi	r29, 0x00	; 0
    152e:	be 01       	movw	r22, r28
    1530:	df d3       	rcall	.+1982   	; 0x1cf0 <__divmodhi4>
					LcdPutchar('.');
    1532:	80 e3       	ldi	r24, 0x30	; 48
    1534:	86 0f       	add	r24, r22
    1536:	4c d8       	rcall	.-3944   	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');
    1538:	8e e2       	ldi	r24, 0x2E	; 46
    153a:	4a d8       	rcall	.-3948   	; 0x5d0 <LcdPutchar>
    153c:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1540:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	e9 5b       	subi	r30, 0xB9	; 185
    154a:	fd 4f       	sbci	r31, 0xFD	; 253
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
					
					// 1번째 행 변경
					LcdMove(1,0);
    1550:	be 01       	movw	r22, r28
    1552:	ce d3       	rcall	.+1948   	; 0x1cf0 <__divmodhi4>
    1554:	80 5d       	subi	r24, 0xD0	; 208
    1556:	3c d8       	rcall	.-3976   	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	6a d8       	rcall	.-3884   	; 0x632 <LcdMove>
    155e:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1562:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	e7 5b       	subi	r30, 0xB7	; 183
    156c:	fd 4f       	sbci	r31, 0xFD	; 253
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	b7 01       	movw	r22, r14
					LcdPutchar('m');
    1574:	bd d3       	rcall	.+1914   	; 0x1cf0 <__divmodhi4>
    1576:	80 e3       	ldi	r24, 0x30	; 48
    1578:	86 0f       	add	r24, r22
					LcdPutchar(' ');
    157a:	2a d8       	rcall	.-4012   	; 0x5d0 <LcdPutchar>
    157c:	8d e6       	ldi	r24, 0x6D	; 109
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    157e:	28 d8       	rcall	.-4016   	; 0x5d0 <LcdPutchar>
    1580:	80 e2       	ldi	r24, 0x20	; 32
    1582:	26 d8       	rcall	.-4020   	; 0x5d0 <LcdPutchar>
    1584:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1588:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	e7 5b       	subi	r30, 0xB7	; 183
    1592:	fd 4f       	sbci	r31, 0xFD	; 253
    1594:	80 81       	ld	r24, Z
    1596:	91 81       	ldd	r25, Z+1	; 0x01
    1598:	b7 01       	movw	r22, r14
    159a:	aa d3       	rcall	.+1876   	; 0x1cf0 <__divmodhi4>
    159c:	b8 01       	movw	r22, r16
    159e:	a8 d3       	rcall	.+1872   	; 0x1cf0 <__divmodhi4>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    15a0:	80 e3       	ldi	r24, 0x30	; 48
    15a2:	86 0f       	add	r24, r22
    15a4:	15 d8       	rcall	.-4054   	; 0x5d0 <LcdPutchar>
    15a6:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    15aa:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	e7 5b       	subi	r30, 0xB7	; 183
    15b4:	fd 4f       	sbci	r31, 0xFD	; 253
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	b8 01       	movw	r22, r16
    15bc:	99 d3       	rcall	.+1842   	; 0x1cf0 <__divmodhi4>
    15be:	be 01       	movw	r22, r28
    15c0:	97 d3       	rcall	.+1838   	; 0x1cf0 <__divmodhi4>
    15c2:	80 e3       	ldi	r24, 0x30	; 48
    15c4:	86 0f       	add	r24, r22
					LcdPutchar('.');
    15c6:	04 d8       	rcall	.-4088   	; 0x5d0 <LcdPutchar>
    15c8:	8e e2       	ldi	r24, 0x2E	; 46
    15ca:	02 d8       	rcall	.-4092   	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    15cc:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    15d0:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	e7 5b       	subi	r30, 0xB7	; 183
    15da:	fd 4f       	sbci	r31, 0xFD	; 253
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	be 01       	movw	r22, r28
    15e2:	86 d3       	rcall	.+1804   	; 0x1cf0 <__divmodhi4>
    15e4:	80 5d       	subi	r24, 0xD0	; 208
    15e6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    15ea:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stopwatchDisplayIndex>
				}
				stopwatchDisplayIndex += 1;
    15ee:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <stopwatchDisplayIndex+0x1>
    15f8:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <stopwatchDisplayIndex>
    15fc:	c1 e0       	ldi	r28, 0x01	; 1
			break;
		case SW15:
			return -99;
			break;
	}
	return 1;
    15fe:	d0 e0       	ldi	r29, 0x00	; 0
    1600:	ac c1       	rjmp	.+856    	; 0x195a <set7SegmentStopwatch+0x5f4>
    1602:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stopwatchDisplayIndex>
				stopwatchDisplayIndex += 1;
			}
			// 아래키 눌러서 stopwatchStopFlag = 1이 된 경우 즉, 스톱워치가 멈춘 경우
			else {
				// 기록된 시간이 3개 이상인 경우에만
				if(stopwatchDisplayIndex >= 2){				
    1606:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    160a:	02 97       	sbiw	r24, 0x02	; 2
    160c:	0c f4       	brge	.+2      	; 0x1610 <set7SegmentStopwatch+0x2aa>
    160e:	96 c1       	rjmp	.+812    	; 0x193c <set7SegmentStopwatch+0x5d6>
					LcdMove(0,0);
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	0e d8       	rcall	.-4068   	; 0x632 <LcdMove>
    1616:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]/1000+'0');
    161a:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	eb 5b       	subi	r30, 0xBB	; 187
    1624:	fd 4f       	sbci	r31, 0xFD	; 253
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	0f 2e       	mov	r0, r31
    162c:	f8 ee       	ldi	r31, 0xE8	; 232
    162e:	ef 2e       	mov	r14, r31
    1630:	f3 e0       	ldi	r31, 0x03	; 3
    1632:	ff 2e       	mov	r15, r31
    1634:	f0 2d       	mov	r31, r0
    1636:	b7 01       	movw	r22, r14
    1638:	5b d3       	rcall	.+1718   	; 0x1cf0 <__divmodhi4>
    163a:	80 e3       	ldi	r24, 0x30	; 48
    163c:	86 0f       	add	r24, r22
    163e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar('m');
    1642:	8d e6       	ldi	r24, 0x6D	; 109
    1644:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(' ');
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%1000/100+'0');
    164e:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1652:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	eb 5b       	subi	r30, 0xBB	; 187
    165c:	fd 4f       	sbci	r31, 0xFD	; 253
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	b7 01       	movw	r22, r14
    1664:	45 d3       	rcall	.+1674   	; 0x1cf0 <__divmodhi4>
    1666:	04 e6       	ldi	r16, 0x64	; 100
    1668:	10 e0       	ldi	r17, 0x00	; 0
    166a:	b8 01       	movw	r22, r16
    166c:	41 d3       	rcall	.+1666   	; 0x1cf0 <__divmodhi4>
    166e:	80 e3       	ldi	r24, 0x30	; 48
    1670:	86 0f       	add	r24, r22
    1672:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%100/10+'0');
    1676:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    167a:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	eb 5b       	subi	r30, 0xBB	; 187
    1684:	fd 4f       	sbci	r31, 0xFD	; 253
    1686:	80 81       	ld	r24, Z
    1688:	91 81       	ldd	r25, Z+1	; 0x01
    168a:	b8 01       	movw	r22, r16
    168c:	31 d3       	rcall	.+1634   	; 0x1cf0 <__divmodhi4>
    168e:	ca e0       	ldi	r28, 0x0A	; 10
    1690:	d0 e0       	ldi	r29, 0x00	; 0
    1692:	be 01       	movw	r22, r28
    1694:	2d d3       	rcall	.+1626   	; 0x1cf0 <__divmodhi4>
    1696:	80 e3       	ldi	r24, 0x30	; 48
    1698:	86 0f       	add	r24, r22
    169a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    169e:	8e e2       	ldi	r24, 0x2E	; 46
					LcdPutchar('.');
    16a0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-2]%10+'0');
    16a4:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    16a8:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	eb 5b       	subi	r30, 0xBB	; 187
    16b2:	fd 4f       	sbci	r31, 0xFD	; 253
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	be 01       	movw	r22, r28
    16ba:	1a d3       	rcall	.+1588   	; 0x1cf0 <__divmodhi4>
    16bc:	80 5d       	subi	r24, 0xD0	; 208
    16be:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    16c2:	60 e0       	ldi	r22, 0x00	; 0
					
					// 1번째 행 변경
					LcdMove(1,0);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	0e 94 19 03 	call	0x632	; 0x632 <LcdMove>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]/1000+'0');
    16ca:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    16ce:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	e9 5b       	subi	r30, 0xB9	; 185
    16d8:	fd 4f       	sbci	r31, 0xFD	; 253
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	b7 01       	movw	r22, r14
    16e0:	07 d3       	rcall	.+1550   	; 0x1cf0 <__divmodhi4>
    16e2:	80 e3       	ldi	r24, 0x30	; 48
    16e4:	86 0f       	add	r24, r22
    16e6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar('m');
    16ea:	8d e6       	ldi	r24, 0x6D	; 109
    16ec:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(' ');
    16f0:	80 e2       	ldi	r24, 0x20	; 32
    16f2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%1000/100+'0');
    16f6:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    16fa:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	e9 5b       	subi	r30, 0xB9	; 185
    1704:	fd 4f       	sbci	r31, 0xFD	; 253
    1706:	80 81       	ld	r24, Z
    1708:	91 81       	ldd	r25, Z+1	; 0x01
    170a:	b7 01       	movw	r22, r14
    170c:	f1 d2       	rcall	.+1506   	; 0x1cf0 <__divmodhi4>
    170e:	b8 01       	movw	r22, r16
    1710:	ef d2       	rcall	.+1502   	; 0x1cf0 <__divmodhi4>
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	86 0f       	add	r24, r22
    1716:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%100/10+'0');
    171a:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    171e:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	e9 5b       	subi	r30, 0xB9	; 185
    1728:	fd 4f       	sbci	r31, 0xFD	; 253
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	b8 01       	movw	r22, r16
    1730:	df d2       	rcall	.+1470   	; 0x1cf0 <__divmodhi4>
    1732:	be 01       	movw	r22, r28
    1734:	dd d2       	rcall	.+1466   	; 0x1cf0 <__divmodhi4>
    1736:	80 e3       	ldi	r24, 0x30	; 48
    1738:	86 0f       	add	r24, r22
    173a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    173e:	8e e2       	ldi	r24, 0x2E	; 46
    1740:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar('.');
    1744:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex-1]%10+'0');	
    1748:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	e9 5b       	subi	r30, 0xB9	; 185
    1752:	fd 4f       	sbci	r31, 0xFD	; 253
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	be 01       	movw	r22, r28
    175a:	ca d2       	rcall	.+1428   	; 0x1cf0 <__divmodhi4>
    175c:	80 5d       	subi	r24, 0xD0	; 208
    175e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    1762:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1766:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
					stopwatchDisplayIndex -= 1;
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <stopwatchDisplayIndex+0x1>
    1770:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <stopwatchDisplayIndex>
    1774:	c1 e0       	ldi	r28, 0x01	; 1
    1776:	d0 e0       	ldi	r29, 0x00	; 0
    1778:	f0 c0       	rjmp	.+480    	; 0x195a <set7SegmentStopwatch+0x5f4>
			break;
		case SW15:
			return -99;
			break;
	}
	return 1;
    177a:	c0 91 45 02 	lds	r28, 0x0245	; 0x800245 <stopwatchStopFlag>
    177e:	d0 91 46 02 	lds	r29, 0x0246	; 0x800246 <stopwatchStopFlag+0x1>
				}
			}
			break;
			
		case SW7:
			if(stopwatchStopFlag == 1) {	//스톱워치가 멈춘 경우		
    1782:	c1 30       	cpi	r28, 0x01	; 1
    1784:	d1 05       	cpc	r29, r1
    1786:	09 f0       	breq	.+2      	; 0x178a <set7SegmentStopwatch+0x424>
    1788:	c4 c0       	rjmp	.+392    	; 0x1912 <set7SegmentStopwatch+0x5ac>
    178a:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
				if(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1] != 0){
    178e:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	e5 5b       	subi	r30, 0xB5	; 181
    1798:	fd 4f       	sbci	r31, 0xFD	; 253
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	89 2b       	or	r24, r25
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <set7SegmentStopwatch+0x43e>
    17a2:	db c0       	rjmp	.+438    	; 0x195a <set7SegmentStopwatch+0x5f4>
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	80 e0       	ldi	r24, 0x00	; 0
					LcdMove(0,0);
    17a8:	0e 94 19 03 	call	0x632	; 0x632 <LcdMove>
    17ac:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]/1000+'0');
    17b0:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    17b4:	ee 0f       	add	r30, r30
    17b6:	ff 1f       	adc	r31, r31
    17b8:	e7 5b       	subi	r30, 0xB7	; 183
    17ba:	fd 4f       	sbci	r31, 0xFD	; 253
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	0f 2e       	mov	r0, r31
    17c2:	f8 ee       	ldi	r31, 0xE8	; 232
    17c4:	cf 2e       	mov	r12, r31
    17c6:	f3 e0       	ldi	r31, 0x03	; 3
    17c8:	df 2e       	mov	r13, r31
    17ca:	f0 2d       	mov	r31, r0
    17cc:	b6 01       	movw	r22, r12
    17ce:	90 d2       	rcall	.+1312   	; 0x1cf0 <__divmodhi4>
    17d0:	80 e3       	ldi	r24, 0x30	; 48
    17d2:	86 0f       	add	r24, r22
    17d4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    17d8:	8d e6       	ldi	r24, 0x6D	; 109
					LcdPutchar('m');
    17da:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    17de:	80 e2       	ldi	r24, 0x20	; 32
					LcdPutchar(' ');
    17e0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%1000/100+'0');
    17e4:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    17e8:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    17ec:	ee 0f       	add	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	e7 5b       	subi	r30, 0xB7	; 183
    17f2:	fd 4f       	sbci	r31, 0xFD	; 253
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	b6 01       	movw	r22, r12
    17fa:	7a d2       	rcall	.+1268   	; 0x1cf0 <__divmodhi4>
    17fc:	0f 2e       	mov	r0, r31
    17fe:	f4 e6       	ldi	r31, 0x64	; 100
    1800:	ef 2e       	mov	r14, r31
    1802:	f1 2c       	mov	r15, r1
    1804:	f0 2d       	mov	r31, r0
    1806:	b7 01       	movw	r22, r14
    1808:	73 d2       	rcall	.+1254   	; 0x1cf0 <__divmodhi4>
    180a:	80 e3       	ldi	r24, 0x30	; 48
    180c:	86 0f       	add	r24, r22
    180e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    1812:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%100/10+'0');
    1816:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	e7 5b       	subi	r30, 0xB7	; 183
    1820:	fd 4f       	sbci	r31, 0xFD	; 253
    1822:	80 81       	ld	r24, Z
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	b7 01       	movw	r22, r14
    1828:	63 d2       	rcall	.+1222   	; 0x1cf0 <__divmodhi4>
    182a:	0a e0       	ldi	r16, 0x0A	; 10
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	b8 01       	movw	r22, r16
    1830:	5f d2       	rcall	.+1214   	; 0x1cf0 <__divmodhi4>
    1832:	80 e3       	ldi	r24, 0x30	; 48
    1834:	86 0f       	add	r24, r22
    1836:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    183a:	8e e2       	ldi	r24, 0x2E	; 46
    183c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar('.');
    1840:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex]%10+'0');
    1844:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	e7 5b       	subi	r30, 0xB7	; 183
    184e:	fd 4f       	sbci	r31, 0xFD	; 253
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	b8 01       	movw	r22, r16
    1856:	4c d2       	rcall	.+1176   	; 0x1cf0 <__divmodhi4>
    1858:	80 5d       	subi	r24, 0xD0	; 208
    185a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    185e:	60 e0       	ldi	r22, 0x00	; 0
					
					// 1번째 행 변경
					LcdMove(1,0);
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	0e 94 19 03 	call	0x632	; 0x632 <LcdMove>
    1866:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]/1000+'0');
    186a:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	e5 5b       	subi	r30, 0xB5	; 181
    1874:	fd 4f       	sbci	r31, 0xFD	; 253
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	b6 01       	movw	r22, r12
    187c:	39 d2       	rcall	.+1138   	; 0x1cf0 <__divmodhi4>
    187e:	80 e3       	ldi	r24, 0x30	; 48
    1880:	86 0f       	add	r24, r22
    1882:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar('m');
    1886:	8d e6       	ldi	r24, 0x6D	; 109
    1888:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(' ');
    188c:	80 e2       	ldi	r24, 0x20	; 32
    188e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%1000/100+'0');
    1892:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1896:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	e5 5b       	subi	r30, 0xB5	; 181
    18a0:	fd 4f       	sbci	r31, 0xFD	; 253
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	b6 01       	movw	r22, r12
    18a8:	23 d2       	rcall	.+1094   	; 0x1cf0 <__divmodhi4>
    18aa:	b7 01       	movw	r22, r14
    18ac:	21 d2       	rcall	.+1090   	; 0x1cf0 <__divmodhi4>
    18ae:	80 e3       	ldi	r24, 0x30	; 48
    18b0:	86 0f       	add	r24, r22
    18b2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    18b6:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%100/10+'0');
    18ba:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	e5 5b       	subi	r30, 0xB5	; 181
    18c4:	fd 4f       	sbci	r31, 0xFD	; 253
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	b7 01       	movw	r22, r14
    18cc:	11 d2       	rcall	.+1058   	; 0x1cf0 <__divmodhi4>
    18ce:	b8 01       	movw	r22, r16
    18d0:	0f d2       	rcall	.+1054   	; 0x1cf0 <__divmodhi4>
    18d2:	80 e3       	ldi	r24, 0x30	; 48
    18d4:	86 0f       	add	r24, r22
    18d6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    18da:	8e e2       	ldi	r24, 0x2E	; 46
    18dc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
					LcdPutchar('.');
    18e0:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    18e4:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
					LcdPutchar(segmentStopwatchDisplayNumberArray[stopwatchDisplayIndex+1]%10+'0');
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	e5 5b       	subi	r30, 0xB5	; 181
    18ee:	fd 4f       	sbci	r31, 0xFD	; 253
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	b8 01       	movw	r22, r16
    18f6:	fc d1       	rcall	.+1016   	; 0x1cf0 <__divmodhi4>
    18f8:	80 5d       	subi	r24, 0xD0	; 208
    18fa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
    18fe:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1902:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
					stopwatchDisplayIndex += 1;
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <stopwatchDisplayIndex+0x1>
    190c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <stopwatchDisplayIndex>
    1910:	24 c0       	rjmp	.+72     	; 0x195a <set7SegmentStopwatch+0x5f4>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <stopwatchStopFlag+0x1>
				}
			}
			else {
				stopwatchStopFlag = 1;
    191a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <stopwatchStopFlag>
    191e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stopwatchDisplayIndex>
    1922:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <stopwatchDisplayIndex+0x1>
				stopwatchDisplayIndex-=1;	
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <stopwatchDisplayIndex+0x1>
    192c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <stopwatchDisplayIndex>
    1930:	c1 e0       	ldi	r28, 0x01	; 1
    1932:	d0 e0       	ldi	r29, 0x00	; 0
    1934:	12 c0       	rjmp	.+36     	; 0x195a <set7SegmentStopwatch+0x5f4>
    1936:	cd e9       	ldi	r28, 0x9D	; 157
			break;
		case SW15:
			return -99;
			break;
	}
	return 1;
    1938:	df ef       	ldi	r29, 0xFF	; 255
    193a:	0f c0       	rjmp	.+30     	; 0x195a <set7SegmentStopwatch+0x5f4>
    193c:	c1 e0       	ldi	r28, 0x01	; 1
				stopwatchStopFlag = 1;
				stopwatchDisplayIndex-=1;	
			}
			break;
		case SW15:
			return -99;
    193e:	d0 e0       	ldi	r29, 0x00	; 0
    1940:	0c c0       	rjmp	.+24     	; 0x195a <set7SegmentStopwatch+0x5f4>
    1942:	cd e9       	ldi	r28, 0x9D	; 157
			break;
	}
	return 1;
    1944:	df ef       	ldi	r29, 0xFF	; 255
    1946:	09 c0       	rjmp	.+18     	; 0x195a <set7SegmentStopwatch+0x5f4>
    1948:	c1 32       	cpi	r28, 0x21	; 33
				stopwatchStopFlag = 1;
				stopwatchDisplayIndex-=1;	
			}
			break;
		case SW15:
			return -99;
    194a:	09 f4       	brne	.+2      	; 0x194e <set7SegmentStopwatch+0x5e8>
    194c:	16 cf       	rjmp	.-468    	; 0x177a <set7SegmentStopwatch+0x414>
    194e:	c1 38       	cpi	r28, 0x81	; 129
		}
		segmentStopwatchDisplayNumber = nowStopwatchDisplayNumber;
		ISeg7DispNum(nowStopwatchDisplayNumber , 10);	
	}
	
	switch(stopwatchKeyInput) {
    1950:	c1 f3       	breq	.-16     	; 0x1942 <set7SegmentStopwatch+0x5dc>
    1952:	c1 31       	cpi	r28, 0x11	; 17
    1954:	09 f0       	breq	.+2      	; 0x1958 <set7SegmentStopwatch+0x5f2>
    1956:	34 cd       	rjmp	.-1432   	; 0x13c0 <set7SegmentStopwatch+0x5a>
    1958:	54 ce       	rjmp	.-856    	; 0x1602 <set7SegmentStopwatch+0x29c>
    195a:	ce 01       	movw	r24, r28
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
		case SW15:
			return -99;
			break;
	}
	return 1;
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	08 95       	ret

0000196e <setTimer>:

// 7세그먼트 출력용 숫자
unsigned short segmentDisplayNumber = 0;


int setTimer(int* timerInitFlag) {
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	ec 01       	movw	r28, r24
	int returnStatus = -1;
	
	// 처음 진입시에만 실행
	if(customTimerSetInitFlag == 0){
    1974:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <customTimerSetInitFlag>
    1978:	90 91 1e 0a 	lds	r25, 0x0A1E	; 0x800a1e <customTimerSetInitFlag+0x1>
    197c:	89 2b       	or	r24, r25
    197e:	a1 f4       	brne	.+40     	; 0x19a8 <setTimer+0x3a>
		// 초기화면 세팅
		LcdMove(0,0);
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	0e 94 19 03 	call	0x632	; 0x632 <LcdMove>
		LcdPuts("0m 00.0s     ");
    1988:	81 ee       	ldi	r24, 0xE1	; 225
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	0e 94 0b 03 	call	0x616	; 0x616 <LcdPuts>
		LcdCommand(HOME);
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	0e 94 a0 02 	call	0x540	; 0x540 <LcdCommand>
		LcdCommand(CURSOR_ON);
    1996:	8e e0       	ldi	r24, 0x0E	; 14
    1998:	0e 94 a0 02 	call	0x540	; 0x540 <LcdCommand>
		customTimerSetInitFlag = 1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <customTimerSetInitFlag+0x1>
    19a4:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <customTimerSetInitFlag>
	}
	
	unsigned char keyInput = NO_KEY;	
	keyInput = KeyInput();
    19a8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <KeyInput>
	
	while(1) {
		switch(keyInput) {
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	fc 01       	movw	r30, r24
    19b0:	71 97       	sbiw	r30, 0x11	; 17
    19b2:	e8 37       	cpi	r30, 0x78	; 120
    19b4:	f1 05       	cpc	r31, r1
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <setTimer+0x4c>
    19b8:	5c c1       	rjmp	.+696    	; 0x1c72 <setTimer+0x304>
    19ba:	e2 5d       	subi	r30, 0xD2	; 210
    19bc:	fe 4f       	sbci	r31, 0xFE	; 254
    19be:	ab c1       	rjmp	.+854    	; 0x1d16 <__tablejump2__>
			case SW0:
				LcdPutchar('1');
    19c0:	81 e3       	ldi	r24, 0x31	; 49
    19c2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    19c6:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    19ca:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    19d4:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 1;
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	fc 01       	movw	r30, r24
    19de:	e1 5e       	subi	r30, 0xE1	; 225
    19e0:	f5 4f       	sbci	r31, 0xF5	; 245
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
				break;
    19ea:	40 c1       	rjmp	.+640    	; 0x1c6c <setTimer+0x2fe>
			
			case SW1:				
				LcdPutchar('2');
    19ec:	82 e3       	ldi	r24, 0x32	; 50
    19ee:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    19f2:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    19f6:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1a00:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 2;
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	fc 01       	movw	r30, r24
    1a0a:	e1 5e       	subi	r30, 0xE1	; 225
    1a0c:	f5 4f       	sbci	r31, 0xF5	; 245
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
				break;
    1a16:	2a c1       	rjmp	.+596    	; 0x1c6c <setTimer+0x2fe>
			
			case SW2:
				LcdPutchar('3');
    1a18:	83 e3       	ldi	r24, 0x33	; 51
    1a1a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    1a1e:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1a22:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1a2c:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 3;
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	fc 01       	movw	r30, r24
    1a36:	e1 5e       	subi	r30, 0xE1	; 225
    1a38:	f5 4f       	sbci	r31, 0xF5	; 245
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
				break;
    1a42:	14 c1       	rjmp	.+552    	; 0x1c6c <setTimer+0x2fe>
			
			case SW4:
				LcdPutchar('4');
    1a44:	84 e3       	ldi	r24, 0x34	; 52
    1a46:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    1a4a:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1a4e:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1a58:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 4;
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	fc 01       	movw	r30, r24
    1a62:	e1 5e       	subi	r30, 0xE1	; 225
    1a64:	f5 4f       	sbci	r31, 0xF5	; 245
    1a66:	84 e0       	ldi	r24, 0x04	; 4
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
				break;
    1a6e:	fe c0       	rjmp	.+508    	; 0x1c6c <setTimer+0x2fe>
			
			case SW5:
				LcdPutchar('5');
    1a70:	85 e3       	ldi	r24, 0x35	; 53
    1a72:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    1a76:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1a7a:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1a84:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 5;
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	e1 5e       	subi	r30, 0xE1	; 225
    1a90:	f5 4f       	sbci	r31, 0xF5	; 245
    1a92:	85 e0       	ldi	r24, 0x05	; 5
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
				break;
    1a9a:	e8 c0       	rjmp	.+464    	; 0x1c6c <setTimer+0x2fe>
			
			case SW6:
				LcdPutchar('6');
    1a9c:	86 e3       	ldi	r24, 0x36	; 54
    1a9e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    1aa2:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1aa6:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1ab0:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 6;
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	fc 01       	movw	r30, r24
    1aba:	e1 5e       	subi	r30, 0xE1	; 225
    1abc:	f5 4f       	sbci	r31, 0xF5	; 245
    1abe:	86 e0       	ldi	r24, 0x06	; 6
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
				break;
    1ac6:	d2 c0       	rjmp	.+420    	; 0x1c6c <setTimer+0x2fe>
			
			case SW8:
				LcdPutchar('7');
    1ac8:	87 e3       	ldi	r24, 0x37	; 55
    1aca:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    1ace:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1ad2:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1adc:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 7;
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e1 5e       	subi	r30, 0xE1	; 225
    1ae8:	f5 4f       	sbci	r31, 0xF5	; 245
    1aea:	87 e0       	ldi	r24, 0x07	; 7
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	80 83       	st	Z, r24
				break;
    1af2:	bc c0       	rjmp	.+376    	; 0x1c6c <setTimer+0x2fe>
			
			case SW9:
				LcdPutchar('8');
    1af4:	88 e3       	ldi	r24, 0x38	; 56
    1af6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    1afa:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1afe:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1b08:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 8;
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	fc 01       	movw	r30, r24
    1b12:	e1 5e       	subi	r30, 0xE1	; 225
    1b14:	f5 4f       	sbci	r31, 0xF5	; 245
    1b16:	88 e0       	ldi	r24, 0x08	; 8
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	80 83       	st	Z, r24
				break;
    1b1e:	a6 c0       	rjmp	.+332    	; 0x1c6c <setTimer+0x2fe>
			
			case SW10:
				LcdPutchar('9');
    1b20:	89 e3       	ldi	r24, 0x39	; 57
    1b22:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    1b26:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1b2a:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1b34:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 9;
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	e1 5e       	subi	r30, 0xE1	; 225
    1b40:	f5 4f       	sbci	r31, 0xF5	; 245
    1b42:	89 e0       	ldi	r24, 0x09	; 9
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	80 83       	st	Z, r24
				break;
    1b4a:	90 c0       	rjmp	.+288    	; 0x1c6c <setTimer+0x2fe>
			
			case SW13:
				LcdPutchar('0');
    1b4c:	80 e3       	ldi	r24, 0x30	; 48
    1b4e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LcdPutchar>
				customTimerSettingIndex++;
    1b52:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1b56:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1b60:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	fc 01       	movw	r30, r24
    1b6a:	e1 5e       	subi	r30, 0xE1	; 225
    1b6c:	f5 4f       	sbci	r31, 0xF5	; 245
    1b6e:	11 82       	std	Z+1, r1	; 0x01
    1b70:	10 82       	st	Z, r1
				break;
    1b72:	7c c0       	rjmp	.+248    	; 0x1c6c <setTimer+0x2fe>
				returnStatus = 0;
				break;
			
			// 위로 키 입력되는 케이스
			case SW3:
				LcdCommand(CURSOR_LSHIFT);
    1b74:	80 e1       	ldi	r24, 0x10	; 16
    1b76:	0e 94 a0 02 	call	0x540	; 0x540 <LcdCommand>
				customTimerSettingIndex -= 1;
    1b7a:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1b7e:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1b88:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				customTimer[customTimerSettingIndex] = 0;
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	fc 01       	movw	r30, r24
    1b92:	e1 5e       	subi	r30, 0xE1	; 225
    1b94:	f5 4f       	sbci	r31, 0xF5	; 245
    1b96:	11 82       	std	Z+1, r1	; 0x01
    1b98:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    1b9a:	6b c0       	rjmp	.+214    	; 0x1c72 <setTimer+0x304>
				
			// 아래 키 입력되는 케이스
			case SW7:
				customTimerSettingIndex += 1;
    1b9c:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1ba0:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <customTimerSettingIndex+0x1>
    1baa:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <customTimerSettingIndex>
				LcdCommand(CURSOR_RSHIFT);
    1bae:	84 e1       	ldi	r24, 0x14	; 20
    1bb0:	0e 94 a0 02 	call	0x540	; 0x540 <LcdCommand>
				customTimer[customTimerSettingIndex] = 0;
    1bb4:	e0 91 2f 0a 	lds	r30, 0x0A2F	; 0x800a2f <customTimerSettingIndex>
    1bb8:	f0 91 30 0a 	lds	r31, 0x0A30	; 0x800a30 <customTimerSettingIndex+0x1>
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	ff 1f       	adc	r31, r31
    1bc0:	e1 5e       	subi	r30, 0xE1	; 225
    1bc2:	f5 4f       	sbci	r31, 0xF5	; 245
    1bc4:	11 82       	std	Z+1, r1	; 0x01
    1bc6:	10 82       	st	Z, r1
				returnStatus = 2;
				break;
    1bc8:	54 c0       	rjmp	.+168    	; 0x1c72 <setTimer+0x304>
		if(returnStatus == -1) {
			returnStatus = 2;
		}
		//확인이 눌린 경우
		else if(returnStatus == 0) {
			customTimerSetInitFlag = 0;
    1bca:	10 92 1e 0a 	sts	0x0A1E, r1	; 0x800a1e <customTimerSetInitFlag+0x1>
    1bce:	10 92 1d 0a 	sts	0x0A1D, r1	; 0x800a1d <customTimerSetInitFlag>
			LcdMove(0,0);
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	0e 94 19 03 	call	0x632	; 0x632 <LcdMove>
			LcdPuts("                      ");
    1bda:	82 ea       	ldi	r24, 0xA2	; 162
    1bdc:	91 e0       	ldi	r25, 0x01	; 1
    1bde:	0e 94 0b 03 	call	0x616	; 0x616 <LcdPuts>
			LcdCommand(CURSOR_OFF);
    1be2:	8c e0       	ldi	r24, 0x0C	; 12
    1be4:	0e 94 a0 02 	call	0x540	; 0x540 <LcdCommand>
			minute = customTimer[0];
			second = customTimer[3] * 10 + customTimer[4];
			m_second = customTimer[6];
			
			// 7 세그먼트 계산
			ISeg7Init();
    1be8:	0e 94 c5 01 	call	0x38a	; 0x38a <ISeg7Init>
			segmentDisplayNumber = customTimer[1]*1000 + customTimer[4]*100 + customTimer[5]*10 + customTimer[7];
    1bec:	ef e1       	ldi	r30, 0x1F	; 31
    1bee:	fa e0       	ldi	r31, 0x0A	; 10
    1bf0:	42 81       	ldd	r20, Z+2	; 0x02
    1bf2:	53 81       	ldd	r21, Z+3	; 0x03
    1bf4:	88 ee       	ldi	r24, 0xE8	; 232
    1bf6:	93 e0       	ldi	r25, 0x03	; 3
    1bf8:	48 9f       	mul	r20, r24
    1bfa:	90 01       	movw	r18, r0
    1bfc:	49 9f       	mul	r20, r25
    1bfe:	30 0d       	add	r19, r0
    1c00:	58 9f       	mul	r21, r24
    1c02:	30 0d       	add	r19, r0
    1c04:	11 24       	eor	r1, r1
    1c06:	40 85       	ldd	r20, Z+8	; 0x08
    1c08:	51 85       	ldd	r21, Z+9	; 0x09
    1c0a:	64 e6       	ldi	r22, 0x64	; 100
    1c0c:	64 9f       	mul	r22, r20
    1c0e:	c0 01       	movw	r24, r0
    1c10:	65 9f       	mul	r22, r21
    1c12:	90 0d       	add	r25, r0
    1c14:	11 24       	eor	r1, r1
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	22 85       	ldd	r18, Z+10	; 0x0a
    1c1c:	33 85       	ldd	r19, Z+11	; 0x0b
    1c1e:	b9 01       	movw	r22, r18
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	a9 01       	movw	r20, r18
    1c26:	44 0f       	add	r20, r20
    1c28:	55 1f       	adc	r21, r21
    1c2a:	44 0f       	add	r20, r20
    1c2c:	55 1f       	adc	r21, r21
    1c2e:	44 0f       	add	r20, r20
    1c30:	55 1f       	adc	r21, r21
    1c32:	9b 01       	movw	r18, r22
    1c34:	24 0f       	add	r18, r20
    1c36:	35 1f       	adc	r19, r21
    1c38:	28 0f       	add	r18, r24
    1c3a:	39 1f       	adc	r19, r25
    1c3c:	86 85       	ldd	r24, Z+14	; 0x0e
    1c3e:	97 85       	ldd	r25, Z+15	; 0x0f
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <segmentDisplayNumber+0x1>
    1c48:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <segmentDisplayNumber>
			ISeg7DispNum(segmentDisplayNumber , 10);
    1c4c:	6a e0       	ldi	r22, 0x0A	; 10
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ISeg7DispNum>
				
			customTimerSettingIndex = 0;
    1c54:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <customTimerSettingIndex+0x1>
    1c58:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <customTimerSettingIndex>
			returnStatus = 0;
			*timerInitFlag = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	99 83       	std	Y+1, r25	; 0x01
    1c62:	88 83       	st	Y, r24
			break;
		}
		return returnStatus;
	}
}
    1c64:	08 c0       	rjmp	.+16     	; 0x1c76 <setTimer+0x308>
			case SW12:
				returnStatus = 0;
				break;
				
			case SW15:
				return -99;
    1c66:	8d e9       	ldi	r24, 0x9D	; 157
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <setTimer+0x308>
				returnStatus = 2;
				break;
		}
		//////////////////////////////////////////////////////////////////////////
		if(returnStatus == -1) {
			returnStatus = 2;
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <setTimer+0x308>
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	90 e0       	ldi	r25, 0x00	; 0
			*timerInitFlag = 1;
			break;
		}
		return returnStatus;
	}
}
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <set7SegmentTimer>:

int set7SegmentTimer(int counter_m_seoncd) {	
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
	int nowDisplayNumber = segmentDisplayNumber - counter_m_seoncd;
    1c80:	c0 91 1b 0a 	lds	r28, 0x0A1B	; 0x800a1b <segmentDisplayNumber>
    1c84:	d0 91 1c 0a 	lds	r29, 0x0A1C	; 0x800a1c <segmentDisplayNumber+0x1>
    1c88:	c8 1b       	sub	r28, r24
    1c8a:	d9 0b       	sbc	r29, r25
	//1분 00.0초
	//9분 99.9초
	if(nowDisplayNumber%1000 == 999 ){
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	68 ee       	ldi	r22, 0xE8	; 232
    1c90:	73 e0       	ldi	r23, 0x03	; 3
    1c92:	2e d0       	rcall	.+92     	; 0x1cf0 <__divmodhi4>
    1c94:	87 3e       	cpi	r24, 0xE7	; 231
    1c96:	93 40       	sbci	r25, 0x03	; 3
    1c98:	11 f4       	brne	.+4      	; 0x1c9e <set7SegmentTimer+0x22>
		nowDisplayNumber -= 400;
    1c9a:	c0 59       	subi	r28, 0x90	; 144
    1c9c:	d1 40       	sbci	r29, 0x01	; 1
	}
	segmentDisplayNumber = nowDisplayNumber;
    1c9e:	d0 93 1c 0a 	sts	0x0A1C, r29	; 0x800a1c <segmentDisplayNumber+0x1>
    1ca2:	c0 93 1b 0a 	sts	0x0A1B, r28	; 0x800a1b <segmentDisplayNumber>
	ISeg7DispNum(nowDisplayNumber , 10);
    1ca6:	6a e0       	ldi	r22, 0x0A	; 10
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	ce 01       	movw	r24, r28
    1cac:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ISeg7DispNum>
	// 타이머 다됨
	if(nowDisplayNumber == 0) {
    1cb0:	cd 2b       	or	r28, r29
		// 도트 매트릭스 구동
		timer1_init();	
    1cb2:	29 f4       	brne	.+10     	; 0x1cbe <set7SegmentTimer+0x42>
		dotmatrixActive();
    1cb4:	4b d9       	rcall	.-3434   	; 0xf4c <timer1_init>
    1cb6:	58 d9       	rcall	.-3408   	; 0xf68 <dotmatrixActive>
		return 0;	
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <set7SegmentTimer+0x46>
	}
	return 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
}
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret

00001cc8 <__udivmodhi4>:
    1cc8:	aa 1b       	sub	r26, r26
    1cca:	bb 1b       	sub	r27, r27
    1ccc:	51 e1       	ldi	r21, 0x11	; 17
    1cce:	07 c0       	rjmp	.+14     	; 0x1cde <__udivmodhi4_ep>

00001cd0 <__udivmodhi4_loop>:
    1cd0:	aa 1f       	adc	r26, r26
    1cd2:	bb 1f       	adc	r27, r27
    1cd4:	a6 17       	cp	r26, r22
    1cd6:	b7 07       	cpc	r27, r23
    1cd8:	10 f0       	brcs	.+4      	; 0x1cde <__udivmodhi4_ep>
    1cda:	a6 1b       	sub	r26, r22
    1cdc:	b7 0b       	sbc	r27, r23

00001cde <__udivmodhi4_ep>:
    1cde:	88 1f       	adc	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	5a 95       	dec	r21
    1ce4:	a9 f7       	brne	.-22     	; 0x1cd0 <__udivmodhi4_loop>
    1ce6:	80 95       	com	r24
    1ce8:	90 95       	com	r25
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	08 95       	ret

00001cf0 <__divmodhi4>:
    1cf0:	97 fb       	bst	r25, 7
    1cf2:	07 2e       	mov	r0, r23
    1cf4:	16 f4       	brtc	.+4      	; 0x1cfa <__divmodhi4+0xa>
    1cf6:	00 94       	com	r0
    1cf8:	06 d0       	rcall	.+12     	; 0x1d06 <__divmodhi4_neg1>
    1cfa:	77 fd       	sbrc	r23, 7
    1cfc:	08 d0       	rcall	.+16     	; 0x1d0e <__divmodhi4_neg2>
    1cfe:	e4 df       	rcall	.-56     	; 0x1cc8 <__udivmodhi4>
    1d00:	07 fc       	sbrc	r0, 7
    1d02:	05 d0       	rcall	.+10     	; 0x1d0e <__divmodhi4_neg2>
    1d04:	3e f4       	brtc	.+14     	; 0x1d14 <__divmodhi4_exit>

00001d06 <__divmodhi4_neg1>:
    1d06:	90 95       	com	r25
    1d08:	81 95       	neg	r24
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	08 95       	ret

00001d0e <__divmodhi4_neg2>:
    1d0e:	70 95       	com	r23
    1d10:	61 95       	neg	r22
    1d12:	7f 4f       	sbci	r23, 0xFF	; 255

00001d14 <__divmodhi4_exit>:
    1d14:	08 95       	ret

00001d16 <__tablejump2__>:
    1d16:	ee 0f       	add	r30, r30
    1d18:	ff 1f       	adc	r31, r31
    1d1a:	00 24       	eor	r0, r0
    1d1c:	00 1c       	adc	r0, r0
    1d1e:	0b be       	out	0x3b, r0	; 59
    1d20:	07 90       	elpm	r0, Z+
    1d22:	f6 91       	elpm	r31, Z
    1d24:	e0 2d       	mov	r30, r0
    1d26:	09 94       	ijmp

00001d28 <malloc>:
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	91 05       	cpc	r25, r1
    1d34:	10 f4       	brcc	.+4      	; 0x1d3a <malloc+0x12>
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	e0 91 33 0a 	lds	r30, 0x0A33	; 0x800a33 <__flp>
    1d3e:	f0 91 34 0a 	lds	r31, 0x0A34	; 0x800a34 <__flp+0x1>
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	a0 e0       	ldi	r26, 0x00	; 0
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	30 97       	sbiw	r30, 0x00	; 0
    1d4c:	19 f1       	breq	.+70     	; 0x1d94 <malloc+0x6c>
    1d4e:	40 81       	ld	r20, Z
    1d50:	51 81       	ldd	r21, Z+1	; 0x01
    1d52:	02 81       	ldd	r16, Z+2	; 0x02
    1d54:	13 81       	ldd	r17, Z+3	; 0x03
    1d56:	48 17       	cp	r20, r24
    1d58:	59 07       	cpc	r21, r25
    1d5a:	c8 f0       	brcs	.+50     	; 0x1d8e <malloc+0x66>
    1d5c:	84 17       	cp	r24, r20
    1d5e:	95 07       	cpc	r25, r21
    1d60:	69 f4       	brne	.+26     	; 0x1d7c <malloc+0x54>
    1d62:	10 97       	sbiw	r26, 0x00	; 0
    1d64:	31 f0       	breq	.+12     	; 0x1d72 <malloc+0x4a>
    1d66:	12 96       	adiw	r26, 0x02	; 2
    1d68:	0c 93       	st	X, r16
    1d6a:	12 97       	sbiw	r26, 0x02	; 2
    1d6c:	13 96       	adiw	r26, 0x03	; 3
    1d6e:	1c 93       	st	X, r17
    1d70:	27 c0       	rjmp	.+78     	; 0x1dc0 <malloc+0x98>
    1d72:	00 93 33 0a 	sts	0x0A33, r16	; 0x800a33 <__flp>
    1d76:	10 93 34 0a 	sts	0x0A34, r17	; 0x800a34 <__flp+0x1>
    1d7a:	22 c0       	rjmp	.+68     	; 0x1dc0 <malloc+0x98>
    1d7c:	21 15       	cp	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	19 f0       	breq	.+6      	; 0x1d88 <malloc+0x60>
    1d82:	42 17       	cp	r20, r18
    1d84:	53 07       	cpc	r21, r19
    1d86:	18 f4       	brcc	.+6      	; 0x1d8e <malloc+0x66>
    1d88:	9a 01       	movw	r18, r20
    1d8a:	bd 01       	movw	r22, r26
    1d8c:	ef 01       	movw	r28, r30
    1d8e:	df 01       	movw	r26, r30
    1d90:	f8 01       	movw	r30, r16
    1d92:	db cf       	rjmp	.-74     	; 0x1d4a <malloc+0x22>
    1d94:	21 15       	cp	r18, r1
    1d96:	31 05       	cpc	r19, r1
    1d98:	f9 f0       	breq	.+62     	; 0x1dd8 <malloc+0xb0>
    1d9a:	28 1b       	sub	r18, r24
    1d9c:	39 0b       	sbc	r19, r25
    1d9e:	24 30       	cpi	r18, 0x04	; 4
    1da0:	31 05       	cpc	r19, r1
    1da2:	80 f4       	brcc	.+32     	; 0x1dc4 <malloc+0x9c>
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	61 15       	cp	r22, r1
    1daa:	71 05       	cpc	r23, r1
    1dac:	21 f0       	breq	.+8      	; 0x1db6 <malloc+0x8e>
    1dae:	fb 01       	movw	r30, r22
    1db0:	93 83       	std	Z+3, r25	; 0x03
    1db2:	82 83       	std	Z+2, r24	; 0x02
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <malloc+0x96>
    1db6:	90 93 34 0a 	sts	0x0A34, r25	; 0x800a34 <__flp+0x1>
    1dba:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <__flp>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	32 96       	adiw	r30, 0x02	; 2
    1dc2:	44 c0       	rjmp	.+136    	; 0x1e4c <malloc+0x124>
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e2 0f       	add	r30, r18
    1dc8:	f3 1f       	adc	r31, r19
    1dca:	81 93       	st	Z+, r24
    1dcc:	91 93       	st	Z+, r25
    1dce:	22 50       	subi	r18, 0x02	; 2
    1dd0:	31 09       	sbc	r19, r1
    1dd2:	39 83       	std	Y+1, r19	; 0x01
    1dd4:	28 83       	st	Y, r18
    1dd6:	3a c0       	rjmp	.+116    	; 0x1e4c <malloc+0x124>
    1dd8:	20 91 31 0a 	lds	r18, 0x0A31	; 0x800a31 <__brkval>
    1ddc:	30 91 32 0a 	lds	r19, 0x0A32	; 0x800a32 <__brkval+0x1>
    1de0:	23 2b       	or	r18, r19
    1de2:	41 f4       	brne	.+16     	; 0x1df4 <malloc+0xcc>
    1de4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1de8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1dec:	30 93 32 0a 	sts	0x0A32, r19	; 0x800a32 <__brkval+0x1>
    1df0:	20 93 31 0a 	sts	0x0A31, r18	; 0x800a31 <__brkval>
    1df4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1df8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1dfc:	21 15       	cp	r18, r1
    1dfe:	31 05       	cpc	r19, r1
    1e00:	41 f4       	brne	.+16     	; 0x1e12 <malloc+0xea>
    1e02:	2d b7       	in	r18, 0x3d	; 61
    1e04:	3e b7       	in	r19, 0x3e	; 62
    1e06:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1e0a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1e0e:	24 1b       	sub	r18, r20
    1e10:	35 0b       	sbc	r19, r21
    1e12:	e0 91 31 0a 	lds	r30, 0x0A31	; 0x800a31 <__brkval>
    1e16:	f0 91 32 0a 	lds	r31, 0x0A32	; 0x800a32 <__brkval+0x1>
    1e1a:	e2 17       	cp	r30, r18
    1e1c:	f3 07       	cpc	r31, r19
    1e1e:	a0 f4       	brcc	.+40     	; 0x1e48 <malloc+0x120>
    1e20:	2e 1b       	sub	r18, r30
    1e22:	3f 0b       	sbc	r19, r31
    1e24:	28 17       	cp	r18, r24
    1e26:	39 07       	cpc	r19, r25
    1e28:	78 f0       	brcs	.+30     	; 0x1e48 <malloc+0x120>
    1e2a:	ac 01       	movw	r20, r24
    1e2c:	4e 5f       	subi	r20, 0xFE	; 254
    1e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e30:	24 17       	cp	r18, r20
    1e32:	35 07       	cpc	r19, r21
    1e34:	48 f0       	brcs	.+18     	; 0x1e48 <malloc+0x120>
    1e36:	4e 0f       	add	r20, r30
    1e38:	5f 1f       	adc	r21, r31
    1e3a:	50 93 32 0a 	sts	0x0A32, r21	; 0x800a32 <__brkval+0x1>
    1e3e:	40 93 31 0a 	sts	0x0A31, r20	; 0x800a31 <__brkval>
    1e42:	81 93       	st	Z+, r24
    1e44:	91 93       	st	Z+, r25
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <malloc+0x124>
    1e48:	e0 e0       	ldi	r30, 0x00	; 0
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	cf 01       	movw	r24, r30
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

00001e58 <free>:
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <free+0xa>
    1e60:	81 c0       	rjmp	.+258    	; 0x1f64 <free+0x10c>
    1e62:	fc 01       	movw	r30, r24
    1e64:	32 97       	sbiw	r30, 0x02	; 2
    1e66:	13 82       	std	Z+3, r1	; 0x03
    1e68:	12 82       	std	Z+2, r1	; 0x02
    1e6a:	a0 91 33 0a 	lds	r26, 0x0A33	; 0x800a33 <__flp>
    1e6e:	b0 91 34 0a 	lds	r27, 0x0A34	; 0x800a34 <__flp+0x1>
    1e72:	10 97       	sbiw	r26, 0x00	; 0
    1e74:	81 f4       	brne	.+32     	; 0x1e96 <free+0x3e>
    1e76:	20 81       	ld	r18, Z
    1e78:	31 81       	ldd	r19, Z+1	; 0x01
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	20 91 31 0a 	lds	r18, 0x0A31	; 0x800a31 <__brkval>
    1e82:	30 91 32 0a 	lds	r19, 0x0A32	; 0x800a32 <__brkval+0x1>
    1e86:	28 17       	cp	r18, r24
    1e88:	39 07       	cpc	r19, r25
    1e8a:	51 f5       	brne	.+84     	; 0x1ee0 <free+0x88>
    1e8c:	f0 93 32 0a 	sts	0x0A32, r31	; 0x800a32 <__brkval+0x1>
    1e90:	e0 93 31 0a 	sts	0x0A31, r30	; 0x800a31 <__brkval>
    1e94:	67 c0       	rjmp	.+206    	; 0x1f64 <free+0x10c>
    1e96:	ed 01       	movw	r28, r26
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	ce 17       	cp	r28, r30
    1e9e:	df 07       	cpc	r29, r31
    1ea0:	40 f4       	brcc	.+16     	; 0x1eb2 <free+0x5a>
    1ea2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ea4:	5b 81       	ldd	r21, Y+3	; 0x03
    1ea6:	9e 01       	movw	r18, r28
    1ea8:	41 15       	cp	r20, r1
    1eaa:	51 05       	cpc	r21, r1
    1eac:	f1 f0       	breq	.+60     	; 0x1eea <free+0x92>
    1eae:	ea 01       	movw	r28, r20
    1eb0:	f5 cf       	rjmp	.-22     	; 0x1e9c <free+0x44>
    1eb2:	d3 83       	std	Z+3, r29	; 0x03
    1eb4:	c2 83       	std	Z+2, r28	; 0x02
    1eb6:	40 81       	ld	r20, Z
    1eb8:	51 81       	ldd	r21, Z+1	; 0x01
    1eba:	84 0f       	add	r24, r20
    1ebc:	95 1f       	adc	r25, r21
    1ebe:	c8 17       	cp	r28, r24
    1ec0:	d9 07       	cpc	r29, r25
    1ec2:	59 f4       	brne	.+22     	; 0x1eda <free+0x82>
    1ec4:	88 81       	ld	r24, Y
    1ec6:	99 81       	ldd	r25, Y+1	; 0x01
    1ec8:	84 0f       	add	r24, r20
    1eca:	95 1f       	adc	r25, r21
    1ecc:	02 96       	adiw	r24, 0x02	; 2
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	80 83       	st	Z, r24
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed6:	93 83       	std	Z+3, r25	; 0x03
    1ed8:	82 83       	std	Z+2, r24	; 0x02
    1eda:	21 15       	cp	r18, r1
    1edc:	31 05       	cpc	r19, r1
    1ede:	29 f4       	brne	.+10     	; 0x1eea <free+0x92>
    1ee0:	f0 93 34 0a 	sts	0x0A34, r31	; 0x800a34 <__flp+0x1>
    1ee4:	e0 93 33 0a 	sts	0x0A33, r30	; 0x800a33 <__flp>
    1ee8:	3d c0       	rjmp	.+122    	; 0x1f64 <free+0x10c>
    1eea:	e9 01       	movw	r28, r18
    1eec:	fb 83       	std	Y+3, r31	; 0x03
    1eee:	ea 83       	std	Y+2, r30	; 0x02
    1ef0:	49 91       	ld	r20, Y+
    1ef2:	59 91       	ld	r21, Y+
    1ef4:	c4 0f       	add	r28, r20
    1ef6:	d5 1f       	adc	r29, r21
    1ef8:	ec 17       	cp	r30, r28
    1efa:	fd 07       	cpc	r31, r29
    1efc:	61 f4       	brne	.+24     	; 0x1f16 <free+0xbe>
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	84 0f       	add	r24, r20
    1f04:	95 1f       	adc	r25, r21
    1f06:	02 96       	adiw	r24, 0x02	; 2
    1f08:	e9 01       	movw	r28, r18
    1f0a:	99 83       	std	Y+1, r25	; 0x01
    1f0c:	88 83       	st	Y, r24
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	9b 83       	std	Y+3, r25	; 0x03
    1f14:	8a 83       	std	Y+2, r24	; 0x02
    1f16:	e0 e0       	ldi	r30, 0x00	; 0
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	12 96       	adiw	r26, 0x02	; 2
    1f1c:	8d 91       	ld	r24, X+
    1f1e:	9c 91       	ld	r25, X
    1f20:	13 97       	sbiw	r26, 0x03	; 3
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	19 f0       	breq	.+6      	; 0x1f2c <free+0xd4>
    1f26:	fd 01       	movw	r30, r26
    1f28:	dc 01       	movw	r26, r24
    1f2a:	f7 cf       	rjmp	.-18     	; 0x1f1a <free+0xc2>
    1f2c:	8d 91       	ld	r24, X+
    1f2e:	9c 91       	ld	r25, X
    1f30:	11 97       	sbiw	r26, 0x01	; 1
    1f32:	9d 01       	movw	r18, r26
    1f34:	2e 5f       	subi	r18, 0xFE	; 254
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	82 0f       	add	r24, r18
    1f3a:	93 1f       	adc	r25, r19
    1f3c:	20 91 31 0a 	lds	r18, 0x0A31	; 0x800a31 <__brkval>
    1f40:	30 91 32 0a 	lds	r19, 0x0A32	; 0x800a32 <__brkval+0x1>
    1f44:	28 17       	cp	r18, r24
    1f46:	39 07       	cpc	r19, r25
    1f48:	69 f4       	brne	.+26     	; 0x1f64 <free+0x10c>
    1f4a:	30 97       	sbiw	r30, 0x00	; 0
    1f4c:	29 f4       	brne	.+10     	; 0x1f58 <free+0x100>
    1f4e:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <__flp+0x1>
    1f52:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <__flp>
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <free+0x104>
    1f58:	13 82       	std	Z+3, r1	; 0x03
    1f5a:	12 82       	std	Z+2, r1	; 0x02
    1f5c:	b0 93 32 0a 	sts	0x0A32, r27	; 0x800a32 <__brkval+0x1>
    1f60:	a0 93 31 0a 	sts	0x0A31, r26	; 0x800a31 <__brkval>
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <_exit>:
    1f6a:	f8 94       	cli

00001f6c <__stop_program>:
    1f6c:	ff cf       	rjmp	.-2      	; 0x1f6c <__stop_program>
