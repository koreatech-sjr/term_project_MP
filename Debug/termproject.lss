
termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  00000dc6  00000e5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  008001ae  008001ae  00000f08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020b4  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4a  00000000  00000000  00003180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e7b  00000000  00000000  00003fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000739  00000000  00000000  0000514c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001507  00000000  00000000  00005885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	1a c2       	rjmp	.+1076   	; 0x45a <__vector_9>
  26:	00 00       	nop
  28:	c2 c0       	rjmp	.+388    	; 0x1ae <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <__vector_15>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	af 04       	cpc	r10, r15
  8e:	e4 03       	fmuls	r22, r20
  90:	c0 04       	cpc	r12, r0
  92:	d5 03       	fmuls	r21, r21
  94:	c0 04       	cpc	r12, r0
  96:	c0 04       	cpc	r12, r0
  98:	c0 04       	cpc	r12, r0
  9a:	c6 03       	fmuls	r20, r22
  9c:	c0 04       	cpc	r12, r0
  9e:	c0 04       	cpc	r12, r0
  a0:	c0 04       	cpc	r12, r0
  a2:	c0 04       	cpc	r12, r0
  a4:	c0 04       	cpc	r12, r0
  a6:	c0 04       	cpc	r12, r0
  a8:	c0 04       	cpc	r12, r0
  aa:	c0 04       	cpc	r12, r0
  ac:	c0 04       	cpc	r12, r0
  ae:	11 04       	cpc	r1, r1
  b0:	c0 04       	cpc	r12, r0
  b2:	02 04       	cpc	r0, r2
  b4:	c0 04       	cpc	r12, r0
  b6:	c0 04       	cpc	r12, r0
  b8:	c0 04       	cpc	r12, r0
  ba:	f3 03       	fmuls	r23, r19
  bc:	c0 04       	cpc	r12, r0
  be:	c0 04       	cpc	r12, r0
  c0:	c0 04       	cpc	r12, r0
  c2:	c0 04       	cpc	r12, r0
  c4:	c0 04       	cpc	r12, r0
  c6:	c0 04       	cpc	r12, r0
  c8:	c0 04       	cpc	r12, r0
  ca:	c0 04       	cpc	r12, r0
  cc:	c0 04       	cpc	r12, r0
  ce:	c0 04       	cpc	r12, r0
  d0:	c0 04       	cpc	r12, r0
  d2:	c0 04       	cpc	r12, r0
  d4:	c0 04       	cpc	r12, r0
  d6:	c0 04       	cpc	r12, r0
  d8:	c0 04       	cpc	r12, r0
  da:	c0 04       	cpc	r12, r0
  dc:	c0 04       	cpc	r12, r0
  de:	c0 04       	cpc	r12, r0
  e0:	c0 04       	cpc	r12, r0
  e2:	c0 04       	cpc	r12, r0
  e4:	c0 04       	cpc	r12, r0
  e6:	c0 04       	cpc	r12, r0
  e8:	c0 04       	cpc	r12, r0
  ea:	c0 04       	cpc	r12, r0
  ec:	5a 04       	cpc	r5, r10
  ee:	3e 04       	cpc	r3, r14
  f0:	c0 04       	cpc	r12, r0
  f2:	2f 04       	cpc	r2, r15
  f4:	c0 04       	cpc	r12, r0
  f6:	c0 04       	cpc	r12, r0
  f8:	c0 04       	cpc	r12, r0
  fa:	20 04       	cpc	r2, r0
  fc:	c0 04       	cpc	r12, r0
  fe:	c0 04       	cpc	r12, r0
 100:	c0 04       	cpc	r12, r0
 102:	c0 04       	cpc	r12, r0
 104:	c0 04       	cpc	r12, r0
 106:	c0 04       	cpc	r12, r0
 108:	c0 04       	cpc	r12, r0
 10a:	c0 04       	cpc	r12, r0
 10c:	c0 04       	cpc	r12, r0
 10e:	c0 04       	cpc	r12, r0
 110:	c0 04       	cpc	r12, r0
 112:	c0 04       	cpc	r12, r0
 114:	c0 04       	cpc	r12, r0
 116:	c0 04       	cpc	r12, r0
 118:	c0 04       	cpc	r12, r0
 11a:	c0 04       	cpc	r12, r0
 11c:	c0 04       	cpc	r12, r0
 11e:	c0 04       	cpc	r12, r0
 120:	c0 04       	cpc	r12, r0
 122:	c0 04       	cpc	r12, r0
 124:	c0 04       	cpc	r12, r0
 126:	c0 04       	cpc	r12, r0
 128:	c0 04       	cpc	r12, r0
 12a:	c0 04       	cpc	r12, r0
 12c:	c0 04       	cpc	r12, r0
 12e:	c0 04       	cpc	r12, r0
 130:	c0 04       	cpc	r12, r0
 132:	c0 04       	cpc	r12, r0
 134:	c0 04       	cpc	r12, r0
 136:	c0 04       	cpc	r12, r0
 138:	c0 04       	cpc	r12, r0
 13a:	c0 04       	cpc	r12, r0
 13c:	c0 04       	cpc	r12, r0
 13e:	c0 04       	cpc	r12, r0
 140:	c0 04       	cpc	r12, r0
 142:	c0 04       	cpc	r12, r0
 144:	c0 04       	cpc	r12, r0
 146:	c0 04       	cpc	r12, r0
 148:	c0 04       	cpc	r12, r0
 14a:	c0 04       	cpc	r12, r0
 14c:	c0 04       	cpc	r12, r0
 14e:	c0 04       	cpc	r12, r0
 150:	c0 04       	cpc	r12, r0
 152:	c0 04       	cpc	r12, r0
 154:	c0 04       	cpc	r12, r0
 156:	c0 04       	cpc	r12, r0
 158:	c0 04       	cpc	r12, r0
 15a:	c0 04       	cpc	r12, r0
 15c:	c0 04       	cpc	r12, r0
 15e:	c0 04       	cpc	r12, r0
 160:	c0 04       	cpc	r12, r0
 162:	c0 04       	cpc	r12, r0
 164:	c0 04       	cpc	r12, r0
 166:	c0 04       	cpc	r12, r0
 168:	c0 04       	cpc	r12, r0
 16a:	c0 04       	cpc	r12, r0
 16c:	c0 04       	cpc	r12, r0
 16e:	c0 04       	cpc	r12, r0
 170:	c0 04       	cpc	r12, r0
 172:	4d 04       	cpc	r4, r13

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e1       	ldi	r29, 0x10	; 16
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e6 ec       	ldi	r30, 0xC6	; 198
 188:	fd e0       	ldi	r31, 0x0D	; 13
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	ae 3a       	cpi	r26, 0xAE	; 174
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	ae ea       	ldi	r26, 0xAE	; 174
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	a5 3d       	cpi	r26, 0xD5	; 213
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	0c d2       	rcall	.+1048   	; 0x5c4 <main>
 1ac:	0a c6       	rjmp	.+3092   	; 0xdc2 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <__vector_15>:
//====================================================
// ISR : 인터럽트가 걸릴 때마다 index가 가리키는 세그먼트에
//       데이터를 표시하고, index는 계속 회전이동하게 된다.
//=====================================================

ISR(TIMER0_COMP_vect){	//카운터/타이머0 비교일치 인터럽트
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	0b b6       	in	r0, 0x3b	; 59
 1bc:	0f 92       	push	r0
 1be:	2f 93       	push	r18
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	static int index = 0;
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
 1c8:	22 b3       	in	r18, 0x12	; 18
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	00 90 ae 01 	lds	r0, 0x01AE	; 0x8001ae <__data_end>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__vector_15+0x28>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <__vector_15+0x24>
 1dc:	80 95       	com	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	92 2f       	mov	r25, r18
 1e2:	9f 70       	andi	r25, 0x0F	; 15
 1e4:	89 2b       	or	r24, r25
 1e6:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
 1e8:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <__data_end>
 1ec:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <__data_end+0x1>
 1f0:	ea 5f       	subi	r30, 0xFA	; 250
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	e0 81       	ld	r30, Z
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	e9 58       	subi	r30, 0x89	; 137
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	80 81       	ld	r24, Z
 1fe:	80 95       	com	r24
 200:	8b bb       	out	0x1b, r24	; 27
	
	index++; //인덱스 이동
 202:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__data_end>
 206:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <__data_end+0x1>
 20a:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) { index = 0; }
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	91 05       	cpc	r25, r1
 210:	29 f0       	breq	.+10     	; 0x21c <__vector_15+0x6c>
		
	// 현재 인덱스가 가리키는 자리수를 표시한다.
	SSEG_CONT = (SSEG_CONT & ~CONT_MASK) | (~(OUTPUT_VALUE<<index) & CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];
	
	index++; //인덱스 이동
 212:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <__data_end+0x1>
 216:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
 21a:	04 c0       	rjmp	.+8      	; 0x224 <__vector_15+0x74>
	if(index == N_SEGMENT) { index = 0; }
 21c:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <__data_end+0x1>
 220:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__data_end>
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0b be       	out	0x3b, r0	; 59
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <key_scan>:
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
 23c:	8e ef       	ldi	r24, 0xFE	; 254
 23e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
 242:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
 244:	80 b1       	in	r24, 0x00	; 0
 246:	80 95       	com	r24
 248:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
 24a:	69 f4       	brne	.+26     	; 0x266 <key_scan+0x2a>
 24c:	23 e0       	ldi	r18, 0x03	; 3
 24e:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
	{
		KEY_OUT = ~out;	//scanned output
 250:	e2 e6       	ldi	r30, 0x62	; 98
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	89 2f       	mov	r24, r25
 256:	80 95       	com	r24
 258:	80 83       	st	Z, r24
		asm("nop"::);
 25a:	00 00       	nop
		
		in = (~KEY_IN) & 0xF0;
 25c:	80 b1       	in	r24, 0x00	; 0
 25e:	80 95       	com	r24
 260:	80 7f       	andi	r24, 0xF0	; 240
		if(in)			//have key input
 262:	21 f0       	breq	.+8      	; 0x26c <key_scan+0x30>
 264:	01 c0       	rjmp	.+2      	; 0x268 <key_scan+0x2c>

static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
 266:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);
		
		in = (~KEY_IN) & 0xF0;
		if(in)			//have key input
		{
			in += out;	//make a code
 268:	89 0f       	add	r24, r25
			break;
 26a:	08 95       	ret
		}
		out <<= 1;	//change to next scan-code
 26c:	99 0f       	add	r25, r25
 26e:	21 50       	subi	r18, 0x01	; 1
static unsigned char key_scan(void)
{
	unsigned char out, i , in;
	
	out = 0x01;		// scan from 3rd column
	for(i=0; i<N_COL; i++)
 270:	89 f7       	brne	.-30     	; 0x254 <key_scan+0x18>
		}
		out <<= 1;	//change to next scan-code
		
	}
	return in;	//return the value of scan-code
}
 272:	08 95       	ret

00000274 <KeyInit>:
static unsigned char key_scan(void);
static unsigned char pin = NO_KEY;		//previous key value

void KeyInit()	//Initialize keypad
{
	KEY_OUT = 0xF0;		// Initialize output as 0
 274:	80 ef       	ldi	r24, 0xF0	; 240
 276:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;		//high-ranking nibble = input, low-ranking nibble = output
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 280:	08 95       	ret

00000282 <KeyInput>:
// value of return :
//                   !=0 => value of scan code
//					  =0 => no input
//==========================================================================
unsigned char KeyInput(void)
{
 282:	cf 93       	push	r28
	unsigned char in, in1;
	
	in = key_scan();	//read keys
 284:	db df       	rcall	.-74     	; 0x23c <key_scan>
 286:	c8 2f       	mov	r28, r24
 288:	01 c0       	rjmp	.+2      	; 0x28c <KeyInput+0xa>
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
		if(in == in1) break;
		in = in1;
 28a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	8f e3       	ldi	r24, 0x3F	; 63
 28e:	9c e9       	ldi	r25, 0x9C	; 156
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <KeyInput+0xe>
 294:	00 c0       	rjmp	.+0      	; 0x296 <KeyInput+0x14>
 296:	00 00       	nop
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9c e9       	ldi	r25, 0x9C	; 156
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <KeyInput+0x1a>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <KeyInput+0x20>
 2a2:	00 00       	nop
 2a4:	8f e3       	ldi	r24, 0x3F	; 63
 2a6:	9c e9       	ldi	r25, 0x9C	; 156
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <KeyInput+0x26>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <KeyInput+0x2c>
	
	in = key_scan();	//read keys
	while(1)
	{
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();	//read keys one more time
 2ae:	00 00       	nop
 2b0:	c5 df       	rcall	.-118    	; 0x23c <key_scan>
		if(in == in1) break;
 2b2:	c8 13       	cpse	r28, r24
 2b4:	ea cf       	rjmp	.-44     	; 0x28a <KeyInput+0x8>
 2b6:	98 2f       	mov	r25, r24
 2b8:	90 7f       	andi	r25, 0xF0	; 240
		in = in1;
	}
	
	if (!(in & 0xF0))	// No key was pushed
 2ba:	19 f4       	brne	.+6      	; 0x2c2 <KeyInput+0x40>
	{
		pin = 0;
 2bc:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <pin>
		return 0;
 2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <KeyInput+0x52>
	}
	if(pin == in)
 2c2:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <pin>
 2c6:	89 17       	cp	r24, r25
 2c8:	21 f0       	breq	.+8      	; 0x2d2 <KeyInput+0x50>
	return 0;
	
	pin = in;		//store key value
 2ca:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <pin>
	return in;		//return code
 2ce:	98 2f       	mov	r25, r24
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <KeyInput+0x52>
	{
		pin = 0;
		return 0;
	}
	if(pin == in)
	return 0;
 2d2:	90 e0       	ldi	r25, 0x00	; 0
	
	pin = in;		//store key value
	return in;		//return code
}
 2d4:	89 2f       	mov	r24, r25
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <write_command>:

	LcdCommand(ch);

	for(i=0; i<8; i++)
	LcdPutchar(font[i]);
}
 2da:	98 2f       	mov	r25, r24
 2dc:	90 7f       	andi	r25, 0xF0	; 240
 2de:	94 60       	ori	r25, 0x04	; 4
 2e0:	95 bb       	out	0x15, r25	; 21
 2e2:	9b 7f       	andi	r25, 0xFB	; 251
 2e4:	95 bb       	out	0x15, r25	; 21
 2e6:	20 e1       	ldi	r18, 0x10	; 16
 2e8:	82 02       	muls	r24, r18
 2ea:	c0 01       	movw	r24, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	84 60       	ori	r24, 0x04	; 4
 2f0:	85 bb       	out	0x15, r24	; 21
 2f2:	8b 7f       	andi	r24, 0xFB	; 251
 2f4:	85 bb       	out	0x15, r24	; 21
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	8a 95       	dec	r24
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <write_command+0x1e>
 2fc:	00 00       	nop
 2fe:	08 95       	ret

00000300 <LcdCommand>:
 300:	cf 93       	push	r28
 302:	c8 2f       	mov	r28, r24
 304:	85 e3       	ldi	r24, 0x35	; 53
 306:	8a 95       	dec	r24
 308:	f1 f7       	brne	.-4      	; 0x306 <LcdCommand+0x6>
 30a:	00 00       	nop
 30c:	95 e3       	ldi	r25, 0x35	; 53
 30e:	9a 95       	dec	r25
 310:	f1 f7       	brne	.-4      	; 0x30e <LcdCommand+0xe>
 312:	00 00       	nop
 314:	85 e3       	ldi	r24, 0x35	; 53
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <LcdCommand+0x16>
 31a:	00 00       	nop
 31c:	95 e3       	ldi	r25, 0x35	; 53
 31e:	9a 95       	dec	r25
 320:	f1 f7       	brne	.-4      	; 0x31e <LcdCommand+0x1e>
 322:	00 00       	nop
 324:	85 e3       	ldi	r24, 0x35	; 53
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <LcdCommand+0x26>
 32a:	00 00       	nop
 32c:	8c 2f       	mov	r24, r28
 32e:	d5 df       	rcall	.-86     	; 0x2da <write_command>
 330:	c1 50       	subi	r28, 0x01	; 1
 332:	c2 30       	cpi	r28, 0x02	; 2
 334:	30 f4       	brcc	.+12     	; 0x342 <LcdCommand+0x42>
 336:	8f e3       	ldi	r24, 0x3F	; 63
 338:	9f e1       	ldi	r25, 0x1F	; 31
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LcdCommand+0x3a>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LcdCommand+0x40>
 340:	00 00       	nop
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <LcdInit>:
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	84 bb       	out	0x14, r24	; 20
 34a:	8f e5       	ldi	r24, 0x5F	; 95
 34c:	9a ee       	ldi	r25, 0xEA	; 234
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <LcdInit+0x8>
 352:	00 c0       	rjmp	.+0      	; 0x354 <LcdInit+0xe>
 354:	00 00       	nop
 356:	80 e3       	ldi	r24, 0x30	; 48
 358:	c0 df       	rcall	.-128    	; 0x2da <write_command>
 35a:	8f e1       	ldi	r24, 0x1F	; 31
 35c:	9e e4       	ldi	r25, 0x4E	; 78
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LcdInit+0x18>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LcdInit+0x1e>
 364:	00 00       	nop
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	b8 df       	rcall	.-144    	; 0x2da <write_command>
 36a:	8f e9       	ldi	r24, 0x9F	; 159
 36c:	9f e0       	ldi	r25, 0x0F	; 15
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LcdInit+0x28>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LcdInit+0x2e>
 374:	00 00       	nop
 376:	82 e3       	ldi	r24, 0x32	; 50
 378:	b0 df       	rcall	.-160    	; 0x2da <write_command>
 37a:	88 e2       	ldi	r24, 0x28	; 40
 37c:	c1 df       	rcall	.-126    	; 0x300 <LcdCommand>
 37e:	88 e0       	ldi	r24, 0x08	; 8
 380:	bf df       	rcall	.-130    	; 0x300 <LcdCommand>
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	bd df       	rcall	.-134    	; 0x300 <LcdCommand>
 386:	86 e0       	ldi	r24, 0x06	; 6
 388:	bb df       	rcall	.-138    	; 0x300 <LcdCommand>
 38a:	8c e0       	ldi	r24, 0x0C	; 12
 38c:	b9 cf       	rjmp	.-142    	; 0x300 <LcdCommand>
 38e:	08 95       	ret

00000390 <LcdPutchar>:
 390:	25 e3       	ldi	r18, 0x35	; 53
 392:	2a 95       	dec	r18
 394:	f1 f7       	brne	.-4      	; 0x392 <LcdPutchar+0x2>
 396:	00 00       	nop
 398:	95 e3       	ldi	r25, 0x35	; 53
 39a:	9a 95       	dec	r25
 39c:	f1 f7       	brne	.-4      	; 0x39a <LcdPutchar+0xa>
 39e:	00 00       	nop
 3a0:	25 e3       	ldi	r18, 0x35	; 53
 3a2:	2a 95       	dec	r18
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LcdPutchar+0x12>
 3a6:	00 00       	nop
 3a8:	95 e3       	ldi	r25, 0x35	; 53
 3aa:	9a 95       	dec	r25
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <LcdPutchar+0x1a>
 3ae:	00 00       	nop
 3b0:	25 e3       	ldi	r18, 0x35	; 53
 3b2:	2a 95       	dec	r18
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LcdPutchar+0x22>
 3b6:	00 00       	nop
 3b8:	98 2f       	mov	r25, r24
 3ba:	90 7f       	andi	r25, 0xF0	; 240
 3bc:	95 60       	ori	r25, 0x05	; 5
 3be:	95 bb       	out	0x15, r25	; 21
 3c0:	9b 7f       	andi	r25, 0xFB	; 251
 3c2:	95 bb       	out	0x15, r25	; 21
 3c4:	20 e1       	ldi	r18, 0x10	; 16
 3c6:	82 02       	muls	r24, r18
 3c8:	c0 01       	movw	r24, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	85 60       	ori	r24, 0x05	; 5
 3ce:	85 bb       	out	0x15, r24	; 21
 3d0:	8b 7f       	andi	r24, 0xFB	; 251
 3d2:	85 bb       	out	0x15, r24	; 21
 3d4:	08 95       	ret

000003d6 <LcdPuts>:
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ec 01       	movw	r28, r24
 3dc:	88 81       	ld	r24, Y
 3de:	88 23       	and	r24, r24
 3e0:	29 f0       	breq	.+10     	; 0x3ec <LcdPuts+0x16>
 3e2:	21 96       	adiw	r28, 0x01	; 1
 3e4:	d5 df       	rcall	.-86     	; 0x390 <LcdPutchar>
 3e6:	89 91       	ld	r24, Y+
 3e8:	81 11       	cpse	r24, r1
 3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <LcdPuts+0xe>
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <LcdMove>:
 3f2:	90 e4       	ldi	r25, 0x40	; 64
 3f4:	89 9f       	mul	r24, r25
 3f6:	60 0d       	add	r22, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	86 2f       	mov	r24, r22
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	80 cf       	rjmp	.-256    	; 0x300 <LcdCommand>
 400:	08 95       	ret

00000402 <LcdNewchar>:
// 문자코드 ch에 새로운 글꼴 등록
// 입력 : ch - 문자코드
//		 font - 글꼴 데이터
//=======================================================
void LcdNewchar(char ch, char font[])
{
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	8b 01       	movw	r16, r22
	int i;
	
	ch <<= 3;		//ch = ch <<3;과 같음
 40c:	28 e0       	ldi	r18, 0x08	; 8
 40e:	82 02       	muls	r24, r18
 410:	c0 01       	movw	r24, r0
 412:	11 24       	eor	r1, r1
	ch |= 0x40;		//비트6 세트 -> CGRAM 주소설정
	
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
 414:	80 64       	ori	r24, 0x40	; 64
 416:	74 df       	rcall	.-280    	; 0x300 <LcdCommand>
 418:	e8 01       	movw	r28, r16
 41a:	08 5f       	subi	r16, 0xF8	; 248
 41c:	1f 4f       	sbci	r17, 0xFF	; 255
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
	LcdPutchar(font[i]);
 41e:	89 91       	ld	r24, Y+
 420:	b7 df       	rcall	.-146    	; 0x390 <LcdPutchar>
	ch |= 0x40;		//비트6 세트 -> CGRAM 주소설정
	
	LcdCommand(ch);	//CGRAM  주소설정 -> LcdPutchar()로
	//쓰는 문자는 CGRAM에 저장
	
	for(i=0; i<8; i++)	//글꼴을 CGRAM에 저장
 422:	c0 17       	cp	r28, r16
 424:	d1 07       	cpc	r29, r17
 426:	d9 f7       	brne	.-10     	; 0x41e <LcdNewchar+0x1c>
	LcdPutchar(font[i]);
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	08 95       	ret

00000432 <msec_delay>:
}


void msec_delay(int n)
{
	for(; n>0; n--)		//1msec 시간지연 n회	반복
 432:	18 16       	cp	r1, r24
 434:	19 06       	cpc	r1, r25
 436:	44 f4       	brge	.+16     	; 0x448 <msec_delay+0x16>
 438:	ef e9       	ldi	r30, 0x9F	; 159
 43a:	ff e0       	ldi	r31, 0x0F	; 15
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <msec_delay+0xa>
 440:	00 c0       	rjmp	.+0      	; 0x442 <msec_delay+0x10>
 442:	00 00       	nop
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	c1 f7       	brne	.-16     	; 0x438 <msec_delay+0x6>
 448:	08 95       	ret

0000044a <ClockCounterInit>:
// Clock Counter interrupt 으로 계산된 초
static int ClockCounter_SECOND = 0; 
static int ClockCounter_M_SECOND = 0; 

void ClockCounterInit(void) {
	TCCR2 |= (1<<WGM01);	//CTC mode
 44a:	85 b5       	in	r24, 0x25	; 37
 44c:	88 60       	ori	r24, 0x08	; 8
 44e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 100;				//50usec
 450:	84 e6       	ldi	r24, 0x64	; 100
 452:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<OCIE2);
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	87 bf       	out	0x37, r24	; 55
 458:	08 95       	ret

0000045a <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
	ClockCounter_CNT++;
 474:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <ClockCounter_CNT>
 478:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <ClockCounter_CNT+0x1>
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <ClockCounter_CNT+0x1>
 482:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <ClockCounter_CNT>
	
	if(ClockCounter_CNT == 20000){	// 5usec X 20000 = 1sec
 486:	80 32       	cpi	r24, 0x20	; 32
 488:	2e e4       	ldi	r18, 0x4E	; 78
 48a:	92 07       	cpc	r25, r18
 48c:	71 f4       	brne	.+28     	; 0x4aa <__vector_9+0x50>
		ClockCounter_CNT=0;
 48e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <ClockCounter_CNT+0x1>
 492:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <ClockCounter_CNT>
		ClockCounter_SECOND++;
 496:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <ClockCounter_SECOND>
 49a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <ClockCounter_SECOND+0x1>
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <ClockCounter_SECOND+0x1>
 4a4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <ClockCounter_SECOND>
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__vector_9+0x6c>
	}
	if(ClockCounter_CNT % 2000) {
 4aa:	60 ed       	ldi	r22, 0xD0	; 208
 4ac:	77 e0       	ldi	r23, 0x07	; 7
 4ae:	4c d3       	rcall	.+1688   	; 0xb48 <__divmodhi4>
 4b0:	89 2b       	or	r24, r25
 4b2:	49 f0       	breq	.+18     	; 0x4c6 <__vector_9+0x6c>
		ClockCounter_M_SECOND++;
 4b4:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <ClockCounter_M_SECOND>
 4b8:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ClockCounter_M_SECOND+0x1>
 4c2:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ClockCounter_M_SECOND>
	}
}
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <startTermProject>:


//============================================================================
//======박가경's Watch===flash x 3==============================================
//============================================================================
char* startTermProject() {
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	68 97       	sbiw	r28, 0x18	; 24
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
	char *initTitle = malloc(sizeof(char) * 20);
 4f8:	84 e1       	ldi	r24, 0x14	; 20
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	41 d3       	rcall	.+1666   	; 0xb80 <malloc>
 4fe:	8c 01       	movw	r16, r24
	
	char font1[8] = {0x02, 0x1A, 0x1F, 0x1E, 0x02, 0x1C, 0x04, 0x04};	// 박
 500:	88 e0       	ldi	r24, 0x08	; 8
 502:	ef e5       	ldi	r30, 0x5F	; 95
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	de 01       	movw	r26, r28
 508:	11 96       	adiw	r26, 0x01	; 1
 50a:	01 90       	ld	r0, Z+
 50c:	0d 92       	st	X+, r0
 50e:	8a 95       	dec	r24
 510:	e1 f7       	brne	.-8      	; 0x50a <startTermProject+0x2a>
	char font2[8] = {0x02, 0x02, 0x1A, 0x0B, 0x0A, 0x0A, 0x02, 0x00};	// 가
 512:	88 e0       	ldi	r24, 0x08	; 8
 514:	e7 e6       	ldi	r30, 0x67	; 103
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	de 01       	movw	r26, r28
 51a:	19 96       	adiw	r26, 0x09	; 9
 51c:	01 90       	ld	r0, Z+
 51e:	0d 92       	st	X+, r0
 520:	8a 95       	dec	r24
 522:	e1 f7       	brne	.-8      	; 0x51c <startTermProject+0x3c>
	char font3[8] = {0x02, 0x1E, 0x0A, 0x0E, 0x08, 0x0C, 0x12, 0x0C};	// 경
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	ef e6       	ldi	r30, 0x6F	; 111
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	de 01       	movw	r26, r28
 52c:	51 96       	adiw	r26, 0x11	; 17
 52e:	01 90       	ld	r0, Z+
 530:	0d 92       	st	X+, r0
 532:	8a 95       	dec	r24
 534:	e1 f7       	brne	.-8      	; 0x52e <startTermProject+0x4e>
	
	LcdNewchar(1, font1);
 536:	be 01       	movw	r22, r28
 538:	6f 5f       	subi	r22, 0xFF	; 255
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	61 df       	rcall	.-318    	; 0x402 <LcdNewchar>
	LcdNewchar(2, font2);
 540:	be 01       	movw	r22, r28
 542:	67 5f       	subi	r22, 0xF7	; 247
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	5c df       	rcall	.-328    	; 0x402 <LcdNewchar>
	LcdNewchar(3, font3);
 54a:	be 01       	movw	r22, r28
 54c:	6f 5e       	subi	r22, 0xEF	; 239
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	83 e0       	ldi	r24, 0x03	; 3
 552:	57 df       	rcall	.-338    	; 0x402 <LcdNewchar>

	initTitle[0] = 1;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	f8 01       	movw	r30, r16
 558:	80 83       	st	Z, r24
	initTitle[1] = 2;
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	81 83       	std	Z+1, r24	; 0x01
	initTitle[2] = 3;
 55e:	83 e0       	ldi	r24, 0x03	; 3
 560:	82 83       	std	Z+2, r24	; 0x02
	initTitle[3] = '\'';
 562:	87 e2       	ldi	r24, 0x27	; 39
 564:	83 83       	std	Z+3, r24	; 0x03
	initTitle[4] = 's';
 566:	83 e7       	ldi	r24, 0x73	; 115
 568:	84 83       	std	Z+4, r24	; 0x04
	initTitle[5] = ' ';
 56a:	80 e2       	ldi	r24, 0x20	; 32
 56c:	85 83       	std	Z+5, r24	; 0x05
	initTitle[6] = 'W';
 56e:	87 e5       	ldi	r24, 0x57	; 87
 570:	86 83       	std	Z+6, r24	; 0x06
	initTitle[7] = 'a';
 572:	81 e6       	ldi	r24, 0x61	; 97
 574:	87 83       	std	Z+7, r24	; 0x07
	initTitle[8] = 't';
 576:	84 e7       	ldi	r24, 0x74	; 116
 578:	80 87       	std	Z+8, r24	; 0x08
	initTitle[9] = 'c';
 57a:	83 e6       	ldi	r24, 0x63	; 99
 57c:	81 87       	std	Z+9, r24	; 0x09
	initTitle[10] = 'h';
 57e:	88 e6       	ldi	r24, 0x68	; 104
	initTitle[11] = '\0';
 580:	82 87       	std	Z+10, r24	; 0x0a
	
	LcdMove(0,0);			// cursor go to home
 582:	13 86       	std	Z+11, r1	; 0x0b
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	80 e0       	ldi	r24, 0x00	; 0
	LcdPuts(initTitle);		// 박가경's Watch
 588:	34 df       	rcall	.-408    	; 0x3f2 <LcdMove>
 58a:	c8 01       	movw	r24, r16
 58c:	24 df       	rcall	.-440    	; 0x3d6 <LcdPuts>
	
	for(int i=0; i<3; i++)		// flash x 3
	{
		LcdCommand(DISP_ON);		// 점
 58e:	03 e0       	ldi	r16, 0x03	; 3
 590:	10 e0       	ldi	r17, 0x00	; 0
		msec_delay(500);			// 0.5s delay
 592:	8c e0       	ldi	r24, 0x0C	; 12
 594:	b5 de       	rcall	.-662    	; 0x300 <LcdCommand>
 596:	84 ef       	ldi	r24, 0xF4	; 244
		LcdCommand(DISP_OFF);		// 멸
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	4b df       	rcall	.-362    	; 0x432 <msec_delay>
		msec_delay(500);			// 0.5s delay
 59c:	88 e0       	ldi	r24, 0x08	; 8
 59e:	b0 de       	rcall	.-672    	; 0x300 <LcdCommand>
 5a0:	84 ef       	ldi	r24, 0xF4	; 244
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	46 df       	rcall	.-372    	; 0x432 <msec_delay>
 5a6:	01 50       	subi	r16, 0x01	; 1
	initTitle[11] = '\0';
	
	LcdMove(0,0);			// cursor go to home
	LcdPuts(initTitle);		// 박가경's Watch
	
	for(int i=0; i<3; i++)		// flash x 3
 5a8:	11 09       	sbc	r17, r1
		LcdCommand(DISP_ON);		// 점
		msec_delay(500);			// 0.5s delay
		LcdCommand(DISP_OFF);		// 멸
		msec_delay(500);			// 0.5s delay
	}
	LcdInit();
 5aa:	99 f7       	brne	.-26     	; 0x592 <startTermProject+0xb2>
 5ac:	cc de       	rcall	.-616    	; 0x346 <LcdInit>
}
 5ae:	68 96       	adiw	r28, 0x18	; 24
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	f8 94       	cli
 5b4:	de bf       	out	0x3e, r29	; 62
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	cd bf       	out	0x3d, r28	; 61
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	08 95       	ret

000005c4 <main>:

// 현재 메뉴 코드
static int status = 0;

int main(void) {
	LcdInit();
 5c4:	c0 de       	rcall	.-640    	; 0x346 <LcdInit>
	KeyInit();
 5c6:	56 de       	rcall	.-852    	; 0x274 <KeyInit>
	ClockCounterInit();
 5c8:	40 df       	rcall	.-384    	; 0x44a <ClockCounterInit>
	
	startTermProject();
 5ca:	8a df       	rcall	.-236    	; 0x4e0 <startTermProject>
 5cc:	eb d1       	rcall	.+982    	; 0x9a4 <initMenu>
	initMenu();
 5ce:	78 94       	sei
 5d0:	85 b5       	in	r24, 0x25	; 37
		
	// 전역 인터럽트 허용
	sei();						
 5d2:	82 60       	ori	r24, 0x02	; 2
	TCCR2 |= 1<<CS21;
 5d4:	85 bd       	out	0x25, r24	; 37
 5d6:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <ClockCounter_SECOND>
	// 전역 인터럽트 허용 끝
		
	
	while(1){
		// 계속해서 클락 세팅
		setClock(ClockCounter_SECOND);
 5da:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <ClockCounter_SECOND+0x1>
 5de:	2b d0       	rcall	.+86     	; 0x636 <setClock>
 5e0:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <ClockCounter_SECOND+0x1>
		ClockCounter_SECOND = 0;
 5e4:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <ClockCounter_SECOND>
 5e8:	4c de       	rcall	.-872    	; 0x282 <KeyInput>
		// keypad input
		keyInput = KeyInput();
 5ea:	e9 d1       	rcall	.+978    	; 0x9be <setMenu>
 5ec:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <status+0x1>
		
		// 뭘 누르느냐에 따라 실행되는게 다름
		status = setMenu(keyInput);	
 5f0:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <status>
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	49 f4       	brne	.+18     	; 0x60a <main+0x46>

		//==========================================================
		//1. SET 에 해당됨
		while(status==1) {								
 5f8:	85 eb       	ldi	r24, 0xB5	; 181
 5fa:	91 e0       	ldi	r25, 0x01	; 1
			//시간에 넣어줄 배열만들고 셋팅 >> (0,0)(0,4)(0,5)
			status = setCustomClock(&ClockCounter_SECOND);	// Time setting(main.c 파일 안에 있음)	
 5fc:	8e d0       	rcall	.+284    	; 0x71a <setCustomClock>
 5fe:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <status+0x1>
 602:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <status>
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	b9 f3       	breq	.-18     	; 0x5f8 <main+0x34>
 60a:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <status>
		
		
		
		//=========================================================
		//status =2
		while(status==2){
 60e:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <status+0x1>
 612:	02 97       	sbiw	r24, 0x02	; 2
 614:	01 f7       	brne	.-64     	; 0x5d6 <main+0x12>
			LcdCommand(HOME);
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	73 de       	rcall	.-794    	; 0x300 <LcdCommand>
 61a:	88 e8       	ldi	r24, 0x88	; 136
			LcdPuts("0m 00.0s     ");
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	db de       	rcall	.-586    	; 0x3d6 <LcdPuts>
 620:	8e e0       	ldi	r24, 0x0E	; 14
 622:	6e de       	rcall	.-804    	; 0x300 <LcdCommand>

			LcdCommand(CURSOR_ON);
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	6c de       	rcall	.-808    	; 0x300 <LcdCommand>
 628:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <status>
			LcdCommand(HOME);
 62c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <status+0x1>
		
		
		
		//=========================================================
		//status =2
		while(status==2){
 630:	02 97       	sbiw	r24, 0x02	; 2
 632:	89 f3       	breq	.-30     	; 0x616 <main+0x52>
 634:	d0 cf       	rjmp	.-96     	; 0x5d6 <main+0x12>

00000636 <setClock>:
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <second>
static int minute = 0;
static int hour = 0;


void setClock(int interruptSecond) {
	second += interruptSecond;
 63e:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <second+0x1>
 642:	82 0f       	add	r24, r18
 644:	93 1f       	adc	r25, r19
	minute += second/60; 
 646:	2c e3       	ldi	r18, 0x3C	; 60
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	b9 01       	movw	r22, r18
 64c:	7d d2       	rcall	.+1274   	; 0xb48 <__divmodhi4>
 64e:	fc 01       	movw	r30, r24
 650:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
 654:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
 658:	86 0f       	add	r24, r22
 65a:	97 1f       	adc	r25, r23
	hour += minute/60;
 65c:	b9 01       	movw	r22, r18
 65e:	74 d2       	rcall	.+1256   	; 0xb48 <__divmodhi4>
 660:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <hour>
 664:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <hour+0x1>
 668:	62 0f       	add	r22, r18
 66a:	73 1f       	adc	r23, r19
	
	// 24, 60 안넘기기 위해 값 변경
	second = second%60;
 66c:	f0 93 be 01 	sts	0x01BE, r31	; 0x8001be <second+0x1>
 670:	e0 93 bd 01 	sts	0x01BD, r30	; 0x8001bd <second>
	minute = minute%60;
 674:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <minute+0x1>
 678:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <minute>
	hour = hour%24;
 67c:	cb 01       	movw	r24, r22
 67e:	68 e1       	ldi	r22, 0x18	; 24
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	62 d2       	rcall	.+1220   	; 0xb48 <__divmodhi4>
 684:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <hour+0x1>
 688:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <hour>
	
	LcdMove(0,0);
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	b0 de       	rcall	.-672    	; 0x3f2 <LcdMove>
 692:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <hour>
	LcdPutchar((hour/10%10) + '0');
 696:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <hour+0x1>
 69a:	ca e0       	ldi	r28, 0x0A	; 10
 69c:	d0 e0       	ldi	r29, 0x00	; 0
 69e:	be 01       	movw	r22, r28
 6a0:	53 d2       	rcall	.+1190   	; 0xb48 <__divmodhi4>
 6a2:	cb 01       	movw	r24, r22
 6a4:	be 01       	movw	r22, r28
 6a6:	50 d2       	rcall	.+1184   	; 0xb48 <__divmodhi4>
 6a8:	80 5d       	subi	r24, 0xD0	; 208
 6aa:	72 de       	rcall	.-796    	; 0x390 <LcdPutchar>
 6ac:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <hour>
	LcdPutchar(hour%10 + '0');
 6b0:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <hour+0x1>
 6b4:	be 01       	movw	r22, r28
 6b6:	48 d2       	rcall	.+1168   	; 0xb48 <__divmodhi4>
 6b8:	80 5d       	subi	r24, 0xD0	; 208
 6ba:	6a de       	rcall	.-812    	; 0x390 <LcdPutchar>
 6bc:	64 e0       	ldi	r22, 0x04	; 4
	
	LcdMove(0,4);
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	98 de       	rcall	.-720    	; 0x3f2 <LcdMove>
 6c2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
	LcdPutchar((minute/10%10) + '0');
 6c6:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
 6ca:	be 01       	movw	r22, r28
 6cc:	3d d2       	rcall	.+1146   	; 0xb48 <__divmodhi4>
 6ce:	cb 01       	movw	r24, r22
 6d0:	be 01       	movw	r22, r28
 6d2:	3a d2       	rcall	.+1140   	; 0xb48 <__divmodhi4>
 6d4:	80 5d       	subi	r24, 0xD0	; 208
 6d6:	5c de       	rcall	.-840    	; 0x390 <LcdPutchar>
 6d8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <minute>
	LcdPutchar(minute%10 + '0');
 6dc:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <minute+0x1>
 6e0:	be 01       	movw	r22, r28
 6e2:	32 d2       	rcall	.+1124   	; 0xb48 <__divmodhi4>
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	54 de       	rcall	.-856    	; 0x390 <LcdPutchar>
 6e8:	68 e0       	ldi	r22, 0x08	; 8
	
	LcdMove(0,8);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	82 de       	rcall	.-764    	; 0x3f2 <LcdMove>
 6ee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <second>
	LcdPutchar((second/10%10) + '0');
 6f2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <second+0x1>
 6f6:	be 01       	movw	r22, r28
 6f8:	27 d2       	rcall	.+1102   	; 0xb48 <__divmodhi4>
 6fa:	cb 01       	movw	r24, r22
 6fc:	be 01       	movw	r22, r28
 6fe:	24 d2       	rcall	.+1096   	; 0xb48 <__divmodhi4>
 700:	80 5d       	subi	r24, 0xD0	; 208
 702:	46 de       	rcall	.-884    	; 0x390 <LcdPutchar>
 704:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <second>
 708:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <second+0x1>
	LcdPutchar(second%10 + '0');
 70c:	be 01       	movw	r22, r28
 70e:	1c d2       	rcall	.+1080   	; 0xb48 <__divmodhi4>
 710:	80 5d       	subi	r24, 0xD0	; 208
 712:	3e de       	rcall	.-900    	; 0x390 <LcdPutchar>
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <setCustomClock>:
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
}
 71e:	cf 93       	push	r28
 720:	8c 01       	movw	r16, r24
 722:	af dd       	rcall	.-1186   	; 0x282 <KeyInput>
// 사용자에게 입력 받아 시계 세팅
int setCustomClock(int* ClockCounter_SECOND) {
	int returnStatus = -1;
	unsigned char keyInput = NO_KEY;	//키가 눌리지 않으면
	// 키를 입력받는 변수
	keyInput = KeyInput();
 724:	c8 2f       	mov	r28, r24
	
	LcdMove(1,timerSettingIndex);
 726:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <timerSettingIndex>
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	62 de       	rcall	.-828    	; 0x3f2 <LcdMove>
	while(1) {
		if(customTimeSetInitFlag == 0){
 72e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <customTimeSetInitFlag>
 732:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <customTimeSetInitFlag+0x1>
 736:	89 2b       	or	r24, r25
 738:	79 f4       	brne	.+30     	; 0x758 <setCustomClock+0x3e>
			LcdMove(1,0);
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	59 de       	rcall	.-846    	; 0x3f2 <LcdMove>
			LcdPuts("______");
 740:	86 e9       	ldi	r24, 0x96	; 150
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	48 de       	rcall	.-880    	; 0x3d6 <LcdPuts>
			LcdMove(1,0);
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	53 de       	rcall	.-858    	; 0x3f2 <LcdMove>
 74c:	81 e0       	ldi	r24, 0x01	; 1
			customTimeSetInitFlag = 1;
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <customTimeSetInitFlag+0x1>
 754:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <customTimeSetInitFlag>
		}
		
		if(keyInput == NO_KEY){
 758:	c1 11       	cpse	r28, r1
			LcdCommand(DISP_OFF);
 75a:	0d c0       	rjmp	.+26     	; 0x776 <setCustomClock+0x5c>
 75c:	88 e0       	ldi	r24, 0x08	; 8
			msec_delay(500);
 75e:	d0 dd       	rcall	.-1120   	; 0x300 <LcdCommand>
 760:	84 ef       	ldi	r24, 0xF4	; 244
 762:	91 e0       	ldi	r25, 0x01	; 1
			LcdCommand(DISP_ON);
 764:	66 de       	rcall	.-820    	; 0x432 <msec_delay>
 766:	8c e0       	ldi	r24, 0x0C	; 12
 768:	cb dd       	rcall	.-1130   	; 0x300 <LcdCommand>
			msec_delay(500);
 76a:	84 ef       	ldi	r24, 0xF4	; 244
 76c:	91 e0       	ldi	r25, 0x01	; 1
 76e:	61 de       	rcall	.-830    	; 0x432 <msec_delay>
 770:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	13 c1       	rjmp	.+550    	; 0x99c <setCustomClock+0x282>
 776:	8c 2f       	mov	r24, r28
		}
		
		switch(keyInput) {
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	fc 01       	movw	r30, r24
 77c:	71 97       	sbiw	r30, 0x11	; 17
 77e:	e4 37       	cpi	r30, 0x74	; 116
 780:	f1 05       	cpc	r31, r1
 782:	08 f0       	brcs	.+2      	; 0x786 <setCustomClock+0x6c>
 784:	fd c0       	rjmp	.+506    	; 0x980 <setCustomClock+0x266>
 786:	ea 5b       	subi	r30, 0xBA	; 186
 788:	ff 4f       	sbci	r31, 0xFF	; 255
 78a:	f1 c1       	rjmp	.+994    	; 0xb6e <__tablejump2__>
			case SW0:
				LcdPutchar('1');
 78c:	81 e3       	ldi	r24, 0x31	; 49
 78e:	00 de       	rcall	.-1024   	; 0x390 <LcdPutchar>
 790:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
				customTimer[timerSettingIndex] = 1;
 794:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 798:	ee 0f       	add	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	ef 53       	subi	r30, 0x3F	; 63
 79e:	fe 4f       	sbci	r31, 0xFE	; 254
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	91 83       	std	Z+1, r25	; 0x01
 7a6:	80 83       	st	Z, r24
				break;
 7a8:	ee c0       	rjmp	.+476    	; 0x986 <setCustomClock+0x26c>
				
			case SW1:				//위와 같음
				LcdPutchar('2');
 7aa:	82 e3       	ldi	r24, 0x32	; 50
 7ac:	f1 dd       	rcall	.-1054   	; 0x390 <LcdPutchar>
 7ae:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
				customTimer[timerSettingIndex] = 2;
 7b2:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	ef 53       	subi	r30, 0x3F	; 63
 7bc:	fe 4f       	sbci	r31, 0xFE	; 254
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	91 83       	std	Z+1, r25	; 0x01
 7c4:	80 83       	st	Z, r24
				break;
 7c6:	df c0       	rjmp	.+446    	; 0x986 <setCustomClock+0x26c>
			
			case SW2:
				LcdPutchar('3');
 7c8:	83 e3       	ldi	r24, 0x33	; 51
 7ca:	e2 dd       	rcall	.-1084   	; 0x390 <LcdPutchar>
 7cc:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
				customTimer[timerSettingIndex] = 3;
 7d0:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 7d4:	ee 0f       	add	r30, r30
 7d6:	ff 1f       	adc	r31, r31
 7d8:	ef 53       	subi	r30, 0x3F	; 63
 7da:	fe 4f       	sbci	r31, 0xFE	; 254
 7dc:	83 e0       	ldi	r24, 0x03	; 3
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	91 83       	std	Z+1, r25	; 0x01
 7e2:	80 83       	st	Z, r24
				break;
 7e4:	d0 c0       	rjmp	.+416    	; 0x986 <setCustomClock+0x26c>
			
			case SW4:
				LcdPutchar('4');
 7e6:	84 e3       	ldi	r24, 0x34	; 52
 7e8:	d3 dd       	rcall	.-1114   	; 0x390 <LcdPutchar>
 7ea:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
				customTimer[timerSettingIndex] = 4;
 7ee:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 7f2:	ee 0f       	add	r30, r30
 7f4:	ff 1f       	adc	r31, r31
 7f6:	ef 53       	subi	r30, 0x3F	; 63
 7f8:	fe 4f       	sbci	r31, 0xFE	; 254
 7fa:	84 e0       	ldi	r24, 0x04	; 4
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	91 83       	std	Z+1, r25	; 0x01
 800:	80 83       	st	Z, r24
				break;
 802:	c1 c0       	rjmp	.+386    	; 0x986 <setCustomClock+0x26c>
			
			case SW5:
				LcdPutchar('5');
 804:	85 e3       	ldi	r24, 0x35	; 53
 806:	c4 dd       	rcall	.-1144   	; 0x390 <LcdPutchar>
				customTimer[timerSettingIndex] = 5;
 808:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
 80c:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 810:	ee 0f       	add	r30, r30
 812:	ff 1f       	adc	r31, r31
 814:	ef 53       	subi	r30, 0x3F	; 63
 816:	fe 4f       	sbci	r31, 0xFE	; 254
 818:	85 e0       	ldi	r24, 0x05	; 5
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	91 83       	std	Z+1, r25	; 0x01
 81e:	80 83       	st	Z, r24
				break;
 820:	b2 c0       	rjmp	.+356    	; 0x986 <setCustomClock+0x26c>
			
			case SW6:
				LcdPutchar('6');
 822:	86 e3       	ldi	r24, 0x36	; 54
 824:	b5 dd       	rcall	.-1174   	; 0x390 <LcdPutchar>
				customTimer[timerSettingIndex] = 6;
 826:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
 82a:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	ef 53       	subi	r30, 0x3F	; 63
 834:	fe 4f       	sbci	r31, 0xFE	; 254
 836:	86 e0       	ldi	r24, 0x06	; 6
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	91 83       	std	Z+1, r25	; 0x01
 83c:	80 83       	st	Z, r24
				break;
 83e:	a3 c0       	rjmp	.+326    	; 0x986 <setCustomClock+0x26c>
			
			case SW8:
				LcdPutchar('7');
 840:	87 e3       	ldi	r24, 0x37	; 55
 842:	a6 dd       	rcall	.-1204   	; 0x390 <LcdPutchar>
				customTimer[timerSettingIndex] = 7;
 844:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
 848:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	ef 53       	subi	r30, 0x3F	; 63
 852:	fe 4f       	sbci	r31, 0xFE	; 254
 854:	87 e0       	ldi	r24, 0x07	; 7
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	91 83       	std	Z+1, r25	; 0x01
 85a:	80 83       	st	Z, r24
				break;
			
			case SW9:
				LcdPutchar('8');
 85c:	94 c0       	rjmp	.+296    	; 0x986 <setCustomClock+0x26c>
 85e:	88 e3       	ldi	r24, 0x38	; 56
 860:	97 dd       	rcall	.-1234   	; 0x390 <LcdPutchar>
				customTimer[timerSettingIndex] = 8;
 862:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
 866:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 86a:	ee 0f       	add	r30, r30
 86c:	ff 1f       	adc	r31, r31
 86e:	ef 53       	subi	r30, 0x3F	; 63
 870:	fe 4f       	sbci	r31, 0xFE	; 254
 872:	88 e0       	ldi	r24, 0x08	; 8
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	91 83       	std	Z+1, r25	; 0x01
				break;
 878:	80 83       	st	Z, r24
			
			case SW10:
				LcdPutchar('9');
 87a:	85 c0       	rjmp	.+266    	; 0x986 <setCustomClock+0x26c>
 87c:	89 e3       	ldi	r24, 0x39	; 57
 87e:	88 dd       	rcall	.-1264   	; 0x390 <LcdPutchar>
				customTimer[timerSettingIndex] = 9;
 880:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
 884:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	ef 53       	subi	r30, 0x3F	; 63
 88e:	fe 4f       	sbci	r31, 0xFE	; 254
 890:	89 e0       	ldi	r24, 0x09	; 9
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	91 83       	std	Z+1, r25	; 0x01
				break;
			
			case SW13:
				LcdPutchar('0');
 896:	80 83       	st	Z, r24
 898:	76 c0       	rjmp	.+236    	; 0x986 <setCustomClock+0x26c>
 89a:	80 e3       	ldi	r24, 0x30	; 48
				customTimer[timerSettingIndex] = 0;
 89c:	79 dd       	rcall	.-1294   	; 0x390 <LcdPutchar>
 89e:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <timerSettingIndex>
 8a2:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 8a6:	ee 0f       	add	r30, r30
 8a8:	ff 1f       	adc	r31, r31
 8aa:	ef 53       	subi	r30, 0x3F	; 63
 8ac:	fe 4f       	sbci	r31, 0xFE	; 254
 8ae:	11 82       	std	Z+1, r1	; 0x01
				break;
 8b0:	10 82       	st	Z, r1
			
			case SW11:				
				LcdMove(1,0);
 8b2:	69 c0       	rjmp	.+210    	; 0x986 <setCustomClock+0x26c>
 8b4:	60 e0       	ldi	r22, 0x00	; 0
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	9c dd       	rcall	.-1224   	; 0x3f2 <LcdMove>
				LcdPuts("1. SET          ");				
 8ba:	8d e9       	ldi	r24, 0x9D	; 157
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	8b dd       	rcall	.-1258   	; 0x3d6 <LcdPuts>
 8c0:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <timerSettingIndex+0x1>
			timerSettingIndex++;
			returnStatus = 1;
		}
		// 6자리 입력 후 확인이 눌린 경우
		else if(returnStatus == 0) {
			timerSettingIndex = 0;
 8c4:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <timerSettingIndex>
 8c8:	f8 01       	movw	r30, r16
			//클럭 카운터로 증가한 초 초기화
			*ClockCounter_SECOND = 0;
 8ca:	11 82       	std	Z+1, r1	; 0x01
 8cc:	10 82       	st	Z, r1
 8ce:	e1 ec       	ldi	r30, 0xC1	; 193
			// 입력받은 시간 초로 변경 후 현재 시계로 초기화 
			hour = customTimer[0] * 10 + customTimer[1];
 8d0:	f1 e0       	ldi	r31, 0x01	; 1
 8d2:	80 81       	ld	r24, Z
 8d4:	91 81       	ldd	r25, Z+1	; 0x01
 8d6:	9c 01       	movw	r18, r24
 8d8:	22 0f       	add	r18, r18
 8da:	33 1f       	adc	r19, r19
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	88 0f       	add	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	82 0f       	add	r24, r18
 8ea:	93 1f       	adc	r25, r19
 8ec:	22 81       	ldd	r18, Z+2	; 0x02
 8ee:	33 81       	ldd	r19, Z+3	; 0x03
 8f0:	82 0f       	add	r24, r18
 8f2:	93 1f       	adc	r25, r19
 8f4:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <hour+0x1>
 8f8:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <hour>
 8fc:	84 81       	ldd	r24, Z+4	; 0x04
			minute = customTimer[2] * 10 + customTimer[3];
 8fe:	95 81       	ldd	r25, Z+5	; 0x05
 900:	9c 01       	movw	r18, r24
 902:	22 0f       	add	r18, r18
 904:	33 1f       	adc	r19, r19
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	88 0f       	add	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	82 0f       	add	r24, r18
 914:	93 1f       	adc	r25, r19
 916:	26 81       	ldd	r18, Z+6	; 0x06
 918:	37 81       	ldd	r19, Z+7	; 0x07
 91a:	82 0f       	add	r24, r18
 91c:	93 1f       	adc	r25, r19
 91e:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <minute+0x1>
 922:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <minute>
 926:	80 85       	ldd	r24, Z+8	; 0x08
			second = customTimer[4] * 10 + customTimer[5];
 928:	91 85       	ldd	r25, Z+9	; 0x09
 92a:	9c 01       	movw	r18, r24
 92c:	22 0f       	add	r18, r18
 92e:	33 1f       	adc	r19, r19
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	82 0f       	add	r24, r18
 93e:	93 1f       	adc	r25, r19
 940:	22 85       	ldd	r18, Z+10	; 0x0a
 942:	33 85       	ldd	r19, Z+11	; 0x0b
 944:	82 0f       	add	r24, r18
 946:	93 1f       	adc	r25, r19
 948:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <second+0x1>
 94c:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <second>
			customTimeSetInitFlag = 0;
 950:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <customTimeSetInitFlag+0x1>
 954:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <customTimeSetInitFlag>
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	90 e0       	ldi	r25, 0x00	; 0
				returnStatus = 0;
				break;
				
			// 위로 키 입력되는 케이스
			case SW3:
				LcdMove(1, --timerSettingIndex);
 95c:	1f c0       	rjmp	.+62     	; 0x99c <setCustomClock+0x282>
 95e:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <timerSettingIndex>
 962:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 966:	61 50       	subi	r22, 0x01	; 1
 968:	71 09       	sbc	r23, r1
 96a:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <timerSettingIndex+0x1>
 96e:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <timerSettingIndex>
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	3e dd       	rcall	.-1412   	; 0x3f2 <LcdMove>
				LcdPutchar('_');
 976:	8f e5       	ldi	r24, 0x5F	; 95
 978:	0b dd       	rcall	.-1514   	; 0x390 <LcdPutchar>
 97a:	81 e0       	ldi	r24, 0x01	; 1
				returnStatus = 1;
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e c0       	rjmp	.+28     	; 0x99c <setCustomClock+0x282>
 980:	81 e0       	ldi	r24, 0x01	; 1
				break;
				
			default:
				returnStatus = 1;
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0b c0       	rjmp	.+22     	; 0x99c <setCustomClock+0x282>
 986:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <timerSettingIndex>
				break;
		}
		// index 처리 
		if(returnStatus == -1) {
			timerSettingIndex++;
 98a:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <timerSettingIndex+0x1>
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <timerSettingIndex+0x1>
 994:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <timerSettingIndex>
 998:	81 e0       	ldi	r24, 0x01	; 1
			returnStatus = 1;
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	cf 91       	pop	r28
			customTimeSetInitFlag = 0;
		}
		return returnStatus;
		
	}
}
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	08 95       	ret

000009a4 <initMenu>:
static char str1[] = "00h 00m 00s";
static int nowMenuCursor = 0;
static int nowStatus = 1;

void initMenu() {
	LcdMove(0,0);
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	24 dd       	rcall	.-1464   	; 0x3f2 <LcdMove>
	LcdPuts(str1);
 9aa:	8e e0       	ldi	r24, 0x0E	; 14
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	13 dd       	rcall	.-1498   	; 0x3d6 <LcdPuts>
	LcdMove(1,0);
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	1e dd       	rcall	.-1476   	; 0x3f2 <LcdMove>
	LcdPuts(Set);
 9b6:	8f e4       	ldi	r24, 0x4F	; 79
 9b8:	91 e0       	ldi	r25, 0x01	; 1
 9ba:	0d cd       	rjmp	.-1510   	; 0x3d6 <LcdPuts>
 9bc:	08 95       	ret

000009be <setMenu>:
 9be:	cf 93       	push	r28
}



// MENU 세팅용 함수
int setMenu(char clickedButton) {
 9c0:	df 93       	push	r29
 9c2:	c8 2f       	mov	r28, r24
	LcdMove(1,0);			// 2행으로
 9c4:	60 e0       	ldi	r22, 0x00	; 0
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	14 dd       	rcall	.-1496   	; 0x3f2 <LcdMove>
	switch(clickedButton) {
 9ca:	c1 32       	cpi	r28, 0x21	; 33
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <setMenu+0x12>
 9ce:	52 c0       	rjmp	.+164    	; 0xa74 <setMenu+0xb6>
 9d0:	c1 34       	cpi	r28, 0x41	; 65
 9d2:	09 f4       	brne	.+2      	; 0x9d6 <setMenu+0x18>
 9d4:	9a c0       	rjmp	.+308    	; 0xb0a <setMenu+0x14c>
 9d6:	c1 31       	cpi	r28, 0x11	; 17
 9d8:	09 f0       	breq	.+2      	; 0x9dc <setMenu+0x1e>
 9da:	9c c0       	rjmp	.+312    	; 0xb14 <setMenu+0x156>
		// up button clicked
		case SW3:
			if ( nowMenuCursor == 1) {
 9dc:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <nowMenuCursor>
 9e0:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <nowMenuCursor+0x1>
 9e4:	81 30       	cpi	r24, 0x01	; 1
 9e6:	91 05       	cpc	r25, r1
 9e8:	81 f4       	brne	.+32     	; 0xa0a <setMenu+0x4c>
				nowMenuCursor--;
 9ea:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <nowMenuCursor+0x1>
 9ee:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <nowMenuCursor>
				LcdPuts(Set);
 9f2:	8f e4       	ldi	r24, 0x4F	; 79
 9f4:	91 e0       	ldi	r25, 0x01	; 1
 9f6:	ef dc       	rcall	.-1570   	; 0x3d6 <LcdPuts>
				nowStatus = 1;
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 a00:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 a04:	c0 e0       	ldi	r28, 0x00	; 0
 a06:	d0 e0       	ldi	r29, 0x00	; 0
 a08:	87 c0       	rjmp	.+270    	; 0xb18 <setMenu+0x15a>
			if ( nowMenuCursor == 1) {
				nowMenuCursor--;
				LcdPuts(Set);
				nowStatus = 1;
			}
			else if ( nowMenuCursor == 2) {
 a0a:	82 30       	cpi	r24, 0x02	; 2
 a0c:	91 05       	cpc	r25, r1
 a0e:	91 f4       	brne	.+36     	; 0xa34 <setMenu+0x76>
				nowMenuCursor--;
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
 a18:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Timer);
 a1c:	8d e3       	ldi	r24, 0x3D	; 61
 a1e:	91 e0       	ldi	r25, 0x01	; 1
 a20:	da dc       	rcall	.-1612   	; 0x3d6 <LcdPuts>
				nowStatus = 2;
 a22:	82 e0       	ldi	r24, 0x02	; 2
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 a2a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 a2e:	c0 e0       	ldi	r28, 0x00	; 0
 a30:	d0 e0       	ldi	r29, 0x00	; 0
 a32:	72 c0       	rjmp	.+228    	; 0xb18 <setMenu+0x15a>
			else if ( nowMenuCursor == 2) {
				nowMenuCursor--;
				LcdPuts(Timer);
				nowStatus = 2;
			}
			else if ( nowMenuCursor == 3) {
 a34:	03 97       	sbiw	r24, 0x03	; 3
 a36:	91 f4       	brne	.+36     	; 0xa5c <setMenu+0x9e>
				nowMenuCursor--;
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
 a40:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(StopWatch);
 a44:	8d e2       	ldi	r24, 0x2D	; 45
 a46:	91 e0       	ldi	r25, 0x01	; 1
 a48:	c6 dc       	rcall	.-1652   	; 0x3d6 <LcdPuts>
				nowStatus = 3;
 a4a:	83 e0       	ldi	r24, 0x03	; 3
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 a52:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Set);
				nowStatus = 1;
			}
			return 0;
 a56:	c0 e0       	ldi	r28, 0x00	; 0
 a58:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor--;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else{
				LcdPuts(Set);
 a5a:	5e c0       	rjmp	.+188    	; 0xb18 <setMenu+0x15a>
 a5c:	8f e4       	ldi	r24, 0x4F	; 79
 a5e:	91 e0       	ldi	r25, 0x01	; 1
 a60:	ba dc       	rcall	.-1676   	; 0x3d6 <LcdPuts>
				nowStatus = 1;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 a6a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			return 0;
 a6e:	c0 e0       	ldi	r28, 0x00	; 0
 a70:	d0 e0       	ldi	r29, 0x00	; 0
 a72:	52 c0       	rjmp	.+164    	; 0xb18 <setMenu+0x15a>
			break;
		
		
		// down button clicked
		case SW7:
			if ( nowMenuCursor == 0) {
 a74:	c0 91 cf 01 	lds	r28, 0x01CF	; 0x8001cf <nowMenuCursor>
 a78:	d0 91 d0 01 	lds	r29, 0x01D0	; 0x8001d0 <nowMenuCursor+0x1>
 a7c:	20 97       	sbiw	r28, 0x00	; 0
 a7e:	81 f4       	brne	.+32     	; 0xaa0 <setMenu+0xe2>
				nowMenuCursor++;
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
 a88:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Timer);
 a8c:	8d e3       	ldi	r24, 0x3D	; 61
 a8e:	91 e0       	ldi	r25, 0x01	; 1
 a90:	a2 dc       	rcall	.-1724   	; 0x3d6 <LcdPuts>
				nowStatus = 2;
 a92:	82 e0       	ldi	r24, 0x02	; 2
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 a9a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
 a9e:	3c c0       	rjmp	.+120    	; 0xb18 <setMenu+0x15a>
			}
			else if ( nowMenuCursor == 1) {
 aa0:	c1 30       	cpi	r28, 0x01	; 1
 aa2:	d1 05       	cpc	r29, r1
 aa4:	91 f4       	brne	.+36     	; 0xaca <setMenu+0x10c>
				nowMenuCursor++;
 aa6:	82 e0       	ldi	r24, 0x02	; 2
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
 aae:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(StopWatch);
 ab2:	8d e2       	ldi	r24, 0x2D	; 45
 ab4:	91 e0       	ldi	r25, 0x01	; 1
 ab6:	8f dc       	rcall	.-1762   	; 0x3d6 <LcdPuts>
				nowStatus = 3;
 ab8:	83 e0       	ldi	r24, 0x03	; 3
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 ac0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
 ac4:	c0 e0       	ldi	r28, 0x00	; 0
 ac6:	d0 e0       	ldi	r29, 0x00	; 0
 ac8:	27 c0       	rjmp	.+78     	; 0xb18 <setMenu+0x15a>
			else if ( nowMenuCursor == 1) {
				nowMenuCursor++;
				LcdPuts(StopWatch);
				nowStatus = 3;
			}
			else if ( nowMenuCursor == 2) {
 aca:	22 97       	sbiw	r28, 0x02	; 2
 acc:	91 f4       	brne	.+36     	; 0xaf2 <setMenu+0x134>
				nowMenuCursor++;
 ace:	83 e0       	ldi	r24, 0x03	; 3
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <nowMenuCursor+0x1>
 ad6:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <nowMenuCursor>
				LcdPuts(Alarm);
 ada:	8a e1       	ldi	r24, 0x1A	; 26
 adc:	91 e0       	ldi	r25, 0x01	; 1
 ade:	7b dc       	rcall	.-1802   	; 0x3d6 <LcdPuts>
				nowStatus = 4;
 ae0:	84 e0       	ldi	r24, 0x04	; 4
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 ae8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			else{
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			return 0;
 aec:	c0 e0       	ldi	r28, 0x00	; 0
 aee:	d0 e0       	ldi	r29, 0x00	; 0
				nowMenuCursor++;
				LcdPuts(Alarm);
				nowStatus = 4;
			}
			else{
				LcdPuts(Alarm);
 af0:	13 c0       	rjmp	.+38     	; 0xb18 <setMenu+0x15a>
 af2:	8a e1       	ldi	r24, 0x1A	; 26
 af4:	91 e0       	ldi	r25, 0x01	; 1
 af6:	6f dc       	rcall	.-1826   	; 0x3d6 <LcdPuts>
				nowStatus = 4;
 af8:	84 e0       	ldi	r24, 0x04	; 4
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <nowStatus+0x1>
 b00:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <nowStatus>
			}
			return 0;
 b04:	c0 e0       	ldi	r28, 0x00	; 0
 b06:	d0 e0       	ldi	r29, 0x00	; 0
 b08:	07 c0       	rjmp	.+14     	; 0xb18 <setMenu+0x15a>
			break;
		
		
		// When select button clicked, 메인파일의 각 status에 해당하는 기능을 위한 while문을 돌림
		case SW11:
			return nowStatus;
 b0a:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <nowStatus>
 b0e:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <nowStatus+0x1>
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <setMenu+0x15a>
			break;
		
		default:
			return 0;
 b14:	c0 e0       	ldi	r28, 0x00	; 0
 b16:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
 b18:	ce 01       	movw	r24, r28
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	08 95       	ret

00000b20 <__udivmodhi4>:
 b20:	aa 1b       	sub	r26, r26
 b22:	bb 1b       	sub	r27, r27
 b24:	51 e1       	ldi	r21, 0x11	; 17
 b26:	07 c0       	rjmp	.+14     	; 0xb36 <__udivmodhi4_ep>

00000b28 <__udivmodhi4_loop>:
 b28:	aa 1f       	adc	r26, r26
 b2a:	bb 1f       	adc	r27, r27
 b2c:	a6 17       	cp	r26, r22
 b2e:	b7 07       	cpc	r27, r23
 b30:	10 f0       	brcs	.+4      	; 0xb36 <__udivmodhi4_ep>
 b32:	a6 1b       	sub	r26, r22
 b34:	b7 0b       	sbc	r27, r23

00000b36 <__udivmodhi4_ep>:
 b36:	88 1f       	adc	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	5a 95       	dec	r21
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <__udivmodhi4_loop>
 b3e:	80 95       	com	r24
 b40:	90 95       	com	r25
 b42:	bc 01       	movw	r22, r24
 b44:	cd 01       	movw	r24, r26
 b46:	08 95       	ret

00000b48 <__divmodhi4>:
 b48:	97 fb       	bst	r25, 7
 b4a:	07 2e       	mov	r0, r23
 b4c:	16 f4       	brtc	.+4      	; 0xb52 <__divmodhi4+0xa>
 b4e:	00 94       	com	r0
 b50:	06 d0       	rcall	.+12     	; 0xb5e <__divmodhi4_neg1>
 b52:	77 fd       	sbrc	r23, 7
 b54:	08 d0       	rcall	.+16     	; 0xb66 <__divmodhi4_neg2>
 b56:	e4 df       	rcall	.-56     	; 0xb20 <__udivmodhi4>
 b58:	07 fc       	sbrc	r0, 7
 b5a:	05 d0       	rcall	.+10     	; 0xb66 <__divmodhi4_neg2>
 b5c:	3e f4       	brtc	.+14     	; 0xb6c <__divmodhi4_exit>

00000b5e <__divmodhi4_neg1>:
 b5e:	90 95       	com	r25
 b60:	81 95       	neg	r24
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	08 95       	ret

00000b66 <__divmodhi4_neg2>:
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b6c <__divmodhi4_exit>:
 b6c:	08 95       	ret

00000b6e <__tablejump2__>:
 b6e:	ee 0f       	add	r30, r30
 b70:	ff 1f       	adc	r31, r31
 b72:	00 24       	eor	r0, r0
 b74:	00 1c       	adc	r0, r0
 b76:	0b be       	out	0x3b, r0	; 59
 b78:	07 90       	elpm	r0, Z+
 b7a:	f6 91       	elpm	r31, Z
 b7c:	e0 2d       	mov	r30, r0
 b7e:	09 94       	ijmp

00000b80 <malloc>:
 b80:	0f 93       	push	r16
 b82:	1f 93       	push	r17
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	82 30       	cpi	r24, 0x02	; 2
 b8a:	91 05       	cpc	r25, r1
 b8c:	10 f4       	brcc	.+4      	; 0xb92 <malloc+0x12>
 b8e:	82 e0       	ldi	r24, 0x02	; 2
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <__flp>
 b96:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <__flp+0x1>
 b9a:	20 e0       	ldi	r18, 0x00	; 0
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	a0 e0       	ldi	r26, 0x00	; 0
 ba0:	b0 e0       	ldi	r27, 0x00	; 0
 ba2:	30 97       	sbiw	r30, 0x00	; 0
 ba4:	19 f1       	breq	.+70     	; 0xbec <malloc+0x6c>
 ba6:	40 81       	ld	r20, Z
 ba8:	51 81       	ldd	r21, Z+1	; 0x01
 baa:	02 81       	ldd	r16, Z+2	; 0x02
 bac:	13 81       	ldd	r17, Z+3	; 0x03
 bae:	48 17       	cp	r20, r24
 bb0:	59 07       	cpc	r21, r25
 bb2:	c8 f0       	brcs	.+50     	; 0xbe6 <malloc+0x66>
 bb4:	84 17       	cp	r24, r20
 bb6:	95 07       	cpc	r25, r21
 bb8:	69 f4       	brne	.+26     	; 0xbd4 <malloc+0x54>
 bba:	10 97       	sbiw	r26, 0x00	; 0
 bbc:	31 f0       	breq	.+12     	; 0xbca <malloc+0x4a>
 bbe:	12 96       	adiw	r26, 0x02	; 2
 bc0:	0c 93       	st	X, r16
 bc2:	12 97       	sbiw	r26, 0x02	; 2
 bc4:	13 96       	adiw	r26, 0x03	; 3
 bc6:	1c 93       	st	X, r17
 bc8:	27 c0       	rjmp	.+78     	; 0xc18 <malloc+0x98>
 bca:	00 93 d3 01 	sts	0x01D3, r16	; 0x8001d3 <__flp>
 bce:	10 93 d4 01 	sts	0x01D4, r17	; 0x8001d4 <__flp+0x1>
 bd2:	22 c0       	rjmp	.+68     	; 0xc18 <malloc+0x98>
 bd4:	21 15       	cp	r18, r1
 bd6:	31 05       	cpc	r19, r1
 bd8:	19 f0       	breq	.+6      	; 0xbe0 <malloc+0x60>
 bda:	42 17       	cp	r20, r18
 bdc:	53 07       	cpc	r21, r19
 bde:	18 f4       	brcc	.+6      	; 0xbe6 <malloc+0x66>
 be0:	9a 01       	movw	r18, r20
 be2:	bd 01       	movw	r22, r26
 be4:	ef 01       	movw	r28, r30
 be6:	df 01       	movw	r26, r30
 be8:	f8 01       	movw	r30, r16
 bea:	db cf       	rjmp	.-74     	; 0xba2 <malloc+0x22>
 bec:	21 15       	cp	r18, r1
 bee:	31 05       	cpc	r19, r1
 bf0:	f9 f0       	breq	.+62     	; 0xc30 <malloc+0xb0>
 bf2:	28 1b       	sub	r18, r24
 bf4:	39 0b       	sbc	r19, r25
 bf6:	24 30       	cpi	r18, 0x04	; 4
 bf8:	31 05       	cpc	r19, r1
 bfa:	80 f4       	brcc	.+32     	; 0xc1c <malloc+0x9c>
 bfc:	8a 81       	ldd	r24, Y+2	; 0x02
 bfe:	9b 81       	ldd	r25, Y+3	; 0x03
 c00:	61 15       	cp	r22, r1
 c02:	71 05       	cpc	r23, r1
 c04:	21 f0       	breq	.+8      	; 0xc0e <malloc+0x8e>
 c06:	fb 01       	movw	r30, r22
 c08:	93 83       	std	Z+3, r25	; 0x03
 c0a:	82 83       	std	Z+2, r24	; 0x02
 c0c:	04 c0       	rjmp	.+8      	; 0xc16 <malloc+0x96>
 c0e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <__flp+0x1>
 c12:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <__flp>
 c16:	fe 01       	movw	r30, r28
 c18:	32 96       	adiw	r30, 0x02	; 2
 c1a:	44 c0       	rjmp	.+136    	; 0xca4 <malloc+0x124>
 c1c:	fe 01       	movw	r30, r28
 c1e:	e2 0f       	add	r30, r18
 c20:	f3 1f       	adc	r31, r19
 c22:	81 93       	st	Z+, r24
 c24:	91 93       	st	Z+, r25
 c26:	22 50       	subi	r18, 0x02	; 2
 c28:	31 09       	sbc	r19, r1
 c2a:	39 83       	std	Y+1, r19	; 0x01
 c2c:	28 83       	st	Y, r18
 c2e:	3a c0       	rjmp	.+116    	; 0xca4 <malloc+0x124>
 c30:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <__brkval>
 c34:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <__brkval+0x1>
 c38:	23 2b       	or	r18, r19
 c3a:	41 f4       	brne	.+16     	; 0xc4c <malloc+0xcc>
 c3c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c40:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c44:	30 93 d2 01 	sts	0x01D2, r19	; 0x8001d2 <__brkval+0x1>
 c48:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <__brkval>
 c4c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c50:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c54:	21 15       	cp	r18, r1
 c56:	31 05       	cpc	r19, r1
 c58:	41 f4       	brne	.+16     	; 0xc6a <malloc+0xea>
 c5a:	2d b7       	in	r18, 0x3d	; 61
 c5c:	3e b7       	in	r19, 0x3e	; 62
 c5e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c62:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c66:	24 1b       	sub	r18, r20
 c68:	35 0b       	sbc	r19, r21
 c6a:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <__brkval>
 c6e:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <__brkval+0x1>
 c72:	e2 17       	cp	r30, r18
 c74:	f3 07       	cpc	r31, r19
 c76:	a0 f4       	brcc	.+40     	; 0xca0 <malloc+0x120>
 c78:	2e 1b       	sub	r18, r30
 c7a:	3f 0b       	sbc	r19, r31
 c7c:	28 17       	cp	r18, r24
 c7e:	39 07       	cpc	r19, r25
 c80:	78 f0       	brcs	.+30     	; 0xca0 <malloc+0x120>
 c82:	ac 01       	movw	r20, r24
 c84:	4e 5f       	subi	r20, 0xFE	; 254
 c86:	5f 4f       	sbci	r21, 0xFF	; 255
 c88:	24 17       	cp	r18, r20
 c8a:	35 07       	cpc	r19, r21
 c8c:	48 f0       	brcs	.+18     	; 0xca0 <malloc+0x120>
 c8e:	4e 0f       	add	r20, r30
 c90:	5f 1f       	adc	r21, r31
 c92:	50 93 d2 01 	sts	0x01D2, r21	; 0x8001d2 <__brkval+0x1>
 c96:	40 93 d1 01 	sts	0x01D1, r20	; 0x8001d1 <__brkval>
 c9a:	81 93       	st	Z+, r24
 c9c:	91 93       	st	Z+, r25
 c9e:	02 c0       	rjmp	.+4      	; 0xca4 <malloc+0x124>
 ca0:	e0 e0       	ldi	r30, 0x00	; 0
 ca2:	f0 e0       	ldi	r31, 0x00	; 0
 ca4:	cf 01       	movw	r24, r30
 ca6:	df 91       	pop	r29
 ca8:	cf 91       	pop	r28
 caa:	1f 91       	pop	r17
 cac:	0f 91       	pop	r16
 cae:	08 95       	ret

00000cb0 <free>:
 cb0:	cf 93       	push	r28
 cb2:	df 93       	push	r29
 cb4:	00 97       	sbiw	r24, 0x00	; 0
 cb6:	09 f4       	brne	.+2      	; 0xcba <free+0xa>
 cb8:	81 c0       	rjmp	.+258    	; 0xdbc <free+0x10c>
 cba:	fc 01       	movw	r30, r24
 cbc:	32 97       	sbiw	r30, 0x02	; 2
 cbe:	13 82       	std	Z+3, r1	; 0x03
 cc0:	12 82       	std	Z+2, r1	; 0x02
 cc2:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <__flp>
 cc6:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <__flp+0x1>
 cca:	10 97       	sbiw	r26, 0x00	; 0
 ccc:	81 f4       	brne	.+32     	; 0xcee <free+0x3e>
 cce:	20 81       	ld	r18, Z
 cd0:	31 81       	ldd	r19, Z+1	; 0x01
 cd2:	82 0f       	add	r24, r18
 cd4:	93 1f       	adc	r25, r19
 cd6:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <__brkval>
 cda:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <__brkval+0x1>
 cde:	28 17       	cp	r18, r24
 ce0:	39 07       	cpc	r19, r25
 ce2:	51 f5       	brne	.+84     	; 0xd38 <free+0x88>
 ce4:	f0 93 d2 01 	sts	0x01D2, r31	; 0x8001d2 <__brkval+0x1>
 ce8:	e0 93 d1 01 	sts	0x01D1, r30	; 0x8001d1 <__brkval>
 cec:	67 c0       	rjmp	.+206    	; 0xdbc <free+0x10c>
 cee:	ed 01       	movw	r28, r26
 cf0:	20 e0       	ldi	r18, 0x00	; 0
 cf2:	30 e0       	ldi	r19, 0x00	; 0
 cf4:	ce 17       	cp	r28, r30
 cf6:	df 07       	cpc	r29, r31
 cf8:	40 f4       	brcc	.+16     	; 0xd0a <free+0x5a>
 cfa:	4a 81       	ldd	r20, Y+2	; 0x02
 cfc:	5b 81       	ldd	r21, Y+3	; 0x03
 cfe:	9e 01       	movw	r18, r28
 d00:	41 15       	cp	r20, r1
 d02:	51 05       	cpc	r21, r1
 d04:	f1 f0       	breq	.+60     	; 0xd42 <free+0x92>
 d06:	ea 01       	movw	r28, r20
 d08:	f5 cf       	rjmp	.-22     	; 0xcf4 <free+0x44>
 d0a:	d3 83       	std	Z+3, r29	; 0x03
 d0c:	c2 83       	std	Z+2, r28	; 0x02
 d0e:	40 81       	ld	r20, Z
 d10:	51 81       	ldd	r21, Z+1	; 0x01
 d12:	84 0f       	add	r24, r20
 d14:	95 1f       	adc	r25, r21
 d16:	c8 17       	cp	r28, r24
 d18:	d9 07       	cpc	r29, r25
 d1a:	59 f4       	brne	.+22     	; 0xd32 <free+0x82>
 d1c:	88 81       	ld	r24, Y
 d1e:	99 81       	ldd	r25, Y+1	; 0x01
 d20:	84 0f       	add	r24, r20
 d22:	95 1f       	adc	r25, r21
 d24:	02 96       	adiw	r24, 0x02	; 2
 d26:	91 83       	std	Z+1, r25	; 0x01
 d28:	80 83       	st	Z, r24
 d2a:	8a 81       	ldd	r24, Y+2	; 0x02
 d2c:	9b 81       	ldd	r25, Y+3	; 0x03
 d2e:	93 83       	std	Z+3, r25	; 0x03
 d30:	82 83       	std	Z+2, r24	; 0x02
 d32:	21 15       	cp	r18, r1
 d34:	31 05       	cpc	r19, r1
 d36:	29 f4       	brne	.+10     	; 0xd42 <free+0x92>
 d38:	f0 93 d4 01 	sts	0x01D4, r31	; 0x8001d4 <__flp+0x1>
 d3c:	e0 93 d3 01 	sts	0x01D3, r30	; 0x8001d3 <__flp>
 d40:	3d c0       	rjmp	.+122    	; 0xdbc <free+0x10c>
 d42:	e9 01       	movw	r28, r18
 d44:	fb 83       	std	Y+3, r31	; 0x03
 d46:	ea 83       	std	Y+2, r30	; 0x02
 d48:	49 91       	ld	r20, Y+
 d4a:	59 91       	ld	r21, Y+
 d4c:	c4 0f       	add	r28, r20
 d4e:	d5 1f       	adc	r29, r21
 d50:	ec 17       	cp	r30, r28
 d52:	fd 07       	cpc	r31, r29
 d54:	61 f4       	brne	.+24     	; 0xd6e <free+0xbe>
 d56:	80 81       	ld	r24, Z
 d58:	91 81       	ldd	r25, Z+1	; 0x01
 d5a:	84 0f       	add	r24, r20
 d5c:	95 1f       	adc	r25, r21
 d5e:	02 96       	adiw	r24, 0x02	; 2
 d60:	e9 01       	movw	r28, r18
 d62:	99 83       	std	Y+1, r25	; 0x01
 d64:	88 83       	st	Y, r24
 d66:	82 81       	ldd	r24, Z+2	; 0x02
 d68:	93 81       	ldd	r25, Z+3	; 0x03
 d6a:	9b 83       	std	Y+3, r25	; 0x03
 d6c:	8a 83       	std	Y+2, r24	; 0x02
 d6e:	e0 e0       	ldi	r30, 0x00	; 0
 d70:	f0 e0       	ldi	r31, 0x00	; 0
 d72:	12 96       	adiw	r26, 0x02	; 2
 d74:	8d 91       	ld	r24, X+
 d76:	9c 91       	ld	r25, X
 d78:	13 97       	sbiw	r26, 0x03	; 3
 d7a:	00 97       	sbiw	r24, 0x00	; 0
 d7c:	19 f0       	breq	.+6      	; 0xd84 <free+0xd4>
 d7e:	fd 01       	movw	r30, r26
 d80:	dc 01       	movw	r26, r24
 d82:	f7 cf       	rjmp	.-18     	; 0xd72 <free+0xc2>
 d84:	8d 91       	ld	r24, X+
 d86:	9c 91       	ld	r25, X
 d88:	11 97       	sbiw	r26, 0x01	; 1
 d8a:	9d 01       	movw	r18, r26
 d8c:	2e 5f       	subi	r18, 0xFE	; 254
 d8e:	3f 4f       	sbci	r19, 0xFF	; 255
 d90:	82 0f       	add	r24, r18
 d92:	93 1f       	adc	r25, r19
 d94:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <__brkval>
 d98:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <__brkval+0x1>
 d9c:	28 17       	cp	r18, r24
 d9e:	39 07       	cpc	r19, r25
 da0:	69 f4       	brne	.+26     	; 0xdbc <free+0x10c>
 da2:	30 97       	sbiw	r30, 0x00	; 0
 da4:	29 f4       	brne	.+10     	; 0xdb0 <free+0x100>
 da6:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <__flp+0x1>
 daa:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <__flp>
 dae:	02 c0       	rjmp	.+4      	; 0xdb4 <free+0x104>
 db0:	13 82       	std	Z+3, r1	; 0x03
 db2:	12 82       	std	Z+2, r1	; 0x02
 db4:	b0 93 d2 01 	sts	0x01D2, r27	; 0x8001d2 <__brkval+0x1>
 db8:	a0 93 d1 01 	sts	0x01D1, r26	; 0x8001d1 <__brkval>
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	08 95       	ret

00000dc2 <_exit>:
 dc2:	f8 94       	cli

00000dc4 <__stop_program>:
 dc4:	ff cf       	rjmp	.-2      	; 0xdc4 <__stop_program>
